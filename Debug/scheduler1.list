
scheduler1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2e0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800d3f0  0800d3f0  0000e3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d514  0800d514  0000f1dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800d514  0800d514  0000f1dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d514  0800d514  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d514  0800d514  0000e514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d518  0800d518  0000e518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800d51c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dd0  200001dc  0800d6f8  0000f1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002fac  0800d6f8  0000ffac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe33  00000000  00000000  0000f205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f59  00000000  00000000  0002f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be0  00000000  00000000  00033f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000155d  00000000  00000000  00035b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd30  00000000  00000000  000370d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002190c  00000000  00000000  00053e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c66a  00000000  00000000  00075711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111d7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c94  00000000  00000000  00111dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00119a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d3d8 	.word	0x0800d3d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800d3d8 	.word	0x0800d3d8

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <DelayMicro>:
#include "dht22.h"
//--------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <DelayMicro+0x34>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <DelayMicro+0x38>)
 800061a:	fba2 2303 	umull	r2, r3, r2, r3
 800061e:	0ddb      	lsrs	r3, r3, #23
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	fb02 f303 	mul.w	r3, r2, r3
 8000626:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8000628:	bf00      	nop
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	1e5a      	subs	r2, r3, #1
 800062e:	607a      	str	r2, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1fa      	bne.n	800062a <DelayMicro+0x1e>
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	20000000 	.word	0x20000000
 8000644:	ee9bfab5 	.word	0xee9bfab5

08000648 <dht22_init>:

//--------------------------------------------------
void dht22_init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	463b      	mov	r3, r7
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
  HAL_GPIO_DeInit(data_port, data_pin);
 800065a:	2104      	movs	r1, #4
 800065c:	480e      	ldr	r0, [pc, #56]	@ (8000698 <dht22_init+0x50>)
 800065e:	f000 ffb9 	bl	80015d4 <HAL_GPIO_DeInit>
  GPIO_InitStruct.Pin = data_pin;
 8000662:	2304      	movs	r3, #4
 8000664:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000666:	2311      	movs	r3, #17
 8000668:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(data_port, &GPIO_InitStruct);
 8000672:	463b      	mov	r3, r7
 8000674:	4619      	mov	r1, r3
 8000676:	4808      	ldr	r0, [pc, #32]	@ (8000698 <dht22_init+0x50>)
 8000678:	f000 fe28 	bl	80012cc <HAL_GPIO_Init>
	///////////////////////////////////////////////////////
  HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000680:	f000 fd20 	bl	80010c4 <HAL_Delay>
  HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2104      	movs	r1, #4
 8000688:	4803      	ldr	r0, [pc, #12]	@ (8000698 <dht22_init+0x50>)
 800068a:	f001 f876 	bl	800177a <HAL_GPIO_WritePin>

}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40010800 	.word	0x40010800

0800069c <DHT22_Get_Temp>:

uint8_t DHT22_Get_Temp(float *Temp)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	uint8_t dataArray[6], myChecksum;
	uint16_t Temp16;
	uint8_t i, j = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2104      	movs	r1, #4
 80006ac:	4854      	ldr	r0, [pc, #336]	@ (8000800 <DHT22_Get_Temp+0x164>)
 80006ae:	f001 f864 	bl	800177a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2104      	movs	r1, #4
 80006b6:	4852      	ldr	r0, [pc, #328]	@ (8000800 <DHT22_Get_Temp+0x164>)
 80006b8:	f001 f85f 	bl	800177a <HAL_GPIO_WritePin>
	DelayMicro(2000);
 80006bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006c0:	f7ff ffa4 	bl	800060c <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2104      	movs	r1, #4
 80006c8:	484d      	ldr	r0, [pc, #308]	@ (8000800 <DHT22_Get_Temp+0x164>)
 80006ca:	f001 f856 	bl	800177a <HAL_GPIO_WritePin>
	DelayMicro(1200);
 80006ce:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80006d2:	f7ff ff9b 	bl	800060c <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2104      	movs	r1, #4
 80006da:	4849      	ldr	r0, [pc, #292]	@ (8000800 <DHT22_Get_Temp+0x164>)
 80006dc:	f001 f84d 	bl	800177a <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40
 80006e0:	2027      	movs	r0, #39	@ 0x27
 80006e2:	f7ff ff93 	bl	800060c <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 80006e6:	2104      	movs	r1, #4
 80006e8:	4845      	ldr	r0, [pc, #276]	@ (8000800 <DHT22_Get_Temp+0x164>)
 80006ea:	f001 f82f 	bl	800174c <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d101      	bne.n	80006f8 <DHT22_Get_Temp+0x5c>
	{
		return 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	e07e      	b.n	80007f6 <DHT22_Get_Temp+0x15a>
	}
	DelayMicro(80);
 80006f8:	2050      	movs	r0, #80	@ 0x50
 80006fa:	f7ff ff87 	bl	800060c <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 80006fe:	2104      	movs	r1, #4
 8000700:	483f      	ldr	r0, [pc, #252]	@ (8000800 <DHT22_Get_Temp+0x164>)
 8000702:	f001 f823 	bl	800174c <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d101      	bne.n	8000710 <DHT22_Get_Temp+0x74>
	{
		return 0;
 800070c:	2300      	movs	r3, #0
 800070e:	e072      	b.n	80007f6 <DHT22_Get_Temp+0x15a>
	}
	DelayMicro(80);
 8000710:	2050      	movs	r0, #80	@ 0x50
 8000712:	f7ff ff7b 	bl	800060c <DelayMicro>

	for (j=0; j<5; j++)
 8000716:	2300      	movs	r3, #0
 8000718:	757b      	strb	r3, [r7, #21]
 800071a:	e040      	b.n	800079e <DHT22_Get_Temp+0x102>
	{
		dataArray[j]=0;
 800071c:	7d7b      	ldrb	r3, [r7, #21]
 800071e:	3318      	adds	r3, #24
 8000720:	443b      	add	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(i=0; i<8; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	75bb      	strb	r3, [r7, #22]
 800072c:	e031      	b.n	8000792 <DHT22_Get_Temp+0xf6>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);
 800072e:	bf00      	nop
 8000730:	2104      	movs	r1, #4
 8000732:	4833      	ldr	r0, [pc, #204]	@ (8000800 <DHT22_Get_Temp+0x164>)
 8000734:	f001 f80a 	bl	800174c <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0f8      	beq.n	8000730 <DHT22_Get_Temp+0x94>
			DelayMicro(30);
 800073e:	201e      	movs	r0, #30
 8000740:	f7ff ff64 	bl	800060c <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 8000744:	2104      	movs	r1, #4
 8000746:	482e      	ldr	r0, [pc, #184]	@ (8000800 <DHT22_Get_Temp+0x164>)
 8000748:	f001 f800 	bl	800174c <HAL_GPIO_ReadPin>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d014      	beq.n	800077c <DHT22_Get_Temp+0xe0>
				dataArray[j] |= (1<<(7-i));
 8000752:	7d7b      	ldrb	r3, [r7, #21]
 8000754:	3318      	adds	r3, #24
 8000756:	443b      	add	r3, r7
 8000758:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800075c:	b25a      	sxtb	r2, r3
 800075e:	7dbb      	ldrb	r3, [r7, #22]
 8000760:	f1c3 0307 	rsb	r3, r3, #7
 8000764:	2101      	movs	r1, #1
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	b25b      	sxtb	r3, r3
 800076c:	4313      	orrs	r3, r2
 800076e:	b25a      	sxtb	r2, r3
 8000770:	7d7b      	ldrb	r3, [r7, #21]
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	3318      	adds	r3, #24
 8000776:	443b      	add	r3, r7
 8000778:	f803 2c0c 	strb.w	r2, [r3, #-12]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);
 800077c:	bf00      	nop
 800077e:	2104      	movs	r1, #4
 8000780:	481f      	ldr	r0, [pc, #124]	@ (8000800 <DHT22_Get_Temp+0x164>)
 8000782:	f000 ffe3 	bl	800174c <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d0f8      	beq.n	800077e <DHT22_Get_Temp+0xe2>
		for(i=0; i<8; i++)
 800078c:	7dbb      	ldrb	r3, [r7, #22]
 800078e:	3301      	adds	r3, #1
 8000790:	75bb      	strb	r3, [r7, #22]
 8000792:	7dbb      	ldrb	r3, [r7, #22]
 8000794:	2b07      	cmp	r3, #7
 8000796:	d9ca      	bls.n	800072e <DHT22_Get_Temp+0x92>
	for (j=0; j<5; j++)
 8000798:	7d7b      	ldrb	r3, [r7, #21]
 800079a:	3301      	adds	r3, #1
 800079c:	757b      	strb	r3, [r7, #21]
 800079e:	7d7b      	ldrb	r3, [r7, #21]
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	d9bb      	bls.n	800071c <DHT22_Get_Temp+0x80>
		}
	}
	myChecksum = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	753b      	strb	r3, [r7, #20]
 80007ac:	e00a      	b.n	80007c4 <DHT22_Get_Temp+0x128>
	{
		myChecksum += dataArray[k];
 80007ae:	7d3b      	ldrb	r3, [r7, #20]
 80007b0:	3318      	adds	r3, #24
 80007b2:	443b      	add	r3, r7
 80007b4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80007b8:	7dfb      	ldrb	r3, [r7, #23]
 80007ba:	4413      	add	r3, r2
 80007bc:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 80007be:	7d3b      	ldrb	r3, [r7, #20]
 80007c0:	3301      	adds	r3, #1
 80007c2:	753b      	strb	r3, [r7, #20]
 80007c4:	7d3b      	ldrb	r3, [r7, #20]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d9f1      	bls.n	80007ae <DHT22_Get_Temp+0x112>
	}
		Temp16 = (dataArray[2] <<8) | dataArray[3];
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	827b      	strh	r3, [r7, #18]

		*Temp = Temp16/10.0f;
 80007da:	8a7b      	ldrh	r3, [r7, #18]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fd71 	bl	80002c4 <__aeabi_i2f>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4907      	ldr	r1, [pc, #28]	@ (8000804 <DHT22_Get_Temp+0x168>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fe74 	bl	80004d4 <__aeabi_fdiv>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	601a      	str	r2, [r3, #0]
		return 1;
 80007f4:	2301      	movs	r3, #1
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40010800 	.word	0x40010800
 8000804:	41200000 	.word	0x41200000

08000808 <__io_putchar>:
// ************** DEFINE ****************

/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    while (CDC_Transmit_FS((uint8_t *)&ch, 1) == USBD_BUSY);
 8000810:	bf00      	nop
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2101      	movs	r1, #1
 8000816:	4618      	mov	r0, r3
 8000818:	f00b fa04 	bl	800bc24 <CDC_Transmit_FS>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	d0f7      	beq.n	8000812 <__io_putchar+0xa>
    return ch;
 8000822:	687b      	ldr	r3, [r7, #4]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <MPU6050_Init>:
 * Reference to initialized common hi2c1 variable in main.c
 *
 * */
extern I2C_HandleTypeDef hi2c1;

inline void MPU6050_Init (void){
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af04      	add	r7, sp, #16
	uint8_t check,Data;
	// check the sensor ID (SEE WHO AM I DATASHEET)
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000836:	9302      	str	r3, [sp, #8]
 8000838:	2301      	movs	r3, #1
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2301      	movs	r3, #1
 8000842:	2275      	movs	r2, #117	@ 0x75
 8000844:	21d0      	movs	r1, #208	@ 0xd0
 8000846:	4824      	ldr	r0, [pc, #144]	@ (80008d8 <MPU6050_Init+0xac>)
 8000848:	f001 f9ee 	bl	8001c28 <HAL_I2C_Mem_Read>
	if (check == 104) // the sensor is present
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2b68      	cmp	r3, #104	@ 0x68
 8000850:	d13e      	bne.n	80008d0 <MPU6050_Init+0xa4>
	{
		printf("MPU Detected\n");
 8000852:	4822      	ldr	r0, [pc, #136]	@ (80008dc <MPU6050_Init+0xb0>)
 8000854:	f00b feee 	bl	800c634 <puts>
		// setting PWR Registers
		Data = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800085c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000860:	9302      	str	r3, [sp, #8]
 8000862:	2301      	movs	r3, #1
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	1dbb      	adds	r3, r7, #6
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2301      	movs	r3, #1
 800086c:	226b      	movs	r2, #107	@ 0x6b
 800086e:	21d0      	movs	r1, #208	@ 0xd0
 8000870:	4819      	ldr	r0, [pc, #100]	@ (80008d8 <MPU6050_Init+0xac>)
 8000872:	f001 f8df 	bl	8001a34 <HAL_I2C_Mem_Write>
		// var sample rate with SMPLRT_DIV_REG
		Data = 0x07;
 8000876:	2307      	movs	r3, #7
 8000878:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800087a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087e:	9302      	str	r3, [sp, #8]
 8000880:	2301      	movs	r3, #1
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	1dbb      	adds	r3, r7, #6
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2301      	movs	r3, #1
 800088a:	2219      	movs	r2, #25
 800088c:	21d0      	movs	r1, #208	@ 0xd0
 800088e:	4812      	ldr	r0, [pc, #72]	@ (80008d8 <MPU6050_Init+0xac>)
 8000890:	f001 f8d0 	bl	8001a34 <HAL_I2C_Mem_Write>
		// var accelerometer config with ACCEL_CONFIG_REG
		Data = 0x00;
 8000894:	2300      	movs	r3, #0
 8000896:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000898:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089c:	9302      	str	r3, [sp, #8]
 800089e:	2301      	movs	r3, #1
 80008a0:	9301      	str	r3, [sp, #4]
 80008a2:	1dbb      	adds	r3, r7, #6
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2301      	movs	r3, #1
 80008a8:	221c      	movs	r2, #28
 80008aa:	21d0      	movs	r1, #208	@ 0xd0
 80008ac:	480a      	ldr	r0, [pc, #40]	@ (80008d8 <MPU6050_Init+0xac>)
 80008ae:	f001 f8c1 	bl	8001a34 <HAL_I2C_Mem_Write>
		// var Gyro config with GYRO_CONFIG_REG
		Data = 0x00;
 80008b2:	2300      	movs	r3, #0
 80008b4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80008b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ba:	9302      	str	r3, [sp, #8]
 80008bc:	2301      	movs	r3, #1
 80008be:	9301      	str	r3, [sp, #4]
 80008c0:	1dbb      	adds	r3, r7, #6
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	2301      	movs	r3, #1
 80008c6:	221b      	movs	r2, #27
 80008c8:	21d0      	movs	r1, #208	@ 0xd0
 80008ca:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <MPU6050_Init+0xac>)
 80008cc:	f001 f8b2 	bl	8001a34 <HAL_I2C_Mem_Write>
	}
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000020c 	.word	0x2000020c
 80008dc:	0800d3f0 	.word	0x0800d3f0

080008e0 <MPU6050_Read_Accel>:


inline void MPU6050_Read_Accel ( void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 80008e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ea:	9302      	str	r3, [sp, #8]
 80008ec:	2306      	movs	r3, #6
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	463b      	mov	r3, r7
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2301      	movs	r3, #1
 80008f6:	223b      	movs	r2, #59	@ 0x3b
 80008f8:	21d0      	movs	r1, #208	@ 0xd0
 80008fa:	4829      	ldr	r0, [pc, #164]	@ (80009a0 <MPU6050_Read_Accel+0xc0>)
 80008fc:	f001 f994 	bl	8001c28 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000900:	783b      	ldrb	r3, [r7, #0]
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b21a      	sxth	r2, r3
 8000906:	787b      	ldrb	r3, [r7, #1]
 8000908:	b21b      	sxth	r3, r3
 800090a:	4313      	orrs	r3, r2
 800090c:	b21a      	sxth	r2, r3
 800090e:	4b25      	ldr	r3, [pc, #148]	@ (80009a4 <MPU6050_Read_Accel+0xc4>)
 8000910:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000912:	78bb      	ldrb	r3, [r7, #2]
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	b21a      	sxth	r2, r3
 8000918:	78fb      	ldrb	r3, [r7, #3]
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b21a      	sxth	r2, r3
 8000920:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <MPU6050_Read_Accel+0xc8>)
 8000922:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000924:	793b      	ldrb	r3, [r7, #4]
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	b21a      	sxth	r2, r3
 800092a:	797b      	ldrb	r3, [r7, #5]
 800092c:	b21b      	sxth	r3, r3
 800092e:	4313      	orrs	r3, r2
 8000930:	b21a      	sxth	r2, r3
 8000932:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <MPU6050_Read_Accel+0xcc>)
 8000934:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = (float)Accel_X_RAW/16384.0;
 8000936:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <MPU6050_Read_Accel+0xc4>)
 8000938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fcc1 	bl	80002c4 <__aeabi_i2f>
 8000942:	4603      	mov	r3, r0
 8000944:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fdc3 	bl	80004d4 <__aeabi_fdiv>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MPU6050_Read_Accel+0xd0>)
 8000954:	601a      	str	r2, [r3, #0]
	Ay = (float)Accel_Y_RAW/16384.0;
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MPU6050_Read_Accel+0xc8>)
 8000958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fcb1 	bl	80002c4 <__aeabi_i2f>
 8000962:	4603      	mov	r3, r0
 8000964:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fdb3 	bl	80004d4 <__aeabi_fdiv>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <MPU6050_Read_Accel+0xd4>)
 8000974:	601a      	str	r2, [r3, #0]
	Az = (float)Accel_Z_RAW/16384.0;
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <MPU6050_Read_Accel+0xcc>)
 8000978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fca1 	bl	80002c4 <__aeabi_i2f>
 8000982:	4603      	mov	r3, r0
 8000984:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fda3 	bl	80004d4 <__aeabi_fdiv>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MPU6050_Read_Accel+0xd8>)
 8000994:	601a      	str	r2, [r3, #0]
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000020c 	.word	0x2000020c
 80009a4:	200001f8 	.word	0x200001f8
 80009a8:	200001fa 	.word	0x200001fa
 80009ac:	200001fc 	.word	0x200001fc
 80009b0:	20000200 	.word	0x20000200
 80009b4:	20000204 	.word	0x20000204
 80009b8:	20000208 	.word	0x20000208

080009bc <DWT_GetCycleCount>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to get current cycle count
static inline uint32_t DWT_GetCycleCount(void) {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 80009c0:	4b02      	ldr	r3, [pc, #8]	@ (80009cc <DWT_GetCycleCount+0x10>)
 80009c2:	685b      	ldr	r3, [r3, #4]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	e0001000 	.word	0xe0001000

080009d0 <DWT_Init>:

// Function to enable DWT counter
void DWT_Init(void) {
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable trace
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <DWT_Init+0x24>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	4a06      	ldr	r2, [pc, #24]	@ (80009f4 <DWT_Init+0x24>)
 80009da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80009de:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <DWT_Init+0x28>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <DWT_Init+0x28>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	e000edf0 	.word	0xe000edf0
 80009f8:	e0001000 	.word	0xe0001000

080009fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a00:	f000 fb2e 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a04:	f000 f82e 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a08:	f000 f8b6 	bl	8000b78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a0c:	f000 f886 	bl	8000b1c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MX_USB_DEVICE_Init();
 8000a10:	f00b f84a 	bl	800baa8 <MX_USB_DEVICE_Init>

//  MPU6050_Init();
  dht22_init();
 8000a14:	f7ff fe18 	bl	8000648 <dht22_init>
  DWT_Init();
 8000a18:	f7ff ffda 	bl	80009d0 <DWT_Init>


 MPU6050_Init();
 8000a1c:	f7ff ff06 	bl	800082c <MPU6050_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a20:	f008 fb02 	bl	8009028 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mpu */
  mpuHandle = osThreadNew(TaskMpu, NULL, &mpu_attributes);
 8000a24:	4a09      	ldr	r2, [pc, #36]	@ (8000a4c <main+0x50>)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4809      	ldr	r0, [pc, #36]	@ (8000a50 <main+0x54>)
 8000a2a:	f008 fb45 	bl	80090b8 <osThreadNew>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <main+0x58>)
 8000a32:	6013      	str	r3, [r2, #0]

  /* creation of dht */
  dhtHandle = osThreadNew(TaskDht, NULL, &dht_attributes);
 8000a34:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <main+0x5c>)
 8000a36:	2100      	movs	r1, #0
 8000a38:	4808      	ldr	r0, [pc, #32]	@ (8000a5c <main+0x60>)
 8000a3a:	f008 fb3d 	bl	80090b8 <osThreadNew>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a07      	ldr	r2, [pc, #28]	@ (8000a60 <main+0x64>)
 8000a42:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a44:	f008 fb12 	bl	800906c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <main+0x4c>
 8000a4c:	0800d46c 	.word	0x0800d46c
 8000a50:	08000c01 	.word	0x08000c01
 8000a54:	20000260 	.word	0x20000260
 8000a58:	0800d490 	.word	0x0800d490
 8000a5c:	08000c29 	.word	0x08000c29
 8000a60:	20000264 	.word	0x20000264

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	@ 0x50
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a6e:	2228      	movs	r2, #40	@ 0x28
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00b febe 	bl	800c7f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a94:	2301      	movs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aaa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ab0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 fc3c 	bl	8004338 <HAL_RCC_OscConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ac6:	f000 f8e3 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ada:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 fea8 	bl	800483c <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000af2:	f000 f8cd 	bl	8000c90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000af6:	2310      	movs	r3, #16
 8000af8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000afa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000afe:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 f858 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b0e:	f000 f8bf 	bl	8000c90 <Error_Handler>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3750      	adds	r7, #80	@ 0x50
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <MX_I2C1_Init+0x50>)
 8000b22:	4a13      	ldr	r2, [pc, #76]	@ (8000b70 <MX_I2C1_Init+0x54>)
 8000b24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_I2C1_Init+0x50>)
 8000b28:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <MX_I2C1_Init+0x58>)
 8000b2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_I2C1_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_I2C1_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_I2C1_Init+0x50>)
 8000b3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <MX_I2C1_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_I2C1_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <MX_I2C1_Init+0x50>)
 8000b5a:	f000 fe27 	bl	80017ac <HAL_I2C_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b64:	f000 f894 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000020c 	.word	0x2000020c
 8000b70:	40005400 	.word	0x40005400
 8000b74:	000186a0 	.word	0x000186a0

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8c:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <MX_GPIO_Init+0x7c>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a18      	ldr	r2, [pc, #96]	@ (8000bf4 <MX_GPIO_Init+0x7c>)
 8000b92:	f043 0320 	orr.w	r3, r3, #32
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <MX_GPIO_Init+0x7c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0320 	and.w	r3, r3, #32
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <MX_GPIO_Init+0x7c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <MX_GPIO_Init+0x7c>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_GPIO_Init+0x7c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_GPIO_Init+0x7c>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf4 <MX_GPIO_Init+0x7c>)
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_GPIO_Init+0x7c>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0308 	and.w	r3, r3, #8
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : data_Pin */
  GPIO_InitStruct.Pin = data_Pin;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <MX_GPIO_Init+0x80>)
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(data_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4619      	mov	r1, r3
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_GPIO_Init+0x84>)
 8000be8:	f000 fb70 	bl	80012cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	10110000 	.word	0x10110000
 8000bfc:	40010800 	.word	0x40010800

08000c00 <TaskMpu>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMpu */
void TaskMpu(void *argument)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c08:	f00a ff4e 	bl	800baa8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  uint32_t start = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	 start = DWT_GetCycleCount();
 8000c10:	f7ff fed4 	bl	80009bc <DWT_GetCycleCount>
 8000c14:	60f8      	str	r0, [r7, #12]
	  //
//	  	  MPU6050_Read_Accel();
	    MPU6050_Read_Accel();
 8000c16:	f7ff fe63 	bl	80008e0 <MPU6050_Read_Accel>


	    // print exe time of mpu task
//	  	  printf("%d\n",(int)(DWT_GetCycleCount() - start));

    osDelay(1000);
 8000c1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c1e:	f008 fadd 	bl	80091dc <osDelay>
	 start = DWT_GetCycleCount();
 8000c22:	bf00      	nop
 8000c24:	e7f4      	b.n	8000c10 <TaskMpu+0x10>
	...

08000c28 <TaskDht>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskDht */
void TaskDht(void *argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskDht */
	float temp = 0;
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
//	 TickType_t  start = 0;
	 uint32_t start = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
//	    start = xTaskGetTickCount();
//	  printf("Hello from rtos \n");
	  start = DWT_GetCycleCount();
 8000c3a:	f7ff febf 	bl	80009bc <DWT_GetCycleCount>
 8000c3e:	60f8      	str	r0, [r7, #12]
	 	  	  DHT22_Get_Temp(&temp);
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fd29 	bl	800069c <DHT22_Get_Temp>

//	 	  	  int intPart = (int)floorf(temp);
	 	  //
//	 	  	  printf("t=%d\n",(int) temp);

	 	 	  printf("%d\n",(int)(DWT_GetCycleCount() - start));
 8000c4a:	f7ff feb7 	bl	80009bc <DWT_GetCycleCount>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	4619      	mov	r1, r3
 8000c56:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <TaskDht+0x40>)
 8000c58:	f00b fc84 	bl	800c564 <iprintf>


    osDelay(3000);
 8000c5c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c60:	f008 fabc 	bl	80091dc <osDelay>
	  start = DWT_GetCycleCount();
 8000c64:	bf00      	nop
 8000c66:	e7e8      	b.n	8000c3a <TaskDht+0x12>
 8000c68:	0800d408 	.word	0x0800d408

08000c6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a04      	ldr	r2, [pc, #16]	@ (8000c8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d101      	bne.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c7e:	f000 fa05 	bl	800108c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40012c00 	.word	0x40012c00

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <Error_Handler+0x8>

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca2:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <HAL_MspInit+0x68>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a17      	ldr	r2, [pc, #92]	@ (8000d04 <HAL_MspInit+0x68>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <HAL_MspInit+0x68>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_MspInit+0x68>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a11      	ldr	r2, [pc, #68]	@ (8000d04 <HAL_MspInit+0x68>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_MspInit+0x68>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	f06f 0001 	mvn.w	r0, #1
 8000cda:	f000 facc 	bl	8001276 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_MspInit+0x6c>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_MspInit+0x6c>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000

08000d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a15      	ldr	r2, [pc, #84]	@ (8000d7c <HAL_I2C_MspInit+0x70>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d123      	bne.n	8000d74 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a13      	ldr	r2, [pc, #76]	@ (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d44:	23c0      	movs	r3, #192	@ 0xc0
 8000d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d48:	2312      	movs	r3, #18
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	480b      	ldr	r0, [pc, #44]	@ (8000d84 <HAL_I2C_MspInit+0x78>)
 8000d58:	f000 fab8 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d5e:	69db      	ldr	r3, [r3, #28]
 8000d60:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d66:	61d3      	str	r3, [r2, #28]
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010c00 	.word	0x40010c00

08000d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	@ 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e58 <HAL_InitTick+0xd0>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a2d      	ldr	r2, [pc, #180]	@ (8000e58 <HAL_InitTick+0xd0>)
 8000da4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b2b      	ldr	r3, [pc, #172]	@ (8000e58 <HAL_InitTick+0xd0>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db6:	f107 020c 	add.w	r2, r7, #12
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 feab 	bl	8004b1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dc6:	f003 fe95 	bl	8004af4 <HAL_RCC_GetPCLK2Freq>
 8000dca:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dce:	4a23      	ldr	r2, [pc, #140]	@ (8000e5c <HAL_InitTick+0xd4>)
 8000dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd4:	0c9b      	lsrs	r3, r3, #18
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dda:	4b21      	ldr	r3, [pc, #132]	@ (8000e60 <HAL_InitTick+0xd8>)
 8000ddc:	4a21      	ldr	r2, [pc, #132]	@ (8000e64 <HAL_InitTick+0xdc>)
 8000dde:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <HAL_InitTick+0xd8>)
 8000de2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000de6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000de8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e60 <HAL_InitTick+0xd8>)
 8000dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dec:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <HAL_InitTick+0xd8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <HAL_InitTick+0xd8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <HAL_InitTick+0xd8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e00:	4817      	ldr	r0, [pc, #92]	@ (8000e60 <HAL_InitTick+0xd8>)
 8000e02:	f003 ff8f 	bl	8004d24 <HAL_TIM_Base_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d11b      	bne.n	8000e4c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e14:	4812      	ldr	r0, [pc, #72]	@ (8000e60 <HAL_InitTick+0xd8>)
 8000e16:	f003 ffdd 	bl	8004dd4 <HAL_TIM_Base_Start_IT>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d111      	bne.n	8000e4c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e28:	2019      	movs	r0, #25
 8000e2a:	f000 fa40 	bl	80012ae <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d808      	bhi.n	8000e46 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	2019      	movs	r0, #25
 8000e3a:	f000 fa1c 	bl	8001276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <HAL_InitTick+0xe0>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	e002      	b.n	8000e4c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3730      	adds	r7, #48	@ 0x30
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	431bde83 	.word	0x431bde83
 8000e60:	20000268 	.word	0x20000268
 8000e64:	40012c00 	.word	0x40012c00
 8000e68:	20000004 	.word	0x20000004

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <NMI_Handler+0x4>

08000e74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <MemManage_Handler+0x4>

08000e84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ea6:	f001 fe02 	bl	8002aae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20002968 	.word	0x20002968

08000eb4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <TIM1_UP_IRQHandler+0x10>)
 8000eba:	f003 ffdd 	bl	8004e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000268 	.word	0x20000268

08000ec8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e00a      	b.n	8000ef0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eda:	f3af 8000 	nop.w
 8000ede:	4601      	mov	r1, r0
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	60ba      	str	r2, [r7, #8]
 8000ee6:	b2ca      	uxtb	r2, r1
 8000ee8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf0      	blt.n	8000eda <_read+0x12>
  }

  return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	e009      	b.n	8000f28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	60ba      	str	r2, [r7, #8]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fc73 	bl	8000808 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	dbf1      	blt.n	8000f14 <_write+0x12>
  }
  return len;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <_close>:

int _close(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f60:	605a      	str	r2, [r3, #4]
  return 0;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <_isatty>:

int _isatty(int file)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
	...

08000f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa4:	4a14      	ldr	r2, [pc, #80]	@ (8000ff8 <_sbrk+0x5c>)
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <_sbrk+0x60>)
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <_sbrk+0x64>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <_sbrk+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d207      	bcs.n	8000fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fcc:	f00b fcb6 	bl	800c93c <__errno>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	e009      	b.n	8000ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a05      	ldr	r2, [pc, #20]	@ (8001000 <_sbrk+0x64>)
 8000fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20005000 	.word	0x20005000
 8000ffc:	00000400 	.word	0x00000400
 8001000:	200002b0 	.word	0x200002b0
 8001004:	20002fb0 	.word	0x20002fb0

08001008 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001014:	f7ff fff8 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480b      	ldr	r0, [pc, #44]	@ (8001048 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800101a:	490c      	ldr	r1, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800101c:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <LoopFillZerobss+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a09      	ldr	r2, [pc, #36]	@ (8001054 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001030:	4c09      	ldr	r4, [pc, #36]	@ (8001058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f00b fc83 	bl	800c948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001042:	f7ff fcdb 	bl	80009fc <main>
  bx lr
 8001046:	4770      	bx	lr
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001050:	0800d51c 	.word	0x0800d51c
  ldr r2, =_sbss
 8001054:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001058:	20002fac 	.word	0x20002fac

0800105c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <HAL_Init+0x28>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	@ (8001088 <HAL_Init+0x28>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f8f5 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	200f      	movs	r0, #15
 8001078:	f7ff fe86 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff fe0e 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40022000 	.word	0x40022000

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_IncTick+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <HAL_IncTick+0x20>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a03      	ldr	r2, [pc, #12]	@ (80010ac <HAL_IncTick+0x20>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	20000008 	.word	0x20000008
 80010ac:	200002b4 	.word	0x200002b4

080010b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b02      	ldr	r3, [pc, #8]	@ (80010c0 <HAL_GetTick+0x10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	200002b4 	.word	0x200002b4

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff fff0 	bl	80010b0 <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffe0 	bl	80010b0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4906      	ldr	r1, [pc, #24]	@ (80011a4 <__NVIC_EnableIRQ+0x34>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	@ (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	@ (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	@ 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	@ 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff4f 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff64 	bl	8001154 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ffb2 	bl	80011fc <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff81 	bl	80011a8 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff57 	bl	8001170 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b08b      	sub	sp, #44	@ 0x2c
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	e169      	b.n	80015b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e0:	2201      	movs	r2, #1
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f040 8158 	bne.w	80015ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4a9a      	ldr	r2, [pc, #616]	@ (800156c <HAL_GPIO_Init+0x2a0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d05e      	beq.n	80013c6 <HAL_GPIO_Init+0xfa>
 8001308:	4a98      	ldr	r2, [pc, #608]	@ (800156c <HAL_GPIO_Init+0x2a0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d875      	bhi.n	80013fa <HAL_GPIO_Init+0x12e>
 800130e:	4a98      	ldr	r2, [pc, #608]	@ (8001570 <HAL_GPIO_Init+0x2a4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d058      	beq.n	80013c6 <HAL_GPIO_Init+0xfa>
 8001314:	4a96      	ldr	r2, [pc, #600]	@ (8001570 <HAL_GPIO_Init+0x2a4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d86f      	bhi.n	80013fa <HAL_GPIO_Init+0x12e>
 800131a:	4a96      	ldr	r2, [pc, #600]	@ (8001574 <HAL_GPIO_Init+0x2a8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d052      	beq.n	80013c6 <HAL_GPIO_Init+0xfa>
 8001320:	4a94      	ldr	r2, [pc, #592]	@ (8001574 <HAL_GPIO_Init+0x2a8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d869      	bhi.n	80013fa <HAL_GPIO_Init+0x12e>
 8001326:	4a94      	ldr	r2, [pc, #592]	@ (8001578 <HAL_GPIO_Init+0x2ac>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d04c      	beq.n	80013c6 <HAL_GPIO_Init+0xfa>
 800132c:	4a92      	ldr	r2, [pc, #584]	@ (8001578 <HAL_GPIO_Init+0x2ac>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d863      	bhi.n	80013fa <HAL_GPIO_Init+0x12e>
 8001332:	4a92      	ldr	r2, [pc, #584]	@ (800157c <HAL_GPIO_Init+0x2b0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d046      	beq.n	80013c6 <HAL_GPIO_Init+0xfa>
 8001338:	4a90      	ldr	r2, [pc, #576]	@ (800157c <HAL_GPIO_Init+0x2b0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d85d      	bhi.n	80013fa <HAL_GPIO_Init+0x12e>
 800133e:	2b12      	cmp	r3, #18
 8001340:	d82a      	bhi.n	8001398 <HAL_GPIO_Init+0xcc>
 8001342:	2b12      	cmp	r3, #18
 8001344:	d859      	bhi.n	80013fa <HAL_GPIO_Init+0x12e>
 8001346:	a201      	add	r2, pc, #4	@ (adr r2, 800134c <HAL_GPIO_Init+0x80>)
 8001348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134c:	080013c7 	.word	0x080013c7
 8001350:	080013a1 	.word	0x080013a1
 8001354:	080013b3 	.word	0x080013b3
 8001358:	080013f5 	.word	0x080013f5
 800135c:	080013fb 	.word	0x080013fb
 8001360:	080013fb 	.word	0x080013fb
 8001364:	080013fb 	.word	0x080013fb
 8001368:	080013fb 	.word	0x080013fb
 800136c:	080013fb 	.word	0x080013fb
 8001370:	080013fb 	.word	0x080013fb
 8001374:	080013fb 	.word	0x080013fb
 8001378:	080013fb 	.word	0x080013fb
 800137c:	080013fb 	.word	0x080013fb
 8001380:	080013fb 	.word	0x080013fb
 8001384:	080013fb 	.word	0x080013fb
 8001388:	080013fb 	.word	0x080013fb
 800138c:	080013fb 	.word	0x080013fb
 8001390:	080013a9 	.word	0x080013a9
 8001394:	080013bd 	.word	0x080013bd
 8001398:	4a79      	ldr	r2, [pc, #484]	@ (8001580 <HAL_GPIO_Init+0x2b4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800139e:	e02c      	b.n	80013fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e029      	b.n	80013fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	3304      	adds	r3, #4
 80013ae:	623b      	str	r3, [r7, #32]
          break;
 80013b0:	e024      	b.n	80013fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	3308      	adds	r3, #8
 80013b8:	623b      	str	r3, [r7, #32]
          break;
 80013ba:	e01f      	b.n	80013fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	330c      	adds	r3, #12
 80013c2:	623b      	str	r3, [r7, #32]
          break;
 80013c4:	e01a      	b.n	80013fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ce:	2304      	movs	r3, #4
 80013d0:	623b      	str	r3, [r7, #32]
          break;
 80013d2:	e013      	b.n	80013fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013dc:	2308      	movs	r3, #8
 80013de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	611a      	str	r2, [r3, #16]
          break;
 80013e6:	e009      	b.n	80013fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e8:	2308      	movs	r3, #8
 80013ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	615a      	str	r2, [r3, #20]
          break;
 80013f2:	e003      	b.n	80013fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
          break;
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x130>
          break;
 80013fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2bff      	cmp	r3, #255	@ 0xff
 8001400:	d801      	bhi.n	8001406 <HAL_GPIO_Init+0x13a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	e001      	b.n	800140a <HAL_GPIO_Init+0x13e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3304      	adds	r3, #4
 800140a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2bff      	cmp	r3, #255	@ 0xff
 8001410:	d802      	bhi.n	8001418 <HAL_GPIO_Init+0x14c>
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	e002      	b.n	800141e <HAL_GPIO_Init+0x152>
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	3b08      	subs	r3, #8
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	210f      	movs	r1, #15
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	401a      	ands	r2, r3
 8001430:	6a39      	ldr	r1, [r7, #32]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	431a      	orrs	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80b1 	beq.w	80015ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800144c:	4b4d      	ldr	r3, [pc, #308]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a4c      	ldr	r2, [pc, #304]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b4a      	ldr	r3, [pc, #296]	@ (8001584 <HAL_GPIO_Init+0x2b8>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001464:	4a48      	ldr	r2, [pc, #288]	@ (8001588 <HAL_GPIO_Init+0x2bc>)
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3302      	adds	r3, #2
 800146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001470:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a40      	ldr	r2, [pc, #256]	@ (800158c <HAL_GPIO_Init+0x2c0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d013      	beq.n	80014b8 <HAL_GPIO_Init+0x1ec>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a3f      	ldr	r2, [pc, #252]	@ (8001590 <HAL_GPIO_Init+0x2c4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d00d      	beq.n	80014b4 <HAL_GPIO_Init+0x1e8>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a3e      	ldr	r2, [pc, #248]	@ (8001594 <HAL_GPIO_Init+0x2c8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d007      	beq.n	80014b0 <HAL_GPIO_Init+0x1e4>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001598 <HAL_GPIO_Init+0x2cc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d101      	bne.n	80014ac <HAL_GPIO_Init+0x1e0>
 80014a8:	2303      	movs	r3, #3
 80014aa:	e006      	b.n	80014ba <HAL_GPIO_Init+0x1ee>
 80014ac:	2304      	movs	r3, #4
 80014ae:	e004      	b.n	80014ba <HAL_GPIO_Init+0x1ee>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e002      	b.n	80014ba <HAL_GPIO_Init+0x1ee>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_GPIO_Init+0x1ee>
 80014b8:	2300      	movs	r3, #0
 80014ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014bc:	f002 0203 	and.w	r2, r2, #3
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	4093      	lsls	r3, r2
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ca:	492f      	ldr	r1, [pc, #188]	@ (8001588 <HAL_GPIO_Init+0x2bc>)
 80014cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	3302      	adds	r3, #2
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e4:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	492c      	ldr	r1, [pc, #176]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	608b      	str	r3, [r1, #8]
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014f2:	4b2a      	ldr	r3, [pc, #168]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	4928      	ldr	r1, [pc, #160]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800150c:	4b23      	ldr	r3, [pc, #140]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	4922      	ldr	r1, [pc, #136]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	60cb      	str	r3, [r1, #12]
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	43db      	mvns	r3, r3
 8001522:	491e      	ldr	r1, [pc, #120]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 8001524:	4013      	ands	r3, r2
 8001526:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001534:	4b19      	ldr	r3, [pc, #100]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4918      	ldr	r1, [pc, #96]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001542:	4b16      	ldr	r3, [pc, #88]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	43db      	mvns	r3, r3
 800154a:	4914      	ldr	r1, [pc, #80]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 800154c:	4013      	ands	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d021      	beq.n	80015a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	490e      	ldr	r1, [pc, #56]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
 8001568:	e021      	b.n	80015ae <HAL_GPIO_Init+0x2e2>
 800156a:	bf00      	nop
 800156c:	10320000 	.word	0x10320000
 8001570:	10310000 	.word	0x10310000
 8001574:	10220000 	.word	0x10220000
 8001578:	10210000 	.word	0x10210000
 800157c:	10120000 	.word	0x10120000
 8001580:	10110000 	.word	0x10110000
 8001584:	40021000 	.word	0x40021000
 8001588:	40010000 	.word	0x40010000
 800158c:	40010800 	.word	0x40010800
 8001590:	40010c00 	.word	0x40010c00
 8001594:	40011000 	.word	0x40011000
 8001598:	40011400 	.word	0x40011400
 800159c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015a0:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <HAL_GPIO_Init+0x304>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	4909      	ldr	r1, [pc, #36]	@ (80015d0 <HAL_GPIO_Init+0x304>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	3301      	adds	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f47f ae8e 	bne.w	80012e0 <HAL_GPIO_Init+0x14>
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	372c      	adds	r7, #44	@ 0x2c
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40010400 	.word	0x40010400

080015d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	@ 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80015e2:	e09a      	b.n	800171a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80015e4:	2201      	movs	r2, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 808d 	beq.w	8001714 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80015fa:	4a4e      	ldr	r2, [pc, #312]	@ (8001734 <HAL_GPIO_DeInit+0x160>)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	220f      	movs	r2, #15
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4013      	ands	r3, r2
 800161a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a46      	ldr	r2, [pc, #280]	@ (8001738 <HAL_GPIO_DeInit+0x164>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d013      	beq.n	800164c <HAL_GPIO_DeInit+0x78>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a45      	ldr	r2, [pc, #276]	@ (800173c <HAL_GPIO_DeInit+0x168>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d00d      	beq.n	8001648 <HAL_GPIO_DeInit+0x74>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a44      	ldr	r2, [pc, #272]	@ (8001740 <HAL_GPIO_DeInit+0x16c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_DeInit+0x70>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a43      	ldr	r2, [pc, #268]	@ (8001744 <HAL_GPIO_DeInit+0x170>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_GPIO_DeInit+0x6c>
 800163c:	2303      	movs	r3, #3
 800163e:	e006      	b.n	800164e <HAL_GPIO_DeInit+0x7a>
 8001640:	2304      	movs	r3, #4
 8001642:	e004      	b.n	800164e <HAL_GPIO_DeInit+0x7a>
 8001644:	2302      	movs	r3, #2
 8001646:	e002      	b.n	800164e <HAL_GPIO_DeInit+0x7a>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <HAL_GPIO_DeInit+0x7a>
 800164c:	2300      	movs	r3, #0
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	f002 0203 	and.w	r2, r2, #3
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	4093      	lsls	r3, r2
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	429a      	cmp	r2, r3
 800165c:	d132      	bne.n	80016c4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800165e:	4b3a      	ldr	r3, [pc, #232]	@ (8001748 <HAL_GPIO_DeInit+0x174>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	4938      	ldr	r1, [pc, #224]	@ (8001748 <HAL_GPIO_DeInit+0x174>)
 8001668:	4013      	ands	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800166c:	4b36      	ldr	r3, [pc, #216]	@ (8001748 <HAL_GPIO_DeInit+0x174>)
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	43db      	mvns	r3, r3
 8001674:	4934      	ldr	r1, [pc, #208]	@ (8001748 <HAL_GPIO_DeInit+0x174>)
 8001676:	4013      	ands	r3, r2
 8001678:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800167a:	4b33      	ldr	r3, [pc, #204]	@ (8001748 <HAL_GPIO_DeInit+0x174>)
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	4931      	ldr	r1, [pc, #196]	@ (8001748 <HAL_GPIO_DeInit+0x174>)
 8001684:	4013      	ands	r3, r2
 8001686:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001688:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <HAL_GPIO_DeInit+0x174>)
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	43db      	mvns	r3, r3
 8001690:	492d      	ldr	r1, [pc, #180]	@ (8001748 <HAL_GPIO_DeInit+0x174>)
 8001692:	4013      	ands	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80016a6:	4a23      	ldr	r2, [pc, #140]	@ (8001734 <HAL_GPIO_DeInit+0x160>)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	43da      	mvns	r2, r3
 80016b6:	481f      	ldr	r0, [pc, #124]	@ (8001734 <HAL_GPIO_DeInit+0x160>)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	400a      	ands	r2, r1
 80016be:	3302      	adds	r3, #2
 80016c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2bff      	cmp	r3, #255	@ 0xff
 80016c8:	d801      	bhi.n	80016ce <HAL_GPIO_DeInit+0xfa>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	e001      	b.n	80016d2 <HAL_GPIO_DeInit+0xfe>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3304      	adds	r3, #4
 80016d2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2bff      	cmp	r3, #255	@ 0xff
 80016d8:	d802      	bhi.n	80016e0 <HAL_GPIO_DeInit+0x10c>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_DeInit+0x112>
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	3b08      	subs	r3, #8
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	210f      	movs	r1, #15
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	401a      	ands	r2, r3
 80016f8:	2104      	movs	r1, #4
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	431a      	orrs	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	43db      	mvns	r3, r3
 800170e:	401a      	ands	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	3301      	adds	r3, #1
 8001718:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f47f af5e 	bne.w	80015e4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3724      	adds	r7, #36	@ 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40010000 	.word	0x40010000
 8001738:	40010800 	.word	0x40010800
 800173c:	40010c00 	.word	0x40010c00
 8001740:	40011000 	.word	0x40011000
 8001744:	40011400 	.word	0x40011400
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	e001      	b.n	800176e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	807b      	strh	r3, [r7, #2]
 8001786:	4613      	mov	r3, r2
 8001788:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800178a:	787b      	ldrb	r3, [r7, #1]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001790:	887a      	ldrh	r2, [r7, #2]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001796:	e003      	b.n	80017a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	041a      	lsls	r2, r3, #16
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	611a      	str	r2, [r3, #16]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e12b      	b.n	8001a16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fa9a 	bl	8000d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2224      	movs	r2, #36	@ 0x24
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800180e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001810:	f003 f95c 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 8001814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a81      	ldr	r2, [pc, #516]	@ (8001a20 <HAL_I2C_Init+0x274>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d807      	bhi.n	8001830 <HAL_I2C_Init+0x84>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4a80      	ldr	r2, [pc, #512]	@ (8001a24 <HAL_I2C_Init+0x278>)
 8001824:	4293      	cmp	r3, r2
 8001826:	bf94      	ite	ls
 8001828:	2301      	movls	r3, #1
 800182a:	2300      	movhi	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	e006      	b.n	800183e <HAL_I2C_Init+0x92>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a7d      	ldr	r2, [pc, #500]	@ (8001a28 <HAL_I2C_Init+0x27c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	bf94      	ite	ls
 8001838:	2301      	movls	r3, #1
 800183a:	2300      	movhi	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0e7      	b.n	8001a16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a78      	ldr	r2, [pc, #480]	@ (8001a2c <HAL_I2C_Init+0x280>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	0c9b      	lsrs	r3, r3, #18
 8001850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a6a      	ldr	r2, [pc, #424]	@ (8001a20 <HAL_I2C_Init+0x274>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d802      	bhi.n	8001880 <HAL_I2C_Init+0xd4>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	e009      	b.n	8001894 <HAL_I2C_Init+0xe8>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	4a69      	ldr	r2, [pc, #420]	@ (8001a30 <HAL_I2C_Init+0x284>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	3301      	adds	r3, #1
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	430b      	orrs	r3, r1
 800189a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	495c      	ldr	r1, [pc, #368]	@ (8001a20 <HAL_I2C_Init+0x274>)
 80018b0:	428b      	cmp	r3, r1
 80018b2:	d819      	bhi.n	80018e8 <HAL_I2C_Init+0x13c>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e59      	subs	r1, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018c8:	400b      	ands	r3, r1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <HAL_I2C_Init+0x138>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1e59      	subs	r1, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e2:	e051      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 80018e4:	2304      	movs	r3, #4
 80018e6:	e04f      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d111      	bne.n	8001914 <HAL_I2C_Init+0x168>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	440b      	add	r3, r1
 80018fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001902:	3301      	adds	r3, #1
 8001904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e012      	b.n	800193a <HAL_I2C_Init+0x18e>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1e58      	subs	r0, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	0099      	lsls	r1, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	fbb0 f3f3 	udiv	r3, r0, r3
 800192a:	3301      	adds	r3, #1
 800192c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_Init+0x196>
 800193e:	2301      	movs	r3, #1
 8001940:	e022      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10e      	bne.n	8001968 <HAL_I2C_Init+0x1bc>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1e58      	subs	r0, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6859      	ldr	r1, [r3, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	fbb0 f3f3 	udiv	r3, r0, r3
 800195c:	3301      	adds	r3, #1
 800195e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001966:	e00f      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e58      	subs	r0, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	0099      	lsls	r1, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	fbb0 f3f3 	udiv	r3, r0, r3
 800197e:	3301      	adds	r3, #1
 8001980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001984:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	6809      	ldr	r1, [r1, #0]
 800198c:	4313      	orrs	r3, r2
 800198e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6911      	ldr	r1, [r2, #16]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68d2      	ldr	r2, [r2, #12]
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	000186a0 	.word	0x000186a0
 8001a24:	001e847f 	.word	0x001e847f
 8001a28:	003d08ff 	.word	0x003d08ff
 8001a2c:	431bde83 	.word	0x431bde83
 8001a30:	10624dd3 	.word	0x10624dd3

08001a34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	4611      	mov	r1, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	817b      	strh	r3, [r7, #10]
 8001a46:	460b      	mov	r3, r1
 8001a48:	813b      	strh	r3, [r7, #8]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a4e:	f7ff fb2f 	bl	80010b0 <HAL_GetTick>
 8001a52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	f040 80d9 	bne.w	8001c14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2319      	movs	r3, #25
 8001a68:	2201      	movs	r2, #1
 8001a6a:	496d      	ldr	r1, [pc, #436]	@ (8001c20 <HAL_I2C_Mem_Write+0x1ec>)
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fccd 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e0cc      	b.n	8001c16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_I2C_Mem_Write+0x56>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e0c5      	b.n	8001c16 <HAL_I2C_Mem_Write+0x1e2>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d007      	beq.n	8001ab0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001abe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2221      	movs	r2, #33	@ 0x21
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2240      	movs	r2, #64	@ 0x40
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a3a      	ldr	r2, [r7, #32]
 8001ada:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4a4d      	ldr	r2, [pc, #308]	@ (8001c24 <HAL_I2C_Mem_Write+0x1f0>)
 8001af0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001af2:	88f8      	ldrh	r0, [r7, #6]
 8001af4:	893a      	ldrh	r2, [r7, #8]
 8001af6:	8979      	ldrh	r1, [r7, #10]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4603      	mov	r3, r0
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 fb04 	bl	8002110 <I2C_RequestMemoryWrite>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d052      	beq.n	8001bb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e081      	b.n	8001c16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fd92 	bl	8002640 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00d      	beq.n	8001b3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d107      	bne.n	8001b3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e06b      	b.n	8001c16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d11b      	bne.n	8001bb4 <HAL_I2C_Mem_Write+0x180>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d017      	beq.n	8001bb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1aa      	bne.n	8001b12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fd85 	bl	80026d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00d      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d107      	bne.n	8001be4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001be2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e016      	b.n	8001c16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e000      	b.n	8001c16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c14:	2302      	movs	r3, #2
  }
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	00100002 	.word	0x00100002
 8001c24:	ffff0000 	.word	0xffff0000

08001c28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08c      	sub	sp, #48	@ 0x30
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	4608      	mov	r0, r1
 8001c32:	4611      	mov	r1, r2
 8001c34:	461a      	mov	r2, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	817b      	strh	r3, [r7, #10]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	813b      	strh	r3, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c46:	f7ff fa33 	bl	80010b0 <HAL_GetTick>
 8001c4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	f040 8250 	bne.w	80020fa <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2319      	movs	r3, #25
 8001c60:	2201      	movs	r2, #1
 8001c62:	4982      	ldr	r1, [pc, #520]	@ (8001e6c <HAL_I2C_Mem_Read+0x244>)
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 fbd1 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
 8001c72:	e243      	b.n	80020fc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_I2C_Mem_Read+0x5a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e23c      	b.n	80020fc <HAL_I2C_Mem_Read+0x4d4>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d007      	beq.n	8001ca8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2222      	movs	r2, #34	@ 0x22
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2240      	movs	r2, #64	@ 0x40
 8001cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4a62      	ldr	r2, [pc, #392]	@ (8001e70 <HAL_I2C_Mem_Read+0x248>)
 8001ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cea:	88f8      	ldrh	r0, [r7, #6]
 8001cec:	893a      	ldrh	r2, [r7, #8]
 8001cee:	8979      	ldrh	r1, [r7, #10]
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 fa9e 	bl	800223c <I2C_RequestMemoryRead>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e1f8      	b.n	80020fc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d113      	bne.n	8001d3a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e1cc      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d11e      	bne.n	8001d80 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d52:	b672      	cpsid	i
}
 8001d54:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d7c:	b662      	cpsie	i
}
 8001d7e:	e035      	b.n	8001dec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d11e      	bne.n	8001dc6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dc2:	b662      	cpsie	i
}
 8001dc4:	e012      	b.n	8001dec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001dd4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001dec:	e172      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	f200 811f 	bhi.w	8002036 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d123      	bne.n	8001e48 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 fcab 	bl	8002760 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e173      	b.n	80020fc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e46:	e145      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d152      	bne.n	8001ef6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e56:	2200      	movs	r2, #0
 8001e58:	4906      	ldr	r1, [pc, #24]	@ (8001e74 <HAL_I2C_Mem_Read+0x24c>)
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 fad6 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e148      	b.n	80020fc <HAL_I2C_Mem_Read+0x4d4>
 8001e6a:	bf00      	nop
 8001e6c:	00100002 	.word	0x00100002
 8001e70:	ffff0000 	.word	0xffff0000
 8001e74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ebe:	b662      	cpsie	i
}
 8001ec0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ef4:	e0ee      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001efc:	2200      	movs	r2, #0
 8001efe:	4981      	ldr	r1, [pc, #516]	@ (8002104 <HAL_I2C_Mem_Read+0x4dc>)
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 fa83 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0f5      	b.n	80020fc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f56:	4b6c      	ldr	r3, [pc, #432]	@ (8002108 <HAL_I2C_Mem_Read+0x4e0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	08db      	lsrs	r3, r3, #3
 8001f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800210c <HAL_I2C_Mem_Read+0x4e4>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0a1a      	lsrs	r2, r3, #8
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00da      	lsls	r2, r3, #3
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d118      	bne.n	8001fae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f043 0220 	orr.w	r2, r3, #32
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f9e:	b662      	cpsie	i
}
 8001fa0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0a6      	b.n	80020fc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d1d9      	bne.n	8001f70 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ffe:	b662      	cpsie	i
}
 8002000:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002034:	e04e      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002038:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fb90 	bl	8002760 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e058      	b.n	80020fc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b04      	cmp	r3, #4
 8002088:	d124      	bne.n	80020d4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208e:	2b03      	cmp	r3, #3
 8002090:	d107      	bne.n	80020a2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f47f ae88 	bne.w	8001dee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80020fa:	2302      	movs	r3, #2
  }
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3728      	adds	r7, #40	@ 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	00010004 	.word	0x00010004
 8002108:	20000000 	.word	0x20000000
 800210c:	14f8b589 	.word	0x14f8b589

08002110 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	4608      	mov	r0, r1
 800211a:	4611      	mov	r1, r2
 800211c:	461a      	mov	r2, r3
 800211e:	4603      	mov	r3, r0
 8002120:	817b      	strh	r3, [r7, #10]
 8002122:	460b      	mov	r3, r1
 8002124:	813b      	strh	r3, [r7, #8]
 8002126:	4613      	mov	r3, r2
 8002128:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002138:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	2200      	movs	r2, #0
 8002142:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f960 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00d      	beq.n	800216e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002160:	d103      	bne.n	800216a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002168:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e05f      	b.n	800222e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800216e:	897b      	ldrh	r3, [r7, #10]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800217c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	6a3a      	ldr	r2, [r7, #32]
 8002182:	492d      	ldr	r1, [pc, #180]	@ (8002238 <I2C_RequestMemoryWrite+0x128>)
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f9bb 	bl	8002500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e04c      	b.n	800222e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ac:	6a39      	ldr	r1, [r7, #32]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fa46 	bl	8002640 <I2C_WaitOnTXEFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00d      	beq.n	80021d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d107      	bne.n	80021d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e02b      	b.n	800222e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021dc:	893b      	ldrh	r3, [r7, #8]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	611a      	str	r2, [r3, #16]
 80021e6:	e021      	b.n	800222c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021e8:	893b      	ldrh	r3, [r7, #8]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f8:	6a39      	ldr	r1, [r7, #32]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 fa20 	bl	8002640 <I2C_WaitOnTXEFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	2b04      	cmp	r3, #4
 800220c:	d107      	bne.n	800221e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800221c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e005      	b.n	800222e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002222:	893b      	ldrh	r3, [r7, #8]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	00010002 	.word	0x00010002

0800223c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	817b      	strh	r3, [r7, #10]
 800224e:	460b      	mov	r3, r1
 8002250:	813b      	strh	r3, [r7, #8]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002264:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002274:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	2200      	movs	r2, #0
 800227e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f8c2 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002298:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800229c:	d103      	bne.n	80022a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e0aa      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	6a3a      	ldr	r2, [r7, #32]
 80022be:	4952      	ldr	r1, [pc, #328]	@ (8002408 <I2C_RequestMemoryRead+0x1cc>)
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 f91d 	bl	8002500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e097      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e8:	6a39      	ldr	r1, [r7, #32]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f9a8 	bl	8002640 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d107      	bne.n	800230e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e076      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002318:	893b      	ldrh	r3, [r7, #8]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	611a      	str	r2, [r3, #16]
 8002322:	e021      	b.n	8002368 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002324:	893b      	ldrh	r3, [r7, #8]
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	b29b      	uxth	r3, r3
 800232a:	b2da      	uxtb	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002334:	6a39      	ldr	r1, [r7, #32]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f982 	bl	8002640 <I2C_WaitOnTXEFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00d      	beq.n	800235e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	2b04      	cmp	r3, #4
 8002348:	d107      	bne.n	800235a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002358:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e050      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800235e:	893b      	ldrh	r3, [r7, #8]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800236a:	6a39      	ldr	r1, [r7, #32]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f967 	bl	8002640 <I2C_WaitOnTXEFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00d      	beq.n	8002394 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	2b04      	cmp	r3, #4
 800237e:	d107      	bne.n	8002390 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800238e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e035      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f82b 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023ca:	d103      	bne.n	80023d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e013      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023d8:	897b      	ldrh	r3, [r7, #10]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	6a3a      	ldr	r2, [r7, #32]
 80023ec:	4906      	ldr	r1, [pc, #24]	@ (8002408 <I2C_RequestMemoryRead+0x1cc>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f886 	bl	8002500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	00010002 	.word	0x00010002

0800240c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800241c:	e048      	b.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d044      	beq.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002426:	f7fe fe43 	bl	80010b0 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d302      	bcc.n	800243c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d139      	bne.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	0c1b      	lsrs	r3, r3, #16
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b01      	cmp	r3, #1
 8002444:	d10d      	bne.n	8002462 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	43da      	mvns	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4013      	ands	r3, r2
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	e00c      	b.n	800247c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	43da      	mvns	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4013      	ands	r3, r2
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	429a      	cmp	r2, r3
 8002480:	d116      	bne.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	f043 0220 	orr.w	r2, r3, #32
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e023      	b.n	80024f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	0c1b      	lsrs	r3, r3, #16
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d10d      	bne.n	80024d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	43da      	mvns	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	e00c      	b.n	80024f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	43da      	mvns	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4013      	ands	r3, r2
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d093      	beq.n	800241e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800250e:	e071      	b.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800251e:	d123      	bne.n	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800252e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002538:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	f043 0204 	orr.w	r2, r3, #4
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e067      	b.n	8002638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256e:	d041      	beq.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002570:	f7fe fd9e 	bl	80010b0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	d302      	bcc.n	8002586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d136      	bne.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d10c      	bne.n	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4013      	ands	r3, r2
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf14      	ite	ne
 80025a2:	2301      	movne	r3, #1
 80025a4:	2300      	moveq	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	e00b      	b.n	80025c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	43da      	mvns	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4013      	ands	r3, r2
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e021      	b.n	8002638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	0c1b      	lsrs	r3, r3, #16
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d10c      	bne.n	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	43da      	mvns	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4013      	ands	r3, r2
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf14      	ite	ne
 8002610:	2301      	movne	r3, #1
 8002612:	2300      	moveq	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e00b      	b.n	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4013      	ands	r3, r2
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf14      	ite	ne
 800262a:	2301      	movne	r3, #1
 800262c:	2300      	moveq	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	f47f af6d 	bne.w	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800264c:	e034      	b.n	80026b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f8e3 	bl	800281a <I2C_IsAcknowledgeFailed>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e034      	b.n	80026c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d028      	beq.n	80026b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002666:	f7fe fd23 	bl	80010b0 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	d302      	bcc.n	800267c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d11d      	bne.n	80026b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002686:	2b80      	cmp	r3, #128	@ 0x80
 8002688:	d016      	beq.n	80026b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e007      	b.n	80026c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c2:	2b80      	cmp	r3, #128	@ 0x80
 80026c4:	d1c3      	bne.n	800264e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026dc:	e034      	b.n	8002748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f89b 	bl	800281a <I2C_IsAcknowledgeFailed>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e034      	b.n	8002758 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d028      	beq.n	8002748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7fe fcdb 	bl	80010b0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d11d      	bne.n	8002748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d016      	beq.n	8002748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f043 0220 	orr.w	r2, r3, #32
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e007      	b.n	8002758 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b04      	cmp	r3, #4
 8002754:	d1c3      	bne.n	80026de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800276c:	e049      	b.n	8002802 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b10      	cmp	r3, #16
 800277a:	d119      	bne.n	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0210 	mvn.w	r2, #16
 8002784:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e030      	b.n	8002812 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b0:	f7fe fc7e 	bl	80010b0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d302      	bcc.n	80027c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d11d      	bne.n	8002802 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d0:	2b40      	cmp	r3, #64	@ 0x40
 80027d2:	d016      	beq.n	8002802 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	f043 0220 	orr.w	r2, r3, #32
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e007      	b.n	8002812 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280c:	2b40      	cmp	r3, #64	@ 0x40
 800280e:	d1ae      	bne.n	800276e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800282c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002830:	d11b      	bne.n	800286a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800283a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f043 0204 	orr.w	r2, r3, #4
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0e8      	b.n	8002a5a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d106      	bne.n	80028a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f009 faf5 	bl	800be8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2203      	movs	r2, #3
 80028a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f002 fc96 	bl	80051e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c4:	f002 fc6c 	bl	80051a0 <USB_CoreInit>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0bf      	b.n	8002a5a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fc9a 	bl	800521a <USB_SetCurrentMode>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0b0      	b.n	8002a5a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	e03e      	b.n	800297c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	3311      	adds	r3, #17
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	3310      	adds	r3, #16
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002926:	7bfa      	ldrb	r2, [r7, #15]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	3313      	adds	r3, #19
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800293a:	7bfa      	ldrb	r2, [r7, #15]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	3320      	adds	r3, #32
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	3324      	adds	r3, #36	@ 0x24
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	3301      	adds	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	791b      	ldrb	r3, [r3, #4]
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	429a      	cmp	r2, r3
 8002984:	d3bb      	bcc.n	80028fe <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
 800298a:	e044      	b.n	8002a16 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029fa:	7bfa      	ldrb	r2, [r7, #15]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	3301      	adds	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	791b      	ldrb	r3, [r3, #4]
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3b5      	bcc.n	800298c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3304      	adds	r3, #4
 8002a28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a2a:	f002 fc02 	bl	8005232 <USB_DevInit>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e00c      	b.n	8002a5a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 fe81 	bl	800775a <USB_DevDisconnect>

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_PCD_Start+0x16>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e016      	b.n	8002aa6 <HAL_PCD_Start+0x44>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 fb98 	bl	80051ba <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f009 fc70 	bl	800c372 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 fe55 	bl	8007746 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b088      	sub	sp, #32
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 fe57 	bl	800776e <USB_ReadInterrupts>
 8002ac0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fb1a 	bl	8003106 <PCD_EP_ISR_Handler>

    return;
 8002ad2:	e119      	b.n	8002d08 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d013      	beq.n	8002b06 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af0:	b292      	uxth	r2, r2
 8002af2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f009 fa43 	bl	800bf82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002afc:	2100      	movs	r1, #0
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f905 	bl	8002d0e <HAL_PCD_SetAddress>

    return;
 8002b04:	e100      	b.n	8002d08 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00c      	beq.n	8002b2a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b22:	b292      	uxth	r2, r2
 8002b24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b28:	e0ee      	b.n	8002d08 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00c      	beq.n	8002b4e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b46:	b292      	uxth	r2, r2
 8002b48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b4c:	e0dc      	b.n	8002d08 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d027      	beq.n	8002ba8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0204 	bic.w	r2, r2, #4
 8002b6a:	b292      	uxth	r2, r2
 8002b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0208 	bic.w	r2, r2, #8
 8002b82:	b292      	uxth	r2, r2
 8002b84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f009 fa33 	bl	800bff4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ba6:	e0af      	b.n	8002d08 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8083 	beq.w	8002cba <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e010      	b.n	8002bdc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	7ffb      	ldrb	r3, [r7, #31]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	7ffb      	ldrb	r3, [r7, #31]
 8002bc8:	8812      	ldrh	r2, [r2, #0]
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	3320      	adds	r3, #32
 8002bd0:	443b      	add	r3, r7
 8002bd2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002bd6:	7ffb      	ldrb	r3, [r7, #31]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	77fb      	strb	r3, [r7, #31]
 8002bdc:	7ffb      	ldrb	r3, [r7, #31]
 8002bde:	2b07      	cmp	r3, #7
 8002be0:	d9eb      	bls.n	8002bba <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0201 	orr.w	r2, r2, #1
 8002bf4:	b292      	uxth	r2, r2
 8002bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	b292      	uxth	r2, r2
 8002c0e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002c12:	bf00      	nop
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f6      	beq.n	8002c14 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c38:	b292      	uxth	r2, r2
 8002c3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	77fb      	strb	r3, [r7, #31]
 8002c42:	e00f      	b.n	8002c64 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002c44:	7ffb      	ldrb	r3, [r7, #31]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	7ffa      	ldrb	r2, [r7, #31]
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	440a      	add	r2, r1
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	3320      	adds	r3, #32
 8002c56:	443b      	add	r3, r7
 8002c58:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002c5c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002c5e:	7ffb      	ldrb	r3, [r7, #31]
 8002c60:	3301      	adds	r3, #1
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	7ffb      	ldrb	r3, [r7, #31]
 8002c66:	2b07      	cmp	r3, #7
 8002c68:	d9ec      	bls.n	8002c44 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0208 	orr.w	r2, r2, #8
 8002c7c:	b292      	uxth	r2, r2
 8002c7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c94:	b292      	uxth	r2, r2
 8002c96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0204 	orr.w	r2, r2, #4
 8002cac:	b292      	uxth	r2, r2
 8002cae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f009 f984 	bl	800bfc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002cb8:	e026      	b.n	8002d08 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00f      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002cd6:	b292      	uxth	r2, r2
 8002cd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f009 f942 	bl	800bf66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ce2:	e011      	b.n	8002d08 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00c      	beq.n	8002d08 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d00:	b292      	uxth	r2, r2
 8002d02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d06:	bf00      	nop
  }
}
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_PCD_SetAddress+0x1a>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e012      	b.n	8002d4e <HAL_PCD_SetAddress+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f004 fcee 	bl	8007720 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	4608      	mov	r0, r1
 8002d60:	4611      	mov	r1, r2
 8002d62:	461a      	mov	r2, r3
 8002d64:	4603      	mov	r3, r0
 8002d66:	70fb      	strb	r3, [r7, #3]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	803b      	strh	r3, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	da0e      	bge.n	8002d9a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	f003 0207 	and.w	r2, r3, #7
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	3310      	adds	r3, #16
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	705a      	strb	r2, [r3, #1]
 8002d98:	e00e      	b.n	8002db8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 0207 	and.w	r2, r3, #7
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dc4:	883a      	ldrh	r2, [r7, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	78ba      	ldrb	r2, [r7, #2]
 8002dce:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dd0:	78bb      	ldrb	r3, [r7, #2]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d102      	bne.n	8002ddc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_PCD_EP_Open+0x94>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e00e      	b.n	8002e08 <HAL_PCD_EP_Open+0xb2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68f9      	ldr	r1, [r7, #12]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f002 fa37 	bl	800526c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002e06:	7afb      	ldrb	r3, [r7, #11]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	da0e      	bge.n	8002e42 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	f003 0207 	and.w	r2, r3, #7
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	3310      	adds	r3, #16
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	4413      	add	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	705a      	strb	r2, [r3, #1]
 8002e40:	e00e      	b.n	8002e60 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 0207 	and.w	r2, r3, #7
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_PCD_EP_Close+0x6a>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e00e      	b.n	8002e98 <HAL_PCD_EP_Close+0x88>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f002 fdaf 	bl	80059ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	460b      	mov	r3, r1
 8002eae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb0:	7afb      	ldrb	r3, [r7, #11]
 8002eb2:	f003 0207 	and.w	r2, r3, #7
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2200      	movs	r2, #0
 8002ede:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee0:	7afb      	ldrb	r3, [r7, #11]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6979      	ldr	r1, [r7, #20]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f002 ff66 	bl	8005dc4 <USB_EPStartXfer>

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 0207 	and.w	r2, r3, #7
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	440b      	add	r3, r1
 8002f20:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002f24:	681b      	ldr	r3, [r3, #0]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f40:	7afb      	ldrb	r3, [r7, #11]
 8002f42:	f003 0207 	and.w	r2, r3, #7
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	3310      	adds	r3, #16
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6979      	ldr	r1, [r7, #20]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f002 ff18 	bl	8005dc4 <USB_EPStartXfer>

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	7912      	ldrb	r2, [r2, #4]
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e04c      	b.n	8003056 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	da0e      	bge.n	8002fe2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	f003 0207 	and.w	r2, r3, #7
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	3310      	adds	r3, #16
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	705a      	strb	r2, [r3, #1]
 8002fe0:	e00c      	b.n	8002ffc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_PCD_EP_SetStall+0x7e>
 8003018:	2302      	movs	r3, #2
 800301a:	e01c      	b.n	8003056 <HAL_PCD_EP_SetStall+0xb8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68f9      	ldr	r1, [r7, #12]
 800302a:	4618      	mov	r0, r3
 800302c:	f004 fa7b 	bl	8007526 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	2b00      	cmp	r3, #0
 8003038:	d108      	bne.n	800304c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f004 fba0 	bl	800778c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	7912      	ldrb	r2, [r2, #4]
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e040      	b.n	80030fe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800307c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003080:	2b00      	cmp	r3, #0
 8003082:	da0e      	bge.n	80030a2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	f003 0207 	and.w	r2, r3, #7
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	3310      	adds	r3, #16
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	705a      	strb	r2, [r3, #1]
 80030a0:	e00e      	b.n	80030c0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	f003 0207 	and.w	r2, r3, #7
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_PCD_EP_ClrStall+0x82>
 80030dc:	2302      	movs	r3, #2
 80030de:	e00e      	b.n	80030fe <HAL_PCD_EP_ClrStall+0xa0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f004 fa69 	bl	80075c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b096      	sub	sp, #88	@ 0x58
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800310e:	e3bb      	b.n	8003888 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003118:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800311c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800312a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 8175 	bne.w	800341e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003134:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	d14e      	bne.n	80031de <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800314c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003150:	81fb      	strh	r3, [r7, #14]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	89fb      	ldrh	r3, [r7, #14]
 8003158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800315c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003160:	b29b      	uxth	r3, r3
 8003162:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3310      	adds	r3, #16
 8003168:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	3302      	adds	r3, #2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	4413      	add	r3, r2
 8003188:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003194:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	441a      	add	r2, r3
 80031a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031a4:	2100      	movs	r1, #0
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f008 fec3 	bl	800bf32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7b5b      	ldrb	r3, [r3, #13]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8368 	beq.w	8003888 <PCD_EP_ISR_Handler+0x782>
 80031b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f040 8363 	bne.w	8003888 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7b5b      	ldrb	r3, [r3, #13]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	735a      	strb	r2, [r3, #13]
 80031dc:	e354      	b.n	8003888 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031e4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d034      	beq.n	8003266 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003204:	b29b      	uxth	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	3306      	adds	r3, #6
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	4413      	add	r3, r2
 800321a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003226:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003234:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003238:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800323a:	b29b      	uxth	r3, r3
 800323c:	f004 faf6 	bl	800782c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29a      	uxth	r2, r3
 8003248:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800324c:	4013      	ands	r3, r2
 800324e:	823b      	strh	r3, [r7, #16]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	8a3a      	ldrh	r2, [r7, #16]
 8003256:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800325a:	b292      	uxth	r2, r2
 800325c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f008 fe3a 	bl	800bed8 <HAL_PCD_SetupStageCallback>
 8003264:	e310      	b.n	8003888 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003266:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800326a:	2b00      	cmp	r3, #0
 800326c:	f280 830c 	bge.w	8003888 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b29a      	uxth	r2, r3
 8003278:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800327c:	4013      	ands	r3, r2
 800327e:	83fb      	strh	r3, [r7, #30]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	8bfa      	ldrh	r2, [r7, #30]
 8003286:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800328a:	b292      	uxth	r2, r2
 800328c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003296:	b29b      	uxth	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	3306      	adds	r3, #6
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d019      	beq.n	80032f6 <PCD_EP_ISR_Handler+0x1f0>
 80032c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d015      	beq.n	80032f6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d0:	6959      	ldr	r1, [r3, #20]
 80032d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f004 faa6 	bl	800782c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	441a      	add	r2, r3
 80032ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032ee:	2100      	movs	r1, #0
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f008 fe03 	bl	800befc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003300:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 82bd 	bne.w	8003888 <PCD_EP_ISR_Handler+0x782>
 800330e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003312:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003316:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800331a:	f000 82b5 	beq.w	8003888 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800332c:	b29b      	uxth	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003348:	b29a      	uxth	r2, r3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	801a      	strh	r2, [r3, #0]
 800334e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b3e      	cmp	r3, #62	@ 0x3e
 8003354:	d91d      	bls.n	8003392 <PCD_EP_ISR_Handler+0x28c>
 8003356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	647b      	str	r3, [r7, #68]	@ 0x44
 800335e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <PCD_EP_ISR_Handler+0x26a>
 800336a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800336c:	3b01      	subs	r3, #1
 800336e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29a      	uxth	r2, r3
 8003376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003378:	b29b      	uxth	r3, r3
 800337a:	029b      	lsls	r3, r3, #10
 800337c:	b29b      	uxth	r3, r3
 800337e:	4313      	orrs	r3, r2
 8003380:	b29b      	uxth	r3, r3
 8003382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800338a:	b29a      	uxth	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	801a      	strh	r2, [r3, #0]
 8003390:	e026      	b.n	80033e0 <PCD_EP_ISR_Handler+0x2da>
 8003392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <PCD_EP_ISR_Handler+0x2aa>
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	801a      	strh	r2, [r3, #0]
 80033ae:	e017      	b.n	80033e0 <PCD_EP_ISR_Handler+0x2da>
 80033b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <PCD_EP_ISR_Handler+0x2c4>
 80033c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c6:	3301      	adds	r3, #1
 80033c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	029b      	lsls	r3, r3, #10
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	4313      	orrs	r3, r2
 80033da:	b29a      	uxth	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033f0:	827b      	strh	r3, [r7, #18]
 80033f2:	8a7b      	ldrh	r3, [r7, #18]
 80033f4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80033f8:	827b      	strh	r3, [r7, #18]
 80033fa:	8a7b      	ldrh	r3, [r7, #18]
 80033fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003400:	827b      	strh	r3, [r7, #18]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	8a7b      	ldrh	r3, [r7, #18]
 8003408:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800340c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003410:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003418:	b29b      	uxth	r3, r3
 800341a:	8013      	strh	r3, [r2, #0]
 800341c:	e234      	b.n	8003888 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003432:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003436:	2b00      	cmp	r3, #0
 8003438:	f280 80fc 	bge.w	8003634 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29a      	uxth	r2, r3
 800344e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003452:	4013      	ands	r3, r2
 8003454:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800346a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800346e:	b292      	uxth	r2, r2
 8003470:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003472:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348a:	7b1b      	ldrb	r3, [r3, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d125      	bne.n	80034dc <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003498:	b29b      	uxth	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	3306      	adds	r3, #6
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80034bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8092 	beq.w	80035ea <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034cc:	6959      	ldr	r1, [r3, #20]
 80034ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d0:	88da      	ldrh	r2, [r3, #6]
 80034d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034d6:	f004 f9a9 	bl	800782c <USB_ReadPMA>
 80034da:	e086      	b.n	80035ea <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80034dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034de:	78db      	ldrb	r3, [r3, #3]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d10a      	bne.n	80034fa <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034e8:	461a      	mov	r2, r3
 80034ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f9d9 	bl	80038a4 <HAL_PCD_EP_DB_Receive>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80034f8:	e077      	b.n	80035ea <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	b29b      	uxth	r3, r3
 800350c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003514:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800352a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800352e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003536:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800353a:	b29b      	uxth	r3, r3
 800353c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d024      	beq.n	80035a2 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003560:	b29b      	uxth	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	3302      	adds	r3, #2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003580:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003584:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003588:	2b00      	cmp	r3, #0
 800358a:	d02e      	beq.n	80035ea <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003592:	6959      	ldr	r1, [r3, #20]
 8003594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003596:	891a      	ldrh	r2, [r3, #8]
 8003598:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800359c:	f004 f946 	bl	800782c <USB_ReadPMA>
 80035a0:	e023      	b.n	80035ea <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	3306      	adds	r3, #6
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80035ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035dc:	6959      	ldr	r1, [r3, #20]
 80035de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e0:	895a      	ldrh	r2, [r3, #10]
 80035e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035e6:	f004 f921 	bl	800782c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80035ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035f2:	441a      	add	r2, r3
 80035f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003600:	441a      	add	r2, r3
 8003602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003604:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <PCD_EP_ISR_Handler+0x514>
 800360e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	429a      	cmp	r2, r3
 8003618:	d206      	bcs.n	8003628 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800361a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f008 fc6b 	bl	800befc <HAL_PCD_DataOutStageCallback>
 8003626:	e005      	b.n	8003634 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800362e:	4618      	mov	r0, r3
 8003630:	f002 fbc8 	bl	8005dc4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003634:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8123 	beq.w	8003888 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003642:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	3310      	adds	r3, #16
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4413      	add	r3, r2
 8003654:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800366c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003670:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800368a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800368e:	b29b      	uxth	r3, r3
 8003690:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003694:	78db      	ldrb	r3, [r3, #3]
 8003696:	2b01      	cmp	r3, #1
 8003698:	f040 80a2 	bne.w	80037e0 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800369c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369e:	2200      	movs	r2, #0
 80036a0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80036a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a4:	7b1b      	ldrb	r3, [r3, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8093 	beq.w	80037d2 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80036b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d046      	beq.n	8003746 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d126      	bne.n	800370e <PCD_EP_ISR_Handler+0x608>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	4413      	add	r3, r2
 80036d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	011a      	lsls	r2, r3, #4
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	4413      	add	r3, r2
 80036e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	801a      	strh	r2, [r3, #0]
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003706:	b29a      	uxth	r2, r3
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	801a      	strh	r2, [r3, #0]
 800370c:	e061      	b.n	80037d2 <PCD_EP_ISR_Handler+0x6cc>
 800370e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003710:	785b      	ldrb	r3, [r3, #1]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d15d      	bne.n	80037d2 <PCD_EP_ISR_Handler+0x6cc>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003724:	b29b      	uxth	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372a:	4413      	add	r3, r2
 800372c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800372e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	011a      	lsls	r2, r3, #4
 8003734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003736:	4413      	add	r3, r2
 8003738:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800373c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800373e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003740:	2200      	movs	r2, #0
 8003742:	801a      	strh	r2, [r3, #0]
 8003744:	e045      	b.n	80037d2 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800374c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374e:	785b      	ldrb	r3, [r3, #1]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d126      	bne.n	80037a2 <PCD_EP_ISR_Handler+0x69c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	637b      	str	r3, [r7, #52]	@ 0x34
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003762:	b29b      	uxth	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003768:	4413      	add	r3, r2
 800376a:	637b      	str	r3, [r7, #52]	@ 0x34
 800376c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	011a      	lsls	r2, r3, #4
 8003772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003774:	4413      	add	r3, r2
 8003776:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800377a:	633b      	str	r3, [r7, #48]	@ 0x30
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003786:	b29a      	uxth	r2, r3
 8003788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378a:	801a      	strh	r2, [r3, #0]
 800378c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800379a:	b29a      	uxth	r2, r3
 800379c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379e:	801a      	strh	r2, [r3, #0]
 80037a0:	e017      	b.n	80037d2 <PCD_EP_ISR_Handler+0x6cc>
 80037a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a4:	785b      	ldrb	r3, [r3, #1]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d113      	bne.n	80037d2 <PCD_EP_ISR_Handler+0x6cc>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b8:	4413      	add	r3, r2
 80037ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	011a      	lsls	r2, r3, #4
 80037c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c4:	4413      	add	r3, r2
 80037c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ce:	2200      	movs	r2, #0
 80037d0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f008 fbaa 	bl	800bf32 <HAL_PCD_DataInStageCallback>
 80037de:	e053      	b.n	8003888 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80037e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d146      	bne.n	800387a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	3302      	adds	r3, #2
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003814:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003820:	429a      	cmp	r2, r3
 8003822:	d907      	bls.n	8003834 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800382c:	1ad2      	subs	r2, r2, r3
 800382e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003830:	619a      	str	r2, [r3, #24]
 8003832:	e002      	b.n	800383a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003836:	2200      	movs	r2, #0
 8003838:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800383a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	4619      	mov	r1, r3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f008 fb72 	bl	800bf32 <HAL_PCD_DataInStageCallback>
 800384e:	e01b      	b.n	8003888 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003858:	441a      	add	r2, r3
 800385a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800385e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003866:	441a      	add	r2, r3
 8003868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003872:	4618      	mov	r0, r3
 8003874:	f002 faa6 	bl	8005dc4 <USB_EPStartXfer>
 8003878:	e006      	b.n	8003888 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800387a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800387e:	461a      	mov	r2, r3
 8003880:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f91b 	bl	8003abe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003890:	b29b      	uxth	r3, r3
 8003892:	b21b      	sxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	f6ff ac3b 	blt.w	8003110 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3758      	adds	r7, #88	@ 0x58
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d07e      	beq.n	80039ba <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4413      	add	r3, r2
 80038d0:	3302      	adds	r3, #2
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	8b7b      	ldrh	r3, [r7, #26]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d306      	bcc.n	80038fe <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	8b7b      	ldrh	r3, [r7, #26]
 80038f6:	1ad2      	subs	r2, r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	619a      	str	r2, [r3, #24]
 80038fc:	e002      	b.n	8003904 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2200      	movs	r2, #0
 8003902:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d123      	bne.n	8003954 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003926:	833b      	strh	r3, [r7, #24]
 8003928:	8b3b      	ldrh	r3, [r7, #24]
 800392a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800392e:	833b      	strh	r3, [r7, #24]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	441a      	add	r2, r3
 800393e:	8b3b      	ldrh	r3, [r7, #24]
 8003940:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003944:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800394c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003950:	b29b      	uxth	r3, r3
 8003952:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01f      	beq.n	800399e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	b29b      	uxth	r3, r3
 8003970:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003978:	82fb      	strh	r3, [r7, #22]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	441a      	add	r2, r3
 8003988:	8afb      	ldrh	r3, [r7, #22]
 800398a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800398e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003996:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800399a:	b29b      	uxth	r3, r3
 800399c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800399e:	8b7b      	ldrh	r3, [r7, #26]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8087 	beq.w	8003ab4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6959      	ldr	r1, [r3, #20]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	891a      	ldrh	r2, [r3, #8]
 80039b2:	8b7b      	ldrh	r3, [r7, #26]
 80039b4:	f003 ff3a 	bl	800782c <USB_ReadPMA>
 80039b8:	e07c      	b.n	8003ab4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	3306      	adds	r3, #6
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	8b7b      	ldrh	r3, [r7, #26]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d306      	bcc.n	80039fc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	8b7b      	ldrh	r3, [r7, #26]
 80039f4:	1ad2      	subs	r2, r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	619a      	str	r2, [r3, #24]
 80039fa:	e002      	b.n	8003a02 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2200      	movs	r2, #0
 8003a00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d123      	bne.n	8003a52 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a24:	83fb      	strh	r3, [r7, #30]
 8003a26:	8bfb      	ldrh	r3, [r7, #30]
 8003a28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a2c:	83fb      	strh	r3, [r7, #30]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	441a      	add	r2, r3
 8003a3c:	8bfb      	ldrh	r3, [r7, #30]
 8003a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d11f      	bne.n	8003a9c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a76:	83bb      	strh	r3, [r7, #28]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	8bbb      	ldrh	r3, [r7, #28]
 8003a88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a9c:	8b7b      	ldrh	r3, [r7, #26]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	6959      	ldr	r1, [r3, #20]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	895a      	ldrh	r2, [r3, #10]
 8003aae:	8b7b      	ldrh	r3, [r7, #26]
 8003ab0:	f003 febc 	bl	800782c <USB_ReadPMA>
    }
  }

  return count;
 8003ab4:	8b7b      	ldrh	r3, [r7, #26]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b0a4      	sub	sp, #144	@ 0x90
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 81dd 	beq.w	8003e92 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	3302      	adds	r3, #2
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b00:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d907      	bls.n	8003b20 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b18:	1ad2      	subs	r2, r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	619a      	str	r2, [r3, #24]
 8003b1e:	e002      	b.n	8003b26 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2200      	movs	r2, #0
 8003b24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f040 80b9 	bne.w	8003ca2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d126      	bne.n	8003b86 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4c:	4413      	add	r3, r2
 8003b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	011a      	lsls	r2, r3, #4
 8003b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b58:	4413      	add	r3, r2
 8003b5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6e:	801a      	strh	r2, [r3, #0]
 8003b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b82:	801a      	strh	r2, [r3, #0]
 8003b84:	e01a      	b.n	8003bbc <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	785b      	ldrb	r3, [r3, #1]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d116      	bne.n	8003bbc <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba2:	4413      	add	r3, r2
 8003ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	011a      	lsls	r2, r3, #4
 8003bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bae:	4413      	add	r3, r2
 8003bb0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	2200      	movs	r2, #0
 8003bba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	785b      	ldrb	r3, [r3, #1]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d126      	bne.n	8003c18 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	011a      	lsls	r2, r3, #4
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	801a      	strh	r2, [r3, #0]
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	801a      	strh	r2, [r3, #0]
 8003c16:	e017      	b.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	785b      	ldrb	r3, [r3, #1]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d113      	bne.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	4413      	add	r3, r2
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	011a      	lsls	r2, r3, #4
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c40:	623b      	str	r3, [r7, #32]
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	2200      	movs	r2, #0
 8003c46:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f008 f96f 	bl	800bf32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 82fc 	beq.w	8004258 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7a:	82fb      	strh	r3, [r7, #22]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	441a      	add	r2, r3
 8003c8a:	8afb      	ldrh	r3, [r7, #22]
 8003c8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	8013      	strh	r3, [r2, #0]
 8003ca0:	e2da      	b.n	8004258 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d021      	beq.n	8003cf0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	441a      	add	r2, r3
 8003cd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	f040 82ae 	bne.w	8004258 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d04:	441a      	add	r2, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d12:	441a      	add	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d30b      	bcc.n	8003d3c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d34:	1ad2      	subs	r2, r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	621a      	str	r2, [r3, #32]
 8003d3a:	e017      	b.n	8003d6c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d108      	bne.n	8003d56 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003d44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d54:	e00a      	b.n	8003d6c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d165      	bne.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x382>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d88:	4413      	add	r3, r2
 8003d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	011a      	lsls	r2, r3, #4
 8003d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d94:	4413      	add	r3, r2
 8003d96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003daa:	801a      	strh	r2, [r3, #0]
 8003dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003db2:	d91d      	bls.n	8003df0 <HAL_PCD_EP_DB_Transmit+0x332>
 8003db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d102      	bne.n	8003dce <HAL_PCD_EP_DB_Transmit+0x310>
 8003dc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	029b      	lsls	r3, r3, #10
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dec:	801a      	strh	r2, [r3, #0]
 8003dee:	e044      	b.n	8003e7a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <HAL_PCD_EP_DB_Transmit+0x350>
 8003df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0a:	801a      	strh	r2, [r3, #0]
 8003e0c:	e035      	b.n	8003e7a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e24:	3301      	adds	r3, #1
 8003e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	029b      	lsls	r3, r3, #10
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	4313      	orrs	r3, r2
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3c:	801a      	strh	r2, [r3, #0]
 8003e3e:	e01c      	b.n	8003e7a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	785b      	ldrb	r3, [r3, #1]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d118      	bne.n	8003e7a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e5c:	4413      	add	r3, r2
 8003e5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	011a      	lsls	r2, r3, #4
 8003e66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e68:	4413      	add	r3, r2
 8003e6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e78:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	6959      	ldr	r1, [r3, #20]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	891a      	ldrh	r2, [r3, #8]
 8003e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	f003 fc89 	bl	80077a2 <USB_WritePMA>
 8003e90:	e1e2      	b.n	8004258 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3306      	adds	r3, #6
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eba:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d307      	bcc.n	8003eda <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ed2:	1ad2      	subs	r2, r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	619a      	str	r2, [r3, #24]
 8003ed8:	e002      	b.n	8003ee0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2200      	movs	r2, #0
 8003ede:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f040 80c0 	bne.w	800406a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d126      	bne.n	8003f40 <HAL_PCD_EP_DB_Transmit+0x482>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f06:	4413      	add	r3, r2
 8003f08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	011a      	lsls	r2, r3, #4
 8003f10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f12:	4413      	add	r3, r2
 8003f14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f28:	801a      	strh	r2, [r3, #0]
 8003f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	e01a      	b.n	8003f76 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	785b      	ldrb	r3, [r3, #1]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d116      	bne.n	8003f76 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f5c:	4413      	add	r3, r2
 8003f5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	011a      	lsls	r2, r3, #4
 8003f66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f68:	4413      	add	r3, r2
 8003f6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f72:	2200      	movs	r2, #0
 8003f74:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	785b      	ldrb	r3, [r3, #1]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d12b      	bne.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x51e>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f98:	4413      	add	r3, r2
 8003f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	011a      	lsls	r2, r3, #4
 8003fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003faa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	e017      	b.n	800400c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d113      	bne.n	800400c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ff2:	4413      	add	r3, r2
 8003ff4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	011a      	lsls	r2, r3, #4
 8003ffc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ffe:	4413      	add	r3, r2
 8004000:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004004:	673b      	str	r3, [r7, #112]	@ 0x70
 8004006:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004008:	2200      	movs	r2, #0
 800400a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	4619      	mov	r1, r3
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f007 ff8d 	bl	800bf32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800401e:	2b00      	cmp	r3, #0
 8004020:	f040 811a 	bne.w	8004258 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	b29b      	uxth	r3, r3
 8004036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800403a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004054:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004058:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800405c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004064:	b29b      	uxth	r3, r3
 8004066:	8013      	strh	r3, [r2, #0]
 8004068:	e0f6      	b.n	8004258 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d121      	bne.n	80040b8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29b      	uxth	r3, r3
 8004086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800408a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800408e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	441a      	add	r2, r3
 80040a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80040a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040be:	2b01      	cmp	r3, #1
 80040c0:	f040 80ca 	bne.w	8004258 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	695a      	ldr	r2, [r3, #20]
 80040c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040cc:	441a      	add	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	69da      	ldr	r2, [r3, #28]
 80040d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040da:	441a      	add	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6a1a      	ldr	r2, [r3, #32]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d30b      	bcc.n	8004104 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040fc:	1ad2      	subs	r2, r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	621a      	str	r2, [r3, #32]
 8004102:	e017      	b.n	8004134 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d108      	bne.n	800411e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800410c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004110:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800411c:	e00a      	b.n	8004134 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2200      	movs	r2, #0
 800412a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	657b      	str	r3, [r7, #84]	@ 0x54
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d165      	bne.n	800420e <HAL_PCD_EP_DB_Transmit+0x750>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004150:	b29b      	uxth	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004156:	4413      	add	r3, r2
 8004158:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	011a      	lsls	r2, r3, #4
 8004160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004162:	4413      	add	r3, r2
 8004164:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004168:	65bb      	str	r3, [r7, #88]	@ 0x58
 800416a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004174:	b29a      	uxth	r2, r3
 8004176:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004178:	801a      	strh	r2, [r3, #0]
 800417a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800417e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004180:	d91d      	bls.n	80041be <HAL_PCD_EP_DB_Transmit+0x700>
 8004182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800418a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <HAL_PCD_EP_DB_Transmit+0x6de>
 8004196:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004198:	3b01      	subs	r3, #1
 800419a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800419c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	029b      	lsls	r3, r3, #10
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4313      	orrs	r3, r2
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041ba:	801a      	strh	r2, [r3, #0]
 80041bc:	e041      	b.n	8004242 <HAL_PCD_EP_DB_Transmit+0x784>
 80041be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <HAL_PCD_EP_DB_Transmit+0x71e>
 80041c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	e032      	b.n	8004242 <HAL_PCD_EP_DB_Transmit+0x784>
 80041dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_PCD_EP_DB_Transmit+0x738>
 80041f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041f2:	3301      	adds	r3, #1
 80041f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041fe:	b29b      	uxth	r3, r3
 8004200:	029b      	lsls	r3, r3, #10
 8004202:	b29b      	uxth	r3, r3
 8004204:	4313      	orrs	r3, r2
 8004206:	b29a      	uxth	r2, r3
 8004208:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800420a:	801a      	strh	r2, [r3, #0]
 800420c:	e019      	b.n	8004242 <HAL_PCD_EP_DB_Transmit+0x784>
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d115      	bne.n	8004242 <HAL_PCD_EP_DB_Transmit+0x784>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800421e:	b29b      	uxth	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004224:	4413      	add	r3, r2
 8004226:	657b      	str	r3, [r7, #84]	@ 0x54
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	011a      	lsls	r2, r3, #4
 800422e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004230:	4413      	add	r3, r2
 8004232:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004236:	653b      	str	r3, [r7, #80]	@ 0x50
 8004238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800423c:	b29a      	uxth	r2, r3
 800423e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004240:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	6959      	ldr	r1, [r3, #20]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	895a      	ldrh	r2, [r3, #10]
 800424e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004252:	b29b      	uxth	r3, r3
 8004254:	f003 faa5 	bl	80077a2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b29b      	uxth	r3, r3
 800426a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800426e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004272:	82bb      	strh	r3, [r7, #20]
 8004274:	8abb      	ldrh	r3, [r7, #20]
 8004276:	f083 0310 	eor.w	r3, r3, #16
 800427a:	82bb      	strh	r3, [r7, #20]
 800427c:	8abb      	ldrh	r3, [r7, #20]
 800427e:	f083 0320 	eor.w	r3, r3, #32
 8004282:	82bb      	strh	r3, [r7, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	8abb      	ldrh	r3, [r7, #20]
 8004294:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004298:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800429c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3790      	adds	r7, #144	@ 0x90
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b087      	sub	sp, #28
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	607b      	str	r3, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	817b      	strh	r3, [r7, #10]
 80042c0:	4613      	mov	r3, r2
 80042c2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042c4:	897b      	ldrh	r3, [r7, #10]
 80042c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00b      	beq.n	80042e8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042d0:	897b      	ldrh	r3, [r7, #10]
 80042d2:	f003 0207 	and.w	r2, r3, #7
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	3310      	adds	r3, #16
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e009      	b.n	80042fc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042e8:	897a      	ldrh	r2, [r7, #10]
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042fc:	893b      	ldrh	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d107      	bne.n	8004312 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	b29a      	uxth	r2, r3
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	80da      	strh	r2, [r3, #6]
 8004310:	e00b      	b.n	800432a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2201      	movs	r2, #1
 8004316:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	b29a      	uxth	r2, r3
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	0c1b      	lsrs	r3, r3, #16
 8004324:	b29a      	uxth	r2, r3
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr
	...

08004338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e272      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8087 	beq.w	8004466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004358:	4b92      	ldr	r3, [pc, #584]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 030c 	and.w	r3, r3, #12
 8004360:	2b04      	cmp	r3, #4
 8004362:	d00c      	beq.n	800437e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004364:	4b8f      	ldr	r3, [pc, #572]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	2b08      	cmp	r3, #8
 800436e:	d112      	bne.n	8004396 <HAL_RCC_OscConfig+0x5e>
 8004370:	4b8c      	ldr	r3, [pc, #560]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800437c:	d10b      	bne.n	8004396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437e:	4b89      	ldr	r3, [pc, #548]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d06c      	beq.n	8004464 <HAL_RCC_OscConfig+0x12c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d168      	bne.n	8004464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e24c      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800439e:	d106      	bne.n	80043ae <HAL_RCC_OscConfig+0x76>
 80043a0:	4b80      	ldr	r3, [pc, #512]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a7f      	ldr	r2, [pc, #508]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80043a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	e02e      	b.n	800440c <HAL_RCC_OscConfig+0xd4>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x98>
 80043b6:	4b7b      	ldr	r3, [pc, #492]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a7a      	ldr	r2, [pc, #488]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b78      	ldr	r3, [pc, #480]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a77      	ldr	r2, [pc, #476]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80043c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e01d      	b.n	800440c <HAL_RCC_OscConfig+0xd4>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043d8:	d10c      	bne.n	80043f4 <HAL_RCC_OscConfig+0xbc>
 80043da:	4b72      	ldr	r3, [pc, #456]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a71      	ldr	r2, [pc, #452]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	4b6f      	ldr	r3, [pc, #444]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6e      	ldr	r2, [pc, #440]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e00b      	b.n	800440c <HAL_RCC_OscConfig+0xd4>
 80043f4:	4b6b      	ldr	r3, [pc, #428]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a6a      	ldr	r2, [pc, #424]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80043fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	4b68      	ldr	r3, [pc, #416]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a67      	ldr	r2, [pc, #412]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800440a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d013      	beq.n	800443c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fc fe4c 	bl	80010b0 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800441c:	f7fc fe48 	bl	80010b0 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	@ 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e200      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b5d      	ldr	r3, [pc, #372]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0xe4>
 800443a:	e014      	b.n	8004466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fc fe38 	bl	80010b0 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004444:	f7fc fe34 	bl	80010b0 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	@ 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e1ec      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	4b53      	ldr	r3, [pc, #332]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x10c>
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d063      	beq.n	800453a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004472:	4b4c      	ldr	r3, [pc, #304]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800447e:	4b49      	ldr	r3, [pc, #292]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	2b08      	cmp	r3, #8
 8004488:	d11c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x18c>
 800448a:	4b46      	ldr	r3, [pc, #280]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d116      	bne.n	80044c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004496:	4b43      	ldr	r3, [pc, #268]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_RCC_OscConfig+0x176>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d001      	beq.n	80044ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e1c0      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ae:	4b3d      	ldr	r3, [pc, #244]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4939      	ldr	r1, [pc, #228]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c2:	e03a      	b.n	800453a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d020      	beq.n	800450e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044cc:	4b36      	ldr	r3, [pc, #216]	@ (80045a8 <HAL_RCC_OscConfig+0x270>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d2:	f7fc fded 	bl	80010b0 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044da:	f7fc fde9 	bl	80010b0 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e1a1      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ec:	4b2d      	ldr	r3, [pc, #180]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f8:	4b2a      	ldr	r3, [pc, #168]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4927      	ldr	r1, [pc, #156]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]
 800450c:	e015      	b.n	800453a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450e:	4b26      	ldr	r3, [pc, #152]	@ (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fc fdcc 	bl	80010b0 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451c:	f7fc fdc8 	bl	80010b0 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e180      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	4b1d      	ldr	r3, [pc, #116]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d03a      	beq.n	80045bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d019      	beq.n	8004582 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800454e:	4b17      	ldr	r3, [pc, #92]	@ (80045ac <HAL_RCC_OscConfig+0x274>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004554:	f7fc fdac 	bl	80010b0 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455c:	f7fc fda8 	bl	80010b0 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e160      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <HAL_RCC_OscConfig+0x26c>)
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800457a:	2001      	movs	r0, #1
 800457c:	f000 fafe 	bl	8004b7c <RCC_Delay>
 8004580:	e01c      	b.n	80045bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004582:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <HAL_RCC_OscConfig+0x274>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004588:	f7fc fd92 	bl	80010b0 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800458e:	e00f      	b.n	80045b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004590:	f7fc fd8e 	bl	80010b0 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d908      	bls.n	80045b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e146      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000
 80045a8:	42420000 	.word	0x42420000
 80045ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b0:	4b92      	ldr	r3, [pc, #584]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e9      	bne.n	8004590 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80a6 	beq.w	8004716 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ca:	2300      	movs	r3, #0
 80045cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ce:	4b8b      	ldr	r3, [pc, #556]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10d      	bne.n	80045f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045da:	4b88      	ldr	r3, [pc, #544]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	4a87      	ldr	r2, [pc, #540]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 80045e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e4:	61d3      	str	r3, [r2, #28]
 80045e6:	4b85      	ldr	r3, [pc, #532]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f2:	2301      	movs	r3, #1
 80045f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f6:	4b82      	ldr	r3, [pc, #520]	@ (8004800 <HAL_RCC_OscConfig+0x4c8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d118      	bne.n	8004634 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004602:	4b7f      	ldr	r3, [pc, #508]	@ (8004800 <HAL_RCC_OscConfig+0x4c8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a7e      	ldr	r2, [pc, #504]	@ (8004800 <HAL_RCC_OscConfig+0x4c8>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800460c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fc fd4f 	bl	80010b0 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004616:	f7fc fd4b 	bl	80010b0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b64      	cmp	r3, #100	@ 0x64
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e103      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	4b75      	ldr	r3, [pc, #468]	@ (8004800 <HAL_RCC_OscConfig+0x4c8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d106      	bne.n	800464a <HAL_RCC_OscConfig+0x312>
 800463c:	4b6f      	ldr	r3, [pc, #444]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	4a6e      	ldr	r2, [pc, #440]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6213      	str	r3, [r2, #32]
 8004648:	e02d      	b.n	80046a6 <HAL_RCC_OscConfig+0x36e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x334>
 8004652:	4b6a      	ldr	r3, [pc, #424]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	4a69      	ldr	r2, [pc, #420]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	6213      	str	r3, [r2, #32]
 800465e:	4b67      	ldr	r3, [pc, #412]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	4a66      	ldr	r2, [pc, #408]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004664:	f023 0304 	bic.w	r3, r3, #4
 8004668:	6213      	str	r3, [r2, #32]
 800466a:	e01c      	b.n	80046a6 <HAL_RCC_OscConfig+0x36e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b05      	cmp	r3, #5
 8004672:	d10c      	bne.n	800468e <HAL_RCC_OscConfig+0x356>
 8004674:	4b61      	ldr	r3, [pc, #388]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	4a60      	ldr	r2, [pc, #384]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 800467a:	f043 0304 	orr.w	r3, r3, #4
 800467e:	6213      	str	r3, [r2, #32]
 8004680:	4b5e      	ldr	r3, [pc, #376]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	4a5d      	ldr	r2, [pc, #372]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6213      	str	r3, [r2, #32]
 800468c:	e00b      	b.n	80046a6 <HAL_RCC_OscConfig+0x36e>
 800468e:	4b5b      	ldr	r3, [pc, #364]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	4a5a      	ldr	r2, [pc, #360]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	6213      	str	r3, [r2, #32]
 800469a:	4b58      	ldr	r3, [pc, #352]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	4a57      	ldr	r2, [pc, #348]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 80046a0:	f023 0304 	bic.w	r3, r3, #4
 80046a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d015      	beq.n	80046da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ae:	f7fc fcff 	bl	80010b0 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b4:	e00a      	b.n	80046cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b6:	f7fc fcfb 	bl	80010b0 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e0b1      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046cc:	4b4b      	ldr	r3, [pc, #300]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ee      	beq.n	80046b6 <HAL_RCC_OscConfig+0x37e>
 80046d8:	e014      	b.n	8004704 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046da:	f7fc fce9 	bl	80010b0 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fc fce5 	bl	80010b0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e09b      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f8:	4b40      	ldr	r3, [pc, #256]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1ee      	bne.n	80046e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d105      	bne.n	8004716 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800470a:	4b3c      	ldr	r3, [pc, #240]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	4a3b      	ldr	r2, [pc, #236]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004714:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 8087 	beq.w	800482e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004720:	4b36      	ldr	r3, [pc, #216]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 030c 	and.w	r3, r3, #12
 8004728:	2b08      	cmp	r3, #8
 800472a:	d061      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d146      	bne.n	80047c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004734:	4b33      	ldr	r3, [pc, #204]	@ (8004804 <HAL_RCC_OscConfig+0x4cc>)
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473a:	f7fc fcb9 	bl	80010b0 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004742:	f7fc fcb5 	bl	80010b0 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e06d      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004754:	4b29      	ldr	r3, [pc, #164]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f0      	bne.n	8004742 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004768:	d108      	bne.n	800477c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800476a:	4b24      	ldr	r3, [pc, #144]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	4921      	ldr	r1, [pc, #132]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800477c:	4b1f      	ldr	r3, [pc, #124]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a19      	ldr	r1, [r3, #32]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	430b      	orrs	r3, r1
 800478e:	491b      	ldr	r1, [pc, #108]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004794:	4b1b      	ldr	r3, [pc, #108]	@ (8004804 <HAL_RCC_OscConfig+0x4cc>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479a:	f7fc fc89 	bl	80010b0 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a2:	f7fc fc85 	bl	80010b0 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e03d      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047b4:	4b11      	ldr	r3, [pc, #68]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCC_OscConfig+0x46a>
 80047c0:	e035      	b.n	800482e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	4b10      	ldr	r3, [pc, #64]	@ (8004804 <HAL_RCC_OscConfig+0x4cc>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fc fc72 	bl	80010b0 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fc fc6e 	bl	80010b0 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e026      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e2:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <HAL_RCC_OscConfig+0x4c4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x498>
 80047ee:	e01e      	b.n	800482e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d107      	bne.n	8004808 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e019      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
 80047fc:	40021000 	.word	0x40021000
 8004800:	40007000 	.word	0x40007000
 8004804:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004808:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <HAL_RCC_OscConfig+0x500>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	429a      	cmp	r2, r3
 800481a:	d106      	bne.n	800482a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d001      	beq.n	800482e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000

0800483c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0d0      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004850:	4b6a      	ldr	r3, [pc, #424]	@ (80049fc <HAL_RCC_ClockConfig+0x1c0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d910      	bls.n	8004880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b67      	ldr	r3, [pc, #412]	@ (80049fc <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 0207 	bic.w	r2, r3, #7
 8004866:	4965      	ldr	r1, [pc, #404]	@ (80049fc <HAL_RCC_ClockConfig+0x1c0>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b63      	ldr	r3, [pc, #396]	@ (80049fc <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0b8      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004898:	4b59      	ldr	r3, [pc, #356]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	4a58      	ldr	r2, [pc, #352]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 800489e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b0:	4b53      	ldr	r3, [pc, #332]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a52      	ldr	r2, [pc, #328]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80048b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80048ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048bc:	4b50      	ldr	r3, [pc, #320]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	494d      	ldr	r1, [pc, #308]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d040      	beq.n	800495c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e2:	4b47      	ldr	r3, [pc, #284]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d115      	bne.n	800491a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e07f      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fa:	4b41      	ldr	r3, [pc, #260]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e073      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e06b      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800491a:	4b39      	ldr	r3, [pc, #228]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f023 0203 	bic.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4936      	ldr	r1, [pc, #216]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 8004928:	4313      	orrs	r3, r2
 800492a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800492c:	f7fc fbc0 	bl	80010b0 <HAL_GetTick>
 8004930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	e00a      	b.n	800494a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7fc fbbc 	bl	80010b0 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e053      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	4b2d      	ldr	r3, [pc, #180]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 020c 	and.w	r2, r3, #12
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	429a      	cmp	r2, r3
 800495a:	d1eb      	bne.n	8004934 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800495c:	4b27      	ldr	r3, [pc, #156]	@ (80049fc <HAL_RCC_ClockConfig+0x1c0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d210      	bcs.n	800498c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b24      	ldr	r3, [pc, #144]	@ (80049fc <HAL_RCC_ClockConfig+0x1c0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 0207 	bic.w	r2, r3, #7
 8004972:	4922      	ldr	r1, [pc, #136]	@ (80049fc <HAL_RCC_ClockConfig+0x1c0>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4313      	orrs	r3, r2
 8004978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b20      	ldr	r3, [pc, #128]	@ (80049fc <HAL_RCC_ClockConfig+0x1c0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e032      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004998:	4b19      	ldr	r3, [pc, #100]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4916      	ldr	r1, [pc, #88]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049b6:	4b12      	ldr	r3, [pc, #72]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	490e      	ldr	r1, [pc, #56]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049ca:	f000 f821 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	490a      	ldr	r1, [pc, #40]	@ (8004a04 <HAL_RCC_ClockConfig+0x1c8>)
 80049dc:	5ccb      	ldrb	r3, [r1, r3]
 80049de:	fa22 f303 	lsr.w	r3, r2, r3
 80049e2:	4a09      	ldr	r2, [pc, #36]	@ (8004a08 <HAL_RCC_ClockConfig+0x1cc>)
 80049e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049e6:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <HAL_RCC_ClockConfig+0x1d0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fc f9cc 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40022000 	.word	0x40022000
 8004a00:	40021000 	.word	0x40021000
 8004a04:	0800d4b4 	.word	0x0800d4b4
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	20000004 	.word	0x20000004

08004a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	2300      	movs	r3, #0
 8004a24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d002      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x30>
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCC_GetSysClockFreq+0x36>
 8004a3e:	e027      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a40:	4b19      	ldr	r3, [pc, #100]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a42:	613b      	str	r3, [r7, #16]
      break;
 8004a44:	e027      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	0c9b      	lsrs	r3, r3, #18
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	4a17      	ldr	r2, [pc, #92]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a50:	5cd3      	ldrb	r3, [r2, r3]
 8004a52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d010      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a5e:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	0c5b      	lsrs	r3, r3, #17
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	4a11      	ldr	r2, [pc, #68]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a6a:	5cd3      	ldrb	r3, [r2, r3]
 8004a6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a72:	fb03 f202 	mul.w	r2, r3, r2
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	e004      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a84:	fb02 f303 	mul.w	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	613b      	str	r3, [r7, #16]
      break;
 8004a8e:	e002      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a90:	4b05      	ldr	r3, [pc, #20]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a92:	613b      	str	r3, [r7, #16]
      break;
 8004a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a96:	693b      	ldr	r3, [r7, #16]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	007a1200 	.word	0x007a1200
 8004aac:	0800d4cc 	.word	0x0800d4cc
 8004ab0:	0800d4dc 	.word	0x0800d4dc
 8004ab4:	003d0900 	.word	0x003d0900

08004ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004abc:	4b02      	ldr	r3, [pc, #8]	@ (8004ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004abe:	681b      	ldr	r3, [r3, #0]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr
 8004ac8:	20000000 	.word	0x20000000

08004acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ad0:	f7ff fff2 	bl	8004ab8 <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b05      	ldr	r3, [pc, #20]	@ (8004aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4903      	ldr	r1, [pc, #12]	@ (8004af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000
 8004af0:	0800d4c4 	.word	0x0800d4c4

08004af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004af8:	f7ff ffde 	bl	8004ab8 <HAL_RCC_GetHCLKFreq>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	0adb      	lsrs	r3, r3, #11
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	4903      	ldr	r1, [pc, #12]	@ (8004b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b0a:	5ccb      	ldrb	r3, [r1, r3]
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40021000 	.word	0x40021000
 8004b18:	0800d4c4 	.word	0x0800d4c4

08004b1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	220f      	movs	r2, #15
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b2c:	4b11      	ldr	r3, [pc, #68]	@ (8004b74 <HAL_RCC_GetClockConfig+0x58>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 0203 	and.w	r2, r3, #3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b38:	4b0e      	ldr	r3, [pc, #56]	@ (8004b74 <HAL_RCC_GetClockConfig+0x58>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b44:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <HAL_RCC_GetClockConfig+0x58>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b50:	4b08      	ldr	r3, [pc, #32]	@ (8004b74 <HAL_RCC_GetClockConfig+0x58>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	08db      	lsrs	r3, r3, #3
 8004b56:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <HAL_RCC_GetClockConfig+0x5c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0207 	and.w	r2, r3, #7
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40022000 	.word	0x40022000

08004b7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b84:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb0 <RCC_Delay+0x34>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb4 <RCC_Delay+0x38>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	0a5b      	lsrs	r3, r3, #9
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b98:	bf00      	nop
  }
  while (Delay --);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1e5a      	subs	r2, r3, #1
 8004b9e:	60fa      	str	r2, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f9      	bne.n	8004b98 <RCC_Delay+0x1c>
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr
 8004bb0:	20000000 	.word	0x20000000
 8004bb4:	10624dd3 	.word	0x10624dd3

08004bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d07d      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10d      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be4:	4b4c      	ldr	r3, [pc, #304]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	4a4b      	ldr	r2, [pc, #300]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bee:	61d3      	str	r3, [r2, #28]
 8004bf0:	4b49      	ldr	r3, [pc, #292]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c00:	4b46      	ldr	r3, [pc, #280]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d118      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c0c:	4b43      	ldr	r3, [pc, #268]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a42      	ldr	r2, [pc, #264]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c18:	f7fc fa4a 	bl	80010b0 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1e:	e008      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c20:	f7fc fa46 	bl	80010b0 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	@ 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e06d      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c32:	4b3a      	ldr	r3, [pc, #232]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c3e:	4b36      	ldr	r3, [pc, #216]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d02e      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d027      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c66:	4b2e      	ldr	r3, [pc, #184]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c72:	4a29      	ldr	r2, [pc, #164]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d014      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c82:	f7fc fa15 	bl	80010b0 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fc fa11 	bl	80010b0 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e036      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ee      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cac:	4b1a      	ldr	r3, [pc, #104]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4917      	ldr	r1, [pc, #92]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc4:	4b14      	ldr	r3, [pc, #80]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	4a13      	ldr	r2, [pc, #76]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	490b      	ldr	r1, [pc, #44]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cfa:	4b07      	ldr	r3, [pc, #28]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	4904      	ldr	r1, [pc, #16]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	42420440 	.word	0x42420440

08004d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e041      	b.n	8004dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f839 	bl	8004dc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f000 f99c 	bl	80050a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d001      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e03a      	b.n	8004e62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a18      	ldr	r2, [pc, #96]	@ (8004e6c <HAL_TIM_Base_Start_IT+0x98>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00e      	beq.n	8004e2c <HAL_TIM_Base_Start_IT+0x58>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e16:	d009      	beq.n	8004e2c <HAL_TIM_Base_Start_IT+0x58>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a14      	ldr	r2, [pc, #80]	@ (8004e70 <HAL_TIM_Base_Start_IT+0x9c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d004      	beq.n	8004e2c <HAL_TIM_Base_Start_IT+0x58>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a13      	ldr	r2, [pc, #76]	@ (8004e74 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d111      	bne.n	8004e50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b06      	cmp	r3, #6
 8004e3c:	d010      	beq.n	8004e60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4e:	e007      	b.n	8004e60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40000400 	.word	0x40000400
 8004e74:	40000800 	.word	0x40000800

08004e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d020      	beq.n	8004edc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d01b      	beq.n	8004edc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0202 	mvn.w	r2, #2
 8004eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f8d1 	bl	800506a <HAL_TIM_IC_CaptureCallback>
 8004ec8:	e005      	b.n	8004ed6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f8c4 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f8d3 	bl	800507c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d020      	beq.n	8004f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01b      	beq.n	8004f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0204 	mvn.w	r2, #4
 8004ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f8ab 	bl	800506a <HAL_TIM_IC_CaptureCallback>
 8004f14:	e005      	b.n	8004f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f89e 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f8ad 	bl	800507c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d020      	beq.n	8004f74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01b      	beq.n	8004f74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0208 	mvn.w	r2, #8
 8004f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2204      	movs	r2, #4
 8004f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f885 	bl	800506a <HAL_TIM_IC_CaptureCallback>
 8004f60:	e005      	b.n	8004f6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f878 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f887 	bl	800507c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d020      	beq.n	8004fc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01b      	beq.n	8004fc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0210 	mvn.w	r2, #16
 8004f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2208      	movs	r2, #8
 8004f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f85f 	bl	800506a <HAL_TIM_IC_CaptureCallback>
 8004fac:	e005      	b.n	8004fba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f852 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f861 	bl	800507c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00c      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0201 	mvn.w	r2, #1
 8004fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fb fe44 	bl	8000c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00c      	beq.n	8005008 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f8c3 	bl	800518e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f831 	bl	800508e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00c      	beq.n	8005050 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0220 	mvn.w	r2, #32
 8005048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f896 	bl	800517c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	4770      	bx	lr

0800508e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr

080050a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005170 <TIM_Base_SetConfig+0xd0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <TIM_Base_SetConfig+0x30>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050be:	d007      	beq.n	80050d0 <TIM_Base_SetConfig+0x30>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005174 <TIM_Base_SetConfig+0xd4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_Base_SetConfig+0x30>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005178 <TIM_Base_SetConfig+0xd8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d108      	bne.n	80050e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a22      	ldr	r2, [pc, #136]	@ (8005170 <TIM_Base_SetConfig+0xd0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00b      	beq.n	8005102 <TIM_Base_SetConfig+0x62>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f0:	d007      	beq.n	8005102 <TIM_Base_SetConfig+0x62>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005174 <TIM_Base_SetConfig+0xd4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d003      	beq.n	8005102 <TIM_Base_SetConfig+0x62>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005178 <TIM_Base_SetConfig+0xd8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d108      	bne.n	8005114 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a0d      	ldr	r2, [pc, #52]	@ (8005170 <TIM_Base_SetConfig+0xd0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d103      	bne.n	8005148 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f023 0201 	bic.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	611a      	str	r2, [r3, #16]
  }
}
 8005166:	bf00      	nop
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40000400 	.word	0x40000400
 8005178:	40000800 	.word	0x40000800

0800517c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	4638      	mov	r0, r7
 80051aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr

080051ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80051ca:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80051ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr

080051e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80051ee:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80051f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	43db      	mvns	r3, r3
 8005202:	b29b      	uxth	r3, r3
 8005204:	4013      	ands	r3, r2
 8005206:	b29a      	uxth	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr

08005232 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	4638      	mov	r0, r7
 800523c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr

0800526c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800526c:	b480      	push	{r7}
 800526e:	b09d      	sub	sp, #116	@ 0x74
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	78db      	ldrb	r3, [r3, #3]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d81f      	bhi.n	80052de <USB_ActivateEndpoint+0x72>
 800529e:	a201      	add	r2, pc, #4	@ (adr r2, 80052a4 <USB_ActivateEndpoint+0x38>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052d1 	.word	0x080052d1
 80052ac:	080052e7 	.word	0x080052e7
 80052b0:	080052c3 	.word	0x080052c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80052b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80052b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80052c0:	e012      	b.n	80052e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80052c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80052c6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80052ca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80052ce:	e00b      	b.n	80052e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80052d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80052d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80052dc:	e004      	b.n	80052e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80052e4:	e000      	b.n	80052e8 <USB_ActivateEndpoint+0x7c>
      break;
 80052e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	441a      	add	r2, r3
 80052f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80052f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005306:	b29b      	uxth	r3, r3
 8005308:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b29b      	uxth	r3, r3
 8005318:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800531c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005320:	b29b      	uxth	r3, r3
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	7812      	ldrb	r2, [r2, #0]
 8005326:	4313      	orrs	r3, r2
 8005328:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	441a      	add	r2, r3
 8005336:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800533a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800533e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800534a:	b29b      	uxth	r3, r3
 800534c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	7b1b      	ldrb	r3, [r3, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f040 8178 	bne.w	8005648 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8084 	beq.w	800546a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800536c:	b29b      	uxth	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	4413      	add	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	011a      	lsls	r2, r3, #4
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	88db      	ldrh	r3, [r3, #6]
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	b29b      	uxth	r3, r3
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	827b      	strh	r3, [r7, #18]
 80053a4:	8a7b      	ldrh	r3, [r7, #18]
 80053a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01b      	beq.n	80053e6 <USB_ActivateEndpoint+0x17a>
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c4:	823b      	strh	r3, [r7, #16]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	441a      	add	r2, r3
 80053d0:	8a3b      	ldrh	r3, [r7, #16]
 80053d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	78db      	ldrb	r3, [r3, #3]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d020      	beq.n	8005430 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005404:	81bb      	strh	r3, [r7, #12]
 8005406:	89bb      	ldrh	r3, [r7, #12]
 8005408:	f083 0320 	eor.w	r3, r3, #32
 800540c:	81bb      	strh	r3, [r7, #12]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	441a      	add	r2, r3
 8005418:	89bb      	ldrh	r3, [r7, #12]
 800541a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800541e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800542a:	b29b      	uxth	r3, r3
 800542c:	8013      	strh	r3, [r2, #0]
 800542e:	e2d5      	b.n	80059dc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005446:	81fb      	strh	r3, [r7, #14]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	441a      	add	r2, r3
 8005452:	89fb      	ldrh	r3, [r7, #14]
 8005454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800545c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005464:	b29b      	uxth	r3, r3
 8005466:	8013      	strh	r3, [r2, #0]
 8005468:	e2b8      	b.n	80059dc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	633b      	str	r3, [r7, #48]	@ 0x30
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005474:	b29b      	uxth	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547a:	4413      	add	r3, r2
 800547c:	633b      	str	r3, [r7, #48]	@ 0x30
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	011a      	lsls	r2, r3, #4
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	4413      	add	r3, r2
 8005488:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800548c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	88db      	ldrh	r3, [r3, #6]
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	b29b      	uxth	r3, r3
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ae:	4413      	add	r3, r2
 80054b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	011a      	lsls	r2, r3, #4
 80054b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ba:	4413      	add	r3, r2
 80054bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80054d8:	d91d      	bls.n	8005516 <USB_ActivateEndpoint+0x2aa>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d102      	bne.n	80054f4 <USB_ActivateEndpoint+0x288>
 80054ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054f0:	3b01      	subs	r3, #1
 80054f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	029b      	lsls	r3, r3, #10
 8005500:	b29b      	uxth	r3, r3
 8005502:	4313      	orrs	r3, r2
 8005504:	b29b      	uxth	r3, r3
 8005506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550e:	b29a      	uxth	r2, r3
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	e026      	b.n	8005564 <USB_ActivateEndpoint+0x2f8>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10a      	bne.n	8005534 <USB_ActivateEndpoint+0x2c8>
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29b      	uxth	r3, r3
 8005524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552c:	b29a      	uxth	r2, r3
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	e017      	b.n	8005564 <USB_ActivateEndpoint+0x2f8>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	085b      	lsrs	r3, r3, #1
 800553a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <USB_ActivateEndpoint+0x2e2>
 8005548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800554a:	3301      	adds	r3, #1
 800554c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29a      	uxth	r2, r3
 8005554:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005556:	b29b      	uxth	r3, r3
 8005558:	029b      	lsls	r3, r3, #10
 800555a:	b29b      	uxth	r3, r3
 800555c:	4313      	orrs	r3, r2
 800555e:	b29a      	uxth	r2, r3
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005562:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005572:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01b      	beq.n	80055b4 <USB_ActivateEndpoint+0x348>
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800558e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005592:	843b      	strh	r3, [r7, #32]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	441a      	add	r2, r3
 800559e:	8c3b      	ldrh	r3, [r7, #32]
 80055a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d124      	bne.n	8005606 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d2:	83bb      	strh	r3, [r7, #28]
 80055d4:	8bbb      	ldrh	r3, [r7, #28]
 80055d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80055da:	83bb      	strh	r3, [r7, #28]
 80055dc:	8bbb      	ldrh	r3, [r7, #28]
 80055de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80055e2:	83bb      	strh	r3, [r7, #28]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	441a      	add	r2, r3
 80055ee:	8bbb      	ldrh	r3, [r7, #28]
 80055f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005600:	b29b      	uxth	r3, r3
 8005602:	8013      	strh	r3, [r2, #0]
 8005604:	e1ea      	b.n	80059dc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561c:	83fb      	strh	r3, [r7, #30]
 800561e:	8bfb      	ldrh	r3, [r7, #30]
 8005620:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005624:	83fb      	strh	r3, [r7, #30]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	441a      	add	r2, r3
 8005630:	8bfb      	ldrh	r3, [r7, #30]
 8005632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800563a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800563e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005642:	b29b      	uxth	r3, r3
 8005644:	8013      	strh	r3, [r2, #0]
 8005646:	e1c9      	b.n	80059dc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	78db      	ldrb	r3, [r3, #3]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d11e      	bne.n	800568e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005666:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	441a      	add	r2, r3
 8005674:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800567c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005680:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005688:	b29b      	uxth	r3, r3
 800568a:	8013      	strh	r3, [r2, #0]
 800568c:	e01d      	b.n	80056ca <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80056a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	441a      	add	r2, r3
 80056b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80056b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056da:	4413      	add	r3, r2
 80056dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	011a      	lsls	r2, r3, #4
 80056e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	891b      	ldrh	r3, [r3, #8]
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056fc:	801a      	strh	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	657b      	str	r3, [r7, #84]	@ 0x54
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800570e:	4413      	add	r3, r2
 8005710:	657b      	str	r3, [r7, #84]	@ 0x54
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	011a      	lsls	r2, r3, #4
 8005718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800571a:	4413      	add	r3, r2
 800571c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005720:	653b      	str	r3, [r7, #80]	@ 0x50
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	895b      	ldrh	r3, [r3, #10]
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	b29b      	uxth	r3, r3
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005730:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 8093 	bne.w	8005862 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800574c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01b      	beq.n	8005790 <USB_ActivateEndpoint+0x524>
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800576a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800576e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	441a      	add	r2, r3
 800577a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800577c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005784:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800578c:	b29b      	uxth	r3, r3
 800578e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800579e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80057a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01b      	beq.n	80057e0 <USB_ActivateEndpoint+0x574>
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057be:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80057cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057dc:	b29b      	uxth	r3, r3
 80057de:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80057f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80057fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80057fe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005800:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005802:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005806:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	441a      	add	r2, r3
 8005812:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800581c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005824:	b29b      	uxth	r3, r3
 8005826:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	b29b      	uxth	r3, r3
 8005836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800583a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800583e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	441a      	add	r2, r3
 800584a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800584c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800585c:	b29b      	uxth	r3, r3
 800585e:	8013      	strh	r3, [r2, #0]
 8005860:	e0bc      	b.n	80059dc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005872:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d01d      	beq.n	80058ba <USB_ActivateEndpoint+0x64e>
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005894:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	441a      	add	r2, r3
 80058a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80058a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80058ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80058ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d01d      	beq.n	8005912 <USB_ActivateEndpoint+0x6a6>
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ec:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	441a      	add	r2, r3
 80058fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80058fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800590a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800590e:	b29b      	uxth	r3, r3
 8005910:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	78db      	ldrb	r3, [r3, #3]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d024      	beq.n	8005964 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800592c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005930:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005934:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005938:	f083 0320 	eor.w	r3, r3, #32
 800593c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	441a      	add	r2, r3
 800594a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800595a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]
 8005962:	e01d      	b.n	80059a0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005976:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800597a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	441a      	add	r2, r3
 8005988:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800598c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800599c:	b29b      	uxth	r3, r3
 800599e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	441a      	add	r2, r3
 80059c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80059c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059d8:	b29b      	uxth	r3, r3
 80059da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80059dc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3774      	adds	r7, #116	@ 0x74
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop

080059ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b08d      	sub	sp, #52	@ 0x34
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	7b1b      	ldrb	r3, [r3, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 808e 	bne.w	8005b1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	785b      	ldrb	r3, [r3, #1]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d044      	beq.n	8005a92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	81bb      	strh	r3, [r7, #12]
 8005a16:	89bb      	ldrh	r3, [r7, #12]
 8005a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01b      	beq.n	8005a58 <USB_DeactivateEndpoint+0x6c>
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a36:	817b      	strh	r3, [r7, #10]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	441a      	add	r2, r3
 8005a42:	897b      	ldrh	r3, [r7, #10]
 8005a44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a6e:	813b      	strh	r3, [r7, #8]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	441a      	add	r2, r3
 8005a7a:	893b      	ldrh	r3, [r7, #8]
 8005a7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	8013      	strh	r3, [r2, #0]
 8005a90:	e192      	b.n	8005db8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	827b      	strh	r3, [r7, #18]
 8005aa0:	8a7b      	ldrh	r3, [r7, #18]
 8005aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01b      	beq.n	8005ae2 <USB_DeactivateEndpoint+0xf6>
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac0:	823b      	strh	r3, [r7, #16]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	441a      	add	r2, r3
 8005acc:	8a3b      	ldrh	r3, [r7, #16]
 8005ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005af4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af8:	81fb      	strh	r3, [r7, #14]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	441a      	add	r2, r3
 8005b04:	89fb      	ldrh	r3, [r7, #14]
 8005b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	8013      	strh	r3, [r2, #0]
 8005b1a:	e14d      	b.n	8005db8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f040 80a5 	bne.w	8005c70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	843b      	strh	r3, [r7, #32]
 8005b34:	8c3b      	ldrh	r3, [r7, #32]
 8005b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d01b      	beq.n	8005b76 <USB_DeactivateEndpoint+0x18a>
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b54:	83fb      	strh	r3, [r7, #30]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	441a      	add	r2, r3
 8005b60:	8bfb      	ldrh	r3, [r7, #30]
 8005b62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	83bb      	strh	r3, [r7, #28]
 8005b84:	8bbb      	ldrh	r3, [r7, #28]
 8005b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d01b      	beq.n	8005bc6 <USB_DeactivateEndpoint+0x1da>
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba4:	837b      	strh	r3, [r7, #26]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	441a      	add	r2, r3
 8005bb0:	8b7b      	ldrh	r3, [r7, #26]
 8005bb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bdc:	833b      	strh	r3, [r7, #24]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	441a      	add	r2, r3
 8005be8:	8b3b      	ldrh	r3, [r7, #24]
 8005bea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c14:	82fb      	strh	r3, [r7, #22]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	441a      	add	r2, r3
 8005c20:	8afb      	ldrh	r3, [r7, #22]
 8005c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c4c:	82bb      	strh	r3, [r7, #20]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	441a      	add	r2, r3
 8005c58:	8abb      	ldrh	r3, [r7, #20]
 8005c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	8013      	strh	r3, [r2, #0]
 8005c6e:	e0a3      	b.n	8005db8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005c7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01b      	beq.n	8005cc0 <USB_DeactivateEndpoint+0x2d4>
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c9e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	441a      	add	r2, r3
 8005caa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005cac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005cce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01b      	beq.n	8005d10 <USB_DeactivateEndpoint+0x324>
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cee:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d26:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	441a      	add	r2, r3
 8005d32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d96:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	441a      	add	r2, r3
 8005da2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005da4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005da8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3734      	adds	r7, #52	@ 0x34
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b0c2      	sub	sp, #264	@ 0x108
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dd2:	6018      	str	r0, [r3, #0]
 8005dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ddc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	785b      	ldrb	r3, [r3, #1]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	f040 86b7 	bne.w	8006b5e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	699a      	ldr	r2, [r3, #24]
 8005dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d908      	bls.n	8005e1e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005e1c:	e007      	b.n	8005e2e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	7b1b      	ldrb	r3, [r3, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d13a      	bne.n	8005eb4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6959      	ldr	r1, [r3, #20]
 8005e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	88da      	ldrh	r2, [r3, #6]
 8005e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e64:	6800      	ldr	r0, [r0, #0]
 8005e66:	f001 fc9c 	bl	80077a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	011a      	lsls	r2, r3, #4
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	801a      	strh	r2, [r3, #0]
 8005eb0:	f000 be1f 	b.w	8006af2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	78db      	ldrb	r3, [r3, #3]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	f040 8462 	bne.w	800678a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6a1a      	ldr	r2, [r3, #32]
 8005ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	f240 83df 	bls.w	80066a2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	441a      	add	r2, r3
 8005f28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f34:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6a1a      	ldr	r2, [r3, #32]
 8005f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f50:	1ad2      	subs	r2, r2, r3
 8005f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 81c7 	beq.w	8006314 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d177      	bne.n	8006092 <USB_EPStartXfer+0x2ce>
 8005fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc2:	4413      	add	r3, r2
 8005fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	011a      	lsls	r2, r3, #4
 8005fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ff4:	d921      	bls.n	800603a <USB_EPStartXfer+0x276>
 8005ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <USB_EPStartXfer+0x252>
 800600c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006010:	3b01      	subs	r3, #1
 8006012:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29a      	uxth	r2, r3
 800601c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006020:	b29b      	uxth	r3, r3
 8006022:	029b      	lsls	r3, r3, #10
 8006024:	b29b      	uxth	r3, r3
 8006026:	4313      	orrs	r3, r2
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e050      	b.n	80060dc <USB_EPStartXfer+0x318>
 800603a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10a      	bne.n	8006058 <USB_EPStartXfer+0x294>
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	b29b      	uxth	r3, r3
 8006048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006050:	b29a      	uxth	r2, r3
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	e041      	b.n	80060dc <USB_EPStartXfer+0x318>
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <USB_EPStartXfer+0x2b4>
 800606e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006072:	3301      	adds	r3, #1
 8006074:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29a      	uxth	r2, r3
 800607e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006082:	b29b      	uxth	r3, r3
 8006084:	029b      	lsls	r3, r3, #10
 8006086:	b29b      	uxth	r3, r3
 8006088:	4313      	orrs	r3, r2
 800608a:	b29a      	uxth	r2, r3
 800608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608e:	801a      	strh	r2, [r3, #0]
 8006090:	e024      	b.n	80060dc <USB_EPStartXfer+0x318>
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d11c      	bne.n	80060dc <USB_EPStartXfer+0x318>
 80060a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	4413      	add	r3, r2
 80060b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80060ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	011a      	lsls	r2, r3, #4
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	895b      	ldrh	r3, [r3, #10]
 80060e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6959      	ldr	r1, [r3, #20]
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006102:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006106:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800610a:	6800      	ldr	r0, [r0, #0]
 800610c:	f001 fb49 	bl	80077a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695a      	ldr	r2, [r3, #20]
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006120:	441a      	add	r2, r3
 8006122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800612e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6a1a      	ldr	r2, [r3, #32]
 800613a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	429a      	cmp	r2, r3
 8006148:	d90f      	bls.n	800616a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800614a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6a1a      	ldr	r2, [r3, #32]
 8006156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	621a      	str	r2, [r3, #32]
 8006168:	e00e      	b.n	8006188 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800616a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800617a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2200      	movs	r2, #0
 8006186:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d177      	bne.n	8006288 <USB_EPStartXfer+0x4c4>
 8006198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	61bb      	str	r3, [r7, #24]
 80061a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	4413      	add	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
 80061bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	011a      	lsls	r2, r3, #4
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	4413      	add	r3, r2
 80061ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061de:	b29a      	uxth	r2, r3
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	801a      	strh	r2, [r3, #0]
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80061ea:	d921      	bls.n	8006230 <USB_EPStartXfer+0x46c>
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d104      	bne.n	800620c <USB_EPStartXfer+0x448>
 8006202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006206:	3b01      	subs	r3, #1
 8006208:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29a      	uxth	r2, r3
 8006212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006216:	b29b      	uxth	r3, r3
 8006218:	029b      	lsls	r3, r3, #10
 800621a:	b29b      	uxth	r3, r3
 800621c:	4313      	orrs	r3, r2
 800621e:	b29b      	uxth	r3, r3
 8006220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006228:	b29a      	uxth	r2, r3
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e056      	b.n	80062de <USB_EPStartXfer+0x51a>
 8006230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <USB_EPStartXfer+0x48a>
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006246:	b29a      	uxth	r2, r3
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	e047      	b.n	80062de <USB_EPStartXfer+0x51a>
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <USB_EPStartXfer+0x4aa>
 8006264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006268:	3301      	adds	r3, #1
 800626a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29a      	uxth	r2, r3
 8006274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006278:	b29b      	uxth	r3, r3
 800627a:	029b      	lsls	r3, r3, #10
 800627c:	b29b      	uxth	r3, r3
 800627e:	4313      	orrs	r3, r2
 8006280:	b29a      	uxth	r2, r3
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	e02a      	b.n	80062de <USB_EPStartXfer+0x51a>
 8006288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d122      	bne.n	80062de <USB_EPStartXfer+0x51a>
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	623b      	str	r3, [r7, #32]
 80062a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	4413      	add	r3, r2
 80062ba:	623b      	str	r3, [r7, #32]
 80062bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	011a      	lsls	r2, r3, #4
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	4413      	add	r3, r2
 80062ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d8:	b29a      	uxth	r2, r3
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80062de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	891b      	ldrh	r3, [r3, #8]
 80062ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6959      	ldr	r1, [r3, #20]
 80062fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006304:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006308:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800630c:	6800      	ldr	r0, [r0, #0]
 800630e:	f001 fa48 	bl	80077a2 <USB_WritePMA>
 8006312:	e3ee      	b.n	8006af2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	785b      	ldrb	r3, [r3, #1]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d177      	bne.n	8006414 <USB_EPStartXfer+0x650>
 8006324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006328:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800633e:	b29b      	uxth	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006344:	4413      	add	r3, r2
 8006346:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	011a      	lsls	r2, r3, #4
 8006356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006358:	4413      	add	r3, r2
 800635a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800635e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	b29b      	uxth	r3, r3
 8006366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800636a:	b29a      	uxth	r2, r3
 800636c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006374:	2b3e      	cmp	r3, #62	@ 0x3e
 8006376:	d921      	bls.n	80063bc <USB_EPStartXfer+0x5f8>
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006386:	f003 031f 	and.w	r3, r3, #31
 800638a:	2b00      	cmp	r3, #0
 800638c:	d104      	bne.n	8006398 <USB_EPStartXfer+0x5d4>
 800638e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006392:	3b01      	subs	r3, #1
 8006394:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29a      	uxth	r2, r3
 800639e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	029b      	lsls	r3, r3, #10
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	4313      	orrs	r3, r2
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	e056      	b.n	800646a <USB_EPStartXfer+0x6a6>
 80063bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <USB_EPStartXfer+0x616>
 80063c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063d6:	801a      	strh	r2, [r3, #0]
 80063d8:	e047      	b.n	800646a <USB_EPStartXfer+0x6a6>
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d004      	beq.n	80063fa <USB_EPStartXfer+0x636>
 80063f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063f4:	3301      	adds	r3, #1
 80063f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29a      	uxth	r2, r3
 8006400:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006404:	b29b      	uxth	r3, r3
 8006406:	029b      	lsls	r3, r3, #10
 8006408:	b29b      	uxth	r3, r3
 800640a:	4313      	orrs	r3, r2
 800640c:	b29a      	uxth	r2, r3
 800640e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	e02a      	b.n	800646a <USB_EPStartXfer+0x6a6>
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d122      	bne.n	800646a <USB_EPStartXfer+0x6a6>
 8006424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006428:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800643e:	b29b      	uxth	r3, r3
 8006440:	461a      	mov	r2, r3
 8006442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006444:	4413      	add	r3, r2
 8006446:	653b      	str	r3, [r7, #80]	@ 0x50
 8006448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	011a      	lsls	r2, r3, #4
 8006456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006458:	4413      	add	r3, r2
 800645a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800645e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006464:	b29a      	uxth	r2, r3
 8006466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006468:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800646a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	891b      	ldrh	r3, [r3, #8]
 8006476:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800647a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6959      	ldr	r1, [r3, #20]
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648a:	b29b      	uxth	r3, r3
 800648c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006490:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006494:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006498:	6800      	ldr	r0, [r0, #0]
 800649a:	f001 f982 	bl	80077a2 <USB_WritePMA>
            ep->xfer_buff += len;
 800649e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695a      	ldr	r2, [r3, #20]
 80064aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ae:	441a      	add	r2, r3
 80064b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80064bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6a1a      	ldr	r2, [r3, #32]
 80064c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d90f      	bls.n	80064f8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80064d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6a1a      	ldr	r2, [r3, #32]
 80064e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e8:	1ad2      	subs	r2, r2, r3
 80064ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	621a      	str	r2, [r3, #32]
 80064f6:	e00e      	b.n	8006516 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80064f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2200      	movs	r2, #0
 8006514:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	643b      	str	r3, [r7, #64]	@ 0x40
 8006522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	785b      	ldrb	r3, [r3, #1]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d177      	bne.n	8006622 <USB_EPStartXfer+0x85e>
 8006532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800653e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800654c:	b29b      	uxth	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006552:	4413      	add	r3, r2
 8006554:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	011a      	lsls	r2, r3, #4
 8006564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006566:	4413      	add	r3, r2
 8006568:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800656c:	637b      	str	r3, [r7, #52]	@ 0x34
 800656e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006578:	b29a      	uxth	r2, r3
 800657a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657c:	801a      	strh	r2, [r3, #0]
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006582:	2b3e      	cmp	r3, #62	@ 0x3e
 8006584:	d921      	bls.n	80065ca <USB_EPStartXfer+0x806>
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006594:	f003 031f 	and.w	r3, r3, #31
 8006598:	2b00      	cmp	r3, #0
 800659a:	d104      	bne.n	80065a6 <USB_EPStartXfer+0x7e2>
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a0:	3b01      	subs	r3, #1
 80065a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80065a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	029b      	lsls	r3, r3, #10
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	4313      	orrs	r3, r2
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c6:	801a      	strh	r2, [r3, #0]
 80065c8:	e050      	b.n	800666c <USB_EPStartXfer+0x8a8>
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10a      	bne.n	80065e8 <USB_EPStartXfer+0x824>
 80065d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e4:	801a      	strh	r2, [r3, #0]
 80065e6:	e041      	b.n	800666c <USB_EPStartXfer+0x8a8>
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ec:	085b      	lsrs	r3, r3, #1
 80065ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80065f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d004      	beq.n	8006608 <USB_EPStartXfer+0x844>
 80065fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006602:	3301      	adds	r3, #1
 8006604:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29a      	uxth	r2, r3
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006612:	b29b      	uxth	r3, r3
 8006614:	029b      	lsls	r3, r3, #10
 8006616:	b29b      	uxth	r3, r3
 8006618:	4313      	orrs	r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e024      	b.n	800666c <USB_EPStartXfer+0x8a8>
 8006622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	785b      	ldrb	r3, [r3, #1]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d11c      	bne.n	800666c <USB_EPStartXfer+0x8a8>
 8006632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006640:	b29b      	uxth	r3, r3
 8006642:	461a      	mov	r2, r3
 8006644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006646:	4413      	add	r3, r2
 8006648:	643b      	str	r3, [r7, #64]	@ 0x40
 800664a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	011a      	lsls	r2, r3, #4
 8006658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800665a:	4413      	add	r3, r2
 800665c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006666:	b29a      	uxth	r2, r3
 8006668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800666a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800666c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	895b      	ldrh	r3, [r3, #10]
 8006678:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800667c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6959      	ldr	r1, [r3, #20]
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668c:	b29b      	uxth	r3, r3
 800668e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006692:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006696:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	f001 f881 	bl	80077a2 <USB_WritePMA>
 80066a0:	e227      	b.n	8006af2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80066a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80066b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80066d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80066dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	441a      	add	r2, r3
 80066f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80066fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800670a:	b29b      	uxth	r3, r3
 800670c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800670e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006712:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800671a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006728:	b29b      	uxth	r3, r3
 800672a:	461a      	mov	r2, r3
 800672c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800672e:	4413      	add	r3, r2
 8006730:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	011a      	lsls	r2, r3, #4
 8006740:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006742:	4413      	add	r3, r2
 8006744:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006748:	65bb      	str	r3, [r7, #88]	@ 0x58
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674e:	b29a      	uxth	r2, r3
 8006750:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006752:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	891b      	ldrh	r3, [r3, #8]
 8006760:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6959      	ldr	r1, [r3, #20]
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	b29b      	uxth	r3, r3
 8006776:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800677a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800677e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006782:	6800      	ldr	r0, [r0, #0]
 8006784:	f001 f80d 	bl	80077a2 <USB_WritePMA>
 8006788:	e1b3      	b.n	8006af2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800678a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6a1a      	ldr	r2, [r3, #32]
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	1ad2      	subs	r2, r2, r3
 800679c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 80c6 	beq.w	800695c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	673b      	str	r3, [r7, #112]	@ 0x70
 80067dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d177      	bne.n	80068dc <USB_EPStartXfer+0xb18>
 80067ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006806:	b29b      	uxth	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800680c:	4413      	add	r3, r2
 800680e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	011a      	lsls	r2, r3, #4
 800681e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006820:	4413      	add	r3, r2
 8006822:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006826:	667b      	str	r3, [r7, #100]	@ 0x64
 8006828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006832:	b29a      	uxth	r2, r3
 8006834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006836:	801a      	strh	r2, [r3, #0]
 8006838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683c:	2b3e      	cmp	r3, #62	@ 0x3e
 800683e:	d921      	bls.n	8006884 <USB_EPStartXfer+0xac0>
 8006840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006844:	095b      	lsrs	r3, r3, #5
 8006846:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	2b00      	cmp	r3, #0
 8006854:	d104      	bne.n	8006860 <USB_EPStartXfer+0xa9c>
 8006856:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800685a:	3b01      	subs	r3, #1
 800685c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29a      	uxth	r2, r3
 8006866:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800686a:	b29b      	uxth	r3, r3
 800686c:	029b      	lsls	r3, r3, #10
 800686e:	b29b      	uxth	r3, r3
 8006870:	4313      	orrs	r3, r2
 8006872:	b29b      	uxth	r3, r3
 8006874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687c:	b29a      	uxth	r2, r3
 800687e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	e050      	b.n	8006926 <USB_EPStartXfer+0xb62>
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <USB_EPStartXfer+0xade>
 800688c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689a:	b29a      	uxth	r2, r3
 800689c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	e041      	b.n	8006926 <USB_EPStartXfer+0xb62>
 80068a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a6:	085b      	lsrs	r3, r3, #1
 80068a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d004      	beq.n	80068c2 <USB_EPStartXfer+0xafe>
 80068b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80068bc:	3301      	adds	r3, #1
 80068be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	029b      	lsls	r3, r3, #10
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4313      	orrs	r3, r2
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068d8:	801a      	strh	r2, [r3, #0]
 80068da:	e024      	b.n	8006926 <USB_EPStartXfer+0xb62>
 80068dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	785b      	ldrb	r3, [r3, #1]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d11c      	bne.n	8006926 <USB_EPStartXfer+0xb62>
 80068ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006900:	4413      	add	r3, r2
 8006902:	673b      	str	r3, [r7, #112]	@ 0x70
 8006904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	011a      	lsls	r2, r3, #4
 8006912:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006914:	4413      	add	r3, r2
 8006916:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800691a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006920:	b29a      	uxth	r2, r3
 8006922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006924:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	895b      	ldrh	r3, [r3, #10]
 8006932:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6959      	ldr	r1, [r3, #20]
 8006942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006946:	b29b      	uxth	r3, r3
 8006948:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800694c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006950:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006954:	6800      	ldr	r0, [r0, #0]
 8006956:	f000 ff24 	bl	80077a2 <USB_WritePMA>
 800695a:	e0ca      	b.n	8006af2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800695c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d177      	bne.n	8006a5c <USB_EPStartXfer+0xc98>
 800696c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006986:	b29b      	uxth	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800698c:	4413      	add	r3, r2
 800698e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	011a      	lsls	r2, r3, #4
 800699e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069a0:	4413      	add	r3, r2
 80069a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069b6:	801a      	strh	r2, [r3, #0]
 80069b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80069be:	d921      	bls.n	8006a04 <USB_EPStartXfer+0xc40>
 80069c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80069ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ce:	f003 031f 	and.w	r3, r3, #31
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d104      	bne.n	80069e0 <USB_EPStartXfer+0xc1c>
 80069d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80069da:	3b01      	subs	r3, #1
 80069dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80069e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	029b      	lsls	r3, r3, #10
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	4313      	orrs	r3, r2
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e05c      	b.n	8006abe <USB_EPStartXfer+0xcfa>
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10a      	bne.n	8006a22 <USB_EPStartXfer+0xc5e>
 8006a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	e04d      	b.n	8006abe <USB_EPStartXfer+0xcfa>
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <USB_EPStartXfer+0xc7e>
 8006a38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	029b      	lsls	r3, r3, #10
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	4313      	orrs	r3, r2
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a58:	801a      	strh	r2, [r3, #0]
 8006a5a:	e030      	b.n	8006abe <USB_EPStartXfer+0xcfa>
 8006a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d128      	bne.n	8006abe <USB_EPStartXfer+0xcfa>
 8006a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a90:	4413      	add	r3, r2
 8006a92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	011a      	lsls	r2, r3, #4
 8006aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006aae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006abc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	891b      	ldrh	r3, [r3, #8]
 8006aca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6959      	ldr	r1, [r3, #20]
 8006ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ae4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ae8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006aec:	6800      	ldr	r0, [r0, #0]
 8006aee:	f000 fe58 	bl	80077a2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b18:	817b      	strh	r3, [r7, #10]
 8006b1a:	897b      	ldrh	r3, [r7, #10]
 8006b1c:	f083 0310 	eor.w	r3, r3, #16
 8006b20:	817b      	strh	r3, [r7, #10]
 8006b22:	897b      	ldrh	r3, [r7, #10]
 8006b24:	f083 0320 	eor.w	r3, r3, #32
 8006b28:	817b      	strh	r3, [r7, #10]
 8006b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	441a      	add	r2, r3
 8006b44:	897b      	ldrh	r3, [r7, #10]
 8006b46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	8013      	strh	r3, [r2, #0]
 8006b5a:	f000 bcde 	b.w	800751a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	7b1b      	ldrb	r3, [r3, #12]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f040 80bb 	bne.w	8006ce6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d917      	bls.n	8006bbc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	1ad2      	subs	r2, r2, r3
 8006bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	619a      	str	r2, [r3, #24]
 8006bba:	e00e      	b.n	8006bda <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006bfe:	4413      	add	r3, r2
 8006c00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	011a      	lsls	r2, r3, #4
 8006c12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006c16:	4413      	add	r3, r2
 8006c18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c38:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c3a:	d924      	bls.n	8006c86 <USB_EPStartXfer+0xec2>
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <USB_EPStartXfer+0xe98>
 8006c52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006c56:	3b01      	subs	r3, #1
 8006c58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	029b      	lsls	r3, r3, #10
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	f000 bc10 	b.w	80074a6 <USB_EPStartXfer+0x16e2>
 8006c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10c      	bne.n	8006ca8 <USB_EPStartXfer+0xee4>
 8006c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ca4:	801a      	strh	r2, [r3, #0]
 8006ca6:	e3fe      	b.n	80074a6 <USB_EPStartXfer+0x16e2>
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	085b      	lsrs	r3, r3, #1
 8006cae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <USB_EPStartXfer+0xf04>
 8006cbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	029b      	lsls	r3, r3, #10
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ce2:	801a      	strh	r2, [r3, #0]
 8006ce4:	e3df      	b.n	80074a6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	78db      	ldrb	r3, [r3, #3]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	f040 8218 	bne.w	8007128 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	785b      	ldrb	r3, [r3, #1]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f040 809d 	bne.w	8006e44 <USB_EPStartXfer+0x1080>
 8006d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d2e:	4413      	add	r3, r2
 8006d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	011a      	lsls	r2, r3, #4
 8006d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d46:	4413      	add	r3, r2
 8006d48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d62:	801a      	strh	r2, [r3, #0]
 8006d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d72:	d92b      	bls.n	8006dcc <USB_EPStartXfer+0x1008>
 8006d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f003 031f 	and.w	r3, r3, #31
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d104      	bne.n	8006da4 <USB_EPStartXfer+0xfe0>
 8006d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006da4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	029b      	lsls	r3, r3, #10
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	4313      	orrs	r3, r2
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	e070      	b.n	8006eae <USB_EPStartXfer+0x10ea>
 8006dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10c      	bne.n	8006df6 <USB_EPStartXfer+0x1032>
 8006ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006df2:	801a      	strh	r2, [r3, #0]
 8006df4:	e05b      	b.n	8006eae <USB_EPStartXfer+0x10ea>
 8006df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	085b      	lsrs	r3, r3, #1
 8006e04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d004      	beq.n	8006e26 <USB_EPStartXfer+0x1062>
 8006e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e20:	3301      	adds	r3, #1
 8006e22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	029b      	lsls	r3, r3, #10
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e40:	801a      	strh	r2, [r3, #0]
 8006e42:	e034      	b.n	8006eae <USB_EPStartXfer+0x10ea>
 8006e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	785b      	ldrb	r3, [r3, #1]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d12c      	bne.n	8006eae <USB_EPStartXfer+0x10ea>
 8006e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e78:	4413      	add	r3, r2
 8006e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	011a      	lsls	r2, r3, #4
 8006e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e90:	4413      	add	r3, r2
 8006e92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f040 809d 	bne.w	8007008 <USB_EPStartXfer+0x1244>
 8006ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	011a      	lsls	r2, r3, #4
 8006f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f26:	801a      	strh	r2, [r3, #0]
 8006f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f36:	d92b      	bls.n	8006f90 <USB_EPStartXfer+0x11cc>
 8006f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <USB_EPStartXfer+0x11a4>
 8006f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f62:	3b01      	subs	r3, #1
 8006f64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	029b      	lsls	r3, r3, #10
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f8c:	801a      	strh	r2, [r3, #0]
 8006f8e:	e069      	b.n	8007064 <USB_EPStartXfer+0x12a0>
 8006f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10c      	bne.n	8006fba <USB_EPStartXfer+0x11f6>
 8006fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	e054      	b.n	8007064 <USB_EPStartXfer+0x12a0>
 8006fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d004      	beq.n	8006fea <USB_EPStartXfer+0x1226>
 8006fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	029b      	lsls	r3, r3, #10
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	e02d      	b.n	8007064 <USB_EPStartXfer+0x12a0>
 8007008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d125      	bne.n	8007064 <USB_EPStartXfer+0x12a0>
 8007018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007026:	b29b      	uxth	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800702e:	4413      	add	r3, r2
 8007030:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	011a      	lsls	r2, r3, #4
 8007042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007046:	4413      	add	r3, r2
 8007048:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800704c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	b29a      	uxth	r2, r3
 800705e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007062:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007068:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8218 	beq.w	80074a6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007096:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800709a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <USB_EPStartXfer+0x12ea>
 80070a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80070a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10d      	bne.n	80070ca <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80070b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f040 81f5 	bne.w	80074a6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80070c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f040 81ee 	bne.w	80074a6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80070f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	441a      	add	r2, r3
 800710e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800711a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800711e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007122:	b29b      	uxth	r3, r3
 8007124:	8013      	strh	r3, [r2, #0]
 8007126:	e1be      	b.n	80074a6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	78db      	ldrb	r3, [r3, #3]
 8007134:	2b01      	cmp	r3, #1
 8007136:	f040 81b4 	bne.w	80074a2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800713a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	429a      	cmp	r2, r3
 8007154:	d917      	bls.n	8007186 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007176:	1ad2      	subs	r2, r2, r3
 8007178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	619a      	str	r2, [r3, #24]
 8007184:	e00e      	b.n	80071a4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2200      	movs	r2, #0
 80071a2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80071a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f040 8085 	bne.w	80072c0 <USB_EPStartXfer+0x14fc>
 80071b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80071c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	461a      	mov	r2, r3
 80071d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80071da:	4413      	add	r3, r2
 80071dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80071e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	011a      	lsls	r2, r3, #4
 80071ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80071f2:	4413      	add	r3, r2
 80071f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	b29b      	uxth	r3, r3
 8007204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007208:	b29a      	uxth	r2, r3
 800720a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800720e:	801a      	strh	r2, [r3, #0]
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007214:	2b3e      	cmp	r3, #62	@ 0x3e
 8007216:	d923      	bls.n	8007260 <USB_EPStartXfer+0x149c>
 8007218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721c:	095b      	lsrs	r3, r3, #5
 800721e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <USB_EPStartXfer+0x1474>
 800722e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007232:	3b01      	subs	r3, #1
 8007234:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007238:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29a      	uxth	r2, r3
 8007240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007244:	b29b      	uxth	r3, r3
 8007246:	029b      	lsls	r3, r3, #10
 8007248:	b29b      	uxth	r3, r3
 800724a:	4313      	orrs	r3, r2
 800724c:	b29b      	uxth	r3, r3
 800724e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007256:	b29a      	uxth	r2, r3
 8007258:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800725c:	801a      	strh	r2, [r3, #0]
 800725e:	e060      	b.n	8007322 <USB_EPStartXfer+0x155e>
 8007260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10c      	bne.n	8007282 <USB_EPStartXfer+0x14be>
 8007268:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29b      	uxth	r3, r3
 8007270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007278:	b29a      	uxth	r2, r3
 800727a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800727e:	801a      	strh	r2, [r3, #0]
 8007280:	e04f      	b.n	8007322 <USB_EPStartXfer+0x155e>
 8007282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007286:	085b      	lsrs	r3, r3, #1
 8007288:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800728c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <USB_EPStartXfer+0x14de>
 8007298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800729c:	3301      	adds	r3, #1
 800729e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80072a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	029b      	lsls	r3, r3, #10
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	4313      	orrs	r3, r2
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072bc:	801a      	strh	r2, [r3, #0]
 80072be:	e030      	b.n	8007322 <USB_EPStartXfer+0x155e>
 80072c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d128      	bne.n	8007322 <USB_EPStartXfer+0x155e>
 80072d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80072de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	461a      	mov	r2, r3
 80072f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072f4:	4413      	add	r3, r2
 80072f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80072fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	011a      	lsls	r2, r3, #4
 8007308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800730c:	4413      	add	r3, r2
 800730e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007312:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731a:	b29a      	uxth	r2, r3
 800731c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007320:	801a      	strh	r2, [r3, #0]
 8007322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	2b00      	cmp	r3, #0
 800733e:	f040 8085 	bne.w	800744c <USB_EPStartXfer+0x1688>
 8007342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007346:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800735e:	b29b      	uxth	r3, r3
 8007360:	461a      	mov	r2, r3
 8007362:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007366:	4413      	add	r3, r2
 8007368:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800736c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	011a      	lsls	r2, r3, #4
 800737a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800737e:	4413      	add	r3, r2
 8007380:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007384:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007388:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	b29b      	uxth	r3, r3
 8007390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007394:	b29a      	uxth	r2, r3
 8007396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800739a:	801a      	strh	r2, [r3, #0]
 800739c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80073a2:	d923      	bls.n	80073ec <USB_EPStartXfer+0x1628>
 80073a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a8:	095b      	lsrs	r3, r3, #5
 80073aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <USB_EPStartXfer+0x1600>
 80073ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073be:	3b01      	subs	r3, #1
 80073c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	029b      	lsls	r3, r3, #10
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	4313      	orrs	r3, r2
 80073d8:	b29b      	uxth	r3, r3
 80073da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073e8:	801a      	strh	r2, [r3, #0]
 80073ea:	e05c      	b.n	80074a6 <USB_EPStartXfer+0x16e2>
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10c      	bne.n	800740e <USB_EPStartXfer+0x164a>
 80073f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	e04b      	b.n	80074a6 <USB_EPStartXfer+0x16e2>
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007412:	085b      	lsrs	r3, r3, #1
 8007414:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d004      	beq.n	800742e <USB_EPStartXfer+0x166a>
 8007424:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007428:	3301      	adds	r3, #1
 800742a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800742e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	b29a      	uxth	r2, r3
 8007436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800743a:	b29b      	uxth	r3, r3
 800743c:	029b      	lsls	r3, r3, #10
 800743e:	b29b      	uxth	r3, r3
 8007440:	4313      	orrs	r3, r2
 8007442:	b29a      	uxth	r2, r3
 8007444:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	e02c      	b.n	80074a6 <USB_EPStartXfer+0x16e2>
 800744c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	785b      	ldrb	r3, [r3, #1]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d124      	bne.n	80074a6 <USB_EPStartXfer+0x16e2>
 800745c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800746a:	b29b      	uxth	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007472:	4413      	add	r3, r2
 8007474:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	011a      	lsls	r2, r3, #4
 8007486:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800748a:	4413      	add	r3, r2
 800748c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007498:	b29a      	uxth	r2, r3
 800749a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800749e:	801a      	strh	r2, [r3, #0]
 80074a0:	e001      	b.n	80074a6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e03a      	b.n	800751c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80074d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80074d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80074d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80074dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80074e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80074e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80074e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800750a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800750e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007516:	b29b      	uxth	r3, r3
 8007518:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007526:	b480      	push	{r7}
 8007528:	b085      	sub	sp, #20
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d020      	beq.n	800757a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b29b      	uxth	r3, r3
 8007546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800754a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800754e:	81bb      	strh	r3, [r7, #12]
 8007550:	89bb      	ldrh	r3, [r7, #12]
 8007552:	f083 0310 	eor.w	r3, r3, #16
 8007556:	81bb      	strh	r3, [r7, #12]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	441a      	add	r2, r3
 8007562:	89bb      	ldrh	r3, [r7, #12]
 8007564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800756c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007574:	b29b      	uxth	r3, r3
 8007576:	8013      	strh	r3, [r2, #0]
 8007578:	e01f      	b.n	80075ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29b      	uxth	r3, r3
 8007588:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800758c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007590:	81fb      	strh	r3, [r7, #14]
 8007592:	89fb      	ldrh	r3, [r7, #14]
 8007594:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007598:	81fb      	strh	r3, [r7, #14]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	441a      	add	r2, r3
 80075a4:	89fb      	ldrh	r3, [r7, #14]
 80075a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bc80      	pop	{r7}
 80075c4:	4770      	bx	lr

080075c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b087      	sub	sp, #28
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	7b1b      	ldrb	r3, [r3, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f040 809d 	bne.w	8007714 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	785b      	ldrb	r3, [r3, #1]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d04c      	beq.n	800767c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	823b      	strh	r3, [r7, #16]
 80075f0:	8a3b      	ldrh	r3, [r7, #16]
 80075f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d01b      	beq.n	8007632 <USB_EPClearStall+0x6c>
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800760c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007610:	81fb      	strh	r3, [r7, #14]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	441a      	add	r2, r3
 800761c:	89fb      	ldrh	r3, [r7, #14]
 800761e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800762a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800762e:	b29b      	uxth	r3, r3
 8007630:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	78db      	ldrb	r3, [r3, #3]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d06c      	beq.n	8007714 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	b29b      	uxth	r3, r3
 8007648:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800764c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007650:	81bb      	strh	r3, [r7, #12]
 8007652:	89bb      	ldrh	r3, [r7, #12]
 8007654:	f083 0320 	eor.w	r3, r3, #32
 8007658:	81bb      	strh	r3, [r7, #12]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	441a      	add	r2, r3
 8007664:	89bb      	ldrh	r3, [r7, #12]
 8007666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800766a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800766e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007676:	b29b      	uxth	r3, r3
 8007678:	8013      	strh	r3, [r2, #0]
 800767a:	e04b      	b.n	8007714 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	82fb      	strh	r3, [r7, #22]
 800768a:	8afb      	ldrh	r3, [r7, #22]
 800768c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d01b      	beq.n	80076cc <USB_EPClearStall+0x106>
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076aa:	82bb      	strh	r3, [r7, #20]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	441a      	add	r2, r3
 80076b6:	8abb      	ldrh	r3, [r7, #20]
 80076b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	b29b      	uxth	r3, r3
 80076da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076e2:	827b      	strh	r3, [r7, #18]
 80076e4:	8a7b      	ldrh	r3, [r7, #18]
 80076e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076ea:	827b      	strh	r3, [r7, #18]
 80076ec:	8a7b      	ldrh	r3, [r7, #18]
 80076ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076f2:	827b      	strh	r3, [r7, #18]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	441a      	add	r2, r3
 80076fe:	8a7b      	ldrh	r3, [r7, #18]
 8007700:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007704:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007708:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800770c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007710:	b29b      	uxth	r3, r3
 8007712:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr

08007720 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d103      	bne.n	800773a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2280      	movs	r2, #128	@ 0x80
 8007736:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr

08007746 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	bc80      	pop	{r7}
 8007758:	4770      	bx	lr

0800775a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr

0800776e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800777c:	b29b      	uxth	r3, r3
 800777e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007780:	68fb      	ldr	r3, [r7, #12]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	bc80      	pop	{r7}
 800778a:	4770      	bx	lr

0800778c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr

080077a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b08b      	sub	sp, #44	@ 0x2c
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	4611      	mov	r1, r2
 80077ae:	461a      	mov	r2, r3
 80077b0:	460b      	mov	r3, r1
 80077b2:	80fb      	strh	r3, [r7, #6]
 80077b4:	4613      	mov	r3, r2
 80077b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80077b8:	88bb      	ldrh	r3, [r7, #4]
 80077ba:	3301      	adds	r3, #1
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077c8:	88fb      	ldrh	r3, [r7, #6]
 80077ca:	005a      	lsls	r2, r3, #1
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80077da:	e01e      	b.n	800781a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	3301      	adds	r3, #1
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	b21a      	sxth	r2, r3
 80077ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	b21b      	sxth	r3, r3
 80077f4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	8a7a      	ldrh	r2, [r7, #18]
 80077fa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	3302      	adds	r3, #2
 8007800:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	3302      	adds	r3, #2
 8007806:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	3301      	adds	r3, #1
 800780c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	3301      	adds	r3, #1
 8007812:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007816:	3b01      	subs	r3, #1
 8007818:	627b      	str	r3, [r7, #36]	@ 0x24
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1dd      	bne.n	80077dc <USB_WritePMA+0x3a>
  }
}
 8007820:	bf00      	nop
 8007822:	bf00      	nop
 8007824:	372c      	adds	r7, #44	@ 0x2c
 8007826:	46bd      	mov	sp, r7
 8007828:	bc80      	pop	{r7}
 800782a:	4770      	bx	lr

0800782c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800782c:	b480      	push	{r7}
 800782e:	b08b      	sub	sp, #44	@ 0x2c
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	4611      	mov	r1, r2
 8007838:	461a      	mov	r2, r3
 800783a:	460b      	mov	r3, r1
 800783c:	80fb      	strh	r3, [r7, #6]
 800783e:	4613      	mov	r3, r2
 8007840:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007842:	88bb      	ldrh	r3, [r7, #4]
 8007844:	085b      	lsrs	r3, r3, #1
 8007846:	b29b      	uxth	r3, r3
 8007848:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	005a      	lsls	r2, r3, #1
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800785e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
 8007864:	e01b      	b.n	800789e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	3302      	adds	r3, #2
 8007872:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	b2da      	uxtb	r2, r3
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	3301      	adds	r3, #1
 8007880:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	0a1b      	lsrs	r3, r3, #8
 8007886:	b2da      	uxtb	r2, r3
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	3301      	adds	r3, #1
 8007890:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	3302      	adds	r3, #2
 8007896:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789a:	3b01      	subs	r3, #1
 800789c:	627b      	str	r3, [r7, #36]	@ 0x24
 800789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e0      	bne.n	8007866 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80078a4:	88bb      	ldrh	r3, [r7, #4]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d007      	beq.n	80078c0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	701a      	strb	r2, [r3, #0]
  }
}
 80078c0:	bf00      	nop
 80078c2:	372c      	adds	r7, #44	@ 0x2c
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc80      	pop	{r7}
 80078c8:	4770      	bx	lr

080078ca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	460b      	mov	r3, r1
 80078d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	7c1b      	ldrb	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d115      	bne.n	800790e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078e6:	2202      	movs	r2, #2
 80078e8:	2181      	movs	r1, #129	@ 0x81
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f004 fc05 	bl	800c0fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078fa:	2202      	movs	r2, #2
 80078fc:	2101      	movs	r1, #1
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f004 fbfb 	bl	800c0fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800790c:	e012      	b.n	8007934 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800790e:	2340      	movs	r3, #64	@ 0x40
 8007910:	2202      	movs	r2, #2
 8007912:	2181      	movs	r1, #129	@ 0x81
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f004 fbf0 	bl	800c0fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007920:	2340      	movs	r3, #64	@ 0x40
 8007922:	2202      	movs	r2, #2
 8007924:	2101      	movs	r1, #1
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f004 fbe7 	bl	800c0fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007934:	2308      	movs	r3, #8
 8007936:	2203      	movs	r2, #3
 8007938:	2182      	movs	r1, #130	@ 0x82
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f004 fbdd 	bl	800c0fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007946:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800794a:	f004 fcfd 	bl	800c348 <USBD_static_malloc>
 800794e:	4602      	mov	r2, r0
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007960:	2301      	movs	r3, #1
 8007962:	73fb      	strb	r3, [r7, #15]
 8007964:	e026      	b.n	80079b4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800796c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	7c1b      	ldrb	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d109      	bne.n	80079a4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007996:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800799a:	2101      	movs	r1, #1
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f004 fc9c 	bl	800c2da <USBD_LL_PrepareReceive>
 80079a2:	e007      	b.n	80079b4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079aa:	2340      	movs	r3, #64	@ 0x40
 80079ac:	2101      	movs	r1, #1
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f004 fc93 	bl	800c2da <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	460b      	mov	r3, r1
 80079c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079ce:	2181      	movs	r1, #129	@ 0x81
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f004 fbb8 	bl	800c146 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079dc:	2101      	movs	r1, #1
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f004 fbb1 	bl	800c146 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079ec:	2182      	movs	r1, #130	@ 0x82
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f004 fba9 	bl	800c146 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00e      	beq.n	8007a22 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a14:	4618      	mov	r0, r3
 8007a16:	f004 fca3 	bl	800c360 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a3c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d039      	beq.n	8007aca <USBD_CDC_Setup+0x9e>
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d17f      	bne.n	8007b5a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	88db      	ldrh	r3, [r3, #6]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d029      	beq.n	8007ab6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	b25b      	sxtb	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	da11      	bge.n	8007a90 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007a78:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	88d2      	ldrh	r2, [r2, #6]
 8007a7e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a80:	6939      	ldr	r1, [r7, #16]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	88db      	ldrh	r3, [r3, #6]
 8007a86:	461a      	mov	r2, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fa05 	bl	8008e98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007a8e:	e06b      	b.n	8007b68 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	785a      	ldrb	r2, [r3, #1]
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	88db      	ldrh	r3, [r3, #6]
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007aa6:	6939      	ldr	r1, [r7, #16]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	88db      	ldrh	r3, [r3, #6]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 fa20 	bl	8008ef4 <USBD_CtlPrepareRx>
      break;
 8007ab4:	e058      	b.n	8007b68 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	7850      	ldrb	r0, [r2, #1]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	4798      	blx	r3
      break;
 8007ac8:	e04e      	b.n	8007b68 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	785b      	ldrb	r3, [r3, #1]
 8007ace:	2b0b      	cmp	r3, #11
 8007ad0:	d02e      	beq.n	8007b30 <USBD_CDC_Setup+0x104>
 8007ad2:	2b0b      	cmp	r3, #11
 8007ad4:	dc38      	bgt.n	8007b48 <USBD_CDC_Setup+0x11c>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <USBD_CDC_Setup+0xb4>
 8007ada:	2b0a      	cmp	r3, #10
 8007adc:	d014      	beq.n	8007b08 <USBD_CDC_Setup+0xdc>
 8007ade:	e033      	b.n	8007b48 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d107      	bne.n	8007afa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007aea:	f107 030c 	add.w	r3, r7, #12
 8007aee:	2202      	movs	r2, #2
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f001 f9d0 	bl	8008e98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007af8:	e02e      	b.n	8007b58 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 f961 	bl	8008dc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b02:	2302      	movs	r3, #2
 8007b04:	75fb      	strb	r3, [r7, #23]
          break;
 8007b06:	e027      	b.n	8007b58 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d107      	bne.n	8007b22 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b12:	f107 030f 	add.w	r3, r7, #15
 8007b16:	2201      	movs	r2, #1
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 f9bc 	bl	8008e98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b20:	e01a      	b.n	8007b58 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 f94d 	bl	8008dc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b2e:	e013      	b.n	8007b58 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d00d      	beq.n	8007b56 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f941 	bl	8008dc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b42:	2302      	movs	r3, #2
 8007b44:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b46:	e006      	b.n	8007b56 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 f93a 	bl	8008dc4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b50:	2302      	movs	r3, #2
 8007b52:	75fb      	strb	r3, [r7, #23]
          break;
 8007b54:	e000      	b.n	8007b58 <USBD_CDC_Setup+0x12c>
          break;
 8007b56:	bf00      	nop
      }
      break;
 8007b58:	e006      	b.n	8007b68 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 f931 	bl	8008dc4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b62:	2302      	movs	r3, #2
 8007b64:	75fb      	strb	r3, [r7, #23]
      break;
 8007b66:	bf00      	nop
  }

  return ret;
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b84:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007b8c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d03a      	beq.n	8007c0e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b98:	78fa      	ldrb	r2, [r7, #3]
 8007b9a:	6879      	ldr	r1, [r7, #4]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4413      	add	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	440b      	add	r3, r1
 8007ba6:	331c      	adds	r3, #28
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d029      	beq.n	8007c02 <USBD_CDC_DataIn+0x90>
 8007bae:	78fa      	ldrb	r2, [r7, #3]
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	440b      	add	r3, r1
 8007bbc:	331c      	adds	r3, #28
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	78f9      	ldrb	r1, [r7, #3]
 8007bc2:	68b8      	ldr	r0, [r7, #8]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	4403      	add	r3, r0
 8007bce:	3320      	adds	r3, #32
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	fbb2 f1f3 	udiv	r1, r2, r3
 8007bd6:	fb01 f303 	mul.w	r3, r1, r3
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d110      	bne.n	8007c02 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	331c      	adds	r3, #28
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007bf4:	78f9      	ldrb	r1, [r7, #3]
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f004 fb4a 	bl	800c294 <USBD_LL_Transmit>
 8007c00:	e003      	b.n	8007c0a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e000      	b.n	8007c10 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007c0e:	2302      	movs	r3, #2
  }
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f004 fb75 	bl	800c320 <USBD_LL_GetRxDataSize>
 8007c36:	4602      	mov	r2, r0
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00d      	beq.n	8007c64 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4798      	blx	r3

    return USBD_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	e000      	b.n	8007c66 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007c64:	2302      	movs	r3, #2
  }
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c7c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d014      	beq.n	8007cb2 <USBD_CDC_EP0_RxReady+0x44>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007c8e:	2bff      	cmp	r3, #255	@ 0xff
 8007c90:	d00f      	beq.n	8007cb2 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007ca0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ca8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	22ff      	movs	r2, #255	@ 0xff
 8007cae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2243      	movs	r2, #67	@ 0x43
 8007cc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007cca:	4b03      	ldr	r3, [pc, #12]	@ (8007cd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20000094 	.word	0x20000094

08007cdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2243      	movs	r2, #67	@ 0x43
 8007ce8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007cea:	4b03      	ldr	r3, [pc, #12]	@ (8007cf8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	20000050 	.word	0x20000050

08007cfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2243      	movs	r2, #67	@ 0x43
 8007d08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007d0a:	4b03      	ldr	r3, [pc, #12]	@ (8007d18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	200000d8 	.word	0x200000d8

08007d1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	220a      	movs	r2, #10
 8007d28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007d2a:	4b03      	ldr	r3, [pc, #12]	@ (8007d38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	2000000c 	.word	0x2000000c

08007d3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007d46:	2302      	movs	r3, #2
 8007d48:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d005      	beq.n	8007d5c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bc80      	pop	{r7}
 8007d66:	4770      	bx	lr

08007d68 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d7c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007d86:	88fa      	ldrh	r2, [r7, #6]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	371c      	adds	r7, #28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr

08007d9a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007daa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bc80      	pop	{r7}
 8007dbe:	4770      	bx	lr

08007dc0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01c      	beq.n	8007e14 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d115      	bne.n	8007e10 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2181      	movs	r1, #129	@ 0x81
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f004 fa44 	bl	800c294 <USBD_LL_Transmit>

      return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e002      	b.n	8007e16 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007e14:	2302      	movs	r3, #2
  }
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d017      	beq.n	8007e68 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7c1b      	ldrb	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d109      	bne.n	8007e54 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f004 fa44 	bl	800c2da <USBD_LL_PrepareReceive>
 8007e52:	e007      	b.n	8007e64 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e5a:	2340      	movs	r3, #64	@ 0x40
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f004 fa3b 	bl	800c2da <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	e000      	b.n	8007e6a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007e68:	2302      	movs	r3, #2
  }
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e86:	2302      	movs	r3, #2
 8007e88:	e01a      	b.n	8007ec0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	79fa      	ldrb	r2, [r7, #7]
 8007eb6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f004 f8a9 	bl	800c010 <USBD_LL_Init>

  return USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d006      	beq.n	8007eea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]
 8007ee8:	e001      	b.n	8007eee <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007eea:	2302      	movs	r3, #2
 8007eec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr

08007efa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f004 f8de 	bl	800c0c4 <USBD_LL_Start>

  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc80      	pop	{r7}
 8007f24:	4770      	bx	lr

08007f26 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f32:	2302      	movs	r3, #2
 8007f34:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00c      	beq.n	8007f5a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	78fa      	ldrb	r2, [r7, #3]
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	4798      	blx	r3
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	78fa      	ldrb	r2, [r7, #3]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	4798      	blx	r3

  return USBD_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fed8 	bl	8008d52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007fbe:	f003 031f 	and.w	r3, r3, #31
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d016      	beq.n	8007ff4 <USBD_LL_SetupStage+0x6a>
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d81c      	bhi.n	8008004 <USBD_LL_SetupStage+0x7a>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <USBD_LL_SetupStage+0x4a>
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d008      	beq.n	8007fe4 <USBD_LL_SetupStage+0x5a>
 8007fd2:	e017      	b.n	8008004 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f9cb 	bl	8008378 <USBD_StdDevReq>
      break;
 8007fe2:	e01a      	b.n	800801a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fa2d 	bl	800844c <USBD_StdItfReq>
      break;
 8007ff2:	e012      	b.n	800801a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa6d 	bl	80084dc <USBD_StdEPReq>
      break;
 8008002:	e00a      	b.n	800801a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800800a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800800e:	b2db      	uxtb	r3, r3
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f004 f8b6 	bl	800c184 <USBD_LL_StallEP>
      break;
 8008018:	bf00      	nop
  }

  return USBD_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	460b      	mov	r3, r1
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008032:	7afb      	ldrb	r3, [r7, #11]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d14b      	bne.n	80080d0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800803e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008046:	2b03      	cmp	r3, #3
 8008048:	d134      	bne.n	80080b4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	429a      	cmp	r2, r3
 8008054:	d919      	bls.n	800808a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	1ad2      	subs	r2, r2, r3
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800806c:	429a      	cmp	r2, r3
 800806e:	d203      	bcs.n	8008078 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008074:	b29b      	uxth	r3, r3
 8008076:	e002      	b.n	800807e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800807c:	b29b      	uxth	r3, r3
 800807e:	461a      	mov	r2, r3
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 ff54 	bl	8008f30 <USBD_CtlContinueRx>
 8008088:	e038      	b.n	80080fc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800809c:	2b03      	cmp	r3, #3
 800809e:	d105      	bne.n	80080ac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 ff51 	bl	8008f54 <USBD_CtlSendStatus>
 80080b2:	e023      	b.n	80080fc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80080ba:	2b05      	cmp	r3, #5
 80080bc:	d11e      	bne.n	80080fc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80080c6:	2100      	movs	r1, #0
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f004 f85b 	bl	800c184 <USBD_LL_StallEP>
 80080ce:	e015      	b.n	80080fc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00d      	beq.n	80080f8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d108      	bne.n	80080f8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	7afa      	ldrb	r2, [r7, #11]
 80080f0:	4611      	mov	r1, r2
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	4798      	blx	r3
 80080f6:	e001      	b.n	80080fc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080f8:	2302      	movs	r3, #2
 80080fa:	e000      	b.n	80080fe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b086      	sub	sp, #24
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	460b      	mov	r3, r1
 8008110:	607a      	str	r2, [r7, #4]
 8008112:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008114:	7afb      	ldrb	r3, [r7, #11]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d17f      	bne.n	800821a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3314      	adds	r3, #20
 800811e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008126:	2b02      	cmp	r3, #2
 8008128:	d15c      	bne.n	80081e4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	429a      	cmp	r2, r3
 8008134:	d915      	bls.n	8008162 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	1ad2      	subs	r2, r2, r3
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	b29b      	uxth	r3, r3
 800814a:	461a      	mov	r2, r3
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 febe 	bl	8008ed0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008154:	2300      	movs	r3, #0
 8008156:	2200      	movs	r2, #0
 8008158:	2100      	movs	r1, #0
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f004 f8bd 	bl	800c2da <USBD_LL_PrepareReceive>
 8008160:	e04e      	b.n	8008200 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	6912      	ldr	r2, [r2, #16]
 800816a:	fbb3 f1f2 	udiv	r1, r3, r2
 800816e:	fb01 f202 	mul.w	r2, r1, r2
 8008172:	1a9b      	subs	r3, r3, r2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d11c      	bne.n	80081b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008180:	429a      	cmp	r2, r3
 8008182:	d316      	bcc.n	80081b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	689a      	ldr	r2, [r3, #8]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800818e:	429a      	cmp	r2, r3
 8008190:	d20f      	bcs.n	80081b2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008192:	2200      	movs	r2, #0
 8008194:	2100      	movs	r1, #0
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 fe9a 	bl	8008ed0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081a4:	2300      	movs	r3, #0
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f004 f895 	bl	800c2da <USBD_LL_PrepareReceive>
 80081b0:	e026      	b.n	8008200 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d105      	bne.n	80081d4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80081d4:	2180      	movs	r1, #128	@ 0x80
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f003 ffd4 	bl	800c184 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 fecc 	bl	8008f7a <USBD_CtlReceiveStatus>
 80081e2:	e00d      	b.n	8008200 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d004      	beq.n	80081f8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d103      	bne.n	8008200 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80081f8:	2180      	movs	r1, #128	@ 0x80
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f003 ffc2 	bl	800c184 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008206:	2b01      	cmp	r3, #1
 8008208:	d11d      	bne.n	8008246 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7ff fe81 	bl	8007f12 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008218:	e015      	b.n	8008246 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00d      	beq.n	8008242 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800822c:	2b03      	cmp	r3, #3
 800822e:	d108      	bne.n	8008242 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	7afa      	ldrb	r2, [r7, #11]
 800823a:	4611      	mov	r1, r2
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	4798      	blx	r3
 8008240:	e001      	b.n	8008246 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008242:	2302      	movs	r3, #2
 8008244:	e000      	b.n	8008248 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008258:	2340      	movs	r3, #64	@ 0x40
 800825a:	2200      	movs	r2, #0
 800825c:	2100      	movs	r1, #0
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f003 ff4b 	bl	800c0fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2240      	movs	r2, #64	@ 0x40
 8008270:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008274:	2340      	movs	r3, #64	@ 0x40
 8008276:	2200      	movs	r2, #0
 8008278:	2180      	movs	r1, #128	@ 0x80
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f003 ff3d 	bl	800c0fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2240      	movs	r2, #64	@ 0x40
 800828a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d009      	beq.n	80082c8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	6852      	ldr	r2, [r2, #4]
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	4611      	mov	r1, r2
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	4798      	blx	r3
  }

  return USBD_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	78fa      	ldrb	r2, [r7, #3]
 80082e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bc80      	pop	{r7}
 80082ee:	4770      	bx	lr

080082f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2204      	movs	r2, #4
 8008308:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	bc80      	pop	{r7}
 8008316:	4770      	bx	lr

08008318 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008326:	2b04      	cmp	r3, #4
 8008328:	d105      	bne.n	8008336 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	bc80      	pop	{r7}
 8008340:	4770      	bx	lr

08008342 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b082      	sub	sp, #8
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008350:	2b03      	cmp	r3, #3
 8008352:	d10b      	bne.n	800836c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800838e:	2b40      	cmp	r3, #64	@ 0x40
 8008390:	d005      	beq.n	800839e <USBD_StdDevReq+0x26>
 8008392:	2b40      	cmp	r3, #64	@ 0x40
 8008394:	d84f      	bhi.n	8008436 <USBD_StdDevReq+0xbe>
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <USBD_StdDevReq+0x36>
 800839a:	2b20      	cmp	r3, #32
 800839c:	d14b      	bne.n	8008436 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	4798      	blx	r3
      break;
 80083ac:	e048      	b.n	8008440 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	785b      	ldrb	r3, [r3, #1]
 80083b2:	2b09      	cmp	r3, #9
 80083b4:	d839      	bhi.n	800842a <USBD_StdDevReq+0xb2>
 80083b6:	a201      	add	r2, pc, #4	@ (adr r2, 80083bc <USBD_StdDevReq+0x44>)
 80083b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083bc:	0800840d 	.word	0x0800840d
 80083c0:	08008421 	.word	0x08008421
 80083c4:	0800842b 	.word	0x0800842b
 80083c8:	08008417 	.word	0x08008417
 80083cc:	0800842b 	.word	0x0800842b
 80083d0:	080083ef 	.word	0x080083ef
 80083d4:	080083e5 	.word	0x080083e5
 80083d8:	0800842b 	.word	0x0800842b
 80083dc:	08008403 	.word	0x08008403
 80083e0:	080083f9 	.word	0x080083f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f9dc 	bl	80087a4 <USBD_GetDescriptor>
          break;
 80083ec:	e022      	b.n	8008434 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fb3f 	bl	8008a74 <USBD_SetAddress>
          break;
 80083f6:	e01d      	b.n	8008434 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fb7e 	bl	8008afc <USBD_SetConfig>
          break;
 8008400:	e018      	b.n	8008434 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fc07 	bl	8008c18 <USBD_GetConfig>
          break;
 800840a:	e013      	b.n	8008434 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fc37 	bl	8008c82 <USBD_GetStatus>
          break;
 8008414:	e00e      	b.n	8008434 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fc65 	bl	8008ce8 <USBD_SetFeature>
          break;
 800841e:	e009      	b.n	8008434 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fc74 	bl	8008d10 <USBD_ClrFeature>
          break;
 8008428:	e004      	b.n	8008434 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fcc9 	bl	8008dc4 <USBD_CtlError>
          break;
 8008432:	bf00      	nop
      }
      break;
 8008434:	e004      	b.n	8008440 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fcc3 	bl	8008dc4 <USBD_CtlError>
      break;
 800843e:	bf00      	nop
  }

  return ret;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop

0800844c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008462:	2b40      	cmp	r3, #64	@ 0x40
 8008464:	d005      	beq.n	8008472 <USBD_StdItfReq+0x26>
 8008466:	2b40      	cmp	r3, #64	@ 0x40
 8008468:	d82e      	bhi.n	80084c8 <USBD_StdItfReq+0x7c>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <USBD_StdItfReq+0x26>
 800846e:	2b20      	cmp	r3, #32
 8008470:	d12a      	bne.n	80084c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008478:	3b01      	subs	r3, #1
 800847a:	2b02      	cmp	r3, #2
 800847c:	d81d      	bhi.n	80084ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	889b      	ldrh	r3, [r3, #4]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b01      	cmp	r3, #1
 8008486:	d813      	bhi.n	80084b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	4798      	blx	r3
 8008496:	4603      	mov	r3, r0
 8008498:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	88db      	ldrh	r3, [r3, #6]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d110      	bne.n	80084c4 <USBD_StdItfReq+0x78>
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10d      	bne.n	80084c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fd53 	bl	8008f54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084ae:	e009      	b.n	80084c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fc86 	bl	8008dc4 <USBD_CtlError>
          break;
 80084b8:	e004      	b.n	80084c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fc81 	bl	8008dc4 <USBD_CtlError>
          break;
 80084c2:	e000      	b.n	80084c6 <USBD_StdItfReq+0x7a>
          break;
 80084c4:	bf00      	nop
      }
      break;
 80084c6:	e004      	b.n	80084d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fc7a 	bl	8008dc4 <USBD_CtlError>
      break;
 80084d0:	bf00      	nop
  }

  return USBD_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	889b      	ldrh	r3, [r3, #4]
 80084ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084f8:	2b40      	cmp	r3, #64	@ 0x40
 80084fa:	d007      	beq.n	800850c <USBD_StdEPReq+0x30>
 80084fc:	2b40      	cmp	r3, #64	@ 0x40
 80084fe:	f200 8146 	bhi.w	800878e <USBD_StdEPReq+0x2b2>
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <USBD_StdEPReq+0x40>
 8008506:	2b20      	cmp	r3, #32
 8008508:	f040 8141 	bne.w	800878e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	4798      	blx	r3
      break;
 800851a:	e13d      	b.n	8008798 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008524:	2b20      	cmp	r3, #32
 8008526:	d10a      	bne.n	800853e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	4798      	blx	r3
 8008536:	4603      	mov	r3, r0
 8008538:	73fb      	strb	r3, [r7, #15]

        return ret;
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	e12d      	b.n	800879a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	785b      	ldrb	r3, [r3, #1]
 8008542:	2b03      	cmp	r3, #3
 8008544:	d007      	beq.n	8008556 <USBD_StdEPReq+0x7a>
 8008546:	2b03      	cmp	r3, #3
 8008548:	f300 811b 	bgt.w	8008782 <USBD_StdEPReq+0x2a6>
 800854c:	2b00      	cmp	r3, #0
 800854e:	d072      	beq.n	8008636 <USBD_StdEPReq+0x15a>
 8008550:	2b01      	cmp	r3, #1
 8008552:	d03a      	beq.n	80085ca <USBD_StdEPReq+0xee>
 8008554:	e115      	b.n	8008782 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855c:	2b02      	cmp	r3, #2
 800855e:	d002      	beq.n	8008566 <USBD_StdEPReq+0x8a>
 8008560:	2b03      	cmp	r3, #3
 8008562:	d015      	beq.n	8008590 <USBD_StdEPReq+0xb4>
 8008564:	e02b      	b.n	80085be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00c      	beq.n	8008586 <USBD_StdEPReq+0xaa>
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	2b80      	cmp	r3, #128	@ 0x80
 8008570:	d009      	beq.n	8008586 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f003 fe04 	bl	800c184 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800857c:	2180      	movs	r1, #128	@ 0x80
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f003 fe00 	bl	800c184 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008584:	e020      	b.n	80085c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fc1b 	bl	8008dc4 <USBD_CtlError>
              break;
 800858e:	e01b      	b.n	80085c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	885b      	ldrh	r3, [r3, #2]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10e      	bne.n	80085b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00b      	beq.n	80085b6 <USBD_StdEPReq+0xda>
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	2b80      	cmp	r3, #128	@ 0x80
 80085a2:	d008      	beq.n	80085b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	88db      	ldrh	r3, [r3, #6]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d104      	bne.n	80085b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f003 fde7 	bl	800c184 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fccc 	bl	8008f54 <USBD_CtlSendStatus>

              break;
 80085bc:	e004      	b.n	80085c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fbff 	bl	8008dc4 <USBD_CtlError>
              break;
 80085c6:	bf00      	nop
          }
          break;
 80085c8:	e0e0      	b.n	800878c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d002      	beq.n	80085da <USBD_StdEPReq+0xfe>
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d015      	beq.n	8008604 <USBD_StdEPReq+0x128>
 80085d8:	e026      	b.n	8008628 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00c      	beq.n	80085fa <USBD_StdEPReq+0x11e>
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b80      	cmp	r3, #128	@ 0x80
 80085e4:	d009      	beq.n	80085fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f003 fdca 	bl	800c184 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80085f0:	2180      	movs	r1, #128	@ 0x80
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f003 fdc6 	bl	800c184 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085f8:	e01c      	b.n	8008634 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fbe1 	bl	8008dc4 <USBD_CtlError>
              break;
 8008602:	e017      	b.n	8008634 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	885b      	ldrh	r3, [r3, #2]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d112      	bne.n	8008632 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008612:	2b00      	cmp	r3, #0
 8008614:	d004      	beq.n	8008620 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f003 fdd1 	bl	800c1c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fc97 	bl	8008f54 <USBD_CtlSendStatus>
              }
              break;
 8008626:	e004      	b.n	8008632 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fbca 	bl	8008dc4 <USBD_CtlError>
              break;
 8008630:	e000      	b.n	8008634 <USBD_StdEPReq+0x158>
              break;
 8008632:	bf00      	nop
          }
          break;
 8008634:	e0aa      	b.n	800878c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800863c:	2b02      	cmp	r3, #2
 800863e:	d002      	beq.n	8008646 <USBD_StdEPReq+0x16a>
 8008640:	2b03      	cmp	r3, #3
 8008642:	d032      	beq.n	80086aa <USBD_StdEPReq+0x1ce>
 8008644:	e097      	b.n	8008776 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d007      	beq.n	800865c <USBD_StdEPReq+0x180>
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	2b80      	cmp	r3, #128	@ 0x80
 8008650:	d004      	beq.n	800865c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fbb5 	bl	8008dc4 <USBD_CtlError>
                break;
 800865a:	e091      	b.n	8008780 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800865c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008660:	2b00      	cmp	r3, #0
 8008662:	da0b      	bge.n	800867c <USBD_StdEPReq+0x1a0>
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	3310      	adds	r3, #16
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	4413      	add	r3, r2
 8008678:	3304      	adds	r3, #4
 800867a:	e00b      	b.n	8008694 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	4413      	add	r3, r2
 8008692:	3304      	adds	r3, #4
 8008694:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2202      	movs	r2, #2
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fbf8 	bl	8008e98 <USBD_CtlSendData>
              break;
 80086a8:	e06a      	b.n	8008780 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	da11      	bge.n	80086d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	f003 020f 	and.w	r2, r3, #15
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	440b      	add	r3, r1
 80086c4:	3318      	adds	r3, #24
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d117      	bne.n	80086fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fb78 	bl	8008dc4 <USBD_CtlError>
                  break;
 80086d4:	e054      	b.n	8008780 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
 80086d8:	f003 020f 	and.w	r2, r3, #15
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	440b      	add	r3, r1
 80086e8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d104      	bne.n	80086fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fb65 	bl	8008dc4 <USBD_CtlError>
                  break;
 80086fa:	e041      	b.n	8008780 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008700:	2b00      	cmp	r3, #0
 8008702:	da0b      	bge.n	800871c <USBD_StdEPReq+0x240>
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	3310      	adds	r3, #16
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	4413      	add	r3, r2
 8008718:	3304      	adds	r3, #4
 800871a:	e00b      	b.n	8008734 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008722:	4613      	mov	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	4413      	add	r3, r2
 8008732:	3304      	adds	r3, #4
 8008734:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <USBD_StdEPReq+0x266>
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	2b80      	cmp	r3, #128	@ 0x80
 8008740:	d103      	bne.n	800874a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2200      	movs	r2, #0
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	e00e      	b.n	8008768 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f003 fd56 	bl	800c200 <USBD_LL_IsStallEP>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2201      	movs	r2, #1
 800875e:	601a      	str	r2, [r3, #0]
 8008760:	e002      	b.n	8008768 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2200      	movs	r2, #0
 8008766:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2202      	movs	r2, #2
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fb92 	bl	8008e98 <USBD_CtlSendData>
              break;
 8008774:	e004      	b.n	8008780 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fb23 	bl	8008dc4 <USBD_CtlError>
              break;
 800877e:	bf00      	nop
          }
          break;
 8008780:	e004      	b.n	800878c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb1d 	bl	8008dc4 <USBD_CtlError>
          break;
 800878a:	bf00      	nop
      }
      break;
 800878c:	e004      	b.n	8008798 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fb17 	bl	8008dc4 <USBD_CtlError>
      break;
 8008796:	bf00      	nop
  }

  return ret;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	885b      	ldrh	r3, [r3, #2]
 80087be:	0a1b      	lsrs	r3, r3, #8
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	3b01      	subs	r3, #1
 80087c4:	2b06      	cmp	r3, #6
 80087c6:	f200 8128 	bhi.w	8008a1a <USBD_GetDescriptor+0x276>
 80087ca:	a201      	add	r2, pc, #4	@ (adr r2, 80087d0 <USBD_GetDescriptor+0x2c>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	080087ed 	.word	0x080087ed
 80087d4:	08008805 	.word	0x08008805
 80087d8:	08008845 	.word	0x08008845
 80087dc:	08008a1b 	.word	0x08008a1b
 80087e0:	08008a1b 	.word	0x08008a1b
 80087e4:	080089bb 	.word	0x080089bb
 80087e8:	080089e7 	.word	0x080089e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	7c12      	ldrb	r2, [r2, #16]
 80087f8:	f107 0108 	add.w	r1, r7, #8
 80087fc:	4610      	mov	r0, r2
 80087fe:	4798      	blx	r3
 8008800:	60f8      	str	r0, [r7, #12]
      break;
 8008802:	e112      	b.n	8008a2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	7c1b      	ldrb	r3, [r3, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10d      	bne.n	8008828 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008814:	f107 0208 	add.w	r2, r7, #8
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3301      	adds	r3, #1
 8008822:	2202      	movs	r2, #2
 8008824:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008826:	e100      	b.n	8008a2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800882e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008830:	f107 0208 	add.w	r2, r7, #8
 8008834:	4610      	mov	r0, r2
 8008836:	4798      	blx	r3
 8008838:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	2202      	movs	r2, #2
 8008840:	701a      	strb	r2, [r3, #0]
      break;
 8008842:	e0f2      	b.n	8008a2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	885b      	ldrh	r3, [r3, #2]
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b05      	cmp	r3, #5
 800884c:	f200 80ac 	bhi.w	80089a8 <USBD_GetDescriptor+0x204>
 8008850:	a201      	add	r2, pc, #4	@ (adr r2, 8008858 <USBD_GetDescriptor+0xb4>)
 8008852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008856:	bf00      	nop
 8008858:	08008871 	.word	0x08008871
 800885c:	080088a5 	.word	0x080088a5
 8008860:	080088d9 	.word	0x080088d9
 8008864:	0800890d 	.word	0x0800890d
 8008868:	08008941 	.word	0x08008941
 800886c:	08008975 	.word	0x08008975
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00b      	beq.n	8008894 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	7c12      	ldrb	r2, [r2, #16]
 8008888:	f107 0108 	add.w	r1, r7, #8
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3
 8008890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008892:	e091      	b.n	80089b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fa94 	bl	8008dc4 <USBD_CtlError>
            err++;
 800889c:	7afb      	ldrb	r3, [r7, #11]
 800889e:	3301      	adds	r3, #1
 80088a0:	72fb      	strb	r3, [r7, #11]
          break;
 80088a2:	e089      	b.n	80089b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00b      	beq.n	80088c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	7c12      	ldrb	r2, [r2, #16]
 80088bc:	f107 0108 	add.w	r1, r7, #8
 80088c0:	4610      	mov	r0, r2
 80088c2:	4798      	blx	r3
 80088c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088c6:	e077      	b.n	80089b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa7a 	bl	8008dc4 <USBD_CtlError>
            err++;
 80088d0:	7afb      	ldrb	r3, [r7, #11]
 80088d2:	3301      	adds	r3, #1
 80088d4:	72fb      	strb	r3, [r7, #11]
          break;
 80088d6:	e06f      	b.n	80089b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00b      	beq.n	80088fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	7c12      	ldrb	r2, [r2, #16]
 80088f0:	f107 0108 	add.w	r1, r7, #8
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088fa:	e05d      	b.n	80089b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fa60 	bl	8008dc4 <USBD_CtlError>
            err++;
 8008904:	7afb      	ldrb	r3, [r7, #11]
 8008906:	3301      	adds	r3, #1
 8008908:	72fb      	strb	r3, [r7, #11]
          break;
 800890a:	e055      	b.n	80089b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00b      	beq.n	8008930 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	7c12      	ldrb	r2, [r2, #16]
 8008924:	f107 0108 	add.w	r1, r7, #8
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800892e:	e043      	b.n	80089b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fa46 	bl	8008dc4 <USBD_CtlError>
            err++;
 8008938:	7afb      	ldrb	r3, [r7, #11]
 800893a:	3301      	adds	r3, #1
 800893c:	72fb      	strb	r3, [r7, #11]
          break;
 800893e:	e03b      	b.n	80089b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00b      	beq.n	8008964 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	7c12      	ldrb	r2, [r2, #16]
 8008958:	f107 0108 	add.w	r1, r7, #8
 800895c:	4610      	mov	r0, r2
 800895e:	4798      	blx	r3
 8008960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008962:	e029      	b.n	80089b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fa2c 	bl	8008dc4 <USBD_CtlError>
            err++;
 800896c:	7afb      	ldrb	r3, [r7, #11]
 800896e:	3301      	adds	r3, #1
 8008970:	72fb      	strb	r3, [r7, #11]
          break;
 8008972:	e021      	b.n	80089b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00b      	beq.n	8008998 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	7c12      	ldrb	r2, [r2, #16]
 800898c:	f107 0108 	add.w	r1, r7, #8
 8008990:	4610      	mov	r0, r2
 8008992:	4798      	blx	r3
 8008994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008996:	e00f      	b.n	80089b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fa12 	bl	8008dc4 <USBD_CtlError>
            err++;
 80089a0:	7afb      	ldrb	r3, [r7, #11]
 80089a2:	3301      	adds	r3, #1
 80089a4:	72fb      	strb	r3, [r7, #11]
          break;
 80089a6:	e007      	b.n	80089b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa0a 	bl	8008dc4 <USBD_CtlError>
          err++;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	3301      	adds	r3, #1
 80089b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80089b6:	e038      	b.n	8008a2a <USBD_GetDescriptor+0x286>
 80089b8:	e037      	b.n	8008a2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	7c1b      	ldrb	r3, [r3, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d109      	bne.n	80089d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ca:	f107 0208 	add.w	r2, r7, #8
 80089ce:	4610      	mov	r0, r2
 80089d0:	4798      	blx	r3
 80089d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089d4:	e029      	b.n	8008a2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f9f3 	bl	8008dc4 <USBD_CtlError>
        err++;
 80089de:	7afb      	ldrb	r3, [r7, #11]
 80089e0:	3301      	adds	r3, #1
 80089e2:	72fb      	strb	r3, [r7, #11]
      break;
 80089e4:	e021      	b.n	8008a2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	7c1b      	ldrb	r3, [r3, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10d      	bne.n	8008a0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089f6:	f107 0208 	add.w	r2, r7, #8
 80089fa:	4610      	mov	r0, r2
 80089fc:	4798      	blx	r3
 80089fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3301      	adds	r3, #1
 8008a04:	2207      	movs	r2, #7
 8008a06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a08:	e00f      	b.n	8008a2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f9d9 	bl	8008dc4 <USBD_CtlError>
        err++;
 8008a12:	7afb      	ldrb	r3, [r7, #11]
 8008a14:	3301      	adds	r3, #1
 8008a16:	72fb      	strb	r3, [r7, #11]
      break;
 8008a18:	e007      	b.n	8008a2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f9d1 	bl	8008dc4 <USBD_CtlError>
      err++;
 8008a22:	7afb      	ldrb	r3, [r7, #11]
 8008a24:	3301      	adds	r3, #1
 8008a26:	72fb      	strb	r3, [r7, #11]
      break;
 8008a28:	bf00      	nop
  }

  if (err != 0U)
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d11c      	bne.n	8008a6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008a30:	893b      	ldrh	r3, [r7, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d011      	beq.n	8008a5a <USBD_GetDescriptor+0x2b6>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	88db      	ldrh	r3, [r3, #6]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00d      	beq.n	8008a5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	88da      	ldrh	r2, [r3, #6]
 8008a42:	893b      	ldrh	r3, [r7, #8]
 8008a44:	4293      	cmp	r3, r2
 8008a46:	bf28      	it	cs
 8008a48:	4613      	movcs	r3, r2
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a4e:	893b      	ldrh	r3, [r7, #8]
 8008a50:	461a      	mov	r2, r3
 8008a52:	68f9      	ldr	r1, [r7, #12]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fa1f 	bl	8008e98 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	88db      	ldrh	r3, [r3, #6]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d104      	bne.n	8008a6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa76 	bl	8008f54 <USBD_CtlSendStatus>
 8008a68:	e000      	b.n	8008a6c <USBD_GetDescriptor+0x2c8>
    return;
 8008a6a:	bf00      	nop
    }
  }
}
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop

08008a74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	889b      	ldrh	r3, [r3, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d130      	bne.n	8008ae8 <USBD_SetAddress+0x74>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	88db      	ldrh	r3, [r3, #6]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d12c      	bne.n	8008ae8 <USBD_SetAddress+0x74>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	885b      	ldrh	r3, [r3, #2]
 8008a92:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a94:	d828      	bhi.n	8008ae8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	885b      	ldrh	r3, [r3, #2]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d104      	bne.n	8008ab6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f988 	bl	8008dc4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab4:	e01d      	b.n	8008af2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	7bfa      	ldrb	r2, [r7, #15]
 8008aba:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f003 fbc7 	bl	800c256 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fa43 	bl	8008f54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d004      	beq.n	8008ade <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008adc:	e009      	b.n	8008af2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae6:	e004      	b.n	8008af2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f96a 	bl	8008dc4 <USBD_CtlError>
  }
}
 8008af0:	bf00      	nop
 8008af2:	bf00      	nop
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	885b      	ldrh	r3, [r3, #2]
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	4b41      	ldr	r3, [pc, #260]	@ (8008c14 <USBD_SetConfig+0x118>)
 8008b0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b10:	4b40      	ldr	r3, [pc, #256]	@ (8008c14 <USBD_SetConfig+0x118>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d904      	bls.n	8008b22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f952 	bl	8008dc4 <USBD_CtlError>
 8008b20:	e075      	b.n	8008c0e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d002      	beq.n	8008b32 <USBD_SetConfig+0x36>
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d023      	beq.n	8008b78 <USBD_SetConfig+0x7c>
 8008b30:	e062      	b.n	8008bf8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008b32:	4b38      	ldr	r3, [pc, #224]	@ (8008c14 <USBD_SetConfig+0x118>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01a      	beq.n	8008b70 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008b3a:	4b36      	ldr	r3, [pc, #216]	@ (8008c14 <USBD_SetConfig+0x118>)
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2203      	movs	r2, #3
 8008b48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b4c:	4b31      	ldr	r3, [pc, #196]	@ (8008c14 <USBD_SetConfig+0x118>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7ff f9e7 	bl	8007f26 <USBD_SetClassConfig>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d104      	bne.n	8008b68 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f92f 	bl	8008dc4 <USBD_CtlError>
            return;
 8008b66:	e052      	b.n	8008c0e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f9f3 	bl	8008f54 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b6e:	e04e      	b.n	8008c0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f9ef 	bl	8008f54 <USBD_CtlSendStatus>
        break;
 8008b76:	e04a      	b.n	8008c0e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008b78:	4b26      	ldr	r3, [pc, #152]	@ (8008c14 <USBD_SetConfig+0x118>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d112      	bne.n	8008ba6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008b88:	4b22      	ldr	r3, [pc, #136]	@ (8008c14 <USBD_SetConfig+0x118>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008b92:	4b20      	ldr	r3, [pc, #128]	@ (8008c14 <USBD_SetConfig+0x118>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff f9e3 	bl	8007f64 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f9d8 	bl	8008f54 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ba4:	e033      	b.n	8008c0e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8008c14 <USBD_SetConfig+0x118>)
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d01d      	beq.n	8008bf0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff f9d1 	bl	8007f64 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008bc2:	4b14      	ldr	r3, [pc, #80]	@ (8008c14 <USBD_SetConfig+0x118>)
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008bcc:	4b11      	ldr	r3, [pc, #68]	@ (8008c14 <USBD_SetConfig+0x118>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff f9a7 	bl	8007f26 <USBD_SetClassConfig>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d104      	bne.n	8008be8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f8ef 	bl	8008dc4 <USBD_CtlError>
            return;
 8008be6:	e012      	b.n	8008c0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f9b3 	bl	8008f54 <USBD_CtlSendStatus>
        break;
 8008bee:	e00e      	b.n	8008c0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f9af 	bl	8008f54 <USBD_CtlSendStatus>
        break;
 8008bf6:	e00a      	b.n	8008c0e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f8e2 	bl	8008dc4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008c00:	4b04      	ldr	r3, [pc, #16]	@ (8008c14 <USBD_SetConfig+0x118>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff f9ac 	bl	8007f64 <USBD_ClrClassConfig>
        break;
 8008c0c:	bf00      	nop
    }
  }
}
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	200002b8 	.word	0x200002b8

08008c18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	88db      	ldrh	r3, [r3, #6]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d004      	beq.n	8008c34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f8c9 	bl	8008dc4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c32:	e022      	b.n	8008c7a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	dc02      	bgt.n	8008c44 <USBD_GetConfig+0x2c>
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dc03      	bgt.n	8008c4a <USBD_GetConfig+0x32>
 8008c42:	e015      	b.n	8008c70 <USBD_GetConfig+0x58>
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d00b      	beq.n	8008c60 <USBD_GetConfig+0x48>
 8008c48:	e012      	b.n	8008c70 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3308      	adds	r3, #8
 8008c54:	2201      	movs	r2, #1
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f91d 	bl	8008e98 <USBD_CtlSendData>
        break;
 8008c5e:	e00c      	b.n	8008c7a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3304      	adds	r3, #4
 8008c64:	2201      	movs	r2, #1
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f915 	bl	8008e98 <USBD_CtlSendData>
        break;
 8008c6e:	e004      	b.n	8008c7a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f8a6 	bl	8008dc4 <USBD_CtlError>
        break;
 8008c78:	bf00      	nop
}
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c92:	3b01      	subs	r3, #1
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d81e      	bhi.n	8008cd6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	88db      	ldrh	r3, [r3, #6]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d004      	beq.n	8008caa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f88e 	bl	8008dc4 <USBD_CtlError>
        break;
 8008ca8:	e01a      	b.n	8008ce0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d005      	beq.n	8008cc6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f043 0202 	orr.w	r2, r3, #2
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	330c      	adds	r3, #12
 8008cca:	2202      	movs	r2, #2
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f8e2 	bl	8008e98 <USBD_CtlSendData>
      break;
 8008cd4:	e004      	b.n	8008ce0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f873 	bl	8008dc4 <USBD_CtlError>
      break;
 8008cde:	bf00      	nop
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	885b      	ldrh	r3, [r3, #2]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d106      	bne.n	8008d08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f926 	bl	8008f54 <USBD_CtlSendStatus>
  }
}
 8008d08:	bf00      	nop
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d20:	3b01      	subs	r3, #1
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d80b      	bhi.n	8008d3e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	885b      	ldrh	r3, [r3, #2]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d10c      	bne.n	8008d48 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f90c 	bl	8008f54 <USBD_CtlSendStatus>
      }
      break;
 8008d3c:	e004      	b.n	8008d48 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f83f 	bl	8008dc4 <USBD_CtlError>
      break;
 8008d46:	e000      	b.n	8008d4a <USBD_ClrFeature+0x3a>
      break;
 8008d48:	bf00      	nop
  }
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781a      	ldrb	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	785a      	ldrb	r2, [r3, #1]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	3302      	adds	r3, #2
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	3303      	adds	r3, #3
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	021b      	lsls	r3, r3, #8
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	4413      	add	r3, r2
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	3305      	adds	r3, #5
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	021b      	lsls	r3, r3, #8
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	4413      	add	r3, r2
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	3306      	adds	r3, #6
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	3307      	adds	r3, #7
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	021b      	lsls	r3, r3, #8
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	4413      	add	r3, r2
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	80da      	strh	r2, [r3, #6]

}
 8008dba:	bf00      	nop
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr

08008dc4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008dce:	2180      	movs	r1, #128	@ 0x80
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f003 f9d7 	bl	800c184 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f003 f9d3 	bl	800c184 <USBD_LL_StallEP>
}
 8008dde:	bf00      	nop
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b086      	sub	sp, #24
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d032      	beq.n	8008e62 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 f834 	bl	8008e6a <USBD_GetLen>
 8008e02:	4603      	mov	r3, r0
 8008e04:	3301      	adds	r3, #1
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	75fa      	strb	r2, [r7, #23]
 8008e16:	461a      	mov	r2, r3
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	7812      	ldrb	r2, [r2, #0]
 8008e20:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	75fa      	strb	r2, [r7, #23]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	2203      	movs	r2, #3
 8008e30:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e32:	e012      	b.n	8008e5a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	60fa      	str	r2, [r7, #12]
 8008e3a:	7dfa      	ldrb	r2, [r7, #23]
 8008e3c:	1c51      	adds	r1, r2, #1
 8008e3e:	75f9      	strb	r1, [r7, #23]
 8008e40:	4611      	mov	r1, r2
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	440a      	add	r2, r1
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	75fa      	strb	r2, [r7, #23]
 8008e50:	461a      	mov	r2, r3
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	4413      	add	r3, r2
 8008e56:	2200      	movs	r2, #0
 8008e58:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1e8      	bne.n	8008e34 <USBD_GetString+0x4e>
    }
  }
}
 8008e62:	bf00      	nop
 8008e64:	3718      	adds	r7, #24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b085      	sub	sp, #20
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008e76:	e005      	b.n	8008e84 <USBD_GetLen+0x1a>
  {
    len++;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	3301      	adds	r3, #1
 8008e82:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1f5      	bne.n	8008e78 <USBD_GetLen+0xe>
  }

  return len;
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bc80      	pop	{r7}
 8008e96:	4770      	bx	lr

08008e98 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008eae:	88fa      	ldrh	r2, [r7, #6]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008eb4:	88fa      	ldrh	r2, [r7, #6]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008eba:	88fb      	ldrh	r3, [r7, #6]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f003 f9e7 	bl	800c294 <USBD_LL_Transmit>

  return USBD_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	4613      	mov	r3, r2
 8008edc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ede:	88fb      	ldrh	r3, [r7, #6]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f003 f9d5 	bl	800c294 <USBD_LL_Transmit>

  return USBD_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4613      	mov	r3, r2
 8008f00:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2203      	movs	r2, #3
 8008f06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008f0a:	88fa      	ldrh	r2, [r7, #6]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008f12:	88fa      	ldrh	r2, [r7, #6]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f1a:	88fb      	ldrh	r3, [r7, #6]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	2100      	movs	r1, #0
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f003 f9da 	bl	800c2da <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f3e:	88fb      	ldrh	r3, [r7, #6]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	2100      	movs	r1, #0
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f003 f9c8 	bl	800c2da <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2204      	movs	r2, #4
 8008f60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f64:	2300      	movs	r3, #0
 8008f66:	2200      	movs	r2, #0
 8008f68:	2100      	movs	r1, #0
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f003 f992 	bl	800c294 <USBD_LL_Transmit>

  return USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2205      	movs	r2, #5
 8008f86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	2100      	movs	r1, #0
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f003 f9a2 	bl	800c2da <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <__NVIC_SetPriority>:
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	6039      	str	r1, [r7, #0]
 8008faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	db0a      	blt.n	8008fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	490c      	ldr	r1, [pc, #48]	@ (8008fec <__NVIC_SetPriority+0x4c>)
 8008fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fbe:	0112      	lsls	r2, r2, #4
 8008fc0:	b2d2      	uxtb	r2, r2
 8008fc2:	440b      	add	r3, r1
 8008fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008fc8:	e00a      	b.n	8008fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	4908      	ldr	r1, [pc, #32]	@ (8008ff0 <__NVIC_SetPriority+0x50>)
 8008fd0:	79fb      	ldrb	r3, [r7, #7]
 8008fd2:	f003 030f 	and.w	r3, r3, #15
 8008fd6:	3b04      	subs	r3, #4
 8008fd8:	0112      	lsls	r2, r2, #4
 8008fda:	b2d2      	uxtb	r2, r2
 8008fdc:	440b      	add	r3, r1
 8008fde:	761a      	strb	r2, [r3, #24]
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	e000e100 	.word	0xe000e100
 8008ff0:	e000ed00 	.word	0xe000ed00

08008ff4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ff8:	4b05      	ldr	r3, [pc, #20]	@ (8009010 <SysTick_Handler+0x1c>)
 8008ffa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008ffc:	f001 fd38 	bl	800aa70 <xTaskGetSchedulerState>
 8009000:	4603      	mov	r3, r0
 8009002:	2b01      	cmp	r3, #1
 8009004:	d001      	beq.n	800900a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009006:	f002 fadf 	bl	800b5c8 <xPortSysTickHandler>
  }
}
 800900a:	bf00      	nop
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	e000e010 	.word	0xe000e010

08009014 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009014:	b580      	push	{r7, lr}
 8009016:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009018:	2100      	movs	r1, #0
 800901a:	f06f 0004 	mvn.w	r0, #4
 800901e:	f7ff ffbf 	bl	8008fa0 <__NVIC_SetPriority>
#endif
}
 8009022:	bf00      	nop
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800902e:	f3ef 8305 	mrs	r3, IPSR
 8009032:	603b      	str	r3, [r7, #0]
  return(result);
 8009034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800903a:	f06f 0305 	mvn.w	r3, #5
 800903e:	607b      	str	r3, [r7, #4]
 8009040:	e00c      	b.n	800905c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009042:	4b09      	ldr	r3, [pc, #36]	@ (8009068 <osKernelInitialize+0x40>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d105      	bne.n	8009056 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800904a:	4b07      	ldr	r3, [pc, #28]	@ (8009068 <osKernelInitialize+0x40>)
 800904c:	2201      	movs	r2, #1
 800904e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009050:	2300      	movs	r3, #0
 8009052:	607b      	str	r3, [r7, #4]
 8009054:	e002      	b.n	800905c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009056:	f04f 33ff 	mov.w	r3, #4294967295
 800905a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800905c:	687b      	ldr	r3, [r7, #4]
}
 800905e:	4618      	mov	r0, r3
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	bc80      	pop	{r7}
 8009066:	4770      	bx	lr
 8009068:	200002bc 	.word	0x200002bc

0800906c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009072:	f3ef 8305 	mrs	r3, IPSR
 8009076:	603b      	str	r3, [r7, #0]
  return(result);
 8009078:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <osKernelStart+0x1a>
    stat = osErrorISR;
 800907e:	f06f 0305 	mvn.w	r3, #5
 8009082:	607b      	str	r3, [r7, #4]
 8009084:	e010      	b.n	80090a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009086:	4b0b      	ldr	r3, [pc, #44]	@ (80090b4 <osKernelStart+0x48>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d109      	bne.n	80090a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800908e:	f7ff ffc1 	bl	8009014 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009092:	4b08      	ldr	r3, [pc, #32]	@ (80090b4 <osKernelStart+0x48>)
 8009094:	2202      	movs	r2, #2
 8009096:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009098:	f001 f88a 	bl	800a1b0 <vTaskStartScheduler>
      stat = osOK;
 800909c:	2300      	movs	r3, #0
 800909e:	607b      	str	r3, [r7, #4]
 80090a0:	e002      	b.n	80090a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80090a2:	f04f 33ff 	mov.w	r3, #4294967295
 80090a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80090a8:	687b      	ldr	r3, [r7, #4]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	200002bc 	.word	0x200002bc

080090b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08e      	sub	sp, #56	@ 0x38
 80090bc:	af04      	add	r7, sp, #16
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80090c4:	2300      	movs	r3, #0
 80090c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090c8:	f3ef 8305 	mrs	r3, IPSR
 80090cc:	617b      	str	r3, [r7, #20]
  return(result);
 80090ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d17e      	bne.n	80091d2 <osThreadNew+0x11a>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d07b      	beq.n	80091d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80090da:	2380      	movs	r3, #128	@ 0x80
 80090dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80090de:	2318      	movs	r3, #24
 80090e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80090e6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d045      	beq.n	800917e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d002      	beq.n	8009100 <osThreadNew+0x48>
        name = attr->name;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <osThreadNew+0x6e>
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	2b38      	cmp	r3, #56	@ 0x38
 8009118:	d805      	bhi.n	8009126 <osThreadNew+0x6e>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <osThreadNew+0x72>
        return (NULL);
 8009126:	2300      	movs	r3, #0
 8009128:	e054      	b.n	80091d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	089b      	lsrs	r3, r3, #2
 8009138:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00e      	beq.n	8009160 <osThreadNew+0xa8>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	2ba7      	cmp	r3, #167	@ 0xa7
 8009148:	d90a      	bls.n	8009160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800914e:	2b00      	cmp	r3, #0
 8009150:	d006      	beq.n	8009160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <osThreadNew+0xa8>
        mem = 1;
 800915a:	2301      	movs	r3, #1
 800915c:	61bb      	str	r3, [r7, #24]
 800915e:	e010      	b.n	8009182 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10c      	bne.n	8009182 <osThreadNew+0xca>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d108      	bne.n	8009182 <osThreadNew+0xca>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d104      	bne.n	8009182 <osThreadNew+0xca>
          mem = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	61bb      	str	r3, [r7, #24]
 800917c:	e001      	b.n	8009182 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d110      	bne.n	80091aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009190:	9202      	str	r2, [sp, #8]
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6a3a      	ldr	r2, [r7, #32]
 800919c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 fe12 	bl	8009dc8 <xTaskCreateStatic>
 80091a4:	4603      	mov	r3, r0
 80091a6:	613b      	str	r3, [r7, #16]
 80091a8:	e013      	b.n	80091d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d110      	bne.n	80091d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	f107 0310 	add.w	r3, r7, #16
 80091b8:	9301      	str	r3, [sp, #4]
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 fe60 	bl	8009e88 <xTaskCreate>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d001      	beq.n	80091d2 <osThreadNew+0x11a>
            hTask = NULL;
 80091ce:	2300      	movs	r3, #0
 80091d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80091d2:	693b      	ldr	r3, [r7, #16]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3728      	adds	r7, #40	@ 0x28
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091e4:	f3ef 8305 	mrs	r3, IPSR
 80091e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80091ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d003      	beq.n	80091f8 <osDelay+0x1c>
    stat = osErrorISR;
 80091f0:	f06f 0305 	mvn.w	r3, #5
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	e007      	b.n	8009208 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 ff9e 	bl	800a144 <vTaskDelay>
    }
  }

  return (stat);
 8009208:	68fb      	ldr	r3, [r7, #12]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4a06      	ldr	r2, [pc, #24]	@ (800923c <vApplicationGetIdleTaskMemory+0x28>)
 8009224:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	4a05      	ldr	r2, [pc, #20]	@ (8009240 <vApplicationGetIdleTaskMemory+0x2c>)
 800922a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2280      	movs	r2, #128	@ 0x80
 8009230:	601a      	str	r2, [r3, #0]
}
 8009232:	bf00      	nop
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	bc80      	pop	{r7}
 800923a:	4770      	bx	lr
 800923c:	200002c0 	.word	0x200002c0
 8009240:	20000368 	.word	0x20000368

08009244 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4a07      	ldr	r2, [pc, #28]	@ (8009270 <vApplicationGetTimerTaskMemory+0x2c>)
 8009254:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	4a06      	ldr	r2, [pc, #24]	@ (8009274 <vApplicationGetTimerTaskMemory+0x30>)
 800925a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009262:	601a      	str	r2, [r3, #0]
}
 8009264:	bf00      	nop
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	bc80      	pop	{r7}
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	20000568 	.word	0x20000568
 8009274:	20000610 	.word	0x20000610

08009278 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f103 0208 	add.w	r2, r3, #8
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f04f 32ff 	mov.w	r2, #4294967295
 8009290:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f103 0208 	add.w	r2, r3, #8
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f103 0208 	add.w	r2, r3, #8
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr

080092b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bc80      	pop	{r7}
 80092cc:	4770      	bx	lr

080092ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092ce:	b480      	push	{r7}
 80092d0:	b085      	sub	sp, #20
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	601a      	str	r2, [r3, #0]
}
 800930a:	bf00      	nop
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	bc80      	pop	{r7}
 8009312:	4770      	bx	lr

08009314 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932a:	d103      	bne.n	8009334 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	60fb      	str	r3, [r7, #12]
 8009332:	e00c      	b.n	800934e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3308      	adds	r3, #8
 8009338:	60fb      	str	r3, [r7, #12]
 800933a:	e002      	b.n	8009342 <vListInsert+0x2e>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	60fb      	str	r3, [r7, #12]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	429a      	cmp	r2, r3
 800934c:	d2f6      	bcs.n	800933c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	601a      	str	r2, [r3, #0]
}
 800937a:	bf00      	nop
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	bc80      	pop	{r7}
 8009382:	4770      	bx	lr

08009384 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6892      	ldr	r2, [r2, #8]
 800939a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6852      	ldr	r2, [r2, #4]
 80093a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d103      	bne.n	80093b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689a      	ldr	r2, [r3, #8]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	1e5a      	subs	r2, r3, #1
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc80      	pop	{r7}
 80093d4:	4770      	bx	lr
	...

080093d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10b      	bne.n	8009404 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80093fe:	bf00      	nop
 8009400:	bf00      	nop
 8009402:	e7fd      	b.n	8009400 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009404:	f002 f862 	bl	800b4cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009410:	68f9      	ldr	r1, [r7, #12]
 8009412:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009414:	fb01 f303 	mul.w	r3, r1, r3
 8009418:	441a      	add	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009434:	3b01      	subs	r3, #1
 8009436:	68f9      	ldr	r1, [r7, #12]
 8009438:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800943a:	fb01 f303 	mul.w	r3, r1, r3
 800943e:	441a      	add	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	22ff      	movs	r2, #255	@ 0xff
 8009448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	22ff      	movs	r2, #255	@ 0xff
 8009450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d114      	bne.n	8009484 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d01a      	beq.n	8009498 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3310      	adds	r3, #16
 8009466:	4618      	mov	r0, r3
 8009468:	f001 f93c 	bl	800a6e4 <xTaskRemoveFromEventList>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d012      	beq.n	8009498 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009472:	4b0d      	ldr	r3, [pc, #52]	@ (80094a8 <xQueueGenericReset+0xd0>)
 8009474:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	e009      	b.n	8009498 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3310      	adds	r3, #16
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff fef5 	bl	8009278 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3324      	adds	r3, #36	@ 0x24
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff fef0 	bl	8009278 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009498:	f002 f848 	bl	800b52c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800949c:	2301      	movs	r3, #1
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	e000ed04 	.word	0xe000ed04

080094ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b08e      	sub	sp, #56	@ 0x38
 80094b0:	af02      	add	r7, sp, #8
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10b      	bne.n	80094d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80094d2:	bf00      	nop
 80094d4:	bf00      	nop
 80094d6:	e7fd      	b.n	80094d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10b      	bne.n	80094f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094f0:	bf00      	nop
 80094f2:	bf00      	nop
 80094f4:	e7fd      	b.n	80094f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d002      	beq.n	8009502 <xQueueGenericCreateStatic+0x56>
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <xQueueGenericCreateStatic+0x5a>
 8009502:	2301      	movs	r3, #1
 8009504:	e000      	b.n	8009508 <xQueueGenericCreateStatic+0x5c>
 8009506:	2300      	movs	r3, #0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10b      	bne.n	8009524 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	623b      	str	r3, [r7, #32]
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	e7fd      	b.n	8009520 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <xQueueGenericCreateStatic+0x84>
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <xQueueGenericCreateStatic+0x88>
 8009530:	2301      	movs	r3, #1
 8009532:	e000      	b.n	8009536 <xQueueGenericCreateStatic+0x8a>
 8009534:	2300      	movs	r3, #0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10b      	bne.n	8009552 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	61fb      	str	r3, [r7, #28]
}
 800954c:	bf00      	nop
 800954e:	bf00      	nop
 8009550:	e7fd      	b.n	800954e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009552:	2350      	movs	r3, #80	@ 0x50
 8009554:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	2b50      	cmp	r3, #80	@ 0x50
 800955a:	d00b      	beq.n	8009574 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	61bb      	str	r3, [r7, #24]
}
 800956e:	bf00      	nop
 8009570:	bf00      	nop
 8009572:	e7fd      	b.n	8009570 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009574:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800957a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00d      	beq.n	800959c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009588:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800958c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	68b9      	ldr	r1, [r7, #8]
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 f805 	bl	80095a6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800959c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800959e:	4618      	mov	r0, r3
 80095a0:	3730      	adds	r7, #48	@ 0x30
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	60f8      	str	r0, [r7, #12]
 80095ae:	60b9      	str	r1, [r7, #8]
 80095b0:	607a      	str	r2, [r7, #4]
 80095b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d103      	bne.n	80095c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	e002      	b.n	80095c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095d4:	2101      	movs	r1, #1
 80095d6:	69b8      	ldr	r0, [r7, #24]
 80095d8:	f7ff fefe 	bl	80093d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	78fa      	ldrb	r2, [r7, #3]
 80095e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08e      	sub	sp, #56	@ 0x38
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095fa:	2300      	movs	r3, #0
 80095fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10b      	bne.n	8009620 <xQueueGenericSend+0x34>
	__asm volatile
 8009608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800961a:	bf00      	nop
 800961c:	bf00      	nop
 800961e:	e7fd      	b.n	800961c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d103      	bne.n	800962e <xQueueGenericSend+0x42>
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <xQueueGenericSend+0x46>
 800962e:	2301      	movs	r3, #1
 8009630:	e000      	b.n	8009634 <xQueueGenericSend+0x48>
 8009632:	2300      	movs	r3, #0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10b      	bne.n	8009650 <xQueueGenericSend+0x64>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800964a:	bf00      	nop
 800964c:	bf00      	nop
 800964e:	e7fd      	b.n	800964c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2b02      	cmp	r3, #2
 8009654:	d103      	bne.n	800965e <xQueueGenericSend+0x72>
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800965a:	2b01      	cmp	r3, #1
 800965c:	d101      	bne.n	8009662 <xQueueGenericSend+0x76>
 800965e:	2301      	movs	r3, #1
 8009660:	e000      	b.n	8009664 <xQueueGenericSend+0x78>
 8009662:	2300      	movs	r3, #0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10b      	bne.n	8009680 <xQueueGenericSend+0x94>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	623b      	str	r3, [r7, #32]
}
 800967a:	bf00      	nop
 800967c:	bf00      	nop
 800967e:	e7fd      	b.n	800967c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009680:	f001 f9f6 	bl	800aa70 <xTaskGetSchedulerState>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <xQueueGenericSend+0xa4>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <xQueueGenericSend+0xa8>
 8009690:	2301      	movs	r3, #1
 8009692:	e000      	b.n	8009696 <xQueueGenericSend+0xaa>
 8009694:	2300      	movs	r3, #0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10b      	bne.n	80096b2 <xQueueGenericSend+0xc6>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	61fb      	str	r3, [r7, #28]
}
 80096ac:	bf00      	nop
 80096ae:	bf00      	nop
 80096b0:	e7fd      	b.n	80096ae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096b2:	f001 ff0b 	bl	800b4cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096be:	429a      	cmp	r2, r3
 80096c0:	d302      	bcc.n	80096c8 <xQueueGenericSend+0xdc>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d129      	bne.n	800971c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	68b9      	ldr	r1, [r7, #8]
 80096cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096ce:	f000 fa0f 	bl	8009af0 <prvCopyDataToQueue>
 80096d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d010      	beq.n	80096fe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	3324      	adds	r3, #36	@ 0x24
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 ffff 	bl	800a6e4 <xTaskRemoveFromEventList>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d013      	beq.n	8009714 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80096ec:	4b3f      	ldr	r3, [pc, #252]	@ (80097ec <xQueueGenericSend+0x200>)
 80096ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	e00a      	b.n	8009714 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80096fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d007      	beq.n	8009714 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009704:	4b39      	ldr	r3, [pc, #228]	@ (80097ec <xQueueGenericSend+0x200>)
 8009706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009714:	f001 ff0a 	bl	800b52c <vPortExitCritical>
				return pdPASS;
 8009718:	2301      	movs	r3, #1
 800971a:	e063      	b.n	80097e4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d103      	bne.n	800972a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009722:	f001 ff03 	bl	800b52c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009726:	2300      	movs	r3, #0
 8009728:	e05c      	b.n	80097e4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800972a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800972c:	2b00      	cmp	r3, #0
 800972e:	d106      	bne.n	800973e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009730:	f107 0314 	add.w	r3, r7, #20
 8009734:	4618      	mov	r0, r3
 8009736:	f001 f839 	bl	800a7ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800973a:	2301      	movs	r3, #1
 800973c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800973e:	f001 fef5 	bl	800b52c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009742:	f000 fda5 	bl	800a290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009746:	f001 fec1 	bl	800b4cc <vPortEnterCritical>
 800974a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009750:	b25b      	sxtb	r3, r3
 8009752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009756:	d103      	bne.n	8009760 <xQueueGenericSend+0x174>
 8009758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009762:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009766:	b25b      	sxtb	r3, r3
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976c:	d103      	bne.n	8009776 <xQueueGenericSend+0x18a>
 800976e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009776:	f001 fed9 	bl	800b52c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800977a:	1d3a      	adds	r2, r7, #4
 800977c:	f107 0314 	add.w	r3, r7, #20
 8009780:	4611      	mov	r1, r2
 8009782:	4618      	mov	r0, r3
 8009784:	f001 f828 	bl	800a7d8 <xTaskCheckForTimeOut>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d124      	bne.n	80097d8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800978e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009790:	f000 faa6 	bl	8009ce0 <prvIsQueueFull>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d018      	beq.n	80097cc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800979a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979c:	3310      	adds	r3, #16
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	4611      	mov	r1, r2
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 ff4c 	bl	800a640 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80097a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097aa:	f000 fa31 	bl	8009c10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80097ae:	f000 fd7d 	bl	800a2ac <xTaskResumeAll>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f47f af7c 	bne.w	80096b2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80097ba:	4b0c      	ldr	r3, [pc, #48]	@ (80097ec <xQueueGenericSend+0x200>)
 80097bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097c0:	601a      	str	r2, [r3, #0]
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	e772      	b.n	80096b2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80097cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097ce:	f000 fa1f 	bl	8009c10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097d2:	f000 fd6b 	bl	800a2ac <xTaskResumeAll>
 80097d6:	e76c      	b.n	80096b2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80097d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097da:	f000 fa19 	bl	8009c10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097de:	f000 fd65 	bl	800a2ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80097e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3738      	adds	r7, #56	@ 0x38
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	e000ed04 	.word	0xe000ed04

080097f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b090      	sub	sp, #64	@ 0x40
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
 80097fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10b      	bne.n	8009820 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800981a:	bf00      	nop
 800981c:	bf00      	nop
 800981e:	e7fd      	b.n	800981c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d103      	bne.n	800982e <xQueueGenericSendFromISR+0x3e>
 8009826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <xQueueGenericSendFromISR+0x42>
 800982e:	2301      	movs	r3, #1
 8009830:	e000      	b.n	8009834 <xQueueGenericSendFromISR+0x44>
 8009832:	2300      	movs	r3, #0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10b      	bne.n	8009850 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800984a:	bf00      	nop
 800984c:	bf00      	nop
 800984e:	e7fd      	b.n	800984c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	2b02      	cmp	r3, #2
 8009854:	d103      	bne.n	800985e <xQueueGenericSendFromISR+0x6e>
 8009856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800985a:	2b01      	cmp	r3, #1
 800985c:	d101      	bne.n	8009862 <xQueueGenericSendFromISR+0x72>
 800985e:	2301      	movs	r3, #1
 8009860:	e000      	b.n	8009864 <xQueueGenericSendFromISR+0x74>
 8009862:	2300      	movs	r3, #0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10b      	bne.n	8009880 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	623b      	str	r3, [r7, #32]
}
 800987a:	bf00      	nop
 800987c:	bf00      	nop
 800987e:	e7fd      	b.n	800987c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009880:	f001 fee6 	bl	800b650 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009884:	f3ef 8211 	mrs	r2, BASEPRI
 8009888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	61fa      	str	r2, [r7, #28]
 800989a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800989c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800989e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d302      	bcc.n	80098b2 <xQueueGenericSendFromISR+0xc2>
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d12f      	bne.n	8009912 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80098b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	68b9      	ldr	r1, [r7, #8]
 80098c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80098c8:	f000 f912 	bl	8009af0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098cc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80098d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d4:	d112      	bne.n	80098fc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d016      	beq.n	800990c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e0:	3324      	adds	r3, #36	@ 0x24
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fefe 	bl	800a6e4 <xTaskRemoveFromEventList>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00e      	beq.n	800990c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	601a      	str	r2, [r3, #0]
 80098fa:	e007      	b.n	800990c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009900:	3301      	adds	r3, #1
 8009902:	b2db      	uxtb	r3, r3
 8009904:	b25a      	sxtb	r2, r3
 8009906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800990c:	2301      	movs	r3, #1
 800990e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009910:	e001      	b.n	8009916 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009912:	2300      	movs	r3, #0
 8009914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009918:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009920:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009924:	4618      	mov	r0, r3
 8009926:	3740      	adds	r7, #64	@ 0x40
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08c      	sub	sp, #48	@ 0x30
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009938:	2300      	movs	r3, #0
 800993a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10b      	bne.n	800995e <xQueueReceive+0x32>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	623b      	str	r3, [r7, #32]
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	e7fd      	b.n	800995a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d103      	bne.n	800996c <xQueueReceive+0x40>
 8009964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <xQueueReceive+0x44>
 800996c:	2301      	movs	r3, #1
 800996e:	e000      	b.n	8009972 <xQueueReceive+0x46>
 8009970:	2300      	movs	r3, #0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10b      	bne.n	800998e <xQueueReceive+0x62>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	61fb      	str	r3, [r7, #28]
}
 8009988:	bf00      	nop
 800998a:	bf00      	nop
 800998c:	e7fd      	b.n	800998a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800998e:	f001 f86f 	bl	800aa70 <xTaskGetSchedulerState>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d102      	bne.n	800999e <xQueueReceive+0x72>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <xQueueReceive+0x76>
 800999e:	2301      	movs	r3, #1
 80099a0:	e000      	b.n	80099a4 <xQueueReceive+0x78>
 80099a2:	2300      	movs	r3, #0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10b      	bne.n	80099c0 <xQueueReceive+0x94>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	61bb      	str	r3, [r7, #24]
}
 80099ba:	bf00      	nop
 80099bc:	bf00      	nop
 80099be:	e7fd      	b.n	80099bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099c0:	f001 fd84 	bl	800b4cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d01f      	beq.n	8009a10 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099d0:	68b9      	ldr	r1, [r7, #8]
 80099d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099d4:	f000 f8f6 	bl	8009bc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099da:	1e5a      	subs	r2, r3, #1
 80099dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00f      	beq.n	8009a08 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ea:	3310      	adds	r3, #16
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 fe79 	bl	800a6e4 <xTaskRemoveFromEventList>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d007      	beq.n	8009a08 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80099f8:	4b3c      	ldr	r3, [pc, #240]	@ (8009aec <xQueueReceive+0x1c0>)
 80099fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a08:	f001 fd90 	bl	800b52c <vPortExitCritical>
				return pdPASS;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e069      	b.n	8009ae4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d103      	bne.n	8009a1e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a16:	f001 fd89 	bl	800b52c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	e062      	b.n	8009ae4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d106      	bne.n	8009a32 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a24:	f107 0310 	add.w	r3, r7, #16
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 febf 	bl	800a7ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a32:	f001 fd7b 	bl	800b52c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a36:	f000 fc2b 	bl	800a290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a3a:	f001 fd47 	bl	800b4cc <vPortEnterCritical>
 8009a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a44:	b25b      	sxtb	r3, r3
 8009a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4a:	d103      	bne.n	8009a54 <xQueueReceive+0x128>
 8009a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a5a:	b25b      	sxtb	r3, r3
 8009a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a60:	d103      	bne.n	8009a6a <xQueueReceive+0x13e>
 8009a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a6a:	f001 fd5f 	bl	800b52c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a6e:	1d3a      	adds	r2, r7, #4
 8009a70:	f107 0310 	add.w	r3, r7, #16
 8009a74:	4611      	mov	r1, r2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 feae 	bl	800a7d8 <xTaskCheckForTimeOut>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d123      	bne.n	8009aca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a84:	f000 f916 	bl	8009cb4 <prvIsQueueEmpty>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d017      	beq.n	8009abe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a90:	3324      	adds	r3, #36	@ 0x24
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	4611      	mov	r1, r2
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 fdd2 	bl	800a640 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a9e:	f000 f8b7 	bl	8009c10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009aa2:	f000 fc03 	bl	800a2ac <xTaskResumeAll>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d189      	bne.n	80099c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009aac:	4b0f      	ldr	r3, [pc, #60]	@ (8009aec <xQueueReceive+0x1c0>)
 8009aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	e780      	b.n	80099c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ac0:	f000 f8a6 	bl	8009c10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ac4:	f000 fbf2 	bl	800a2ac <xTaskResumeAll>
 8009ac8:	e77a      	b.n	80099c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009aca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009acc:	f000 f8a0 	bl	8009c10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ad0:	f000 fbec 	bl	800a2ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ad4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ad6:	f000 f8ed 	bl	8009cb4 <prvIsQueueEmpty>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f43f af6f 	beq.w	80099c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ae2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3730      	adds	r7, #48	@ 0x30
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	e000ed04 	.word	0xe000ed04

08009af0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009afc:	2300      	movs	r3, #0
 8009afe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10d      	bne.n	8009b2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d14d      	bne.n	8009bb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 ffc6 	bl	800aaac <xTaskPriorityDisinherit>
 8009b20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	609a      	str	r2, [r3, #8]
 8009b28:	e043      	b.n	8009bb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d119      	bne.n	8009b64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6858      	ldr	r0, [r3, #4]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b38:	461a      	mov	r2, r3
 8009b3a:	68b9      	ldr	r1, [r7, #8]
 8009b3c:	f002 ff2b 	bl	800c996 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	685a      	ldr	r2, [r3, #4]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b48:	441a      	add	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	685a      	ldr	r2, [r3, #4]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d32b      	bcc.n	8009bb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	605a      	str	r2, [r3, #4]
 8009b62:	e026      	b.n	8009bb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	68d8      	ldr	r0, [r3, #12]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	68b9      	ldr	r1, [r7, #8]
 8009b70:	f002 ff11 	bl	800c996 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b7c:	425b      	negs	r3, r3
 8009b7e:	441a      	add	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d207      	bcs.n	8009ba0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b98:	425b      	negs	r3, r3
 8009b9a:	441a      	add	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d105      	bne.n	8009bb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009bba:	697b      	ldr	r3, [r7, #20]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d018      	beq.n	8009c08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68da      	ldr	r2, [r3, #12]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bde:	441a      	add	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68da      	ldr	r2, [r3, #12]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d303      	bcc.n	8009bf8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	68d9      	ldr	r1, [r3, #12]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c00:	461a      	mov	r2, r3
 8009c02:	6838      	ldr	r0, [r7, #0]
 8009c04:	f002 fec7 	bl	800c996 <memcpy>
	}
}
 8009c08:	bf00      	nop
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c18:	f001 fc58 	bl	800b4cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c24:	e011      	b.n	8009c4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d012      	beq.n	8009c54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	3324      	adds	r3, #36	@ 0x24
 8009c32:	4618      	mov	r0, r3
 8009c34:	f000 fd56 	bl	800a6e4 <xTaskRemoveFromEventList>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c3e:	f000 fe2f 	bl	800a8a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	dce9      	bgt.n	8009c26 <prvUnlockQueue+0x16>
 8009c52:	e000      	b.n	8009c56 <prvUnlockQueue+0x46>
					break;
 8009c54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	22ff      	movs	r2, #255	@ 0xff
 8009c5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009c5e:	f001 fc65 	bl	800b52c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c62:	f001 fc33 	bl	800b4cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c6e:	e011      	b.n	8009c94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d012      	beq.n	8009c9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3310      	adds	r3, #16
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 fd31 	bl	800a6e4 <xTaskRemoveFromEventList>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c88:	f000 fe0a 	bl	800a8a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	dce9      	bgt.n	8009c70 <prvUnlockQueue+0x60>
 8009c9c:	e000      	b.n	8009ca0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	22ff      	movs	r2, #255	@ 0xff
 8009ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009ca8:	f001 fc40 	bl	800b52c <vPortExitCritical>
}
 8009cac:	bf00      	nop
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cbc:	f001 fc06 	bl	800b4cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d102      	bne.n	8009cce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	e001      	b.n	8009cd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cd2:	f001 fc2b 	bl	800b52c <vPortExitCritical>

	return xReturn;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ce8:	f001 fbf0 	bl	800b4cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d102      	bne.n	8009cfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	e001      	b.n	8009d02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d02:	f001 fc13 	bl	800b52c <vPortExitCritical>

	return xReturn;
 8009d06:	68fb      	ldr	r3, [r7, #12]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60fb      	str	r3, [r7, #12]
 8009d1e:	e014      	b.n	8009d4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d20:	4a0e      	ldr	r2, [pc, #56]	@ (8009d5c <vQueueAddToRegistry+0x4c>)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10b      	bne.n	8009d44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d2c:	490b      	ldr	r1, [pc, #44]	@ (8009d5c <vQueueAddToRegistry+0x4c>)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d36:	4a09      	ldr	r2, [pc, #36]	@ (8009d5c <vQueueAddToRegistry+0x4c>)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	00db      	lsls	r3, r3, #3
 8009d3c:	4413      	add	r3, r2
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009d42:	e006      	b.n	8009d52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	3301      	adds	r3, #1
 8009d48:	60fb      	str	r3, [r7, #12]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b07      	cmp	r3, #7
 8009d4e:	d9e7      	bls.n	8009d20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d50:	bf00      	nop
 8009d52:	bf00      	nop
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bc80      	pop	{r7}
 8009d5a:	4770      	bx	lr
 8009d5c:	20000a10 	.word	0x20000a10

08009d60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d70:	f001 fbac 	bl	800b4cc <vPortEnterCritical>
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d7a:	b25b      	sxtb	r3, r3
 8009d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d80:	d103      	bne.n	8009d8a <vQueueWaitForMessageRestricted+0x2a>
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d90:	b25b      	sxtb	r3, r3
 8009d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d96:	d103      	bne.n	8009da0 <vQueueWaitForMessageRestricted+0x40>
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009da0:	f001 fbc4 	bl	800b52c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d106      	bne.n	8009dba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	3324      	adds	r3, #36	@ 0x24
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	68b9      	ldr	r1, [r7, #8]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 fc69 	bl	800a68c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009dba:	6978      	ldr	r0, [r7, #20]
 8009dbc:	f7ff ff28 	bl	8009c10 <prvUnlockQueue>
	}
 8009dc0:	bf00      	nop
 8009dc2:	3718      	adds	r7, #24
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08e      	sub	sp, #56	@ 0x38
 8009dcc:	af04      	add	r7, sp, #16
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10b      	bne.n	8009df4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	623b      	str	r3, [r7, #32]
}
 8009dee:	bf00      	nop
 8009df0:	bf00      	nop
 8009df2:	e7fd      	b.n	8009df0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10b      	bne.n	8009e12 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	61fb      	str	r3, [r7, #28]
}
 8009e0c:	bf00      	nop
 8009e0e:	bf00      	nop
 8009e10:	e7fd      	b.n	8009e0e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e12:	23a8      	movs	r3, #168	@ 0xa8
 8009e14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2ba8      	cmp	r3, #168	@ 0xa8
 8009e1a:	d00b      	beq.n	8009e34 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	61bb      	str	r3, [r7, #24]
}
 8009e2e:	bf00      	nop
 8009e30:	bf00      	nop
 8009e32:	e7fd      	b.n	8009e30 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d01e      	beq.n	8009e7a <xTaskCreateStatic+0xb2>
 8009e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d01b      	beq.n	8009e7a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e44:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e4a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e54:	2300      	movs	r3, #0
 8009e56:	9303      	str	r3, [sp, #12]
 8009e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5a:	9302      	str	r3, [sp, #8]
 8009e5c:	f107 0314 	add.w	r3, r7, #20
 8009e60:	9301      	str	r3, [sp, #4]
 8009e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	68b9      	ldr	r1, [r7, #8]
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 f851 	bl	8009f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e74:	f000 f8f6 	bl	800a064 <prvAddNewTaskToReadyList>
 8009e78:	e001      	b.n	8009e7e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e7e:	697b      	ldr	r3, [r7, #20]
	}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3728      	adds	r7, #40	@ 0x28
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b08c      	sub	sp, #48	@ 0x30
 8009e8c:	af04      	add	r7, sp, #16
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	603b      	str	r3, [r7, #0]
 8009e94:	4613      	mov	r3, r2
 8009e96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e98:	88fb      	ldrh	r3, [r7, #6]
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f001 fc17 	bl	800b6d0 <pvPortMalloc>
 8009ea2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00e      	beq.n	8009ec8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009eaa:	20a8      	movs	r0, #168	@ 0xa8
 8009eac:	f001 fc10 	bl	800b6d0 <pvPortMalloc>
 8009eb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	631a      	str	r2, [r3, #48]	@ 0x30
 8009ebe:	e005      	b.n	8009ecc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ec0:	6978      	ldr	r0, [r7, #20]
 8009ec2:	f001 fcd3 	bl	800b86c <vPortFree>
 8009ec6:	e001      	b.n	8009ecc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d017      	beq.n	8009f02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009eda:	88fa      	ldrh	r2, [r7, #6]
 8009edc:	2300      	movs	r3, #0
 8009ede:	9303      	str	r3, [sp, #12]
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	9302      	str	r3, [sp, #8]
 8009ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee6:	9301      	str	r3, [sp, #4]
 8009ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	68b9      	ldr	r1, [r7, #8]
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 f80f 	bl	8009f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ef6:	69f8      	ldr	r0, [r7, #28]
 8009ef8:	f000 f8b4 	bl	800a064 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009efc:	2301      	movs	r3, #1
 8009efe:	61bb      	str	r3, [r7, #24]
 8009f00:	e002      	b.n	8009f08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f02:	f04f 33ff 	mov.w	r3, #4294967295
 8009f06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f08:	69bb      	ldr	r3, [r7, #24]
	}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3720      	adds	r7, #32
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f24:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	21a5      	movs	r1, #165	@ 0xa5
 8009f2e:	f002 fc61 	bl	800c7f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4413      	add	r3, r2
 8009f42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	f023 0307 	bic.w	r3, r3, #7
 8009f4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	f003 0307 	and.w	r3, r3, #7
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00b      	beq.n	8009f6e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5a:	f383 8811 	msr	BASEPRI, r3
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	617b      	str	r3, [r7, #20]
}
 8009f68:	bf00      	nop
 8009f6a:	bf00      	nop
 8009f6c:	e7fd      	b.n	8009f6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d01f      	beq.n	8009fb4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f74:	2300      	movs	r3, #0
 8009f76:	61fb      	str	r3, [r7, #28]
 8009f78:	e012      	b.n	8009fa0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	4413      	add	r3, r2
 8009f80:	7819      	ldrb	r1, [r3, #0]
 8009f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	4413      	add	r3, r2
 8009f88:	3334      	adds	r3, #52	@ 0x34
 8009f8a:	460a      	mov	r2, r1
 8009f8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	4413      	add	r3, r2
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d006      	beq.n	8009fa8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	61fb      	str	r3, [r7, #28]
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	2b0f      	cmp	r3, #15
 8009fa4:	d9e9      	bls.n	8009f7a <prvInitialiseNewTask+0x66>
 8009fa6:	e000      	b.n	8009faa <prvInitialiseNewTask+0x96>
			{
				break;
 8009fa8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009fb2:	e003      	b.n	8009fbc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbe:	2b37      	cmp	r3, #55	@ 0x37
 8009fc0:	d901      	bls.n	8009fc6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009fc2:	2337      	movs	r3, #55	@ 0x37
 8009fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fd0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fda:	3304      	adds	r3, #4
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7ff f96a 	bl	80092b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe4:	3318      	adds	r3, #24
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff f965 	bl	80092b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ff0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a000:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a004:	2200      	movs	r2, #0
 800a006:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a014:	3354      	adds	r3, #84	@ 0x54
 800a016:	224c      	movs	r2, #76	@ 0x4c
 800a018:	2100      	movs	r1, #0
 800a01a:	4618      	mov	r0, r3
 800a01c:	f002 fbea 	bl	800c7f4 <memset>
 800a020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a022:	4a0d      	ldr	r2, [pc, #52]	@ (800a058 <prvInitialiseNewTask+0x144>)
 800a024:	659a      	str	r2, [r3, #88]	@ 0x58
 800a026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a028:	4a0c      	ldr	r2, [pc, #48]	@ (800a05c <prvInitialiseNewTask+0x148>)
 800a02a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	4a0c      	ldr	r2, [pc, #48]	@ (800a060 <prvInitialiseNewTask+0x14c>)
 800a030:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	68f9      	ldr	r1, [r7, #12]
 800a036:	69b8      	ldr	r0, [r7, #24]
 800a038:	f001 f954 	bl	800b2e4 <pxPortInitialiseStack>
 800a03c:	4602      	mov	r2, r0
 800a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a040:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d002      	beq.n	800a04e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a04a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a04c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a04e:	bf00      	nop
 800a050:	3720      	adds	r7, #32
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20002e60 	.word	0x20002e60
 800a05c:	20002ec8 	.word	0x20002ec8
 800a060:	20002f30 	.word	0x20002f30

0800a064 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a06c:	f001 fa2e 	bl	800b4cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a070:	4b2d      	ldr	r3, [pc, #180]	@ (800a128 <prvAddNewTaskToReadyList+0xc4>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3301      	adds	r3, #1
 800a076:	4a2c      	ldr	r2, [pc, #176]	@ (800a128 <prvAddNewTaskToReadyList+0xc4>)
 800a078:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a07a:	4b2c      	ldr	r3, [pc, #176]	@ (800a12c <prvAddNewTaskToReadyList+0xc8>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d109      	bne.n	800a096 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a082:	4a2a      	ldr	r2, [pc, #168]	@ (800a12c <prvAddNewTaskToReadyList+0xc8>)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a088:	4b27      	ldr	r3, [pc, #156]	@ (800a128 <prvAddNewTaskToReadyList+0xc4>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d110      	bne.n	800a0b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a090:	f000 fc2a 	bl	800a8e8 <prvInitialiseTaskLists>
 800a094:	e00d      	b.n	800a0b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a096:	4b26      	ldr	r3, [pc, #152]	@ (800a130 <prvAddNewTaskToReadyList+0xcc>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d109      	bne.n	800a0b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a09e:	4b23      	ldr	r3, [pc, #140]	@ (800a12c <prvAddNewTaskToReadyList+0xc8>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d802      	bhi.n	800a0b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a0ac:	4a1f      	ldr	r2, [pc, #124]	@ (800a12c <prvAddNewTaskToReadyList+0xc8>)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0b2:	4b20      	ldr	r3, [pc, #128]	@ (800a134 <prvAddNewTaskToReadyList+0xd0>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	4a1e      	ldr	r2, [pc, #120]	@ (800a134 <prvAddNewTaskToReadyList+0xd0>)
 800a0ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a0bc:	4b1d      	ldr	r3, [pc, #116]	@ (800a134 <prvAddNewTaskToReadyList+0xd0>)
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a138 <prvAddNewTaskToReadyList+0xd4>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d903      	bls.n	800a0d8 <prvAddNewTaskToReadyList+0x74>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d4:	4a18      	ldr	r2, [pc, #96]	@ (800a138 <prvAddNewTaskToReadyList+0xd4>)
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4a15      	ldr	r2, [pc, #84]	@ (800a13c <prvAddNewTaskToReadyList+0xd8>)
 800a0e6:	441a      	add	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	f7ff f8ed 	bl	80092ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a0f4:	f001 fa1a 	bl	800b52c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a0f8:	4b0d      	ldr	r3, [pc, #52]	@ (800a130 <prvAddNewTaskToReadyList+0xcc>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00e      	beq.n	800a11e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a100:	4b0a      	ldr	r3, [pc, #40]	@ (800a12c <prvAddNewTaskToReadyList+0xc8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d207      	bcs.n	800a11e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a10e:	4b0c      	ldr	r3, [pc, #48]	@ (800a140 <prvAddNewTaskToReadyList+0xdc>)
 800a110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a11e:	bf00      	nop
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20000f24 	.word	0x20000f24
 800a12c:	20000a50 	.word	0x20000a50
 800a130:	20000f30 	.word	0x20000f30
 800a134:	20000f40 	.word	0x20000f40
 800a138:	20000f2c 	.word	0x20000f2c
 800a13c:	20000a54 	.word	0x20000a54
 800a140:	e000ed04 	.word	0xe000ed04

0800a144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a14c:	2300      	movs	r3, #0
 800a14e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d018      	beq.n	800a188 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a156:	4b14      	ldr	r3, [pc, #80]	@ (800a1a8 <vTaskDelay+0x64>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00b      	beq.n	800a176 <vTaskDelay+0x32>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	60bb      	str	r3, [r7, #8]
}
 800a170:	bf00      	nop
 800a172:	bf00      	nop
 800a174:	e7fd      	b.n	800a172 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a176:	f000 f88b 	bl	800a290 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a17a:	2100      	movs	r1, #0
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fd05 	bl	800ab8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a182:	f000 f893 	bl	800a2ac <xTaskResumeAll>
 800a186:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d107      	bne.n	800a19e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a18e:	4b07      	ldr	r3, [pc, #28]	@ (800a1ac <vTaskDelay+0x68>)
 800a190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a19e:	bf00      	nop
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000f4c 	.word	0x20000f4c
 800a1ac:	e000ed04 	.word	0xe000ed04

0800a1b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b08a      	sub	sp, #40	@ 0x28
 800a1b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1be:	463a      	mov	r2, r7
 800a1c0:	1d39      	adds	r1, r7, #4
 800a1c2:	f107 0308 	add.w	r3, r7, #8
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff f824 	bl	8009214 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	9202      	str	r2, [sp, #8]
 800a1d4:	9301      	str	r3, [sp, #4]
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	460a      	mov	r2, r1
 800a1de:	4924      	ldr	r1, [pc, #144]	@ (800a270 <vTaskStartScheduler+0xc0>)
 800a1e0:	4824      	ldr	r0, [pc, #144]	@ (800a274 <vTaskStartScheduler+0xc4>)
 800a1e2:	f7ff fdf1 	bl	8009dc8 <xTaskCreateStatic>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	4a23      	ldr	r2, [pc, #140]	@ (800a278 <vTaskStartScheduler+0xc8>)
 800a1ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a1ec:	4b22      	ldr	r3, [pc, #136]	@ (800a278 <vTaskStartScheduler+0xc8>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	e001      	b.n	800a1fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d102      	bne.n	800a20a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a204:	f000 fd16 	bl	800ac34 <xTimerCreateTimerTask>
 800a208:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d11b      	bne.n	800a248 <vTaskStartScheduler+0x98>
	__asm volatile
 800a210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	613b      	str	r3, [r7, #16]
}
 800a222:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a224:	4b15      	ldr	r3, [pc, #84]	@ (800a27c <vTaskStartScheduler+0xcc>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3354      	adds	r3, #84	@ 0x54
 800a22a:	4a15      	ldr	r2, [pc, #84]	@ (800a280 <vTaskStartScheduler+0xd0>)
 800a22c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a22e:	4b15      	ldr	r3, [pc, #84]	@ (800a284 <vTaskStartScheduler+0xd4>)
 800a230:	f04f 32ff 	mov.w	r2, #4294967295
 800a234:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a236:	4b14      	ldr	r3, [pc, #80]	@ (800a288 <vTaskStartScheduler+0xd8>)
 800a238:	2201      	movs	r2, #1
 800a23a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a23c:	4b13      	ldr	r3, [pc, #76]	@ (800a28c <vTaskStartScheduler+0xdc>)
 800a23e:	2200      	movs	r2, #0
 800a240:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a242:	f001 f8d1 	bl	800b3e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a246:	e00f      	b.n	800a268 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	d10b      	bne.n	800a268 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	60fb      	str	r3, [r7, #12]
}
 800a262:	bf00      	nop
 800a264:	bf00      	nop
 800a266:	e7fd      	b.n	800a264 <vTaskStartScheduler+0xb4>
}
 800a268:	bf00      	nop
 800a26a:	3718      	adds	r7, #24
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	0800d40c 	.word	0x0800d40c
 800a274:	0800a8b9 	.word	0x0800a8b9
 800a278:	20000f48 	.word	0x20000f48
 800a27c:	20000a50 	.word	0x20000a50
 800a280:	2000018c 	.word	0x2000018c
 800a284:	20000f44 	.word	0x20000f44
 800a288:	20000f30 	.word	0x20000f30
 800a28c:	20000f28 	.word	0x20000f28

0800a290 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a290:	b480      	push	{r7}
 800a292:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a294:	4b04      	ldr	r3, [pc, #16]	@ (800a2a8 <vTaskSuspendAll+0x18>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	3301      	adds	r3, #1
 800a29a:	4a03      	ldr	r2, [pc, #12]	@ (800a2a8 <vTaskSuspendAll+0x18>)
 800a29c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a29e:	bf00      	nop
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bc80      	pop	{r7}
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	20000f4c 	.word	0x20000f4c

0800a2ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2ba:	4b42      	ldr	r3, [pc, #264]	@ (800a3c4 <xTaskResumeAll+0x118>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10b      	bne.n	800a2da <xTaskResumeAll+0x2e>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	603b      	str	r3, [r7, #0]
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop
 800a2d8:	e7fd      	b.n	800a2d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a2da:	f001 f8f7 	bl	800b4cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a2de:	4b39      	ldr	r3, [pc, #228]	@ (800a3c4 <xTaskResumeAll+0x118>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	4a37      	ldr	r2, [pc, #220]	@ (800a3c4 <xTaskResumeAll+0x118>)
 800a2e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2e8:	4b36      	ldr	r3, [pc, #216]	@ (800a3c4 <xTaskResumeAll+0x118>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d162      	bne.n	800a3b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a2f0:	4b35      	ldr	r3, [pc, #212]	@ (800a3c8 <xTaskResumeAll+0x11c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d05e      	beq.n	800a3b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2f8:	e02f      	b.n	800a35a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2fa:	4b34      	ldr	r3, [pc, #208]	@ (800a3cc <xTaskResumeAll+0x120>)
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3318      	adds	r3, #24
 800a306:	4618      	mov	r0, r3
 800a308:	f7ff f83c 	bl	8009384 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	3304      	adds	r3, #4
 800a310:	4618      	mov	r0, r3
 800a312:	f7ff f837 	bl	8009384 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a31a:	4b2d      	ldr	r3, [pc, #180]	@ (800a3d0 <xTaskResumeAll+0x124>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d903      	bls.n	800a32a <xTaskResumeAll+0x7e>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a326:	4a2a      	ldr	r2, [pc, #168]	@ (800a3d0 <xTaskResumeAll+0x124>)
 800a328:	6013      	str	r3, [r2, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a32e:	4613      	mov	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4a27      	ldr	r2, [pc, #156]	@ (800a3d4 <xTaskResumeAll+0x128>)
 800a338:	441a      	add	r2, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3304      	adds	r3, #4
 800a33e:	4619      	mov	r1, r3
 800a340:	4610      	mov	r0, r2
 800a342:	f7fe ffc4 	bl	80092ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a34a:	4b23      	ldr	r3, [pc, #140]	@ (800a3d8 <xTaskResumeAll+0x12c>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a350:	429a      	cmp	r2, r3
 800a352:	d302      	bcc.n	800a35a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a354:	4b21      	ldr	r3, [pc, #132]	@ (800a3dc <xTaskResumeAll+0x130>)
 800a356:	2201      	movs	r2, #1
 800a358:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a35a:	4b1c      	ldr	r3, [pc, #112]	@ (800a3cc <xTaskResumeAll+0x120>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1cb      	bne.n	800a2fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a368:	f000 fb62 	bl	800aa30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a36c:	4b1c      	ldr	r3, [pc, #112]	@ (800a3e0 <xTaskResumeAll+0x134>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d010      	beq.n	800a39a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a378:	f000 f844 	bl	800a404 <xTaskIncrementTick>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d002      	beq.n	800a388 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a382:	4b16      	ldr	r3, [pc, #88]	@ (800a3dc <xTaskResumeAll+0x130>)
 800a384:	2201      	movs	r2, #1
 800a386:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1f1      	bne.n	800a378 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a394:	4b12      	ldr	r3, [pc, #72]	@ (800a3e0 <xTaskResumeAll+0x134>)
 800a396:	2200      	movs	r2, #0
 800a398:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a39a:	4b10      	ldr	r3, [pc, #64]	@ (800a3dc <xTaskResumeAll+0x130>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d009      	beq.n	800a3b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a3e4 <xTaskResumeAll+0x138>)
 800a3a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3b6:	f001 f8b9 	bl	800b52c <vPortExitCritical>

	return xAlreadyYielded;
 800a3ba:	68bb      	ldr	r3, [r7, #8]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	20000f4c 	.word	0x20000f4c
 800a3c8:	20000f24 	.word	0x20000f24
 800a3cc:	20000ee4 	.word	0x20000ee4
 800a3d0:	20000f2c 	.word	0x20000f2c
 800a3d4:	20000a54 	.word	0x20000a54
 800a3d8:	20000a50 	.word	0x20000a50
 800a3dc:	20000f38 	.word	0x20000f38
 800a3e0:	20000f34 	.word	0x20000f34
 800a3e4:	e000ed04 	.word	0xe000ed04

0800a3e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a3ee:	4b04      	ldr	r3, [pc, #16]	@ (800a400 <xTaskGetTickCount+0x18>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a3f4:	687b      	ldr	r3, [r7, #4]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bc80      	pop	{r7}
 800a3fe:	4770      	bx	lr
 800a400:	20000f28 	.word	0x20000f28

0800a404 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a40a:	2300      	movs	r3, #0
 800a40c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a40e:	4b4f      	ldr	r3, [pc, #316]	@ (800a54c <xTaskIncrementTick+0x148>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	f040 8090 	bne.w	800a538 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a418:	4b4d      	ldr	r3, [pc, #308]	@ (800a550 <xTaskIncrementTick+0x14c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3301      	adds	r3, #1
 800a41e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a420:	4a4b      	ldr	r2, [pc, #300]	@ (800a550 <xTaskIncrementTick+0x14c>)
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d121      	bne.n	800a470 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a42c:	4b49      	ldr	r3, [pc, #292]	@ (800a554 <xTaskIncrementTick+0x150>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00b      	beq.n	800a44e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	603b      	str	r3, [r7, #0]
}
 800a448:	bf00      	nop
 800a44a:	bf00      	nop
 800a44c:	e7fd      	b.n	800a44a <xTaskIncrementTick+0x46>
 800a44e:	4b41      	ldr	r3, [pc, #260]	@ (800a554 <xTaskIncrementTick+0x150>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	4b40      	ldr	r3, [pc, #256]	@ (800a558 <xTaskIncrementTick+0x154>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a3e      	ldr	r2, [pc, #248]	@ (800a554 <xTaskIncrementTick+0x150>)
 800a45a:	6013      	str	r3, [r2, #0]
 800a45c:	4a3e      	ldr	r2, [pc, #248]	@ (800a558 <xTaskIncrementTick+0x154>)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6013      	str	r3, [r2, #0]
 800a462:	4b3e      	ldr	r3, [pc, #248]	@ (800a55c <xTaskIncrementTick+0x158>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3301      	adds	r3, #1
 800a468:	4a3c      	ldr	r2, [pc, #240]	@ (800a55c <xTaskIncrementTick+0x158>)
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	f000 fae0 	bl	800aa30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a470:	4b3b      	ldr	r3, [pc, #236]	@ (800a560 <xTaskIncrementTick+0x15c>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	429a      	cmp	r2, r3
 800a478:	d349      	bcc.n	800a50e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a47a:	4b36      	ldr	r3, [pc, #216]	@ (800a554 <xTaskIncrementTick+0x150>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d104      	bne.n	800a48e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a484:	4b36      	ldr	r3, [pc, #216]	@ (800a560 <xTaskIncrementTick+0x15c>)
 800a486:	f04f 32ff 	mov.w	r2, #4294967295
 800a48a:	601a      	str	r2, [r3, #0]
					break;
 800a48c:	e03f      	b.n	800a50e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a48e:	4b31      	ldr	r3, [pc, #196]	@ (800a554 <xTaskIncrementTick+0x150>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d203      	bcs.n	800a4ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4a6:	4a2e      	ldr	r2, [pc, #184]	@ (800a560 <xTaskIncrementTick+0x15c>)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4ac:	e02f      	b.n	800a50e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe ff66 	bl	8009384 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d004      	beq.n	800a4ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	3318      	adds	r3, #24
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fe ff5d 	bl	8009384 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ce:	4b25      	ldr	r3, [pc, #148]	@ (800a564 <xTaskIncrementTick+0x160>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d903      	bls.n	800a4de <xTaskIncrementTick+0xda>
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4da:	4a22      	ldr	r2, [pc, #136]	@ (800a564 <xTaskIncrementTick+0x160>)
 800a4dc:	6013      	str	r3, [r2, #0]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4a1f      	ldr	r2, [pc, #124]	@ (800a568 <xTaskIncrementTick+0x164>)
 800a4ec:	441a      	add	r2, r3
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	f7fe feea 	bl	80092ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4fe:	4b1b      	ldr	r3, [pc, #108]	@ (800a56c <xTaskIncrementTick+0x168>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a504:	429a      	cmp	r2, r3
 800a506:	d3b8      	bcc.n	800a47a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a50c:	e7b5      	b.n	800a47a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a50e:	4b17      	ldr	r3, [pc, #92]	@ (800a56c <xTaskIncrementTick+0x168>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a514:	4914      	ldr	r1, [pc, #80]	@ (800a568 <xTaskIncrementTick+0x164>)
 800a516:	4613      	mov	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	440b      	add	r3, r1
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d901      	bls.n	800a52a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a526:	2301      	movs	r3, #1
 800a528:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a52a:	4b11      	ldr	r3, [pc, #68]	@ (800a570 <xTaskIncrementTick+0x16c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d007      	beq.n	800a542 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a532:	2301      	movs	r3, #1
 800a534:	617b      	str	r3, [r7, #20]
 800a536:	e004      	b.n	800a542 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a538:	4b0e      	ldr	r3, [pc, #56]	@ (800a574 <xTaskIncrementTick+0x170>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	3301      	adds	r3, #1
 800a53e:	4a0d      	ldr	r2, [pc, #52]	@ (800a574 <xTaskIncrementTick+0x170>)
 800a540:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a542:	697b      	ldr	r3, [r7, #20]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3718      	adds	r7, #24
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20000f4c 	.word	0x20000f4c
 800a550:	20000f28 	.word	0x20000f28
 800a554:	20000edc 	.word	0x20000edc
 800a558:	20000ee0 	.word	0x20000ee0
 800a55c:	20000f3c 	.word	0x20000f3c
 800a560:	20000f44 	.word	0x20000f44
 800a564:	20000f2c 	.word	0x20000f2c
 800a568:	20000a54 	.word	0x20000a54
 800a56c:	20000a50 	.word	0x20000a50
 800a570:	20000f38 	.word	0x20000f38
 800a574:	20000f34 	.word	0x20000f34

0800a578 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a57e:	4b2a      	ldr	r3, [pc, #168]	@ (800a628 <vTaskSwitchContext+0xb0>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d003      	beq.n	800a58e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a586:	4b29      	ldr	r3, [pc, #164]	@ (800a62c <vTaskSwitchContext+0xb4>)
 800a588:	2201      	movs	r2, #1
 800a58a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a58c:	e047      	b.n	800a61e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a58e:	4b27      	ldr	r3, [pc, #156]	@ (800a62c <vTaskSwitchContext+0xb4>)
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a594:	4b26      	ldr	r3, [pc, #152]	@ (800a630 <vTaskSwitchContext+0xb8>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	60fb      	str	r3, [r7, #12]
 800a59a:	e011      	b.n	800a5c0 <vTaskSwitchContext+0x48>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10b      	bne.n	800a5ba <vTaskSwitchContext+0x42>
	__asm volatile
 800a5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	607b      	str	r3, [r7, #4]
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop
 800a5b8:	e7fd      	b.n	800a5b6 <vTaskSwitchContext+0x3e>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	60fb      	str	r3, [r7, #12]
 800a5c0:	491c      	ldr	r1, [pc, #112]	@ (800a634 <vTaskSwitchContext+0xbc>)
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	4413      	add	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	440b      	add	r3, r1
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d0e3      	beq.n	800a59c <vTaskSwitchContext+0x24>
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	4413      	add	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4a15      	ldr	r2, [pc, #84]	@ (800a634 <vTaskSwitchContext+0xbc>)
 800a5e0:	4413      	add	r3, r2
 800a5e2:	60bb      	str	r3, [r7, #8]
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	685a      	ldr	r2, [r3, #4]
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	605a      	str	r2, [r3, #4]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d104      	bne.n	800a604 <vTaskSwitchContext+0x8c>
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	685a      	ldr	r2, [r3, #4]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	605a      	str	r2, [r3, #4]
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	4a0b      	ldr	r2, [pc, #44]	@ (800a638 <vTaskSwitchContext+0xc0>)
 800a60c:	6013      	str	r3, [r2, #0]
 800a60e:	4a08      	ldr	r2, [pc, #32]	@ (800a630 <vTaskSwitchContext+0xb8>)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a614:	4b08      	ldr	r3, [pc, #32]	@ (800a638 <vTaskSwitchContext+0xc0>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3354      	adds	r3, #84	@ 0x54
 800a61a:	4a08      	ldr	r2, [pc, #32]	@ (800a63c <vTaskSwitchContext+0xc4>)
 800a61c:	6013      	str	r3, [r2, #0]
}
 800a61e:	bf00      	nop
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	bc80      	pop	{r7}
 800a626:	4770      	bx	lr
 800a628:	20000f4c 	.word	0x20000f4c
 800a62c:	20000f38 	.word	0x20000f38
 800a630:	20000f2c 	.word	0x20000f2c
 800a634:	20000a54 	.word	0x20000a54
 800a638:	20000a50 	.word	0x20000a50
 800a63c:	2000018c 	.word	0x2000018c

0800a640 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10b      	bne.n	800a668 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	60fb      	str	r3, [r7, #12]
}
 800a662:	bf00      	nop
 800a664:	bf00      	nop
 800a666:	e7fd      	b.n	800a664 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a668:	4b07      	ldr	r3, [pc, #28]	@ (800a688 <vTaskPlaceOnEventList+0x48>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3318      	adds	r3, #24
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7fe fe4f 	bl	8009314 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a676:	2101      	movs	r1, #1
 800a678:	6838      	ldr	r0, [r7, #0]
 800a67a:	f000 fa87 	bl	800ab8c <prvAddCurrentTaskToDelayedList>
}
 800a67e:	bf00      	nop
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	20000a50 	.word	0x20000a50

0800a68c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10b      	bne.n	800a6b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	617b      	str	r3, [r7, #20]
}
 800a6b0:	bf00      	nop
 800a6b2:	bf00      	nop
 800a6b4:	e7fd      	b.n	800a6b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a6e0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3318      	adds	r3, #24
 800a6bc:	4619      	mov	r1, r3
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7fe fe05 	bl	80092ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a6d0:	6879      	ldr	r1, [r7, #4]
 800a6d2:	68b8      	ldr	r0, [r7, #8]
 800a6d4:	f000 fa5a 	bl	800ab8c <prvAddCurrentTaskToDelayedList>
	}
 800a6d8:	bf00      	nop
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	20000a50 	.word	0x20000a50

0800a6e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10b      	bne.n	800a712 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	60fb      	str	r3, [r7, #12]
}
 800a70c:	bf00      	nop
 800a70e:	bf00      	nop
 800a710:	e7fd      	b.n	800a70e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	3318      	adds	r3, #24
 800a716:	4618      	mov	r0, r3
 800a718:	f7fe fe34 	bl	8009384 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a71c:	4b1d      	ldr	r3, [pc, #116]	@ (800a794 <xTaskRemoveFromEventList+0xb0>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d11d      	bne.n	800a760 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	3304      	adds	r3, #4
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fe fe2b 	bl	8009384 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a732:	4b19      	ldr	r3, [pc, #100]	@ (800a798 <xTaskRemoveFromEventList+0xb4>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	429a      	cmp	r2, r3
 800a738:	d903      	bls.n	800a742 <xTaskRemoveFromEventList+0x5e>
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a73e:	4a16      	ldr	r2, [pc, #88]	@ (800a798 <xTaskRemoveFromEventList+0xb4>)
 800a740:	6013      	str	r3, [r2, #0]
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a746:	4613      	mov	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4a13      	ldr	r2, [pc, #76]	@ (800a79c <xTaskRemoveFromEventList+0xb8>)
 800a750:	441a      	add	r2, r3
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	3304      	adds	r3, #4
 800a756:	4619      	mov	r1, r3
 800a758:	4610      	mov	r0, r2
 800a75a:	f7fe fdb8 	bl	80092ce <vListInsertEnd>
 800a75e:	e005      	b.n	800a76c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	3318      	adds	r3, #24
 800a764:	4619      	mov	r1, r3
 800a766:	480e      	ldr	r0, [pc, #56]	@ (800a7a0 <xTaskRemoveFromEventList+0xbc>)
 800a768:	f7fe fdb1 	bl	80092ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a770:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a4 <xTaskRemoveFromEventList+0xc0>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a776:	429a      	cmp	r2, r3
 800a778:	d905      	bls.n	800a786 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a77a:	2301      	movs	r3, #1
 800a77c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a77e:	4b0a      	ldr	r3, [pc, #40]	@ (800a7a8 <xTaskRemoveFromEventList+0xc4>)
 800a780:	2201      	movs	r2, #1
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	e001      	b.n	800a78a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a78a:	697b      	ldr	r3, [r7, #20]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3718      	adds	r7, #24
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	20000f4c 	.word	0x20000f4c
 800a798:	20000f2c 	.word	0x20000f2c
 800a79c:	20000a54 	.word	0x20000a54
 800a7a0:	20000ee4 	.word	0x20000ee4
 800a7a4:	20000a50 	.word	0x20000a50
 800a7a8:	20000f38 	.word	0x20000f38

0800a7ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7b4:	4b06      	ldr	r3, [pc, #24]	@ (800a7d0 <vTaskInternalSetTimeOutState+0x24>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7bc:	4b05      	ldr	r3, [pc, #20]	@ (800a7d4 <vTaskInternalSetTimeOutState+0x28>)
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	605a      	str	r2, [r3, #4]
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bc80      	pop	{r7}
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	20000f3c 	.word	0x20000f3c
 800a7d4:	20000f28 	.word	0x20000f28

0800a7d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d10b      	bne.n	800a800 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	613b      	str	r3, [r7, #16]
}
 800a7fa:	bf00      	nop
 800a7fc:	bf00      	nop
 800a7fe:	e7fd      	b.n	800a7fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10b      	bne.n	800a81e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	60fb      	str	r3, [r7, #12]
}
 800a818:	bf00      	nop
 800a81a:	bf00      	nop
 800a81c:	e7fd      	b.n	800a81a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a81e:	f000 fe55 	bl	800b4cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a822:	4b1d      	ldr	r3, [pc, #116]	@ (800a898 <xTaskCheckForTimeOut+0xc0>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	69ba      	ldr	r2, [r7, #24]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83a:	d102      	bne.n	800a842 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a83c:	2300      	movs	r3, #0
 800a83e:	61fb      	str	r3, [r7, #28]
 800a840:	e023      	b.n	800a88a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	4b15      	ldr	r3, [pc, #84]	@ (800a89c <xTaskCheckForTimeOut+0xc4>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d007      	beq.n	800a85e <xTaskCheckForTimeOut+0x86>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	69ba      	ldr	r2, [r7, #24]
 800a854:	429a      	cmp	r2, r3
 800a856:	d302      	bcc.n	800a85e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a858:	2301      	movs	r3, #1
 800a85a:	61fb      	str	r3, [r7, #28]
 800a85c:	e015      	b.n	800a88a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	429a      	cmp	r2, r3
 800a866:	d20b      	bcs.n	800a880 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	1ad2      	subs	r2, r2, r3
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7ff ff99 	bl	800a7ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a87a:	2300      	movs	r3, #0
 800a87c:	61fb      	str	r3, [r7, #28]
 800a87e:	e004      	b.n	800a88a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a886:	2301      	movs	r3, #1
 800a888:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a88a:	f000 fe4f 	bl	800b52c <vPortExitCritical>

	return xReturn;
 800a88e:	69fb      	ldr	r3, [r7, #28]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3720      	adds	r7, #32
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	20000f28 	.word	0x20000f28
 800a89c:	20000f3c 	.word	0x20000f3c

0800a8a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8a4:	4b03      	ldr	r3, [pc, #12]	@ (800a8b4 <vTaskMissedYield+0x14>)
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	601a      	str	r2, [r3, #0]
}
 800a8aa:	bf00      	nop
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bc80      	pop	{r7}
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	20000f38 	.word	0x20000f38

0800a8b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8c0:	f000 f852 	bl	800a968 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8c4:	4b06      	ldr	r3, [pc, #24]	@ (800a8e0 <prvIdleTask+0x28>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d9f9      	bls.n	800a8c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8cc:	4b05      	ldr	r3, [pc, #20]	@ (800a8e4 <prvIdleTask+0x2c>)
 800a8ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8dc:	e7f0      	b.n	800a8c0 <prvIdleTask+0x8>
 800a8de:	bf00      	nop
 800a8e0:	20000a54 	.word	0x20000a54
 800a8e4:	e000ed04 	.word	0xe000ed04

0800a8e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	607b      	str	r3, [r7, #4]
 800a8f2:	e00c      	b.n	800a90e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4a12      	ldr	r2, [pc, #72]	@ (800a948 <prvInitialiseTaskLists+0x60>)
 800a900:	4413      	add	r3, r2
 800a902:	4618      	mov	r0, r3
 800a904:	f7fe fcb8 	bl	8009278 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3301      	adds	r3, #1
 800a90c:	607b      	str	r3, [r7, #4]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b37      	cmp	r3, #55	@ 0x37
 800a912:	d9ef      	bls.n	800a8f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a914:	480d      	ldr	r0, [pc, #52]	@ (800a94c <prvInitialiseTaskLists+0x64>)
 800a916:	f7fe fcaf 	bl	8009278 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a91a:	480d      	ldr	r0, [pc, #52]	@ (800a950 <prvInitialiseTaskLists+0x68>)
 800a91c:	f7fe fcac 	bl	8009278 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a920:	480c      	ldr	r0, [pc, #48]	@ (800a954 <prvInitialiseTaskLists+0x6c>)
 800a922:	f7fe fca9 	bl	8009278 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a926:	480c      	ldr	r0, [pc, #48]	@ (800a958 <prvInitialiseTaskLists+0x70>)
 800a928:	f7fe fca6 	bl	8009278 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a92c:	480b      	ldr	r0, [pc, #44]	@ (800a95c <prvInitialiseTaskLists+0x74>)
 800a92e:	f7fe fca3 	bl	8009278 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a932:	4b0b      	ldr	r3, [pc, #44]	@ (800a960 <prvInitialiseTaskLists+0x78>)
 800a934:	4a05      	ldr	r2, [pc, #20]	@ (800a94c <prvInitialiseTaskLists+0x64>)
 800a936:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a938:	4b0a      	ldr	r3, [pc, #40]	@ (800a964 <prvInitialiseTaskLists+0x7c>)
 800a93a:	4a05      	ldr	r2, [pc, #20]	@ (800a950 <prvInitialiseTaskLists+0x68>)
 800a93c:	601a      	str	r2, [r3, #0]
}
 800a93e:	bf00      	nop
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	20000a54 	.word	0x20000a54
 800a94c:	20000eb4 	.word	0x20000eb4
 800a950:	20000ec8 	.word	0x20000ec8
 800a954:	20000ee4 	.word	0x20000ee4
 800a958:	20000ef8 	.word	0x20000ef8
 800a95c:	20000f10 	.word	0x20000f10
 800a960:	20000edc 	.word	0x20000edc
 800a964:	20000ee0 	.word	0x20000ee0

0800a968 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a96e:	e019      	b.n	800a9a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a970:	f000 fdac 	bl	800b4cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a974:	4b10      	ldr	r3, [pc, #64]	@ (800a9b8 <prvCheckTasksWaitingTermination+0x50>)
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	3304      	adds	r3, #4
 800a980:	4618      	mov	r0, r3
 800a982:	f7fe fcff 	bl	8009384 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a986:	4b0d      	ldr	r3, [pc, #52]	@ (800a9bc <prvCheckTasksWaitingTermination+0x54>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	4a0b      	ldr	r2, [pc, #44]	@ (800a9bc <prvCheckTasksWaitingTermination+0x54>)
 800a98e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a990:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c0 <prvCheckTasksWaitingTermination+0x58>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3b01      	subs	r3, #1
 800a996:	4a0a      	ldr	r2, [pc, #40]	@ (800a9c0 <prvCheckTasksWaitingTermination+0x58>)
 800a998:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a99a:	f000 fdc7 	bl	800b52c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f810 	bl	800a9c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9a4:	4b06      	ldr	r3, [pc, #24]	@ (800a9c0 <prvCheckTasksWaitingTermination+0x58>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e1      	bne.n	800a970 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20000ef8 	.word	0x20000ef8
 800a9bc:	20000f24 	.word	0x20000f24
 800a9c0:	20000f0c 	.word	0x20000f0c

0800a9c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	3354      	adds	r3, #84	@ 0x54
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f001 ff27 	bl	800c824 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d108      	bne.n	800a9f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f000 ff41 	bl	800b86c <vPortFree>
				vPortFree( pxTCB );
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 ff3e 	bl	800b86c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9f0:	e019      	b.n	800aa26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d103      	bne.n	800aa04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 ff35 	bl	800b86c <vPortFree>
	}
 800aa02:	e010      	b.n	800aa26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d00b      	beq.n	800aa26 <prvDeleteTCB+0x62>
	__asm volatile
 800aa0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	60fb      	str	r3, [r7, #12]
}
 800aa20:	bf00      	nop
 800aa22:	bf00      	nop
 800aa24:	e7fd      	b.n	800aa22 <prvDeleteTCB+0x5e>
	}
 800aa26:	bf00      	nop
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
	...

0800aa30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa36:	4b0c      	ldr	r3, [pc, #48]	@ (800aa68 <prvResetNextTaskUnblockTime+0x38>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d104      	bne.n	800aa4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa40:	4b0a      	ldr	r3, [pc, #40]	@ (800aa6c <prvResetNextTaskUnblockTime+0x3c>)
 800aa42:	f04f 32ff 	mov.w	r2, #4294967295
 800aa46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa48:	e008      	b.n	800aa5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa4a:	4b07      	ldr	r3, [pc, #28]	@ (800aa68 <prvResetNextTaskUnblockTime+0x38>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	4a04      	ldr	r2, [pc, #16]	@ (800aa6c <prvResetNextTaskUnblockTime+0x3c>)
 800aa5a:	6013      	str	r3, [r2, #0]
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bc80      	pop	{r7}
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	20000edc 	.word	0x20000edc
 800aa6c:	20000f44 	.word	0x20000f44

0800aa70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa76:	4b0b      	ldr	r3, [pc, #44]	@ (800aaa4 <xTaskGetSchedulerState+0x34>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d102      	bne.n	800aa84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	607b      	str	r3, [r7, #4]
 800aa82:	e008      	b.n	800aa96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa84:	4b08      	ldr	r3, [pc, #32]	@ (800aaa8 <xTaskGetSchedulerState+0x38>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d102      	bne.n	800aa92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	607b      	str	r3, [r7, #4]
 800aa90:	e001      	b.n	800aa96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa92:	2300      	movs	r3, #0
 800aa94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa96:	687b      	ldr	r3, [r7, #4]
	}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bc80      	pop	{r7}
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	20000f30 	.word	0x20000f30
 800aaa8:	20000f4c 	.word	0x20000f4c

0800aaac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aab8:	2300      	movs	r3, #0
 800aaba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d058      	beq.n	800ab74 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aac2:	4b2f      	ldr	r3, [pc, #188]	@ (800ab80 <xTaskPriorityDisinherit+0xd4>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d00b      	beq.n	800aae4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	60fb      	str	r3, [r7, #12]
}
 800aade:	bf00      	nop
 800aae0:	bf00      	nop
 800aae2:	e7fd      	b.n	800aae0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10b      	bne.n	800ab04 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	60bb      	str	r3, [r7, #8]
}
 800aafe:	bf00      	nop
 800ab00:	bf00      	nop
 800ab02:	e7fd      	b.n	800ab00 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab08:	1e5a      	subs	r2, r3, #1
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d02c      	beq.n	800ab74 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d128      	bne.n	800ab74 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	3304      	adds	r3, #4
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fe fc2c 	bl	8009384 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab38:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab44:	4b0f      	ldr	r3, [pc, #60]	@ (800ab84 <xTaskPriorityDisinherit+0xd8>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d903      	bls.n	800ab54 <xTaskPriorityDisinherit+0xa8>
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab50:	4a0c      	ldr	r2, [pc, #48]	@ (800ab84 <xTaskPriorityDisinherit+0xd8>)
 800ab52:	6013      	str	r3, [r2, #0]
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab58:	4613      	mov	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4a09      	ldr	r2, [pc, #36]	@ (800ab88 <xTaskPriorityDisinherit+0xdc>)
 800ab62:	441a      	add	r2, r3
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	3304      	adds	r3, #4
 800ab68:	4619      	mov	r1, r3
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	f7fe fbaf 	bl	80092ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab70:	2301      	movs	r3, #1
 800ab72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab74:	697b      	ldr	r3, [r7, #20]
	}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3718      	adds	r7, #24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	20000a50 	.word	0x20000a50
 800ab84:	20000f2c 	.word	0x20000f2c
 800ab88:	20000a54 	.word	0x20000a54

0800ab8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab96:	4b21      	ldr	r3, [pc, #132]	@ (800ac1c <prvAddCurrentTaskToDelayedList+0x90>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab9c:	4b20      	ldr	r3, [pc, #128]	@ (800ac20 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	3304      	adds	r3, #4
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe fbee 	bl	8009384 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abae:	d10a      	bne.n	800abc6 <prvAddCurrentTaskToDelayedList+0x3a>
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d007      	beq.n	800abc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abb6:	4b1a      	ldr	r3, [pc, #104]	@ (800ac20 <prvAddCurrentTaskToDelayedList+0x94>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3304      	adds	r3, #4
 800abbc:	4619      	mov	r1, r3
 800abbe:	4819      	ldr	r0, [pc, #100]	@ (800ac24 <prvAddCurrentTaskToDelayedList+0x98>)
 800abc0:	f7fe fb85 	bl	80092ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abc4:	e026      	b.n	800ac14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4413      	add	r3, r2
 800abcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abce:	4b14      	ldr	r3, [pc, #80]	@ (800ac20 <prvAddCurrentTaskToDelayedList+0x94>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d209      	bcs.n	800abf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abde:	4b12      	ldr	r3, [pc, #72]	@ (800ac28 <prvAddCurrentTaskToDelayedList+0x9c>)
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	4b0f      	ldr	r3, [pc, #60]	@ (800ac20 <prvAddCurrentTaskToDelayedList+0x94>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3304      	adds	r3, #4
 800abe8:	4619      	mov	r1, r3
 800abea:	4610      	mov	r0, r2
 800abec:	f7fe fb92 	bl	8009314 <vListInsert>
}
 800abf0:	e010      	b.n	800ac14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abf2:	4b0e      	ldr	r3, [pc, #56]	@ (800ac2c <prvAddCurrentTaskToDelayedList+0xa0>)
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ac20 <prvAddCurrentTaskToDelayedList+0x94>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	3304      	adds	r3, #4
 800abfc:	4619      	mov	r1, r3
 800abfe:	4610      	mov	r0, r2
 800ac00:	f7fe fb88 	bl	8009314 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac04:	4b0a      	ldr	r3, [pc, #40]	@ (800ac30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d202      	bcs.n	800ac14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac0e:	4a08      	ldr	r2, [pc, #32]	@ (800ac30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	6013      	str	r3, [r2, #0]
}
 800ac14:	bf00      	nop
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	20000f28 	.word	0x20000f28
 800ac20:	20000a50 	.word	0x20000a50
 800ac24:	20000f10 	.word	0x20000f10
 800ac28:	20000ee0 	.word	0x20000ee0
 800ac2c:	20000edc 	.word	0x20000edc
 800ac30:	20000f44 	.word	0x20000f44

0800ac34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b08a      	sub	sp, #40	@ 0x28
 800ac38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac3e:	f000 fb11 	bl	800b264 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac42:	4b1d      	ldr	r3, [pc, #116]	@ (800acb8 <xTimerCreateTimerTask+0x84>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d021      	beq.n	800ac8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac52:	1d3a      	adds	r2, r7, #4
 800ac54:	f107 0108 	add.w	r1, r7, #8
 800ac58:	f107 030c 	add.w	r3, r7, #12
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fe faf1 	bl	8009244 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac62:	6879      	ldr	r1, [r7, #4]
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	9202      	str	r2, [sp, #8]
 800ac6a:	9301      	str	r3, [sp, #4]
 800ac6c:	2302      	movs	r3, #2
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	2300      	movs	r3, #0
 800ac72:	460a      	mov	r2, r1
 800ac74:	4911      	ldr	r1, [pc, #68]	@ (800acbc <xTimerCreateTimerTask+0x88>)
 800ac76:	4812      	ldr	r0, [pc, #72]	@ (800acc0 <xTimerCreateTimerTask+0x8c>)
 800ac78:	f7ff f8a6 	bl	8009dc8 <xTaskCreateStatic>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	4a11      	ldr	r2, [pc, #68]	@ (800acc4 <xTimerCreateTimerTask+0x90>)
 800ac80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac82:	4b10      	ldr	r3, [pc, #64]	@ (800acc4 <xTimerCreateTimerTask+0x90>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10b      	bne.n	800acac <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ac94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac98:	f383 8811 	msr	BASEPRI, r3
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	613b      	str	r3, [r7, #16]
}
 800aca6:	bf00      	nop
 800aca8:	bf00      	nop
 800acaa:	e7fd      	b.n	800aca8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800acac:	697b      	ldr	r3, [r7, #20]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20000f80 	.word	0x20000f80
 800acbc:	0800d414 	.word	0x0800d414
 800acc0:	0800ae01 	.word	0x0800ae01
 800acc4:	20000f84 	.word	0x20000f84

0800acc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b08a      	sub	sp, #40	@ 0x28
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10b      	bne.n	800acf8 <xTimerGenericCommand+0x30>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	623b      	str	r3, [r7, #32]
}
 800acf2:	bf00      	nop
 800acf4:	bf00      	nop
 800acf6:	e7fd      	b.n	800acf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800acf8:	4b19      	ldr	r3, [pc, #100]	@ (800ad60 <xTimerGenericCommand+0x98>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d02a      	beq.n	800ad56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	2b05      	cmp	r3, #5
 800ad10:	dc18      	bgt.n	800ad44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad12:	f7ff fead 	bl	800aa70 <xTaskGetSchedulerState>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b02      	cmp	r3, #2
 800ad1a:	d109      	bne.n	800ad30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad1c:	4b10      	ldr	r3, [pc, #64]	@ (800ad60 <xTimerGenericCommand+0x98>)
 800ad1e:	6818      	ldr	r0, [r3, #0]
 800ad20:	f107 0110 	add.w	r1, r7, #16
 800ad24:	2300      	movs	r3, #0
 800ad26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad28:	f7fe fc60 	bl	80095ec <xQueueGenericSend>
 800ad2c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ad2e:	e012      	b.n	800ad56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad30:	4b0b      	ldr	r3, [pc, #44]	@ (800ad60 <xTimerGenericCommand+0x98>)
 800ad32:	6818      	ldr	r0, [r3, #0]
 800ad34:	f107 0110 	add.w	r1, r7, #16
 800ad38:	2300      	movs	r3, #0
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f7fe fc56 	bl	80095ec <xQueueGenericSend>
 800ad40:	6278      	str	r0, [r7, #36]	@ 0x24
 800ad42:	e008      	b.n	800ad56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad44:	4b06      	ldr	r3, [pc, #24]	@ (800ad60 <xTimerGenericCommand+0x98>)
 800ad46:	6818      	ldr	r0, [r3, #0]
 800ad48:	f107 0110 	add.w	r1, r7, #16
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	f7fe fd4e 	bl	80097f0 <xQueueGenericSendFromISR>
 800ad54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3728      	adds	r7, #40	@ 0x28
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	20000f80 	.word	0x20000f80

0800ad64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b088      	sub	sp, #32
 800ad68:	af02      	add	r7, sp, #8
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad6e:	4b23      	ldr	r3, [pc, #140]	@ (800adfc <prvProcessExpiredTimer+0x98>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fe fb01 	bl	8009384 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad88:	f003 0304 	and.w	r3, r3, #4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d023      	beq.n	800add8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	699a      	ldr	r2, [r3, #24]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	18d1      	adds	r1, r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	6978      	ldr	r0, [r7, #20]
 800ad9e:	f000 f8d3 	bl	800af48 <prvInsertTimerInActiveList>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d020      	beq.n	800adea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ada8:	2300      	movs	r3, #0
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	2300      	movs	r3, #0
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	2100      	movs	r1, #0
 800adb2:	6978      	ldr	r0, [r7, #20]
 800adb4:	f7ff ff88 	bl	800acc8 <xTimerGenericCommand>
 800adb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d114      	bne.n	800adea <prvProcessExpiredTimer+0x86>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	60fb      	str	r3, [r7, #12]
}
 800add2:	bf00      	nop
 800add4:	bf00      	nop
 800add6:	e7fd      	b.n	800add4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adde:	f023 0301 	bic.w	r3, r3, #1
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	6978      	ldr	r0, [r7, #20]
 800adf0:	4798      	blx	r3
}
 800adf2:	bf00      	nop
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20000f78 	.word	0x20000f78

0800ae00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae08:	f107 0308 	add.w	r3, r7, #8
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 f859 	bl	800aec4 <prvGetNextExpireTime>
 800ae12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	4619      	mov	r1, r3
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f000 f805 	bl	800ae28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae1e:	f000 f8d5 	bl	800afcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae22:	bf00      	nop
 800ae24:	e7f0      	b.n	800ae08 <prvTimerTask+0x8>
	...

0800ae28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae32:	f7ff fa2d 	bl	800a290 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae36:	f107 0308 	add.w	r3, r7, #8
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 f864 	bl	800af08 <prvSampleTimeNow>
 800ae40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d130      	bne.n	800aeaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10a      	bne.n	800ae64 <prvProcessTimerOrBlockTask+0x3c>
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d806      	bhi.n	800ae64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae56:	f7ff fa29 	bl	800a2ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae5a:	68f9      	ldr	r1, [r7, #12]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7ff ff81 	bl	800ad64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae62:	e024      	b.n	800aeae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d008      	beq.n	800ae7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae6a:	4b13      	ldr	r3, [pc, #76]	@ (800aeb8 <prvProcessTimerOrBlockTask+0x90>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <prvProcessTimerOrBlockTask+0x50>
 800ae74:	2301      	movs	r3, #1
 800ae76:	e000      	b.n	800ae7a <prvProcessTimerOrBlockTask+0x52>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae7c:	4b0f      	ldr	r3, [pc, #60]	@ (800aebc <prvProcessTimerOrBlockTask+0x94>)
 800ae7e:	6818      	ldr	r0, [r3, #0]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	4619      	mov	r1, r3
 800ae8a:	f7fe ff69 	bl	8009d60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae8e:	f7ff fa0d 	bl	800a2ac <xTaskResumeAll>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10a      	bne.n	800aeae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae98:	4b09      	ldr	r3, [pc, #36]	@ (800aec0 <prvProcessTimerOrBlockTask+0x98>)
 800ae9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae9e:	601a      	str	r2, [r3, #0]
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	f3bf 8f6f 	isb	sy
}
 800aea8:	e001      	b.n	800aeae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aeaa:	f7ff f9ff 	bl	800a2ac <xTaskResumeAll>
}
 800aeae:	bf00      	nop
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20000f7c 	.word	0x20000f7c
 800aebc:	20000f80 	.word	0x20000f80
 800aec0:	e000ed04 	.word	0xe000ed04

0800aec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aecc:	4b0d      	ldr	r3, [pc, #52]	@ (800af04 <prvGetNextExpireTime+0x40>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <prvGetNextExpireTime+0x16>
 800aed6:	2201      	movs	r2, #1
 800aed8:	e000      	b.n	800aedc <prvGetNextExpireTime+0x18>
 800aeda:	2200      	movs	r2, #0
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d105      	bne.n	800aef4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aee8:	4b06      	ldr	r3, [pc, #24]	@ (800af04 <prvGetNextExpireTime+0x40>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	e001      	b.n	800aef8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aef4:	2300      	movs	r3, #0
 800aef6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aef8:	68fb      	ldr	r3, [r7, #12]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	bc80      	pop	{r7}
 800af02:	4770      	bx	lr
 800af04:	20000f78 	.word	0x20000f78

0800af08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af10:	f7ff fa6a 	bl	800a3e8 <xTaskGetTickCount>
 800af14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af16:	4b0b      	ldr	r3, [pc, #44]	@ (800af44 <prvSampleTimeNow+0x3c>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d205      	bcs.n	800af2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af20:	f000 f93a 	bl	800b198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	e002      	b.n	800af32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af32:	4a04      	ldr	r2, [pc, #16]	@ (800af44 <prvSampleTimeNow+0x3c>)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af38:	68fb      	ldr	r3, [r7, #12]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	20000f88 	.word	0x20000f88

0800af48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b086      	sub	sp, #24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
 800af54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af56:	2300      	movs	r3, #0
 800af58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d812      	bhi.n	800af94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	1ad2      	subs	r2, r2, r3
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d302      	bcc.n	800af82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af7c:	2301      	movs	r3, #1
 800af7e:	617b      	str	r3, [r7, #20]
 800af80:	e01b      	b.n	800afba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af82:	4b10      	ldr	r3, [pc, #64]	@ (800afc4 <prvInsertTimerInActiveList+0x7c>)
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	3304      	adds	r3, #4
 800af8a:	4619      	mov	r1, r3
 800af8c:	4610      	mov	r0, r2
 800af8e:	f7fe f9c1 	bl	8009314 <vListInsert>
 800af92:	e012      	b.n	800afba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d206      	bcs.n	800afaa <prvInsertTimerInActiveList+0x62>
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d302      	bcc.n	800afaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800afa4:	2301      	movs	r3, #1
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e007      	b.n	800afba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afaa:	4b07      	ldr	r3, [pc, #28]	@ (800afc8 <prvInsertTimerInActiveList+0x80>)
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3304      	adds	r3, #4
 800afb2:	4619      	mov	r1, r3
 800afb4:	4610      	mov	r0, r2
 800afb6:	f7fe f9ad 	bl	8009314 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800afba:	697b      	ldr	r3, [r7, #20]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3718      	adds	r7, #24
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	20000f7c 	.word	0x20000f7c
 800afc8:	20000f78 	.word	0x20000f78

0800afcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08e      	sub	sp, #56	@ 0x38
 800afd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afd2:	e0ce      	b.n	800b172 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	da19      	bge.n	800b00e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800afda:	1d3b      	adds	r3, r7, #4
 800afdc:	3304      	adds	r3, #4
 800afde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800afe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10b      	bne.n	800affe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800afe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	61fb      	str	r3, [r7, #28]
}
 800aff8:	bf00      	nop
 800affa:	bf00      	nop
 800affc:	e7fd      	b.n	800affa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800affe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b004:	6850      	ldr	r0, [r2, #4]
 800b006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b008:	6892      	ldr	r2, [r2, #8]
 800b00a:	4611      	mov	r1, r2
 800b00c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	f2c0 80ae 	blt.w	800b172 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d004      	beq.n	800b02c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b024:	3304      	adds	r3, #4
 800b026:	4618      	mov	r0, r3
 800b028:	f7fe f9ac 	bl	8009384 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b02c:	463b      	mov	r3, r7
 800b02e:	4618      	mov	r0, r3
 800b030:	f7ff ff6a 	bl	800af08 <prvSampleTimeNow>
 800b034:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b09      	cmp	r3, #9
 800b03a:	f200 8097 	bhi.w	800b16c <prvProcessReceivedCommands+0x1a0>
 800b03e:	a201      	add	r2, pc, #4	@ (adr r2, 800b044 <prvProcessReceivedCommands+0x78>)
 800b040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b044:	0800b06d 	.word	0x0800b06d
 800b048:	0800b06d 	.word	0x0800b06d
 800b04c:	0800b06d 	.word	0x0800b06d
 800b050:	0800b0e3 	.word	0x0800b0e3
 800b054:	0800b0f7 	.word	0x0800b0f7
 800b058:	0800b143 	.word	0x0800b143
 800b05c:	0800b06d 	.word	0x0800b06d
 800b060:	0800b06d 	.word	0x0800b06d
 800b064:	0800b0e3 	.word	0x0800b0e3
 800b068:	0800b0f7 	.word	0x0800b0f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b06e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b072:	f043 0301 	orr.w	r3, r3, #1
 800b076:	b2da      	uxtb	r2, r3
 800b078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b082:	699b      	ldr	r3, [r3, #24]
 800b084:	18d1      	adds	r1, r2, r3
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b08a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b08c:	f7ff ff5c 	bl	800af48 <prvInsertTimerInActiveList>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d06c      	beq.n	800b170 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b09c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0a4:	f003 0304 	and.w	r3, r3, #4
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d061      	beq.n	800b170 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	441a      	add	r2, r3
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0be:	f7ff fe03 	bl	800acc8 <xTimerGenericCommand>
 800b0c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d152      	bne.n	800b170 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	61bb      	str	r3, [r7, #24]
}
 800b0dc:	bf00      	nop
 800b0de:	bf00      	nop
 800b0e0:	e7fd      	b.n	800b0de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0e8:	f023 0301 	bic.w	r3, r3, #1
 800b0ec:	b2da      	uxtb	r2, r3
 800b0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b0f4:	e03d      	b.n	800b172 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0fc:	f043 0301 	orr.w	r3, r3, #1
 800b100:	b2da      	uxtb	r2, r3
 800b102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b104:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b110:	699b      	ldr	r3, [r3, #24]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10b      	bne.n	800b12e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	617b      	str	r3, [r7, #20]
}
 800b128:	bf00      	nop
 800b12a:	bf00      	nop
 800b12c:	e7fd      	b.n	800b12a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b130:	699a      	ldr	r2, [r3, #24]
 800b132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b134:	18d1      	adds	r1, r2, r3
 800b136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b13a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b13c:	f7ff ff04 	bl	800af48 <prvInsertTimerInActiveList>
					break;
 800b140:	e017      	b.n	800b172 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b148:	f003 0302 	and.w	r3, r3, #2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d103      	bne.n	800b158 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b152:	f000 fb8b 	bl	800b86c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b156:	e00c      	b.n	800b172 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b15e:	f023 0301 	bic.w	r3, r3, #1
 800b162:	b2da      	uxtb	r2, r3
 800b164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b16a:	e002      	b.n	800b172 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b16c:	bf00      	nop
 800b16e:	e000      	b.n	800b172 <prvProcessReceivedCommands+0x1a6>
					break;
 800b170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b172:	4b08      	ldr	r3, [pc, #32]	@ (800b194 <prvProcessReceivedCommands+0x1c8>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	1d39      	adds	r1, r7, #4
 800b178:	2200      	movs	r2, #0
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe fbd6 	bl	800992c <xQueueReceive>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	f47f af26 	bne.w	800afd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b188:	bf00      	nop
 800b18a:	bf00      	nop
 800b18c:	3730      	adds	r7, #48	@ 0x30
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000f80 	.word	0x20000f80

0800b198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b19e:	e049      	b.n	800b234 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1a0:	4b2e      	ldr	r3, [pc, #184]	@ (800b25c <prvSwitchTimerLists+0xc4>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1aa:	4b2c      	ldr	r3, [pc, #176]	@ (800b25c <prvSwitchTimerLists+0xc4>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fe f8e3 	bl	8009384 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1cc:	f003 0304 	and.w	r3, r3, #4
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d02f      	beq.n	800b234 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	4413      	add	r3, r2
 800b1dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d90e      	bls.n	800b204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1f2:	4b1a      	ldr	r3, [pc, #104]	@ (800b25c <prvSwitchTimerLists+0xc4>)
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	f7fe f889 	bl	8009314 <vListInsert>
 800b202:	e017      	b.n	800b234 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b204:	2300      	movs	r3, #0
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	2300      	movs	r3, #0
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	2100      	movs	r1, #0
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f7ff fd5a 	bl	800acc8 <xTimerGenericCommand>
 800b214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10b      	bne.n	800b234 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	603b      	str	r3, [r7, #0]
}
 800b22e:	bf00      	nop
 800b230:	bf00      	nop
 800b232:	e7fd      	b.n	800b230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b234:	4b09      	ldr	r3, [pc, #36]	@ (800b25c <prvSwitchTimerLists+0xc4>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1b0      	bne.n	800b1a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b23e:	4b07      	ldr	r3, [pc, #28]	@ (800b25c <prvSwitchTimerLists+0xc4>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b244:	4b06      	ldr	r3, [pc, #24]	@ (800b260 <prvSwitchTimerLists+0xc8>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a04      	ldr	r2, [pc, #16]	@ (800b25c <prvSwitchTimerLists+0xc4>)
 800b24a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b24c:	4a04      	ldr	r2, [pc, #16]	@ (800b260 <prvSwitchTimerLists+0xc8>)
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	6013      	str	r3, [r2, #0]
}
 800b252:	bf00      	nop
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	20000f78 	.word	0x20000f78
 800b260:	20000f7c 	.word	0x20000f7c

0800b264 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b26a:	f000 f92f 	bl	800b4cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b26e:	4b15      	ldr	r3, [pc, #84]	@ (800b2c4 <prvCheckForValidListAndQueue+0x60>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d120      	bne.n	800b2b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b276:	4814      	ldr	r0, [pc, #80]	@ (800b2c8 <prvCheckForValidListAndQueue+0x64>)
 800b278:	f7fd fffe 	bl	8009278 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b27c:	4813      	ldr	r0, [pc, #76]	@ (800b2cc <prvCheckForValidListAndQueue+0x68>)
 800b27e:	f7fd fffb 	bl	8009278 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b282:	4b13      	ldr	r3, [pc, #76]	@ (800b2d0 <prvCheckForValidListAndQueue+0x6c>)
 800b284:	4a10      	ldr	r2, [pc, #64]	@ (800b2c8 <prvCheckForValidListAndQueue+0x64>)
 800b286:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b288:	4b12      	ldr	r3, [pc, #72]	@ (800b2d4 <prvCheckForValidListAndQueue+0x70>)
 800b28a:	4a10      	ldr	r2, [pc, #64]	@ (800b2cc <prvCheckForValidListAndQueue+0x68>)
 800b28c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b28e:	2300      	movs	r3, #0
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	4b11      	ldr	r3, [pc, #68]	@ (800b2d8 <prvCheckForValidListAndQueue+0x74>)
 800b294:	4a11      	ldr	r2, [pc, #68]	@ (800b2dc <prvCheckForValidListAndQueue+0x78>)
 800b296:	2110      	movs	r1, #16
 800b298:	200a      	movs	r0, #10
 800b29a:	f7fe f907 	bl	80094ac <xQueueGenericCreateStatic>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	4a08      	ldr	r2, [pc, #32]	@ (800b2c4 <prvCheckForValidListAndQueue+0x60>)
 800b2a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b2a4:	4b07      	ldr	r3, [pc, #28]	@ (800b2c4 <prvCheckForValidListAndQueue+0x60>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d005      	beq.n	800b2b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b2ac:	4b05      	ldr	r3, [pc, #20]	@ (800b2c4 <prvCheckForValidListAndQueue+0x60>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	490b      	ldr	r1, [pc, #44]	@ (800b2e0 <prvCheckForValidListAndQueue+0x7c>)
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fe fd2c 	bl	8009d10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2b8:	f000 f938 	bl	800b52c <vPortExitCritical>
}
 800b2bc:	bf00      	nop
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20000f80 	.word	0x20000f80
 800b2c8:	20000f50 	.word	0x20000f50
 800b2cc:	20000f64 	.word	0x20000f64
 800b2d0:	20000f78 	.word	0x20000f78
 800b2d4:	20000f7c 	.word	0x20000f7c
 800b2d8:	2000102c 	.word	0x2000102c
 800b2dc:	20000f8c 	.word	0x20000f8c
 800b2e0:	0800d41c 	.word	0x0800d41c

0800b2e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	3b04      	subs	r3, #4
 800b2f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b2fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	3b04      	subs	r3, #4
 800b302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f023 0201 	bic.w	r2, r3, #1
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3b04      	subs	r3, #4
 800b312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b314:	4a08      	ldr	r2, [pc, #32]	@ (800b338 <pxPortInitialiseStack+0x54>)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	3b14      	subs	r3, #20
 800b31e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3b20      	subs	r3, #32
 800b32a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b32c:	68fb      	ldr	r3, [r7, #12]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	bc80      	pop	{r7}
 800b336:	4770      	bx	lr
 800b338:	0800b33d 	.word	0x0800b33d

0800b33c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b342:	2300      	movs	r3, #0
 800b344:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b346:	4b12      	ldr	r3, [pc, #72]	@ (800b390 <prvTaskExitError+0x54>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34e:	d00b      	beq.n	800b368 <prvTaskExitError+0x2c>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	60fb      	str	r3, [r7, #12]
}
 800b362:	bf00      	nop
 800b364:	bf00      	nop
 800b366:	e7fd      	b.n	800b364 <prvTaskExitError+0x28>
	__asm volatile
 800b368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b36c:	f383 8811 	msr	BASEPRI, r3
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	f3bf 8f4f 	dsb	sy
 800b378:	60bb      	str	r3, [r7, #8]
}
 800b37a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b37c:	bf00      	nop
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d0fc      	beq.n	800b37e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b384:	bf00      	nop
 800b386:	bf00      	nop
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bc80      	pop	{r7}
 800b38e:	4770      	bx	lr
 800b390:	2000011c 	.word	0x2000011c
	...

0800b3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3a0:	4b07      	ldr	r3, [pc, #28]	@ (800b3c0 <pxCurrentTCBConst2>)
 800b3a2:	6819      	ldr	r1, [r3, #0]
 800b3a4:	6808      	ldr	r0, [r1, #0]
 800b3a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b3aa:	f380 8809 	msr	PSP, r0
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f04f 0000 	mov.w	r0, #0
 800b3b6:	f380 8811 	msr	BASEPRI, r0
 800b3ba:	f04e 0e0d 	orr.w	lr, lr, #13
 800b3be:	4770      	bx	lr

0800b3c0 <pxCurrentTCBConst2>:
 800b3c0:	20000a50 	.word	0x20000a50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3c4:	bf00      	nop
 800b3c6:	bf00      	nop

0800b3c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b3c8:	4806      	ldr	r0, [pc, #24]	@ (800b3e4 <prvPortStartFirstTask+0x1c>)
 800b3ca:	6800      	ldr	r0, [r0, #0]
 800b3cc:	6800      	ldr	r0, [r0, #0]
 800b3ce:	f380 8808 	msr	MSP, r0
 800b3d2:	b662      	cpsie	i
 800b3d4:	b661      	cpsie	f
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	df00      	svc	0
 800b3e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3e2:	bf00      	nop
 800b3e4:	e000ed08 	.word	0xe000ed08

0800b3e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b3ee:	4b32      	ldr	r3, [pc, #200]	@ (800b4b8 <xPortStartScheduler+0xd0>)
 800b3f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	22ff      	movs	r2, #255	@ 0xff
 800b3fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	b2db      	uxtb	r3, r3
 800b406:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b410:	b2da      	uxtb	r2, r3
 800b412:	4b2a      	ldr	r3, [pc, #168]	@ (800b4bc <xPortStartScheduler+0xd4>)
 800b414:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b416:	4b2a      	ldr	r3, [pc, #168]	@ (800b4c0 <xPortStartScheduler+0xd8>)
 800b418:	2207      	movs	r2, #7
 800b41a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b41c:	e009      	b.n	800b432 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b41e:	4b28      	ldr	r3, [pc, #160]	@ (800b4c0 <xPortStartScheduler+0xd8>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	3b01      	subs	r3, #1
 800b424:	4a26      	ldr	r2, [pc, #152]	@ (800b4c0 <xPortStartScheduler+0xd8>)
 800b426:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b428:	78fb      	ldrb	r3, [r7, #3]
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	005b      	lsls	r3, r3, #1
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b432:	78fb      	ldrb	r3, [r7, #3]
 800b434:	b2db      	uxtb	r3, r3
 800b436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b43a:	2b80      	cmp	r3, #128	@ 0x80
 800b43c:	d0ef      	beq.n	800b41e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b43e:	4b20      	ldr	r3, [pc, #128]	@ (800b4c0 <xPortStartScheduler+0xd8>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f1c3 0307 	rsb	r3, r3, #7
 800b446:	2b04      	cmp	r3, #4
 800b448:	d00b      	beq.n	800b462 <xPortStartScheduler+0x7a>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	60bb      	str	r3, [r7, #8]
}
 800b45c:	bf00      	nop
 800b45e:	bf00      	nop
 800b460:	e7fd      	b.n	800b45e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b462:	4b17      	ldr	r3, [pc, #92]	@ (800b4c0 <xPortStartScheduler+0xd8>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	021b      	lsls	r3, r3, #8
 800b468:	4a15      	ldr	r2, [pc, #84]	@ (800b4c0 <xPortStartScheduler+0xd8>)
 800b46a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b46c:	4b14      	ldr	r3, [pc, #80]	@ (800b4c0 <xPortStartScheduler+0xd8>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b474:	4a12      	ldr	r2, [pc, #72]	@ (800b4c0 <xPortStartScheduler+0xd8>)
 800b476:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b480:	4b10      	ldr	r3, [pc, #64]	@ (800b4c4 <xPortStartScheduler+0xdc>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a0f      	ldr	r2, [pc, #60]	@ (800b4c4 <xPortStartScheduler+0xdc>)
 800b486:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b48a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b48c:	4b0d      	ldr	r3, [pc, #52]	@ (800b4c4 <xPortStartScheduler+0xdc>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a0c      	ldr	r2, [pc, #48]	@ (800b4c4 <xPortStartScheduler+0xdc>)
 800b492:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b496:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b498:	f000 f8b8 	bl	800b60c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b49c:	4b0a      	ldr	r3, [pc, #40]	@ (800b4c8 <xPortStartScheduler+0xe0>)
 800b49e:	2200      	movs	r2, #0
 800b4a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4a2:	f7ff ff91 	bl	800b3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4a6:	f7ff f867 	bl	800a578 <vTaskSwitchContext>
	prvTaskExitError();
 800b4aa:	f7ff ff47 	bl	800b33c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3710      	adds	r7, #16
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	e000e400 	.word	0xe000e400
 800b4bc:	2000107c 	.word	0x2000107c
 800b4c0:	20001080 	.word	0x20001080
 800b4c4:	e000ed20 	.word	0xe000ed20
 800b4c8:	2000011c 	.word	0x2000011c

0800b4cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
	__asm volatile
 800b4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	607b      	str	r3, [r7, #4]
}
 800b4e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b4e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b524 <vPortEnterCritical+0x58>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	4a0d      	ldr	r2, [pc, #52]	@ (800b524 <vPortEnterCritical+0x58>)
 800b4ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b524 <vPortEnterCritical+0x58>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d110      	bne.n	800b51a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4f8:	4b0b      	ldr	r3, [pc, #44]	@ (800b528 <vPortEnterCritical+0x5c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00b      	beq.n	800b51a <vPortEnterCritical+0x4e>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	603b      	str	r3, [r7, #0]
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	e7fd      	b.n	800b516 <vPortEnterCritical+0x4a>
	}
}
 800b51a:	bf00      	nop
 800b51c:	370c      	adds	r7, #12
 800b51e:	46bd      	mov	sp, r7
 800b520:	bc80      	pop	{r7}
 800b522:	4770      	bx	lr
 800b524:	2000011c 	.word	0x2000011c
 800b528:	e000ed04 	.word	0xe000ed04

0800b52c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b532:	4b12      	ldr	r3, [pc, #72]	@ (800b57c <vPortExitCritical+0x50>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10b      	bne.n	800b552 <vPortExitCritical+0x26>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	607b      	str	r3, [r7, #4]
}
 800b54c:	bf00      	nop
 800b54e:	bf00      	nop
 800b550:	e7fd      	b.n	800b54e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b552:	4b0a      	ldr	r3, [pc, #40]	@ (800b57c <vPortExitCritical+0x50>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3b01      	subs	r3, #1
 800b558:	4a08      	ldr	r2, [pc, #32]	@ (800b57c <vPortExitCritical+0x50>)
 800b55a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b55c:	4b07      	ldr	r3, [pc, #28]	@ (800b57c <vPortExitCritical+0x50>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d105      	bne.n	800b570 <vPortExitCritical+0x44>
 800b564:	2300      	movs	r3, #0
 800b566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	f383 8811 	msr	BASEPRI, r3
}
 800b56e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	bc80      	pop	{r7}
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	2000011c 	.word	0x2000011c

0800b580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b580:	f3ef 8009 	mrs	r0, PSP
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c0 <pxCurrentTCBConst>)
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b590:	6010      	str	r0, [r2, #0]
 800b592:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b596:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b59a:	f380 8811 	msr	BASEPRI, r0
 800b59e:	f7fe ffeb 	bl	800a578 <vTaskSwitchContext>
 800b5a2:	f04f 0000 	mov.w	r0, #0
 800b5a6:	f380 8811 	msr	BASEPRI, r0
 800b5aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b5ae:	6819      	ldr	r1, [r3, #0]
 800b5b0:	6808      	ldr	r0, [r1, #0]
 800b5b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b5b6:	f380 8809 	msr	PSP, r0
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	4770      	bx	lr

0800b5c0 <pxCurrentTCBConst>:
 800b5c0:	20000a50 	.word	0x20000a50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b5c4:	bf00      	nop
 800b5c6:	bf00      	nop

0800b5c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	607b      	str	r3, [r7, #4]
}
 800b5e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5e2:	f7fe ff0f 	bl	800a404 <xTaskIncrementTick>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5ec:	4b06      	ldr	r3, [pc, #24]	@ (800b608 <xPortSysTickHandler+0x40>)
 800b5ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	f383 8811 	msr	BASEPRI, r3
}
 800b5fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b600:	bf00      	nop
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	e000ed04 	.word	0xe000ed04

0800b60c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b60c:	b480      	push	{r7}
 800b60e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b610:	4b0a      	ldr	r3, [pc, #40]	@ (800b63c <vPortSetupTimerInterrupt+0x30>)
 800b612:	2200      	movs	r2, #0
 800b614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b616:	4b0a      	ldr	r3, [pc, #40]	@ (800b640 <vPortSetupTimerInterrupt+0x34>)
 800b618:	2200      	movs	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b61c:	4b09      	ldr	r3, [pc, #36]	@ (800b644 <vPortSetupTimerInterrupt+0x38>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a09      	ldr	r2, [pc, #36]	@ (800b648 <vPortSetupTimerInterrupt+0x3c>)
 800b622:	fba2 2303 	umull	r2, r3, r2, r3
 800b626:	099b      	lsrs	r3, r3, #6
 800b628:	4a08      	ldr	r2, [pc, #32]	@ (800b64c <vPortSetupTimerInterrupt+0x40>)
 800b62a:	3b01      	subs	r3, #1
 800b62c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b62e:	4b03      	ldr	r3, [pc, #12]	@ (800b63c <vPortSetupTimerInterrupt+0x30>)
 800b630:	2207      	movs	r2, #7
 800b632:	601a      	str	r2, [r3, #0]
}
 800b634:	bf00      	nop
 800b636:	46bd      	mov	sp, r7
 800b638:	bc80      	pop	{r7}
 800b63a:	4770      	bx	lr
 800b63c:	e000e010 	.word	0xe000e010
 800b640:	e000e018 	.word	0xe000e018
 800b644:	20000000 	.word	0x20000000
 800b648:	10624dd3 	.word	0x10624dd3
 800b64c:	e000e014 	.word	0xe000e014

0800b650 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b656:	f3ef 8305 	mrs	r3, IPSR
 800b65a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2b0f      	cmp	r3, #15
 800b660:	d915      	bls.n	800b68e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b662:	4a17      	ldr	r2, [pc, #92]	@ (800b6c0 <vPortValidateInterruptPriority+0x70>)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	4413      	add	r3, r2
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b66c:	4b15      	ldr	r3, [pc, #84]	@ (800b6c4 <vPortValidateInterruptPriority+0x74>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	7afa      	ldrb	r2, [r7, #11]
 800b672:	429a      	cmp	r2, r3
 800b674:	d20b      	bcs.n	800b68e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b67a:	f383 8811 	msr	BASEPRI, r3
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	607b      	str	r3, [r7, #4]
}
 800b688:	bf00      	nop
 800b68a:	bf00      	nop
 800b68c:	e7fd      	b.n	800b68a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b68e:	4b0e      	ldr	r3, [pc, #56]	@ (800b6c8 <vPortValidateInterruptPriority+0x78>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b696:	4b0d      	ldr	r3, [pc, #52]	@ (800b6cc <vPortValidateInterruptPriority+0x7c>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d90b      	bls.n	800b6b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	603b      	str	r3, [r7, #0]
}
 800b6b0:	bf00      	nop
 800b6b2:	bf00      	nop
 800b6b4:	e7fd      	b.n	800b6b2 <vPortValidateInterruptPriority+0x62>
	}
 800b6b6:	bf00      	nop
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bc80      	pop	{r7}
 800b6be:	4770      	bx	lr
 800b6c0:	e000e3f0 	.word	0xe000e3f0
 800b6c4:	2000107c 	.word	0x2000107c
 800b6c8:	e000ed0c 	.word	0xe000ed0c
 800b6cc:	20001080 	.word	0x20001080

0800b6d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08a      	sub	sp, #40	@ 0x28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b6dc:	f7fe fdd8 	bl	800a290 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b6e0:	4b5c      	ldr	r3, [pc, #368]	@ (800b854 <pvPortMalloc+0x184>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b6e8:	f000 f924 	bl	800b934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b6ec:	4b5a      	ldr	r3, [pc, #360]	@ (800b858 <pvPortMalloc+0x188>)
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f040 8095 	bne.w	800b824 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d01e      	beq.n	800b73e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b700:	2208      	movs	r2, #8
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4413      	add	r3, r2
 800b706:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f003 0307 	and.w	r3, r3, #7
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d015      	beq.n	800b73e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f023 0307 	bic.w	r3, r3, #7
 800b718:	3308      	adds	r3, #8
 800b71a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f003 0307 	and.w	r3, r3, #7
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00b      	beq.n	800b73e <pvPortMalloc+0x6e>
	__asm volatile
 800b726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	617b      	str	r3, [r7, #20]
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	e7fd      	b.n	800b73a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d06f      	beq.n	800b824 <pvPortMalloc+0x154>
 800b744:	4b45      	ldr	r3, [pc, #276]	@ (800b85c <pvPortMalloc+0x18c>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d86a      	bhi.n	800b824 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b74e:	4b44      	ldr	r3, [pc, #272]	@ (800b860 <pvPortMalloc+0x190>)
 800b750:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b752:	4b43      	ldr	r3, [pc, #268]	@ (800b860 <pvPortMalloc+0x190>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b758:	e004      	b.n	800b764 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d903      	bls.n	800b776 <pvPortMalloc+0xa6>
 800b76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1f1      	bne.n	800b75a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b776:	4b37      	ldr	r3, [pc, #220]	@ (800b854 <pvPortMalloc+0x184>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d051      	beq.n	800b824 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2208      	movs	r2, #8
 800b786:	4413      	add	r3, r2
 800b788:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	6a3b      	ldr	r3, [r7, #32]
 800b790:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	685a      	ldr	r2, [r3, #4]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	1ad2      	subs	r2, r2, r3
 800b79a:	2308      	movs	r3, #8
 800b79c:	005b      	lsls	r3, r3, #1
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d920      	bls.n	800b7e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b7a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	f003 0307 	and.w	r3, r3, #7
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00b      	beq.n	800b7cc <pvPortMalloc+0xfc>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	613b      	str	r3, [r7, #16]
}
 800b7c6:	bf00      	nop
 800b7c8:	bf00      	nop
 800b7ca:	e7fd      	b.n	800b7c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ce:	685a      	ldr	r2, [r3, #4]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	1ad2      	subs	r2, r2, r3
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b7de:	69b8      	ldr	r0, [r7, #24]
 800b7e0:	f000 f90a 	bl	800b9f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b7e4:	4b1d      	ldr	r3, [pc, #116]	@ (800b85c <pvPortMalloc+0x18c>)
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	4a1b      	ldr	r2, [pc, #108]	@ (800b85c <pvPortMalloc+0x18c>)
 800b7f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b7f2:	4b1a      	ldr	r3, [pc, #104]	@ (800b85c <pvPortMalloc+0x18c>)
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	4b1b      	ldr	r3, [pc, #108]	@ (800b864 <pvPortMalloc+0x194>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d203      	bcs.n	800b806 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7fe:	4b17      	ldr	r3, [pc, #92]	@ (800b85c <pvPortMalloc+0x18c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a18      	ldr	r2, [pc, #96]	@ (800b864 <pvPortMalloc+0x194>)
 800b804:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b808:	685a      	ldr	r2, [r3, #4]
 800b80a:	4b13      	ldr	r3, [pc, #76]	@ (800b858 <pvPortMalloc+0x188>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	431a      	orrs	r2, r3
 800b810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b812:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b816:	2200      	movs	r2, #0
 800b818:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b81a:	4b13      	ldr	r3, [pc, #76]	@ (800b868 <pvPortMalloc+0x198>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	3301      	adds	r3, #1
 800b820:	4a11      	ldr	r2, [pc, #68]	@ (800b868 <pvPortMalloc+0x198>)
 800b822:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b824:	f7fe fd42 	bl	800a2ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	f003 0307 	and.w	r3, r3, #7
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00b      	beq.n	800b84a <pvPortMalloc+0x17a>
	__asm volatile
 800b832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	60fb      	str	r3, [r7, #12]
}
 800b844:	bf00      	nop
 800b846:	bf00      	nop
 800b848:	e7fd      	b.n	800b846 <pvPortMalloc+0x176>
	return pvReturn;
 800b84a:	69fb      	ldr	r3, [r7, #28]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3728      	adds	r7, #40	@ 0x28
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	20001c8c 	.word	0x20001c8c
 800b858:	20001ca0 	.word	0x20001ca0
 800b85c:	20001c90 	.word	0x20001c90
 800b860:	20001c84 	.word	0x20001c84
 800b864:	20001c94 	.word	0x20001c94
 800b868:	20001c98 	.word	0x20001c98

0800b86c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d04f      	beq.n	800b91e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b87e:	2308      	movs	r3, #8
 800b880:	425b      	negs	r3, r3
 800b882:	697a      	ldr	r2, [r7, #20]
 800b884:	4413      	add	r3, r2
 800b886:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	685a      	ldr	r2, [r3, #4]
 800b890:	4b25      	ldr	r3, [pc, #148]	@ (800b928 <vPortFree+0xbc>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4013      	ands	r3, r2
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10b      	bne.n	800b8b2 <vPortFree+0x46>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	60fb      	str	r3, [r7, #12]
}
 800b8ac:	bf00      	nop
 800b8ae:	bf00      	nop
 800b8b0:	e7fd      	b.n	800b8ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00b      	beq.n	800b8d2 <vPortFree+0x66>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	60bb      	str	r3, [r7, #8]
}
 800b8cc:	bf00      	nop
 800b8ce:	bf00      	nop
 800b8d0:	e7fd      	b.n	800b8ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	4b14      	ldr	r3, [pc, #80]	@ (800b928 <vPortFree+0xbc>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4013      	ands	r3, r2
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d01e      	beq.n	800b91e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d11a      	bne.n	800b91e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	685a      	ldr	r2, [r3, #4]
 800b8ec:	4b0e      	ldr	r3, [pc, #56]	@ (800b928 <vPortFree+0xbc>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	43db      	mvns	r3, r3
 800b8f2:	401a      	ands	r2, r3
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b8f8:	f7fe fcca 	bl	800a290 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	685a      	ldr	r2, [r3, #4]
 800b900:	4b0a      	ldr	r3, [pc, #40]	@ (800b92c <vPortFree+0xc0>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4413      	add	r3, r2
 800b906:	4a09      	ldr	r2, [pc, #36]	@ (800b92c <vPortFree+0xc0>)
 800b908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b90a:	6938      	ldr	r0, [r7, #16]
 800b90c:	f000 f874 	bl	800b9f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b910:	4b07      	ldr	r3, [pc, #28]	@ (800b930 <vPortFree+0xc4>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	3301      	adds	r3, #1
 800b916:	4a06      	ldr	r2, [pc, #24]	@ (800b930 <vPortFree+0xc4>)
 800b918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b91a:	f7fe fcc7 	bl	800a2ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b91e:	bf00      	nop
 800b920:	3718      	adds	r7, #24
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	20001ca0 	.word	0x20001ca0
 800b92c:	20001c90 	.word	0x20001c90
 800b930:	20001c9c 	.word	0x20001c9c

0800b934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b93a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b93e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b940:	4b27      	ldr	r3, [pc, #156]	@ (800b9e0 <prvHeapInit+0xac>)
 800b942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f003 0307 	and.w	r3, r3, #7
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00c      	beq.n	800b968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3307      	adds	r3, #7
 800b952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f023 0307 	bic.w	r3, r3, #7
 800b95a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	4a1f      	ldr	r2, [pc, #124]	@ (800b9e0 <prvHeapInit+0xac>)
 800b964:	4413      	add	r3, r2
 800b966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b96c:	4a1d      	ldr	r2, [pc, #116]	@ (800b9e4 <prvHeapInit+0xb0>)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b972:	4b1c      	ldr	r3, [pc, #112]	@ (800b9e4 <prvHeapInit+0xb0>)
 800b974:	2200      	movs	r2, #0
 800b976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	4413      	add	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b980:	2208      	movs	r2, #8
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	1a9b      	subs	r3, r3, r2
 800b986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f023 0307 	bic.w	r3, r3, #7
 800b98e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	4a15      	ldr	r2, [pc, #84]	@ (800b9e8 <prvHeapInit+0xb4>)
 800b994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b996:	4b14      	ldr	r3, [pc, #80]	@ (800b9e8 <prvHeapInit+0xb4>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2200      	movs	r2, #0
 800b99c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b99e:	4b12      	ldr	r3, [pc, #72]	@ (800b9e8 <prvHeapInit+0xb4>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	1ad2      	subs	r2, r2, r3
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b9b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e8 <prvHeapInit+0xb4>)
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	4a0a      	ldr	r2, [pc, #40]	@ (800b9ec <prvHeapInit+0xb8>)
 800b9c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	4a09      	ldr	r2, [pc, #36]	@ (800b9f0 <prvHeapInit+0xbc>)
 800b9ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b9cc:	4b09      	ldr	r3, [pc, #36]	@ (800b9f4 <prvHeapInit+0xc0>)
 800b9ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b9d2:	601a      	str	r2, [r3, #0]
}
 800b9d4:	bf00      	nop
 800b9d6:	3714      	adds	r7, #20
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bc80      	pop	{r7}
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	20001084 	.word	0x20001084
 800b9e4:	20001c84 	.word	0x20001c84
 800b9e8:	20001c8c 	.word	0x20001c8c
 800b9ec:	20001c94 	.word	0x20001c94
 800b9f0:	20001c90 	.word	0x20001c90
 800b9f4:	20001ca0 	.word	0x20001ca0

0800b9f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba00:	4b27      	ldr	r3, [pc, #156]	@ (800baa0 <prvInsertBlockIntoFreeList+0xa8>)
 800ba02:	60fb      	str	r3, [r7, #12]
 800ba04:	e002      	b.n	800ba0c <prvInsertBlockIntoFreeList+0x14>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d8f7      	bhi.n	800ba06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	4413      	add	r3, r2
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d108      	bne.n	800ba3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	441a      	add	r2, r3
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	441a      	add	r2, r3
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d118      	bne.n	800ba80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	4b14      	ldr	r3, [pc, #80]	@ (800baa4 <prvInsertBlockIntoFreeList+0xac>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d00d      	beq.n	800ba76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	441a      	add	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	601a      	str	r2, [r3, #0]
 800ba74:	e008      	b.n	800ba88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba76:	4b0b      	ldr	r3, [pc, #44]	@ (800baa4 <prvInsertBlockIntoFreeList+0xac>)
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	601a      	str	r2, [r3, #0]
 800ba7e:	e003      	b.n	800ba88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d002      	beq.n	800ba96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba96:	bf00      	nop
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bc80      	pop	{r7}
 800ba9e:	4770      	bx	lr
 800baa0:	20001c84 	.word	0x20001c84
 800baa4:	20001c8c 	.word	0x20001c8c

0800baa8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800baac:	2200      	movs	r2, #0
 800baae:	4912      	ldr	r1, [pc, #72]	@ (800baf8 <MX_USB_DEVICE_Init+0x50>)
 800bab0:	4812      	ldr	r0, [pc, #72]	@ (800bafc <MX_USB_DEVICE_Init+0x54>)
 800bab2:	f7fc f9de 	bl	8007e72 <USBD_Init>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800babc:	f7f5 f8e8 	bl	8000c90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bac0:	490f      	ldr	r1, [pc, #60]	@ (800bb00 <MX_USB_DEVICE_Init+0x58>)
 800bac2:	480e      	ldr	r0, [pc, #56]	@ (800bafc <MX_USB_DEVICE_Init+0x54>)
 800bac4:	f7fc fa00 	bl	8007ec8 <USBD_RegisterClass>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bace:	f7f5 f8df 	bl	8000c90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bad2:	490c      	ldr	r1, [pc, #48]	@ (800bb04 <MX_USB_DEVICE_Init+0x5c>)
 800bad4:	4809      	ldr	r0, [pc, #36]	@ (800bafc <MX_USB_DEVICE_Init+0x54>)
 800bad6:	f7fc f931 	bl	8007d3c <USBD_CDC_RegisterInterface>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d001      	beq.n	800bae4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bae0:	f7f5 f8d6 	bl	8000c90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bae4:	4805      	ldr	r0, [pc, #20]	@ (800bafc <MX_USB_DEVICE_Init+0x54>)
 800bae6:	f7fc fa08 	bl	8007efa <USBD_Start>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800baf0:	f7f5 f8ce 	bl	8000c90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800baf4:	bf00      	nop
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	20000130 	.word	0x20000130
 800bafc:	20001ca4 	.word	0x20001ca4
 800bb00:	20000018 	.word	0x20000018
 800bb04:	20000120 	.word	0x20000120

0800bb08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4905      	ldr	r1, [pc, #20]	@ (800bb24 <CDC_Init_FS+0x1c>)
 800bb10:	4805      	ldr	r0, [pc, #20]	@ (800bb28 <CDC_Init_FS+0x20>)
 800bb12:	f7fc f929 	bl	8007d68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb16:	4905      	ldr	r1, [pc, #20]	@ (800bb2c <CDC_Init_FS+0x24>)
 800bb18:	4803      	ldr	r0, [pc, #12]	@ (800bb28 <CDC_Init_FS+0x20>)
 800bb1a:	f7fc f93e 	bl	8007d9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	20002368 	.word	0x20002368
 800bb28:	20001ca4 	.word	0x20001ca4
 800bb2c:	20001f68 	.word	0x20001f68

0800bb30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb30:	b480      	push	{r7}
 800bb32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bc80      	pop	{r7}
 800bb3c:	4770      	bx	lr
	...

0800bb40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	4603      	mov	r3, r0
 800bb48:	6039      	str	r1, [r7, #0]
 800bb4a:	71fb      	strb	r3, [r7, #7]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb50:	79fb      	ldrb	r3, [r7, #7]
 800bb52:	2b23      	cmp	r3, #35	@ 0x23
 800bb54:	d84a      	bhi.n	800bbec <CDC_Control_FS+0xac>
 800bb56:	a201      	add	r2, pc, #4	@ (adr r2, 800bb5c <CDC_Control_FS+0x1c>)
 800bb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5c:	0800bbed 	.word	0x0800bbed
 800bb60:	0800bbed 	.word	0x0800bbed
 800bb64:	0800bbed 	.word	0x0800bbed
 800bb68:	0800bbed 	.word	0x0800bbed
 800bb6c:	0800bbed 	.word	0x0800bbed
 800bb70:	0800bbed 	.word	0x0800bbed
 800bb74:	0800bbed 	.word	0x0800bbed
 800bb78:	0800bbed 	.word	0x0800bbed
 800bb7c:	0800bbed 	.word	0x0800bbed
 800bb80:	0800bbed 	.word	0x0800bbed
 800bb84:	0800bbed 	.word	0x0800bbed
 800bb88:	0800bbed 	.word	0x0800bbed
 800bb8c:	0800bbed 	.word	0x0800bbed
 800bb90:	0800bbed 	.word	0x0800bbed
 800bb94:	0800bbed 	.word	0x0800bbed
 800bb98:	0800bbed 	.word	0x0800bbed
 800bb9c:	0800bbed 	.word	0x0800bbed
 800bba0:	0800bbed 	.word	0x0800bbed
 800bba4:	0800bbed 	.word	0x0800bbed
 800bba8:	0800bbed 	.word	0x0800bbed
 800bbac:	0800bbed 	.word	0x0800bbed
 800bbb0:	0800bbed 	.word	0x0800bbed
 800bbb4:	0800bbed 	.word	0x0800bbed
 800bbb8:	0800bbed 	.word	0x0800bbed
 800bbbc:	0800bbed 	.word	0x0800bbed
 800bbc0:	0800bbed 	.word	0x0800bbed
 800bbc4:	0800bbed 	.word	0x0800bbed
 800bbc8:	0800bbed 	.word	0x0800bbed
 800bbcc:	0800bbed 	.word	0x0800bbed
 800bbd0:	0800bbed 	.word	0x0800bbed
 800bbd4:	0800bbed 	.word	0x0800bbed
 800bbd8:	0800bbed 	.word	0x0800bbed
 800bbdc:	0800bbed 	.word	0x0800bbed
 800bbe0:	0800bbed 	.word	0x0800bbed
 800bbe4:	0800bbed 	.word	0x0800bbed
 800bbe8:	0800bbed 	.word	0x0800bbed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bbec:	bf00      	nop
  }

  return (USBD_OK);
 800bbee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bc80      	pop	{r7}
 800bbf8:	4770      	bx	lr
 800bbfa:	bf00      	nop

0800bbfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc06:	6879      	ldr	r1, [r7, #4]
 800bc08:	4805      	ldr	r0, [pc, #20]	@ (800bc20 <CDC_Receive_FS+0x24>)
 800bc0a:	f7fc f8c6 	bl	8007d9a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc0e:	4804      	ldr	r0, [pc, #16]	@ (800bc20 <CDC_Receive_FS+0x24>)
 800bc10:	f7fc f905 	bl	8007e1e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	20001ca4 	.word	0x20001ca4

0800bc24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc34:	4b0d      	ldr	r3, [pc, #52]	@ (800bc6c <CDC_Transmit_FS+0x48>)
 800bc36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e00b      	b.n	800bc62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bc4a:	887b      	ldrh	r3, [r7, #2]
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	6879      	ldr	r1, [r7, #4]
 800bc50:	4806      	ldr	r0, [pc, #24]	@ (800bc6c <CDC_Transmit_FS+0x48>)
 800bc52:	f7fc f889 	bl	8007d68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc56:	4805      	ldr	r0, [pc, #20]	@ (800bc6c <CDC_Transmit_FS+0x48>)
 800bc58:	f7fc f8b2 	bl	8007dc0 <USBD_CDC_TransmitPacket>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20001ca4 	.word	0x20001ca4

0800bc70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	4603      	mov	r3, r0
 800bc78:	6039      	str	r1, [r7, #0]
 800bc7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	2212      	movs	r2, #18
 800bc80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc82:	4b03      	ldr	r3, [pc, #12]	@ (800bc90 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bc80      	pop	{r7}
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	2000014c 	.word	0x2000014c

0800bc94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	6039      	str	r1, [r7, #0]
 800bc9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2204      	movs	r2, #4
 800bca4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bca6:	4b03      	ldr	r3, [pc, #12]	@ (800bcb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bc80      	pop	{r7}
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	20000160 	.word	0x20000160

0800bcb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	6039      	str	r1, [r7, #0]
 800bcc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcc4:	79fb      	ldrb	r3, [r7, #7]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d105      	bne.n	800bcd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	4907      	ldr	r1, [pc, #28]	@ (800bcec <USBD_FS_ProductStrDescriptor+0x34>)
 800bcce:	4808      	ldr	r0, [pc, #32]	@ (800bcf0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcd0:	f7fd f889 	bl	8008de6 <USBD_GetString>
 800bcd4:	e004      	b.n	800bce0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	4904      	ldr	r1, [pc, #16]	@ (800bcec <USBD_FS_ProductStrDescriptor+0x34>)
 800bcda:	4805      	ldr	r0, [pc, #20]	@ (800bcf0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcdc:	f7fd f883 	bl	8008de6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bce0:	4b02      	ldr	r3, [pc, #8]	@ (800bcec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	20002768 	.word	0x20002768
 800bcf0:	0800d424 	.word	0x0800d424

0800bcf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	6039      	str	r1, [r7, #0]
 800bcfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	4904      	ldr	r1, [pc, #16]	@ (800bd14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd04:	4804      	ldr	r0, [pc, #16]	@ (800bd18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd06:	f7fd f86e 	bl	8008de6 <USBD_GetString>
  return USBD_StrDesc;
 800bd0a:	4b02      	ldr	r3, [pc, #8]	@ (800bd14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	20002768 	.word	0x20002768
 800bd18:	0800d43c 	.word	0x0800d43c

0800bd1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	6039      	str	r1, [r7, #0]
 800bd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	221a      	movs	r2, #26
 800bd2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd2e:	f000 f843 	bl	800bdb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd32:	4b02      	ldr	r3, [pc, #8]	@ (800bd3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	20000164 	.word	0x20000164

0800bd40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	4603      	mov	r3, r0
 800bd48:	6039      	str	r1, [r7, #0]
 800bd4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d105      	bne.n	800bd5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	4907      	ldr	r1, [pc, #28]	@ (800bd74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd56:	4808      	ldr	r0, [pc, #32]	@ (800bd78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd58:	f7fd f845 	bl	8008de6 <USBD_GetString>
 800bd5c:	e004      	b.n	800bd68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	4904      	ldr	r1, [pc, #16]	@ (800bd74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd62:	4805      	ldr	r0, [pc, #20]	@ (800bd78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd64:	f7fd f83f 	bl	8008de6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd68:	4b02      	ldr	r3, [pc, #8]	@ (800bd74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	20002768 	.word	0x20002768
 800bd78:	0800d450 	.word	0x0800d450

0800bd7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	4603      	mov	r3, r0
 800bd84:	6039      	str	r1, [r7, #0]
 800bd86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd88:	79fb      	ldrb	r3, [r7, #7]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d105      	bne.n	800bd9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	4907      	ldr	r1, [pc, #28]	@ (800bdb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd92:	4808      	ldr	r0, [pc, #32]	@ (800bdb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd94:	f7fd f827 	bl	8008de6 <USBD_GetString>
 800bd98:	e004      	b.n	800bda4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd9a:	683a      	ldr	r2, [r7, #0]
 800bd9c:	4904      	ldr	r1, [pc, #16]	@ (800bdb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd9e:	4805      	ldr	r0, [pc, #20]	@ (800bdb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bda0:	f7fd f821 	bl	8008de6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bda4:	4b02      	ldr	r3, [pc, #8]	@ (800bdb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3708      	adds	r7, #8
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	20002768 	.word	0x20002768
 800bdb4:	0800d45c 	.word	0x0800d45c

0800bdb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bdbe:	4b0f      	ldr	r3, [pc, #60]	@ (800bdfc <Get_SerialNum+0x44>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bdc4:	4b0e      	ldr	r3, [pc, #56]	@ (800be00 <Get_SerialNum+0x48>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdca:	4b0e      	ldr	r3, [pc, #56]	@ (800be04 <Get_SerialNum+0x4c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d009      	beq.n	800bdf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdde:	2208      	movs	r2, #8
 800bde0:	4909      	ldr	r1, [pc, #36]	@ (800be08 <Get_SerialNum+0x50>)
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f000 f814 	bl	800be10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bde8:	2204      	movs	r2, #4
 800bdea:	4908      	ldr	r1, [pc, #32]	@ (800be0c <Get_SerialNum+0x54>)
 800bdec:	68b8      	ldr	r0, [r7, #8]
 800bdee:	f000 f80f 	bl	800be10 <IntToUnicode>
  }
}
 800bdf2:	bf00      	nop
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	1ffff7e8 	.word	0x1ffff7e8
 800be00:	1ffff7ec 	.word	0x1ffff7ec
 800be04:	1ffff7f0 	.word	0x1ffff7f0
 800be08:	20000166 	.word	0x20000166
 800be0c:	20000176 	.word	0x20000176

0800be10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be10:	b480      	push	{r7}
 800be12:	b087      	sub	sp, #28
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	4613      	mov	r3, r2
 800be1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be1e:	2300      	movs	r3, #0
 800be20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be22:	2300      	movs	r3, #0
 800be24:	75fb      	strb	r3, [r7, #23]
 800be26:	e027      	b.n	800be78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	0f1b      	lsrs	r3, r3, #28
 800be2c:	2b09      	cmp	r3, #9
 800be2e:	d80b      	bhi.n	800be48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	0f1b      	lsrs	r3, r3, #28
 800be34:	b2da      	uxtb	r2, r3
 800be36:	7dfb      	ldrb	r3, [r7, #23]
 800be38:	005b      	lsls	r3, r3, #1
 800be3a:	4619      	mov	r1, r3
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	440b      	add	r3, r1
 800be40:	3230      	adds	r2, #48	@ 0x30
 800be42:	b2d2      	uxtb	r2, r2
 800be44:	701a      	strb	r2, [r3, #0]
 800be46:	e00a      	b.n	800be5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	0f1b      	lsrs	r3, r3, #28
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	4619      	mov	r1, r3
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	440b      	add	r3, r1
 800be58:	3237      	adds	r2, #55	@ 0x37
 800be5a:	b2d2      	uxtb	r2, r2
 800be5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	011b      	lsls	r3, r3, #4
 800be62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be64:	7dfb      	ldrb	r3, [r7, #23]
 800be66:	005b      	lsls	r3, r3, #1
 800be68:	3301      	adds	r3, #1
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	4413      	add	r3, r2
 800be6e:	2200      	movs	r2, #0
 800be70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be72:	7dfb      	ldrb	r3, [r7, #23]
 800be74:	3301      	adds	r3, #1
 800be76:	75fb      	strb	r3, [r7, #23]
 800be78:	7dfa      	ldrb	r2, [r7, #23]
 800be7a:	79fb      	ldrb	r3, [r7, #7]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d3d3      	bcc.n	800be28 <IntToUnicode+0x18>
  }
}
 800be80:	bf00      	nop
 800be82:	bf00      	nop
 800be84:	371c      	adds	r7, #28
 800be86:	46bd      	mov	sp, r7
 800be88:	bc80      	pop	{r7}
 800be8a:	4770      	bx	lr

0800be8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a0d      	ldr	r2, [pc, #52]	@ (800bed0 <HAL_PCD_MspInit+0x44>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d113      	bne.n	800bec6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800be9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bed4 <HAL_PCD_MspInit+0x48>)
 800bea0:	69db      	ldr	r3, [r3, #28]
 800bea2:	4a0c      	ldr	r2, [pc, #48]	@ (800bed4 <HAL_PCD_MspInit+0x48>)
 800bea4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bea8:	61d3      	str	r3, [r2, #28]
 800beaa:	4b0a      	ldr	r3, [pc, #40]	@ (800bed4 <HAL_PCD_MspInit+0x48>)
 800beac:	69db      	ldr	r3, [r3, #28]
 800beae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800beb6:	2200      	movs	r2, #0
 800beb8:	2105      	movs	r1, #5
 800beba:	2014      	movs	r0, #20
 800bebc:	f7f5 f9db 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bec0:	2014      	movs	r0, #20
 800bec2:	f7f5 f9f4 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bec6:	bf00      	nop
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	40005c00 	.word	0x40005c00
 800bed4:	40021000 	.word	0x40021000

0800bed8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800beec:	4619      	mov	r1, r3
 800beee:	4610      	mov	r0, r2
 800bef0:	f7fc f84b 	bl	8007f8a <USBD_LL_SetupStage>
}
 800bef4:	bf00      	nop
 800bef6:	3708      	adds	r7, #8
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	460b      	mov	r3, r1
 800bf06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800bf0e:	78fa      	ldrb	r2, [r7, #3]
 800bf10:	6879      	ldr	r1, [r7, #4]
 800bf12:	4613      	mov	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	00db      	lsls	r3, r3, #3
 800bf1a:	440b      	add	r3, r1
 800bf1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	78fb      	ldrb	r3, [r7, #3]
 800bf24:	4619      	mov	r1, r3
 800bf26:	f7fc f87d 	bl	8008024 <USBD_LL_DataOutStage>
}
 800bf2a:	bf00      	nop
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b082      	sub	sp, #8
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800bf44:	78fa      	ldrb	r2, [r7, #3]
 800bf46:	6879      	ldr	r1, [r7, #4]
 800bf48:	4613      	mov	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	4413      	add	r3, r2
 800bf4e:	00db      	lsls	r3, r3, #3
 800bf50:	440b      	add	r3, r1
 800bf52:	3324      	adds	r3, #36	@ 0x24
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	78fb      	ldrb	r3, [r7, #3]
 800bf58:	4619      	mov	r1, r3
 800bf5a:	f7fc f8d4 	bl	8008106 <USBD_LL_DataInStage>
}
 800bf5e:	bf00      	nop
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b082      	sub	sp, #8
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fc f9e4 	bl	8008342 <USBD_LL_SOF>
}
 800bf7a:	bf00      	nop
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	799b      	ldrb	r3, [r3, #6]
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	d001      	beq.n	800bf9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bf96:	f7f4 fe7b 	bl	8000c90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfa0:	7bfa      	ldrb	r2, [r7, #15]
 800bfa2:	4611      	mov	r1, r2
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fc f994 	bl	80082d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fc f94d 	bl	8008250 <USBD_LL_Reset>
}
 800bfb6:	bf00      	nop
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
	...

0800bfc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fc f98e 	bl	80082f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	7a9b      	ldrb	r3, [r3, #10]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d005      	beq.n	800bfe8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfdc:	4b04      	ldr	r3, [pc, #16]	@ (800bff0 <HAL_PCD_SuspendCallback+0x30>)
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	4a03      	ldr	r2, [pc, #12]	@ (800bff0 <HAL_PCD_SuspendCallback+0x30>)
 800bfe2:	f043 0306 	orr.w	r3, r3, #6
 800bfe6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bfe8:	bf00      	nop
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	e000ed00 	.word	0xe000ed00

0800bff4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c002:	4618      	mov	r0, r3
 800c004:	f7fc f988 	bl	8008318 <USBD_LL_Resume>
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c018:	4a28      	ldr	r2, [pc, #160]	@ (800c0bc <USBD_LL_Init+0xac>)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a26      	ldr	r2, [pc, #152]	@ (800c0bc <USBD_LL_Init+0xac>)
 800c024:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c028:	4b24      	ldr	r3, [pc, #144]	@ (800c0bc <USBD_LL_Init+0xac>)
 800c02a:	4a25      	ldr	r2, [pc, #148]	@ (800c0c0 <USBD_LL_Init+0xb0>)
 800c02c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c02e:	4b23      	ldr	r3, [pc, #140]	@ (800c0bc <USBD_LL_Init+0xac>)
 800c030:	2208      	movs	r2, #8
 800c032:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c034:	4b21      	ldr	r3, [pc, #132]	@ (800c0bc <USBD_LL_Init+0xac>)
 800c036:	2202      	movs	r2, #2
 800c038:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c03a:	4b20      	ldr	r3, [pc, #128]	@ (800c0bc <USBD_LL_Init+0xac>)
 800c03c:	2200      	movs	r2, #0
 800c03e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c040:	4b1e      	ldr	r3, [pc, #120]	@ (800c0bc <USBD_LL_Init+0xac>)
 800c042:	2200      	movs	r2, #0
 800c044:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c046:	4b1d      	ldr	r3, [pc, #116]	@ (800c0bc <USBD_LL_Init+0xac>)
 800c048:	2200      	movs	r2, #0
 800c04a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c04c:	481b      	ldr	r0, [pc, #108]	@ (800c0bc <USBD_LL_Init+0xac>)
 800c04e:	f7f6 fc12 	bl	8002876 <HAL_PCD_Init>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c058:	f7f4 fe1a 	bl	8000c90 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c062:	2318      	movs	r3, #24
 800c064:	2200      	movs	r2, #0
 800c066:	2100      	movs	r1, #0
 800c068:	f7f8 f923 	bl	80042b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c072:	2358      	movs	r3, #88	@ 0x58
 800c074:	2200      	movs	r2, #0
 800c076:	2180      	movs	r1, #128	@ 0x80
 800c078:	f7f8 f91b 	bl	80042b2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c082:	23c0      	movs	r3, #192	@ 0xc0
 800c084:	2200      	movs	r2, #0
 800c086:	2181      	movs	r1, #129	@ 0x81
 800c088:	f7f8 f913 	bl	80042b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c092:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c096:	2200      	movs	r2, #0
 800c098:	2101      	movs	r1, #1
 800c09a:	f7f8 f90a 	bl	80042b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c0a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	2182      	movs	r1, #130	@ 0x82
 800c0ac:	f7f8 f901 	bl	80042b2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20002968 	.word	0x20002968
 800c0c0:	40005c00 	.word	0x40005c00

0800c0c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7f6 fcc1 	bl	8002a62 <HAL_PCD_Start>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0e4:	7bfb      	ldrb	r3, [r7, #15]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 f94e 	bl	800c388 <USBD_Get_USB_Status>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b084      	sub	sp, #16
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	4608      	mov	r0, r1
 800c104:	4611      	mov	r1, r2
 800c106:	461a      	mov	r2, r3
 800c108:	4603      	mov	r3, r0
 800c10a:	70fb      	strb	r3, [r7, #3]
 800c10c:	460b      	mov	r3, r1
 800c10e:	70bb      	strb	r3, [r7, #2]
 800c110:	4613      	mov	r3, r2
 800c112:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c122:	78bb      	ldrb	r3, [r7, #2]
 800c124:	883a      	ldrh	r2, [r7, #0]
 800c126:	78f9      	ldrb	r1, [r7, #3]
 800c128:	f7f6 fe15 	bl	8002d56 <HAL_PCD_EP_Open>
 800c12c:	4603      	mov	r3, r0
 800c12e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c130:	7bfb      	ldrb	r3, [r7, #15]
 800c132:	4618      	mov	r0, r3
 800c134:	f000 f928 	bl	800c388 <USBD_Get_USB_Status>
 800c138:	4603      	mov	r3, r0
 800c13a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c13c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b084      	sub	sp, #16
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	460b      	mov	r3, r1
 800c150:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c160:	78fa      	ldrb	r2, [r7, #3]
 800c162:	4611      	mov	r1, r2
 800c164:	4618      	mov	r0, r3
 800c166:	f7f6 fe53 	bl	8002e10 <HAL_PCD_EP_Close>
 800c16a:	4603      	mov	r3, r0
 800c16c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
 800c170:	4618      	mov	r0, r3
 800c172:	f000 f909 	bl	800c388 <USBD_Get_USB_Status>
 800c176:	4603      	mov	r3, r0
 800c178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3710      	adds	r7, #16
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	460b      	mov	r3, r1
 800c18e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c194:	2300      	movs	r3, #0
 800c196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c19e:	78fa      	ldrb	r2, [r7, #3]
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7f6 fefb 	bl	8002f9e <HAL_PCD_EP_SetStall>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 f8ea 	bl	800c388 <USBD_Get_USB_Status>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b084      	sub	sp, #16
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c1dc:	78fa      	ldrb	r2, [r7, #3]
 800c1de:	4611      	mov	r1, r2
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7f6 ff3c 	bl	800305e <HAL_PCD_EP_ClrStall>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ea:	7bfb      	ldrb	r3, [r7, #15]
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f000 f8cb 	bl	800c388 <USBD_Get_USB_Status>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c200:	b480      	push	{r7}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	460b      	mov	r3, r1
 800c20a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c212:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	da0b      	bge.n	800c234 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c21c:	78fb      	ldrb	r3, [r7, #3]
 800c21e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c222:	68f9      	ldr	r1, [r7, #12]
 800c224:	4613      	mov	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4413      	add	r3, r2
 800c22a:	00db      	lsls	r3, r3, #3
 800c22c:	440b      	add	r3, r1
 800c22e:	3312      	adds	r3, #18
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	e00b      	b.n	800c24c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c234:	78fb      	ldrb	r3, [r7, #3]
 800c236:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c23a:	68f9      	ldr	r1, [r7, #12]
 800c23c:	4613      	mov	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	4413      	add	r3, r2
 800c242:	00db      	lsls	r3, r3, #3
 800c244:	440b      	add	r3, r1
 800c246:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c24a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3714      	adds	r7, #20
 800c250:	46bd      	mov	sp, r7
 800c252:	bc80      	pop	{r7}
 800c254:	4770      	bx	lr

0800c256 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b084      	sub	sp, #16
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
 800c25e:	460b      	mov	r3, r1
 800c260:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c266:	2300      	movs	r3, #0
 800c268:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c270:	78fa      	ldrb	r2, [r7, #3]
 800c272:	4611      	mov	r1, r2
 800c274:	4618      	mov	r0, r3
 800c276:	f7f6 fd4a 	bl	8002d0e <HAL_PCD_SetAddress>
 800c27a:	4603      	mov	r3, r0
 800c27c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c27e:	7bfb      	ldrb	r3, [r7, #15]
 800c280:	4618      	mov	r0, r3
 800c282:	f000 f881 	bl	800c388 <USBD_Get_USB_Status>
 800c286:	4603      	mov	r3, r0
 800c288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	607a      	str	r2, [r7, #4]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	72fb      	strb	r3, [r7, #11]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c2b6:	893b      	ldrh	r3, [r7, #8]
 800c2b8:	7af9      	ldrb	r1, [r7, #11]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	f7f6 fe38 	bl	8002f30 <HAL_PCD_EP_Transmit>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2c4:	7dfb      	ldrb	r3, [r7, #23]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 f85e 	bl	800c388 <USBD_Get_USB_Status>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3718      	adds	r7, #24
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b086      	sub	sp, #24
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	60f8      	str	r0, [r7, #12]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	72fb      	strb	r3, [r7, #11]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c2fc:	893b      	ldrh	r3, [r7, #8]
 800c2fe:	7af9      	ldrb	r1, [r7, #11]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	f7f6 fdcd 	bl	8002ea0 <HAL_PCD_EP_Receive>
 800c306:	4603      	mov	r3, r0
 800c308:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c30a:	7dfb      	ldrb	r3, [r7, #23]
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 f83b 	bl	800c388 <USBD_Get_USB_Status>
 800c312:	4603      	mov	r3, r0
 800c314:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c316:	7dbb      	ldrb	r3, [r7, #22]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	460b      	mov	r3, r1
 800c32a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c332:	78fa      	ldrb	r2, [r7, #3]
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f7f6 fde3 	bl	8002f02 <HAL_PCD_EP_GetRxCount>
 800c33c:	4603      	mov	r3, r0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
	...

0800c348 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c350:	4b02      	ldr	r3, [pc, #8]	@ (800c35c <USBD_static_malloc+0x14>)
}
 800c352:	4618      	mov	r0, r3
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	bc80      	pop	{r7}
 800c35a:	4770      	bx	lr
 800c35c:	20002c40 	.word	0x20002c40

0800c360 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]

}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bc80      	pop	{r7}
 800c370:	4770      	bx	lr

0800c372 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c372:	b480      	push	{r7}
 800c374:	b083      	sub	sp, #12
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	460b      	mov	r3, r1
 800c37c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c37e:	bf00      	nop
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	bc80      	pop	{r7}
 800c386:	4770      	bx	lr

0800c388 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	4603      	mov	r3, r0
 800c390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c396:	79fb      	ldrb	r3, [r7, #7]
 800c398:	2b03      	cmp	r3, #3
 800c39a:	d817      	bhi.n	800c3cc <USBD_Get_USB_Status+0x44>
 800c39c:	a201      	add	r2, pc, #4	@ (adr r2, 800c3a4 <USBD_Get_USB_Status+0x1c>)
 800c39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a2:	bf00      	nop
 800c3a4:	0800c3b5 	.word	0x0800c3b5
 800c3a8:	0800c3bb 	.word	0x0800c3bb
 800c3ac:	0800c3c1 	.word	0x0800c3c1
 800c3b0:	0800c3c7 	.word	0x0800c3c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3b8:	e00b      	b.n	800c3d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3ba:	2302      	movs	r3, #2
 800c3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c3be:	e008      	b.n	800c3d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3c4:	e005      	b.n	800c3d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3c6:	2302      	movs	r3, #2
 800c3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ca:	e002      	b.n	800c3d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c3cc:	2302      	movs	r3, #2
 800c3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d0:	bf00      	nop
  }
  return usb_status;
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3714      	adds	r7, #20
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bc80      	pop	{r7}
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop

0800c3e0 <std>:
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	b510      	push	{r4, lr}
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	e9c0 3300 	strd	r3, r3, [r0]
 800c3ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3ee:	6083      	str	r3, [r0, #8]
 800c3f0:	8181      	strh	r1, [r0, #12]
 800c3f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c3f4:	81c2      	strh	r2, [r0, #14]
 800c3f6:	6183      	str	r3, [r0, #24]
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	2208      	movs	r2, #8
 800c3fc:	305c      	adds	r0, #92	@ 0x5c
 800c3fe:	f000 f9f9 	bl	800c7f4 <memset>
 800c402:	4b0d      	ldr	r3, [pc, #52]	@ (800c438 <std+0x58>)
 800c404:	6224      	str	r4, [r4, #32]
 800c406:	6263      	str	r3, [r4, #36]	@ 0x24
 800c408:	4b0c      	ldr	r3, [pc, #48]	@ (800c43c <std+0x5c>)
 800c40a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c40c:	4b0c      	ldr	r3, [pc, #48]	@ (800c440 <std+0x60>)
 800c40e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c410:	4b0c      	ldr	r3, [pc, #48]	@ (800c444 <std+0x64>)
 800c412:	6323      	str	r3, [r4, #48]	@ 0x30
 800c414:	4b0c      	ldr	r3, [pc, #48]	@ (800c448 <std+0x68>)
 800c416:	429c      	cmp	r4, r3
 800c418:	d006      	beq.n	800c428 <std+0x48>
 800c41a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c41e:	4294      	cmp	r4, r2
 800c420:	d002      	beq.n	800c428 <std+0x48>
 800c422:	33d0      	adds	r3, #208	@ 0xd0
 800c424:	429c      	cmp	r4, r3
 800c426:	d105      	bne.n	800c434 <std+0x54>
 800c428:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c430:	f000 baae 	b.w	800c990 <__retarget_lock_init_recursive>
 800c434:	bd10      	pop	{r4, pc}
 800c436:	bf00      	nop
 800c438:	0800c645 	.word	0x0800c645
 800c43c:	0800c667 	.word	0x0800c667
 800c440:	0800c69f 	.word	0x0800c69f
 800c444:	0800c6c3 	.word	0x0800c6c3
 800c448:	20002e60 	.word	0x20002e60

0800c44c <stdio_exit_handler>:
 800c44c:	4a02      	ldr	r2, [pc, #8]	@ (800c458 <stdio_exit_handler+0xc>)
 800c44e:	4903      	ldr	r1, [pc, #12]	@ (800c45c <stdio_exit_handler+0x10>)
 800c450:	4803      	ldr	r0, [pc, #12]	@ (800c460 <stdio_exit_handler+0x14>)
 800c452:	f000 b869 	b.w	800c528 <_fwalk_sglue>
 800c456:	bf00      	nop
 800c458:	20000180 	.word	0x20000180
 800c45c:	0800d245 	.word	0x0800d245
 800c460:	20000190 	.word	0x20000190

0800c464 <cleanup_stdio>:
 800c464:	6841      	ldr	r1, [r0, #4]
 800c466:	4b0c      	ldr	r3, [pc, #48]	@ (800c498 <cleanup_stdio+0x34>)
 800c468:	b510      	push	{r4, lr}
 800c46a:	4299      	cmp	r1, r3
 800c46c:	4604      	mov	r4, r0
 800c46e:	d001      	beq.n	800c474 <cleanup_stdio+0x10>
 800c470:	f000 fee8 	bl	800d244 <_fflush_r>
 800c474:	68a1      	ldr	r1, [r4, #8]
 800c476:	4b09      	ldr	r3, [pc, #36]	@ (800c49c <cleanup_stdio+0x38>)
 800c478:	4299      	cmp	r1, r3
 800c47a:	d002      	beq.n	800c482 <cleanup_stdio+0x1e>
 800c47c:	4620      	mov	r0, r4
 800c47e:	f000 fee1 	bl	800d244 <_fflush_r>
 800c482:	68e1      	ldr	r1, [r4, #12]
 800c484:	4b06      	ldr	r3, [pc, #24]	@ (800c4a0 <cleanup_stdio+0x3c>)
 800c486:	4299      	cmp	r1, r3
 800c488:	d004      	beq.n	800c494 <cleanup_stdio+0x30>
 800c48a:	4620      	mov	r0, r4
 800c48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c490:	f000 bed8 	b.w	800d244 <_fflush_r>
 800c494:	bd10      	pop	{r4, pc}
 800c496:	bf00      	nop
 800c498:	20002e60 	.word	0x20002e60
 800c49c:	20002ec8 	.word	0x20002ec8
 800c4a0:	20002f30 	.word	0x20002f30

0800c4a4 <global_stdio_init.part.0>:
 800c4a4:	b510      	push	{r4, lr}
 800c4a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c4d4 <global_stdio_init.part.0+0x30>)
 800c4a8:	4c0b      	ldr	r4, [pc, #44]	@ (800c4d8 <global_stdio_init.part.0+0x34>)
 800c4aa:	4a0c      	ldr	r2, [pc, #48]	@ (800c4dc <global_stdio_init.part.0+0x38>)
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	601a      	str	r2, [r3, #0]
 800c4b0:	2104      	movs	r1, #4
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f7ff ff94 	bl	800c3e0 <std>
 800c4b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c4bc:	2201      	movs	r2, #1
 800c4be:	2109      	movs	r1, #9
 800c4c0:	f7ff ff8e 	bl	800c3e0 <std>
 800c4c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c4c8:	2202      	movs	r2, #2
 800c4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4ce:	2112      	movs	r1, #18
 800c4d0:	f7ff bf86 	b.w	800c3e0 <std>
 800c4d4:	20002f98 	.word	0x20002f98
 800c4d8:	20002e60 	.word	0x20002e60
 800c4dc:	0800c44d 	.word	0x0800c44d

0800c4e0 <__sfp_lock_acquire>:
 800c4e0:	4801      	ldr	r0, [pc, #4]	@ (800c4e8 <__sfp_lock_acquire+0x8>)
 800c4e2:	f000 ba56 	b.w	800c992 <__retarget_lock_acquire_recursive>
 800c4e6:	bf00      	nop
 800c4e8:	20002fa1 	.word	0x20002fa1

0800c4ec <__sfp_lock_release>:
 800c4ec:	4801      	ldr	r0, [pc, #4]	@ (800c4f4 <__sfp_lock_release+0x8>)
 800c4ee:	f000 ba51 	b.w	800c994 <__retarget_lock_release_recursive>
 800c4f2:	bf00      	nop
 800c4f4:	20002fa1 	.word	0x20002fa1

0800c4f8 <__sinit>:
 800c4f8:	b510      	push	{r4, lr}
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	f7ff fff0 	bl	800c4e0 <__sfp_lock_acquire>
 800c500:	6a23      	ldr	r3, [r4, #32]
 800c502:	b11b      	cbz	r3, 800c50c <__sinit+0x14>
 800c504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c508:	f7ff bff0 	b.w	800c4ec <__sfp_lock_release>
 800c50c:	4b04      	ldr	r3, [pc, #16]	@ (800c520 <__sinit+0x28>)
 800c50e:	6223      	str	r3, [r4, #32]
 800c510:	4b04      	ldr	r3, [pc, #16]	@ (800c524 <__sinit+0x2c>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1f5      	bne.n	800c504 <__sinit+0xc>
 800c518:	f7ff ffc4 	bl	800c4a4 <global_stdio_init.part.0>
 800c51c:	e7f2      	b.n	800c504 <__sinit+0xc>
 800c51e:	bf00      	nop
 800c520:	0800c465 	.word	0x0800c465
 800c524:	20002f98 	.word	0x20002f98

0800c528 <_fwalk_sglue>:
 800c528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c52c:	4607      	mov	r7, r0
 800c52e:	4688      	mov	r8, r1
 800c530:	4614      	mov	r4, r2
 800c532:	2600      	movs	r6, #0
 800c534:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c538:	f1b9 0901 	subs.w	r9, r9, #1
 800c53c:	d505      	bpl.n	800c54a <_fwalk_sglue+0x22>
 800c53e:	6824      	ldr	r4, [r4, #0]
 800c540:	2c00      	cmp	r4, #0
 800c542:	d1f7      	bne.n	800c534 <_fwalk_sglue+0xc>
 800c544:	4630      	mov	r0, r6
 800c546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c54a:	89ab      	ldrh	r3, [r5, #12]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d907      	bls.n	800c560 <_fwalk_sglue+0x38>
 800c550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c554:	3301      	adds	r3, #1
 800c556:	d003      	beq.n	800c560 <_fwalk_sglue+0x38>
 800c558:	4629      	mov	r1, r5
 800c55a:	4638      	mov	r0, r7
 800c55c:	47c0      	blx	r8
 800c55e:	4306      	orrs	r6, r0
 800c560:	3568      	adds	r5, #104	@ 0x68
 800c562:	e7e9      	b.n	800c538 <_fwalk_sglue+0x10>

0800c564 <iprintf>:
 800c564:	b40f      	push	{r0, r1, r2, r3}
 800c566:	b507      	push	{r0, r1, r2, lr}
 800c568:	4906      	ldr	r1, [pc, #24]	@ (800c584 <iprintf+0x20>)
 800c56a:	ab04      	add	r3, sp, #16
 800c56c:	6808      	ldr	r0, [r1, #0]
 800c56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c572:	6881      	ldr	r1, [r0, #8]
 800c574:	9301      	str	r3, [sp, #4]
 800c576:	f000 fb3b 	bl	800cbf0 <_vfiprintf_r>
 800c57a:	b003      	add	sp, #12
 800c57c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c580:	b004      	add	sp, #16
 800c582:	4770      	bx	lr
 800c584:	2000018c 	.word	0x2000018c

0800c588 <_puts_r>:
 800c588:	6a03      	ldr	r3, [r0, #32]
 800c58a:	b570      	push	{r4, r5, r6, lr}
 800c58c:	4605      	mov	r5, r0
 800c58e:	460e      	mov	r6, r1
 800c590:	6884      	ldr	r4, [r0, #8]
 800c592:	b90b      	cbnz	r3, 800c598 <_puts_r+0x10>
 800c594:	f7ff ffb0 	bl	800c4f8 <__sinit>
 800c598:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c59a:	07db      	lsls	r3, r3, #31
 800c59c:	d405      	bmi.n	800c5aa <_puts_r+0x22>
 800c59e:	89a3      	ldrh	r3, [r4, #12]
 800c5a0:	0598      	lsls	r0, r3, #22
 800c5a2:	d402      	bmi.n	800c5aa <_puts_r+0x22>
 800c5a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5a6:	f000 f9f4 	bl	800c992 <__retarget_lock_acquire_recursive>
 800c5aa:	89a3      	ldrh	r3, [r4, #12]
 800c5ac:	0719      	lsls	r1, r3, #28
 800c5ae:	d502      	bpl.n	800c5b6 <_puts_r+0x2e>
 800c5b0:	6923      	ldr	r3, [r4, #16]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d135      	bne.n	800c622 <_puts_r+0x9a>
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	f000 f8c5 	bl	800c748 <__swsetup_r>
 800c5be:	b380      	cbz	r0, 800c622 <_puts_r+0x9a>
 800c5c0:	f04f 35ff 	mov.w	r5, #4294967295
 800c5c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5c6:	07da      	lsls	r2, r3, #31
 800c5c8:	d405      	bmi.n	800c5d6 <_puts_r+0x4e>
 800c5ca:	89a3      	ldrh	r3, [r4, #12]
 800c5cc:	059b      	lsls	r3, r3, #22
 800c5ce:	d402      	bmi.n	800c5d6 <_puts_r+0x4e>
 800c5d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5d2:	f000 f9df 	bl	800c994 <__retarget_lock_release_recursive>
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	bd70      	pop	{r4, r5, r6, pc}
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	da04      	bge.n	800c5e8 <_puts_r+0x60>
 800c5de:	69a2      	ldr	r2, [r4, #24]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	dc17      	bgt.n	800c614 <_puts_r+0x8c>
 800c5e4:	290a      	cmp	r1, #10
 800c5e6:	d015      	beq.n	800c614 <_puts_r+0x8c>
 800c5e8:	6823      	ldr	r3, [r4, #0]
 800c5ea:	1c5a      	adds	r2, r3, #1
 800c5ec:	6022      	str	r2, [r4, #0]
 800c5ee:	7019      	strb	r1, [r3, #0]
 800c5f0:	68a3      	ldr	r3, [r4, #8]
 800c5f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	60a3      	str	r3, [r4, #8]
 800c5fa:	2900      	cmp	r1, #0
 800c5fc:	d1ed      	bne.n	800c5da <_puts_r+0x52>
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	da11      	bge.n	800c626 <_puts_r+0x9e>
 800c602:	4622      	mov	r2, r4
 800c604:	210a      	movs	r1, #10
 800c606:	4628      	mov	r0, r5
 800c608:	f000 f85f 	bl	800c6ca <__swbuf_r>
 800c60c:	3001      	adds	r0, #1
 800c60e:	d0d7      	beq.n	800c5c0 <_puts_r+0x38>
 800c610:	250a      	movs	r5, #10
 800c612:	e7d7      	b.n	800c5c4 <_puts_r+0x3c>
 800c614:	4622      	mov	r2, r4
 800c616:	4628      	mov	r0, r5
 800c618:	f000 f857 	bl	800c6ca <__swbuf_r>
 800c61c:	3001      	adds	r0, #1
 800c61e:	d1e7      	bne.n	800c5f0 <_puts_r+0x68>
 800c620:	e7ce      	b.n	800c5c0 <_puts_r+0x38>
 800c622:	3e01      	subs	r6, #1
 800c624:	e7e4      	b.n	800c5f0 <_puts_r+0x68>
 800c626:	6823      	ldr	r3, [r4, #0]
 800c628:	1c5a      	adds	r2, r3, #1
 800c62a:	6022      	str	r2, [r4, #0]
 800c62c:	220a      	movs	r2, #10
 800c62e:	701a      	strb	r2, [r3, #0]
 800c630:	e7ee      	b.n	800c610 <_puts_r+0x88>
	...

0800c634 <puts>:
 800c634:	4b02      	ldr	r3, [pc, #8]	@ (800c640 <puts+0xc>)
 800c636:	4601      	mov	r1, r0
 800c638:	6818      	ldr	r0, [r3, #0]
 800c63a:	f7ff bfa5 	b.w	800c588 <_puts_r>
 800c63e:	bf00      	nop
 800c640:	2000018c 	.word	0x2000018c

0800c644 <__sread>:
 800c644:	b510      	push	{r4, lr}
 800c646:	460c      	mov	r4, r1
 800c648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c64c:	f000 f952 	bl	800c8f4 <_read_r>
 800c650:	2800      	cmp	r0, #0
 800c652:	bfab      	itete	ge
 800c654:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c656:	89a3      	ldrhlt	r3, [r4, #12]
 800c658:	181b      	addge	r3, r3, r0
 800c65a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c65e:	bfac      	ite	ge
 800c660:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c662:	81a3      	strhlt	r3, [r4, #12]
 800c664:	bd10      	pop	{r4, pc}

0800c666 <__swrite>:
 800c666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c66a:	461f      	mov	r7, r3
 800c66c:	898b      	ldrh	r3, [r1, #12]
 800c66e:	4605      	mov	r5, r0
 800c670:	05db      	lsls	r3, r3, #23
 800c672:	460c      	mov	r4, r1
 800c674:	4616      	mov	r6, r2
 800c676:	d505      	bpl.n	800c684 <__swrite+0x1e>
 800c678:	2302      	movs	r3, #2
 800c67a:	2200      	movs	r2, #0
 800c67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c680:	f000 f926 	bl	800c8d0 <_lseek_r>
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	4632      	mov	r2, r6
 800c688:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c68c:	81a3      	strh	r3, [r4, #12]
 800c68e:	4628      	mov	r0, r5
 800c690:	463b      	mov	r3, r7
 800c692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c69a:	f000 b93d 	b.w	800c918 <_write_r>

0800c69e <__sseek>:
 800c69e:	b510      	push	{r4, lr}
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a6:	f000 f913 	bl	800c8d0 <_lseek_r>
 800c6aa:	1c43      	adds	r3, r0, #1
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	bf15      	itete	ne
 800c6b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c6b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c6b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c6ba:	81a3      	strheq	r3, [r4, #12]
 800c6bc:	bf18      	it	ne
 800c6be:	81a3      	strhne	r3, [r4, #12]
 800c6c0:	bd10      	pop	{r4, pc}

0800c6c2 <__sclose>:
 800c6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c6:	f000 b89d 	b.w	800c804 <_close_r>

0800c6ca <__swbuf_r>:
 800c6ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6cc:	460e      	mov	r6, r1
 800c6ce:	4614      	mov	r4, r2
 800c6d0:	4605      	mov	r5, r0
 800c6d2:	b118      	cbz	r0, 800c6dc <__swbuf_r+0x12>
 800c6d4:	6a03      	ldr	r3, [r0, #32]
 800c6d6:	b90b      	cbnz	r3, 800c6dc <__swbuf_r+0x12>
 800c6d8:	f7ff ff0e 	bl	800c4f8 <__sinit>
 800c6dc:	69a3      	ldr	r3, [r4, #24]
 800c6de:	60a3      	str	r3, [r4, #8]
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	071a      	lsls	r2, r3, #28
 800c6e4:	d501      	bpl.n	800c6ea <__swbuf_r+0x20>
 800c6e6:	6923      	ldr	r3, [r4, #16]
 800c6e8:	b943      	cbnz	r3, 800c6fc <__swbuf_r+0x32>
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	f000 f82b 	bl	800c748 <__swsetup_r>
 800c6f2:	b118      	cbz	r0, 800c6fc <__swbuf_r+0x32>
 800c6f4:	f04f 37ff 	mov.w	r7, #4294967295
 800c6f8:	4638      	mov	r0, r7
 800c6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	6922      	ldr	r2, [r4, #16]
 800c700:	b2f6      	uxtb	r6, r6
 800c702:	1a98      	subs	r0, r3, r2
 800c704:	6963      	ldr	r3, [r4, #20]
 800c706:	4637      	mov	r7, r6
 800c708:	4283      	cmp	r3, r0
 800c70a:	dc05      	bgt.n	800c718 <__swbuf_r+0x4e>
 800c70c:	4621      	mov	r1, r4
 800c70e:	4628      	mov	r0, r5
 800c710:	f000 fd98 	bl	800d244 <_fflush_r>
 800c714:	2800      	cmp	r0, #0
 800c716:	d1ed      	bne.n	800c6f4 <__swbuf_r+0x2a>
 800c718:	68a3      	ldr	r3, [r4, #8]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	60a3      	str	r3, [r4, #8]
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	1c5a      	adds	r2, r3, #1
 800c722:	6022      	str	r2, [r4, #0]
 800c724:	701e      	strb	r6, [r3, #0]
 800c726:	6962      	ldr	r2, [r4, #20]
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d004      	beq.n	800c738 <__swbuf_r+0x6e>
 800c72e:	89a3      	ldrh	r3, [r4, #12]
 800c730:	07db      	lsls	r3, r3, #31
 800c732:	d5e1      	bpl.n	800c6f8 <__swbuf_r+0x2e>
 800c734:	2e0a      	cmp	r6, #10
 800c736:	d1df      	bne.n	800c6f8 <__swbuf_r+0x2e>
 800c738:	4621      	mov	r1, r4
 800c73a:	4628      	mov	r0, r5
 800c73c:	f000 fd82 	bl	800d244 <_fflush_r>
 800c740:	2800      	cmp	r0, #0
 800c742:	d0d9      	beq.n	800c6f8 <__swbuf_r+0x2e>
 800c744:	e7d6      	b.n	800c6f4 <__swbuf_r+0x2a>
	...

0800c748 <__swsetup_r>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	4b29      	ldr	r3, [pc, #164]	@ (800c7f0 <__swsetup_r+0xa8>)
 800c74c:	4605      	mov	r5, r0
 800c74e:	6818      	ldr	r0, [r3, #0]
 800c750:	460c      	mov	r4, r1
 800c752:	b118      	cbz	r0, 800c75c <__swsetup_r+0x14>
 800c754:	6a03      	ldr	r3, [r0, #32]
 800c756:	b90b      	cbnz	r3, 800c75c <__swsetup_r+0x14>
 800c758:	f7ff fece 	bl	800c4f8 <__sinit>
 800c75c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c760:	0719      	lsls	r1, r3, #28
 800c762:	d422      	bmi.n	800c7aa <__swsetup_r+0x62>
 800c764:	06da      	lsls	r2, r3, #27
 800c766:	d407      	bmi.n	800c778 <__swsetup_r+0x30>
 800c768:	2209      	movs	r2, #9
 800c76a:	602a      	str	r2, [r5, #0]
 800c76c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c770:	f04f 30ff 	mov.w	r0, #4294967295
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	e033      	b.n	800c7e0 <__swsetup_r+0x98>
 800c778:	0758      	lsls	r0, r3, #29
 800c77a:	d512      	bpl.n	800c7a2 <__swsetup_r+0x5a>
 800c77c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c77e:	b141      	cbz	r1, 800c792 <__swsetup_r+0x4a>
 800c780:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c784:	4299      	cmp	r1, r3
 800c786:	d002      	beq.n	800c78e <__swsetup_r+0x46>
 800c788:	4628      	mov	r0, r5
 800c78a:	f000 f913 	bl	800c9b4 <_free_r>
 800c78e:	2300      	movs	r3, #0
 800c790:	6363      	str	r3, [r4, #52]	@ 0x34
 800c792:	89a3      	ldrh	r3, [r4, #12]
 800c794:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c798:	81a3      	strh	r3, [r4, #12]
 800c79a:	2300      	movs	r3, #0
 800c79c:	6063      	str	r3, [r4, #4]
 800c79e:	6923      	ldr	r3, [r4, #16]
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	89a3      	ldrh	r3, [r4, #12]
 800c7a4:	f043 0308 	orr.w	r3, r3, #8
 800c7a8:	81a3      	strh	r3, [r4, #12]
 800c7aa:	6923      	ldr	r3, [r4, #16]
 800c7ac:	b94b      	cbnz	r3, 800c7c2 <__swsetup_r+0x7a>
 800c7ae:	89a3      	ldrh	r3, [r4, #12]
 800c7b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c7b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7b8:	d003      	beq.n	800c7c2 <__swsetup_r+0x7a>
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	4628      	mov	r0, r5
 800c7be:	f000 fd8e 	bl	800d2de <__smakebuf_r>
 800c7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7c6:	f013 0201 	ands.w	r2, r3, #1
 800c7ca:	d00a      	beq.n	800c7e2 <__swsetup_r+0x9a>
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	60a2      	str	r2, [r4, #8]
 800c7d0:	6962      	ldr	r2, [r4, #20]
 800c7d2:	4252      	negs	r2, r2
 800c7d4:	61a2      	str	r2, [r4, #24]
 800c7d6:	6922      	ldr	r2, [r4, #16]
 800c7d8:	b942      	cbnz	r2, 800c7ec <__swsetup_r+0xa4>
 800c7da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c7de:	d1c5      	bne.n	800c76c <__swsetup_r+0x24>
 800c7e0:	bd38      	pop	{r3, r4, r5, pc}
 800c7e2:	0799      	lsls	r1, r3, #30
 800c7e4:	bf58      	it	pl
 800c7e6:	6962      	ldrpl	r2, [r4, #20]
 800c7e8:	60a2      	str	r2, [r4, #8]
 800c7ea:	e7f4      	b.n	800c7d6 <__swsetup_r+0x8e>
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	e7f7      	b.n	800c7e0 <__swsetup_r+0x98>
 800c7f0:	2000018c 	.word	0x2000018c

0800c7f4 <memset>:
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	4402      	add	r2, r0
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d100      	bne.n	800c7fe <memset+0xa>
 800c7fc:	4770      	bx	lr
 800c7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c802:	e7f9      	b.n	800c7f8 <memset+0x4>

0800c804 <_close_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	2300      	movs	r3, #0
 800c808:	4d05      	ldr	r5, [pc, #20]	@ (800c820 <_close_r+0x1c>)
 800c80a:	4604      	mov	r4, r0
 800c80c:	4608      	mov	r0, r1
 800c80e:	602b      	str	r3, [r5, #0]
 800c810:	f7f4 fb93 	bl	8000f3a <_close>
 800c814:	1c43      	adds	r3, r0, #1
 800c816:	d102      	bne.n	800c81e <_close_r+0x1a>
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	b103      	cbz	r3, 800c81e <_close_r+0x1a>
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	bd38      	pop	{r3, r4, r5, pc}
 800c820:	20002f9c 	.word	0x20002f9c

0800c824 <_reclaim_reent>:
 800c824:	4b29      	ldr	r3, [pc, #164]	@ (800c8cc <_reclaim_reent+0xa8>)
 800c826:	b570      	push	{r4, r5, r6, lr}
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4604      	mov	r4, r0
 800c82c:	4283      	cmp	r3, r0
 800c82e:	d04b      	beq.n	800c8c8 <_reclaim_reent+0xa4>
 800c830:	69c3      	ldr	r3, [r0, #28]
 800c832:	b1ab      	cbz	r3, 800c860 <_reclaim_reent+0x3c>
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	b16b      	cbz	r3, 800c854 <_reclaim_reent+0x30>
 800c838:	2500      	movs	r5, #0
 800c83a:	69e3      	ldr	r3, [r4, #28]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	5959      	ldr	r1, [r3, r5]
 800c840:	2900      	cmp	r1, #0
 800c842:	d13b      	bne.n	800c8bc <_reclaim_reent+0x98>
 800c844:	3504      	adds	r5, #4
 800c846:	2d80      	cmp	r5, #128	@ 0x80
 800c848:	d1f7      	bne.n	800c83a <_reclaim_reent+0x16>
 800c84a:	69e3      	ldr	r3, [r4, #28]
 800c84c:	4620      	mov	r0, r4
 800c84e:	68d9      	ldr	r1, [r3, #12]
 800c850:	f000 f8b0 	bl	800c9b4 <_free_r>
 800c854:	69e3      	ldr	r3, [r4, #28]
 800c856:	6819      	ldr	r1, [r3, #0]
 800c858:	b111      	cbz	r1, 800c860 <_reclaim_reent+0x3c>
 800c85a:	4620      	mov	r0, r4
 800c85c:	f000 f8aa 	bl	800c9b4 <_free_r>
 800c860:	6961      	ldr	r1, [r4, #20]
 800c862:	b111      	cbz	r1, 800c86a <_reclaim_reent+0x46>
 800c864:	4620      	mov	r0, r4
 800c866:	f000 f8a5 	bl	800c9b4 <_free_r>
 800c86a:	69e1      	ldr	r1, [r4, #28]
 800c86c:	b111      	cbz	r1, 800c874 <_reclaim_reent+0x50>
 800c86e:	4620      	mov	r0, r4
 800c870:	f000 f8a0 	bl	800c9b4 <_free_r>
 800c874:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c876:	b111      	cbz	r1, 800c87e <_reclaim_reent+0x5a>
 800c878:	4620      	mov	r0, r4
 800c87a:	f000 f89b 	bl	800c9b4 <_free_r>
 800c87e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c880:	b111      	cbz	r1, 800c888 <_reclaim_reent+0x64>
 800c882:	4620      	mov	r0, r4
 800c884:	f000 f896 	bl	800c9b4 <_free_r>
 800c888:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c88a:	b111      	cbz	r1, 800c892 <_reclaim_reent+0x6e>
 800c88c:	4620      	mov	r0, r4
 800c88e:	f000 f891 	bl	800c9b4 <_free_r>
 800c892:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c894:	b111      	cbz	r1, 800c89c <_reclaim_reent+0x78>
 800c896:	4620      	mov	r0, r4
 800c898:	f000 f88c 	bl	800c9b4 <_free_r>
 800c89c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c89e:	b111      	cbz	r1, 800c8a6 <_reclaim_reent+0x82>
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f000 f887 	bl	800c9b4 <_free_r>
 800c8a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c8a8:	b111      	cbz	r1, 800c8b0 <_reclaim_reent+0x8c>
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f000 f882 	bl	800c9b4 <_free_r>
 800c8b0:	6a23      	ldr	r3, [r4, #32]
 800c8b2:	b14b      	cbz	r3, 800c8c8 <_reclaim_reent+0xa4>
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8ba:	4718      	bx	r3
 800c8bc:	680e      	ldr	r6, [r1, #0]
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f000 f878 	bl	800c9b4 <_free_r>
 800c8c4:	4631      	mov	r1, r6
 800c8c6:	e7bb      	b.n	800c840 <_reclaim_reent+0x1c>
 800c8c8:	bd70      	pop	{r4, r5, r6, pc}
 800c8ca:	bf00      	nop
 800c8cc:	2000018c 	.word	0x2000018c

0800c8d0 <_lseek_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	4608      	mov	r0, r1
 800c8d6:	4611      	mov	r1, r2
 800c8d8:	2200      	movs	r2, #0
 800c8da:	4d05      	ldr	r5, [pc, #20]	@ (800c8f0 <_lseek_r+0x20>)
 800c8dc:	602a      	str	r2, [r5, #0]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	f7f4 fb4f 	bl	8000f82 <_lseek>
 800c8e4:	1c43      	adds	r3, r0, #1
 800c8e6:	d102      	bne.n	800c8ee <_lseek_r+0x1e>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	b103      	cbz	r3, 800c8ee <_lseek_r+0x1e>
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	bd38      	pop	{r3, r4, r5, pc}
 800c8f0:	20002f9c 	.word	0x20002f9c

0800c8f4 <_read_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	4608      	mov	r0, r1
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	4d05      	ldr	r5, [pc, #20]	@ (800c914 <_read_r+0x20>)
 800c900:	602a      	str	r2, [r5, #0]
 800c902:	461a      	mov	r2, r3
 800c904:	f7f4 fae0 	bl	8000ec8 <_read>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_read_r+0x1e>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_read_r+0x1e>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	20002f9c 	.word	0x20002f9c

0800c918 <_write_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4604      	mov	r4, r0
 800c91c:	4608      	mov	r0, r1
 800c91e:	4611      	mov	r1, r2
 800c920:	2200      	movs	r2, #0
 800c922:	4d05      	ldr	r5, [pc, #20]	@ (800c938 <_write_r+0x20>)
 800c924:	602a      	str	r2, [r5, #0]
 800c926:	461a      	mov	r2, r3
 800c928:	f7f4 faeb 	bl	8000f02 <_write>
 800c92c:	1c43      	adds	r3, r0, #1
 800c92e:	d102      	bne.n	800c936 <_write_r+0x1e>
 800c930:	682b      	ldr	r3, [r5, #0]
 800c932:	b103      	cbz	r3, 800c936 <_write_r+0x1e>
 800c934:	6023      	str	r3, [r4, #0]
 800c936:	bd38      	pop	{r3, r4, r5, pc}
 800c938:	20002f9c 	.word	0x20002f9c

0800c93c <__errno>:
 800c93c:	4b01      	ldr	r3, [pc, #4]	@ (800c944 <__errno+0x8>)
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	2000018c 	.word	0x2000018c

0800c948 <__libc_init_array>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	2600      	movs	r6, #0
 800c94c:	4d0c      	ldr	r5, [pc, #48]	@ (800c980 <__libc_init_array+0x38>)
 800c94e:	4c0d      	ldr	r4, [pc, #52]	@ (800c984 <__libc_init_array+0x3c>)
 800c950:	1b64      	subs	r4, r4, r5
 800c952:	10a4      	asrs	r4, r4, #2
 800c954:	42a6      	cmp	r6, r4
 800c956:	d109      	bne.n	800c96c <__libc_init_array+0x24>
 800c958:	f000 fd3e 	bl	800d3d8 <_init>
 800c95c:	2600      	movs	r6, #0
 800c95e:	4d0a      	ldr	r5, [pc, #40]	@ (800c988 <__libc_init_array+0x40>)
 800c960:	4c0a      	ldr	r4, [pc, #40]	@ (800c98c <__libc_init_array+0x44>)
 800c962:	1b64      	subs	r4, r4, r5
 800c964:	10a4      	asrs	r4, r4, #2
 800c966:	42a6      	cmp	r6, r4
 800c968:	d105      	bne.n	800c976 <__libc_init_array+0x2e>
 800c96a:	bd70      	pop	{r4, r5, r6, pc}
 800c96c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c970:	4798      	blx	r3
 800c972:	3601      	adds	r6, #1
 800c974:	e7ee      	b.n	800c954 <__libc_init_array+0xc>
 800c976:	f855 3b04 	ldr.w	r3, [r5], #4
 800c97a:	4798      	blx	r3
 800c97c:	3601      	adds	r6, #1
 800c97e:	e7f2      	b.n	800c966 <__libc_init_array+0x1e>
 800c980:	0800d514 	.word	0x0800d514
 800c984:	0800d514 	.word	0x0800d514
 800c988:	0800d514 	.word	0x0800d514
 800c98c:	0800d518 	.word	0x0800d518

0800c990 <__retarget_lock_init_recursive>:
 800c990:	4770      	bx	lr

0800c992 <__retarget_lock_acquire_recursive>:
 800c992:	4770      	bx	lr

0800c994 <__retarget_lock_release_recursive>:
 800c994:	4770      	bx	lr

0800c996 <memcpy>:
 800c996:	440a      	add	r2, r1
 800c998:	4291      	cmp	r1, r2
 800c99a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c99e:	d100      	bne.n	800c9a2 <memcpy+0xc>
 800c9a0:	4770      	bx	lr
 800c9a2:	b510      	push	{r4, lr}
 800c9a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9a8:	4291      	cmp	r1, r2
 800c9aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9ae:	d1f9      	bne.n	800c9a4 <memcpy+0xe>
 800c9b0:	bd10      	pop	{r4, pc}
	...

0800c9b4 <_free_r>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	2900      	cmp	r1, #0
 800c9ba:	d040      	beq.n	800ca3e <_free_r+0x8a>
 800c9bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9c0:	1f0c      	subs	r4, r1, #4
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	bfb8      	it	lt
 800c9c6:	18e4      	addlt	r4, r4, r3
 800c9c8:	f000 f8de 	bl	800cb88 <__malloc_lock>
 800c9cc:	4a1c      	ldr	r2, [pc, #112]	@ (800ca40 <_free_r+0x8c>)
 800c9ce:	6813      	ldr	r3, [r2, #0]
 800c9d0:	b933      	cbnz	r3, 800c9e0 <_free_r+0x2c>
 800c9d2:	6063      	str	r3, [r4, #4]
 800c9d4:	6014      	str	r4, [r2, #0]
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9dc:	f000 b8da 	b.w	800cb94 <__malloc_unlock>
 800c9e0:	42a3      	cmp	r3, r4
 800c9e2:	d908      	bls.n	800c9f6 <_free_r+0x42>
 800c9e4:	6820      	ldr	r0, [r4, #0]
 800c9e6:	1821      	adds	r1, r4, r0
 800c9e8:	428b      	cmp	r3, r1
 800c9ea:	bf01      	itttt	eq
 800c9ec:	6819      	ldreq	r1, [r3, #0]
 800c9ee:	685b      	ldreq	r3, [r3, #4]
 800c9f0:	1809      	addeq	r1, r1, r0
 800c9f2:	6021      	streq	r1, [r4, #0]
 800c9f4:	e7ed      	b.n	800c9d2 <_free_r+0x1e>
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	b10b      	cbz	r3, 800ca00 <_free_r+0x4c>
 800c9fc:	42a3      	cmp	r3, r4
 800c9fe:	d9fa      	bls.n	800c9f6 <_free_r+0x42>
 800ca00:	6811      	ldr	r1, [r2, #0]
 800ca02:	1850      	adds	r0, r2, r1
 800ca04:	42a0      	cmp	r0, r4
 800ca06:	d10b      	bne.n	800ca20 <_free_r+0x6c>
 800ca08:	6820      	ldr	r0, [r4, #0]
 800ca0a:	4401      	add	r1, r0
 800ca0c:	1850      	adds	r0, r2, r1
 800ca0e:	4283      	cmp	r3, r0
 800ca10:	6011      	str	r1, [r2, #0]
 800ca12:	d1e0      	bne.n	800c9d6 <_free_r+0x22>
 800ca14:	6818      	ldr	r0, [r3, #0]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	4408      	add	r0, r1
 800ca1a:	6010      	str	r0, [r2, #0]
 800ca1c:	6053      	str	r3, [r2, #4]
 800ca1e:	e7da      	b.n	800c9d6 <_free_r+0x22>
 800ca20:	d902      	bls.n	800ca28 <_free_r+0x74>
 800ca22:	230c      	movs	r3, #12
 800ca24:	602b      	str	r3, [r5, #0]
 800ca26:	e7d6      	b.n	800c9d6 <_free_r+0x22>
 800ca28:	6820      	ldr	r0, [r4, #0]
 800ca2a:	1821      	adds	r1, r4, r0
 800ca2c:	428b      	cmp	r3, r1
 800ca2e:	bf01      	itttt	eq
 800ca30:	6819      	ldreq	r1, [r3, #0]
 800ca32:	685b      	ldreq	r3, [r3, #4]
 800ca34:	1809      	addeq	r1, r1, r0
 800ca36:	6021      	streq	r1, [r4, #0]
 800ca38:	6063      	str	r3, [r4, #4]
 800ca3a:	6054      	str	r4, [r2, #4]
 800ca3c:	e7cb      	b.n	800c9d6 <_free_r+0x22>
 800ca3e:	bd38      	pop	{r3, r4, r5, pc}
 800ca40:	20002fa8 	.word	0x20002fa8

0800ca44 <sbrk_aligned>:
 800ca44:	b570      	push	{r4, r5, r6, lr}
 800ca46:	4e0f      	ldr	r6, [pc, #60]	@ (800ca84 <sbrk_aligned+0x40>)
 800ca48:	460c      	mov	r4, r1
 800ca4a:	6831      	ldr	r1, [r6, #0]
 800ca4c:	4605      	mov	r5, r0
 800ca4e:	b911      	cbnz	r1, 800ca56 <sbrk_aligned+0x12>
 800ca50:	f000 fca4 	bl	800d39c <_sbrk_r>
 800ca54:	6030      	str	r0, [r6, #0]
 800ca56:	4621      	mov	r1, r4
 800ca58:	4628      	mov	r0, r5
 800ca5a:	f000 fc9f 	bl	800d39c <_sbrk_r>
 800ca5e:	1c43      	adds	r3, r0, #1
 800ca60:	d103      	bne.n	800ca6a <sbrk_aligned+0x26>
 800ca62:	f04f 34ff 	mov.w	r4, #4294967295
 800ca66:	4620      	mov	r0, r4
 800ca68:	bd70      	pop	{r4, r5, r6, pc}
 800ca6a:	1cc4      	adds	r4, r0, #3
 800ca6c:	f024 0403 	bic.w	r4, r4, #3
 800ca70:	42a0      	cmp	r0, r4
 800ca72:	d0f8      	beq.n	800ca66 <sbrk_aligned+0x22>
 800ca74:	1a21      	subs	r1, r4, r0
 800ca76:	4628      	mov	r0, r5
 800ca78:	f000 fc90 	bl	800d39c <_sbrk_r>
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	d1f2      	bne.n	800ca66 <sbrk_aligned+0x22>
 800ca80:	e7ef      	b.n	800ca62 <sbrk_aligned+0x1e>
 800ca82:	bf00      	nop
 800ca84:	20002fa4 	.word	0x20002fa4

0800ca88 <_malloc_r>:
 800ca88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca8c:	1ccd      	adds	r5, r1, #3
 800ca8e:	f025 0503 	bic.w	r5, r5, #3
 800ca92:	3508      	adds	r5, #8
 800ca94:	2d0c      	cmp	r5, #12
 800ca96:	bf38      	it	cc
 800ca98:	250c      	movcc	r5, #12
 800ca9a:	2d00      	cmp	r5, #0
 800ca9c:	4606      	mov	r6, r0
 800ca9e:	db01      	blt.n	800caa4 <_malloc_r+0x1c>
 800caa0:	42a9      	cmp	r1, r5
 800caa2:	d904      	bls.n	800caae <_malloc_r+0x26>
 800caa4:	230c      	movs	r3, #12
 800caa6:	6033      	str	r3, [r6, #0]
 800caa8:	2000      	movs	r0, #0
 800caaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb84 <_malloc_r+0xfc>
 800cab2:	f000 f869 	bl	800cb88 <__malloc_lock>
 800cab6:	f8d8 3000 	ldr.w	r3, [r8]
 800caba:	461c      	mov	r4, r3
 800cabc:	bb44      	cbnz	r4, 800cb10 <_malloc_r+0x88>
 800cabe:	4629      	mov	r1, r5
 800cac0:	4630      	mov	r0, r6
 800cac2:	f7ff ffbf 	bl	800ca44 <sbrk_aligned>
 800cac6:	1c43      	adds	r3, r0, #1
 800cac8:	4604      	mov	r4, r0
 800caca:	d158      	bne.n	800cb7e <_malloc_r+0xf6>
 800cacc:	f8d8 4000 	ldr.w	r4, [r8]
 800cad0:	4627      	mov	r7, r4
 800cad2:	2f00      	cmp	r7, #0
 800cad4:	d143      	bne.n	800cb5e <_malloc_r+0xd6>
 800cad6:	2c00      	cmp	r4, #0
 800cad8:	d04b      	beq.n	800cb72 <_malloc_r+0xea>
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	4639      	mov	r1, r7
 800cade:	4630      	mov	r0, r6
 800cae0:	eb04 0903 	add.w	r9, r4, r3
 800cae4:	f000 fc5a 	bl	800d39c <_sbrk_r>
 800cae8:	4581      	cmp	r9, r0
 800caea:	d142      	bne.n	800cb72 <_malloc_r+0xea>
 800caec:	6821      	ldr	r1, [r4, #0]
 800caee:	4630      	mov	r0, r6
 800caf0:	1a6d      	subs	r5, r5, r1
 800caf2:	4629      	mov	r1, r5
 800caf4:	f7ff ffa6 	bl	800ca44 <sbrk_aligned>
 800caf8:	3001      	adds	r0, #1
 800cafa:	d03a      	beq.n	800cb72 <_malloc_r+0xea>
 800cafc:	6823      	ldr	r3, [r4, #0]
 800cafe:	442b      	add	r3, r5
 800cb00:	6023      	str	r3, [r4, #0]
 800cb02:	f8d8 3000 	ldr.w	r3, [r8]
 800cb06:	685a      	ldr	r2, [r3, #4]
 800cb08:	bb62      	cbnz	r2, 800cb64 <_malloc_r+0xdc>
 800cb0a:	f8c8 7000 	str.w	r7, [r8]
 800cb0e:	e00f      	b.n	800cb30 <_malloc_r+0xa8>
 800cb10:	6822      	ldr	r2, [r4, #0]
 800cb12:	1b52      	subs	r2, r2, r5
 800cb14:	d420      	bmi.n	800cb58 <_malloc_r+0xd0>
 800cb16:	2a0b      	cmp	r2, #11
 800cb18:	d917      	bls.n	800cb4a <_malloc_r+0xc2>
 800cb1a:	1961      	adds	r1, r4, r5
 800cb1c:	42a3      	cmp	r3, r4
 800cb1e:	6025      	str	r5, [r4, #0]
 800cb20:	bf18      	it	ne
 800cb22:	6059      	strne	r1, [r3, #4]
 800cb24:	6863      	ldr	r3, [r4, #4]
 800cb26:	bf08      	it	eq
 800cb28:	f8c8 1000 	streq.w	r1, [r8]
 800cb2c:	5162      	str	r2, [r4, r5]
 800cb2e:	604b      	str	r3, [r1, #4]
 800cb30:	4630      	mov	r0, r6
 800cb32:	f000 f82f 	bl	800cb94 <__malloc_unlock>
 800cb36:	f104 000b 	add.w	r0, r4, #11
 800cb3a:	1d23      	adds	r3, r4, #4
 800cb3c:	f020 0007 	bic.w	r0, r0, #7
 800cb40:	1ac2      	subs	r2, r0, r3
 800cb42:	bf1c      	itt	ne
 800cb44:	1a1b      	subne	r3, r3, r0
 800cb46:	50a3      	strne	r3, [r4, r2]
 800cb48:	e7af      	b.n	800caaa <_malloc_r+0x22>
 800cb4a:	6862      	ldr	r2, [r4, #4]
 800cb4c:	42a3      	cmp	r3, r4
 800cb4e:	bf0c      	ite	eq
 800cb50:	f8c8 2000 	streq.w	r2, [r8]
 800cb54:	605a      	strne	r2, [r3, #4]
 800cb56:	e7eb      	b.n	800cb30 <_malloc_r+0xa8>
 800cb58:	4623      	mov	r3, r4
 800cb5a:	6864      	ldr	r4, [r4, #4]
 800cb5c:	e7ae      	b.n	800cabc <_malloc_r+0x34>
 800cb5e:	463c      	mov	r4, r7
 800cb60:	687f      	ldr	r7, [r7, #4]
 800cb62:	e7b6      	b.n	800cad2 <_malloc_r+0x4a>
 800cb64:	461a      	mov	r2, r3
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	42a3      	cmp	r3, r4
 800cb6a:	d1fb      	bne.n	800cb64 <_malloc_r+0xdc>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	6053      	str	r3, [r2, #4]
 800cb70:	e7de      	b.n	800cb30 <_malloc_r+0xa8>
 800cb72:	230c      	movs	r3, #12
 800cb74:	4630      	mov	r0, r6
 800cb76:	6033      	str	r3, [r6, #0]
 800cb78:	f000 f80c 	bl	800cb94 <__malloc_unlock>
 800cb7c:	e794      	b.n	800caa8 <_malloc_r+0x20>
 800cb7e:	6005      	str	r5, [r0, #0]
 800cb80:	e7d6      	b.n	800cb30 <_malloc_r+0xa8>
 800cb82:	bf00      	nop
 800cb84:	20002fa8 	.word	0x20002fa8

0800cb88 <__malloc_lock>:
 800cb88:	4801      	ldr	r0, [pc, #4]	@ (800cb90 <__malloc_lock+0x8>)
 800cb8a:	f7ff bf02 	b.w	800c992 <__retarget_lock_acquire_recursive>
 800cb8e:	bf00      	nop
 800cb90:	20002fa0 	.word	0x20002fa0

0800cb94 <__malloc_unlock>:
 800cb94:	4801      	ldr	r0, [pc, #4]	@ (800cb9c <__malloc_unlock+0x8>)
 800cb96:	f7ff befd 	b.w	800c994 <__retarget_lock_release_recursive>
 800cb9a:	bf00      	nop
 800cb9c:	20002fa0 	.word	0x20002fa0

0800cba0 <__sfputc_r>:
 800cba0:	6893      	ldr	r3, [r2, #8]
 800cba2:	b410      	push	{r4}
 800cba4:	3b01      	subs	r3, #1
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	6093      	str	r3, [r2, #8]
 800cbaa:	da07      	bge.n	800cbbc <__sfputc_r+0x1c>
 800cbac:	6994      	ldr	r4, [r2, #24]
 800cbae:	42a3      	cmp	r3, r4
 800cbb0:	db01      	blt.n	800cbb6 <__sfputc_r+0x16>
 800cbb2:	290a      	cmp	r1, #10
 800cbb4:	d102      	bne.n	800cbbc <__sfputc_r+0x1c>
 800cbb6:	bc10      	pop	{r4}
 800cbb8:	f7ff bd87 	b.w	800c6ca <__swbuf_r>
 800cbbc:	6813      	ldr	r3, [r2, #0]
 800cbbe:	1c58      	adds	r0, r3, #1
 800cbc0:	6010      	str	r0, [r2, #0]
 800cbc2:	7019      	strb	r1, [r3, #0]
 800cbc4:	4608      	mov	r0, r1
 800cbc6:	bc10      	pop	{r4}
 800cbc8:	4770      	bx	lr

0800cbca <__sfputs_r>:
 800cbca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbcc:	4606      	mov	r6, r0
 800cbce:	460f      	mov	r7, r1
 800cbd0:	4614      	mov	r4, r2
 800cbd2:	18d5      	adds	r5, r2, r3
 800cbd4:	42ac      	cmp	r4, r5
 800cbd6:	d101      	bne.n	800cbdc <__sfputs_r+0x12>
 800cbd8:	2000      	movs	r0, #0
 800cbda:	e007      	b.n	800cbec <__sfputs_r+0x22>
 800cbdc:	463a      	mov	r2, r7
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe4:	f7ff ffdc 	bl	800cba0 <__sfputc_r>
 800cbe8:	1c43      	adds	r3, r0, #1
 800cbea:	d1f3      	bne.n	800cbd4 <__sfputs_r+0xa>
 800cbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cbf0 <_vfiprintf_r>:
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	460d      	mov	r5, r1
 800cbf6:	4614      	mov	r4, r2
 800cbf8:	4698      	mov	r8, r3
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	b09d      	sub	sp, #116	@ 0x74
 800cbfe:	b118      	cbz	r0, 800cc08 <_vfiprintf_r+0x18>
 800cc00:	6a03      	ldr	r3, [r0, #32]
 800cc02:	b90b      	cbnz	r3, 800cc08 <_vfiprintf_r+0x18>
 800cc04:	f7ff fc78 	bl	800c4f8 <__sinit>
 800cc08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc0a:	07d9      	lsls	r1, r3, #31
 800cc0c:	d405      	bmi.n	800cc1a <_vfiprintf_r+0x2a>
 800cc0e:	89ab      	ldrh	r3, [r5, #12]
 800cc10:	059a      	lsls	r2, r3, #22
 800cc12:	d402      	bmi.n	800cc1a <_vfiprintf_r+0x2a>
 800cc14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc16:	f7ff febc 	bl	800c992 <__retarget_lock_acquire_recursive>
 800cc1a:	89ab      	ldrh	r3, [r5, #12]
 800cc1c:	071b      	lsls	r3, r3, #28
 800cc1e:	d501      	bpl.n	800cc24 <_vfiprintf_r+0x34>
 800cc20:	692b      	ldr	r3, [r5, #16]
 800cc22:	b99b      	cbnz	r3, 800cc4c <_vfiprintf_r+0x5c>
 800cc24:	4629      	mov	r1, r5
 800cc26:	4630      	mov	r0, r6
 800cc28:	f7ff fd8e 	bl	800c748 <__swsetup_r>
 800cc2c:	b170      	cbz	r0, 800cc4c <_vfiprintf_r+0x5c>
 800cc2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc30:	07dc      	lsls	r4, r3, #31
 800cc32:	d504      	bpl.n	800cc3e <_vfiprintf_r+0x4e>
 800cc34:	f04f 30ff 	mov.w	r0, #4294967295
 800cc38:	b01d      	add	sp, #116	@ 0x74
 800cc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3e:	89ab      	ldrh	r3, [r5, #12]
 800cc40:	0598      	lsls	r0, r3, #22
 800cc42:	d4f7      	bmi.n	800cc34 <_vfiprintf_r+0x44>
 800cc44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc46:	f7ff fea5 	bl	800c994 <__retarget_lock_release_recursive>
 800cc4a:	e7f3      	b.n	800cc34 <_vfiprintf_r+0x44>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc50:	2320      	movs	r3, #32
 800cc52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc56:	2330      	movs	r3, #48	@ 0x30
 800cc58:	f04f 0901 	mov.w	r9, #1
 800cc5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc60:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ce0c <_vfiprintf_r+0x21c>
 800cc64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc68:	4623      	mov	r3, r4
 800cc6a:	469a      	mov	sl, r3
 800cc6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc70:	b10a      	cbz	r2, 800cc76 <_vfiprintf_r+0x86>
 800cc72:	2a25      	cmp	r2, #37	@ 0x25
 800cc74:	d1f9      	bne.n	800cc6a <_vfiprintf_r+0x7a>
 800cc76:	ebba 0b04 	subs.w	fp, sl, r4
 800cc7a:	d00b      	beq.n	800cc94 <_vfiprintf_r+0xa4>
 800cc7c:	465b      	mov	r3, fp
 800cc7e:	4622      	mov	r2, r4
 800cc80:	4629      	mov	r1, r5
 800cc82:	4630      	mov	r0, r6
 800cc84:	f7ff ffa1 	bl	800cbca <__sfputs_r>
 800cc88:	3001      	adds	r0, #1
 800cc8a:	f000 80a7 	beq.w	800cddc <_vfiprintf_r+0x1ec>
 800cc8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc90:	445a      	add	r2, fp
 800cc92:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc94:	f89a 3000 	ldrb.w	r3, [sl]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f000 809f 	beq.w	800cddc <_vfiprintf_r+0x1ec>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	f04f 32ff 	mov.w	r2, #4294967295
 800cca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cca8:	f10a 0a01 	add.w	sl, sl, #1
 800ccac:	9304      	str	r3, [sp, #16]
 800ccae:	9307      	str	r3, [sp, #28]
 800ccb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccb6:	4654      	mov	r4, sl
 800ccb8:	2205      	movs	r2, #5
 800ccba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccbe:	4853      	ldr	r0, [pc, #332]	@ (800ce0c <_vfiprintf_r+0x21c>)
 800ccc0:	f000 fb7c 	bl	800d3bc <memchr>
 800ccc4:	9a04      	ldr	r2, [sp, #16]
 800ccc6:	b9d8      	cbnz	r0, 800cd00 <_vfiprintf_r+0x110>
 800ccc8:	06d1      	lsls	r1, r2, #27
 800ccca:	bf44      	itt	mi
 800cccc:	2320      	movmi	r3, #32
 800ccce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccd2:	0713      	lsls	r3, r2, #28
 800ccd4:	bf44      	itt	mi
 800ccd6:	232b      	movmi	r3, #43	@ 0x2b
 800ccd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccdc:	f89a 3000 	ldrb.w	r3, [sl]
 800cce0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cce2:	d015      	beq.n	800cd10 <_vfiprintf_r+0x120>
 800cce4:	4654      	mov	r4, sl
 800cce6:	2000      	movs	r0, #0
 800cce8:	f04f 0c0a 	mov.w	ip, #10
 800ccec:	9a07      	ldr	r2, [sp, #28]
 800ccee:	4621      	mov	r1, r4
 800ccf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccf4:	3b30      	subs	r3, #48	@ 0x30
 800ccf6:	2b09      	cmp	r3, #9
 800ccf8:	d94b      	bls.n	800cd92 <_vfiprintf_r+0x1a2>
 800ccfa:	b1b0      	cbz	r0, 800cd2a <_vfiprintf_r+0x13a>
 800ccfc:	9207      	str	r2, [sp, #28]
 800ccfe:	e014      	b.n	800cd2a <_vfiprintf_r+0x13a>
 800cd00:	eba0 0308 	sub.w	r3, r0, r8
 800cd04:	fa09 f303 	lsl.w	r3, r9, r3
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	46a2      	mov	sl, r4
 800cd0c:	9304      	str	r3, [sp, #16]
 800cd0e:	e7d2      	b.n	800ccb6 <_vfiprintf_r+0xc6>
 800cd10:	9b03      	ldr	r3, [sp, #12]
 800cd12:	1d19      	adds	r1, r3, #4
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	9103      	str	r1, [sp, #12]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	bfbb      	ittet	lt
 800cd1c:	425b      	neglt	r3, r3
 800cd1e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd22:	9307      	strge	r3, [sp, #28]
 800cd24:	9307      	strlt	r3, [sp, #28]
 800cd26:	bfb8      	it	lt
 800cd28:	9204      	strlt	r2, [sp, #16]
 800cd2a:	7823      	ldrb	r3, [r4, #0]
 800cd2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd2e:	d10a      	bne.n	800cd46 <_vfiprintf_r+0x156>
 800cd30:	7863      	ldrb	r3, [r4, #1]
 800cd32:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd34:	d132      	bne.n	800cd9c <_vfiprintf_r+0x1ac>
 800cd36:	9b03      	ldr	r3, [sp, #12]
 800cd38:	3402      	adds	r4, #2
 800cd3a:	1d1a      	adds	r2, r3, #4
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	9203      	str	r2, [sp, #12]
 800cd40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd44:	9305      	str	r3, [sp, #20]
 800cd46:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ce10 <_vfiprintf_r+0x220>
 800cd4a:	2203      	movs	r2, #3
 800cd4c:	4650      	mov	r0, sl
 800cd4e:	7821      	ldrb	r1, [r4, #0]
 800cd50:	f000 fb34 	bl	800d3bc <memchr>
 800cd54:	b138      	cbz	r0, 800cd66 <_vfiprintf_r+0x176>
 800cd56:	2240      	movs	r2, #64	@ 0x40
 800cd58:	9b04      	ldr	r3, [sp, #16]
 800cd5a:	eba0 000a 	sub.w	r0, r0, sl
 800cd5e:	4082      	lsls	r2, r0
 800cd60:	4313      	orrs	r3, r2
 800cd62:	3401      	adds	r4, #1
 800cd64:	9304      	str	r3, [sp, #16]
 800cd66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd6a:	2206      	movs	r2, #6
 800cd6c:	4829      	ldr	r0, [pc, #164]	@ (800ce14 <_vfiprintf_r+0x224>)
 800cd6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd72:	f000 fb23 	bl	800d3bc <memchr>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d03f      	beq.n	800cdfa <_vfiprintf_r+0x20a>
 800cd7a:	4b27      	ldr	r3, [pc, #156]	@ (800ce18 <_vfiprintf_r+0x228>)
 800cd7c:	bb1b      	cbnz	r3, 800cdc6 <_vfiprintf_r+0x1d6>
 800cd7e:	9b03      	ldr	r3, [sp, #12]
 800cd80:	3307      	adds	r3, #7
 800cd82:	f023 0307 	bic.w	r3, r3, #7
 800cd86:	3308      	adds	r3, #8
 800cd88:	9303      	str	r3, [sp, #12]
 800cd8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd8c:	443b      	add	r3, r7
 800cd8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd90:	e76a      	b.n	800cc68 <_vfiprintf_r+0x78>
 800cd92:	460c      	mov	r4, r1
 800cd94:	2001      	movs	r0, #1
 800cd96:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd9a:	e7a8      	b.n	800ccee <_vfiprintf_r+0xfe>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	f04f 0c0a 	mov.w	ip, #10
 800cda2:	4619      	mov	r1, r3
 800cda4:	3401      	adds	r4, #1
 800cda6:	9305      	str	r3, [sp, #20]
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdae:	3a30      	subs	r2, #48	@ 0x30
 800cdb0:	2a09      	cmp	r2, #9
 800cdb2:	d903      	bls.n	800cdbc <_vfiprintf_r+0x1cc>
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d0c6      	beq.n	800cd46 <_vfiprintf_r+0x156>
 800cdb8:	9105      	str	r1, [sp, #20]
 800cdba:	e7c4      	b.n	800cd46 <_vfiprintf_r+0x156>
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdc4:	e7f0      	b.n	800cda8 <_vfiprintf_r+0x1b8>
 800cdc6:	ab03      	add	r3, sp, #12
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	462a      	mov	r2, r5
 800cdcc:	4630      	mov	r0, r6
 800cdce:	4b13      	ldr	r3, [pc, #76]	@ (800ce1c <_vfiprintf_r+0x22c>)
 800cdd0:	a904      	add	r1, sp, #16
 800cdd2:	f3af 8000 	nop.w
 800cdd6:	4607      	mov	r7, r0
 800cdd8:	1c78      	adds	r0, r7, #1
 800cdda:	d1d6      	bne.n	800cd8a <_vfiprintf_r+0x19a>
 800cddc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdde:	07d9      	lsls	r1, r3, #31
 800cde0:	d405      	bmi.n	800cdee <_vfiprintf_r+0x1fe>
 800cde2:	89ab      	ldrh	r3, [r5, #12]
 800cde4:	059a      	lsls	r2, r3, #22
 800cde6:	d402      	bmi.n	800cdee <_vfiprintf_r+0x1fe>
 800cde8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdea:	f7ff fdd3 	bl	800c994 <__retarget_lock_release_recursive>
 800cdee:	89ab      	ldrh	r3, [r5, #12]
 800cdf0:	065b      	lsls	r3, r3, #25
 800cdf2:	f53f af1f 	bmi.w	800cc34 <_vfiprintf_r+0x44>
 800cdf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cdf8:	e71e      	b.n	800cc38 <_vfiprintf_r+0x48>
 800cdfa:	ab03      	add	r3, sp, #12
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	462a      	mov	r2, r5
 800ce00:	4630      	mov	r0, r6
 800ce02:	4b06      	ldr	r3, [pc, #24]	@ (800ce1c <_vfiprintf_r+0x22c>)
 800ce04:	a904      	add	r1, sp, #16
 800ce06:	f000 f87d 	bl	800cf04 <_printf_i>
 800ce0a:	e7e4      	b.n	800cdd6 <_vfiprintf_r+0x1e6>
 800ce0c:	0800d4de 	.word	0x0800d4de
 800ce10:	0800d4e4 	.word	0x0800d4e4
 800ce14:	0800d4e8 	.word	0x0800d4e8
 800ce18:	00000000 	.word	0x00000000
 800ce1c:	0800cbcb 	.word	0x0800cbcb

0800ce20 <_printf_common>:
 800ce20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce24:	4616      	mov	r6, r2
 800ce26:	4698      	mov	r8, r3
 800ce28:	688a      	ldr	r2, [r1, #8]
 800ce2a:	690b      	ldr	r3, [r1, #16]
 800ce2c:	4607      	mov	r7, r0
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	bfb8      	it	lt
 800ce32:	4613      	movlt	r3, r2
 800ce34:	6033      	str	r3, [r6, #0]
 800ce36:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce40:	b10a      	cbz	r2, 800ce46 <_printf_common+0x26>
 800ce42:	3301      	adds	r3, #1
 800ce44:	6033      	str	r3, [r6, #0]
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	0699      	lsls	r1, r3, #26
 800ce4a:	bf42      	ittt	mi
 800ce4c:	6833      	ldrmi	r3, [r6, #0]
 800ce4e:	3302      	addmi	r3, #2
 800ce50:	6033      	strmi	r3, [r6, #0]
 800ce52:	6825      	ldr	r5, [r4, #0]
 800ce54:	f015 0506 	ands.w	r5, r5, #6
 800ce58:	d106      	bne.n	800ce68 <_printf_common+0x48>
 800ce5a:	f104 0a19 	add.w	sl, r4, #25
 800ce5e:	68e3      	ldr	r3, [r4, #12]
 800ce60:	6832      	ldr	r2, [r6, #0]
 800ce62:	1a9b      	subs	r3, r3, r2
 800ce64:	42ab      	cmp	r3, r5
 800ce66:	dc2b      	bgt.n	800cec0 <_printf_common+0xa0>
 800ce68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ce6c:	6822      	ldr	r2, [r4, #0]
 800ce6e:	3b00      	subs	r3, #0
 800ce70:	bf18      	it	ne
 800ce72:	2301      	movne	r3, #1
 800ce74:	0692      	lsls	r2, r2, #26
 800ce76:	d430      	bmi.n	800ceda <_printf_common+0xba>
 800ce78:	4641      	mov	r1, r8
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ce80:	47c8      	blx	r9
 800ce82:	3001      	adds	r0, #1
 800ce84:	d023      	beq.n	800cece <_printf_common+0xae>
 800ce86:	6823      	ldr	r3, [r4, #0]
 800ce88:	6922      	ldr	r2, [r4, #16]
 800ce8a:	f003 0306 	and.w	r3, r3, #6
 800ce8e:	2b04      	cmp	r3, #4
 800ce90:	bf14      	ite	ne
 800ce92:	2500      	movne	r5, #0
 800ce94:	6833      	ldreq	r3, [r6, #0]
 800ce96:	f04f 0600 	mov.w	r6, #0
 800ce9a:	bf08      	it	eq
 800ce9c:	68e5      	ldreq	r5, [r4, #12]
 800ce9e:	f104 041a 	add.w	r4, r4, #26
 800cea2:	bf08      	it	eq
 800cea4:	1aed      	subeq	r5, r5, r3
 800cea6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ceaa:	bf08      	it	eq
 800ceac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	bfc4      	itt	gt
 800ceb4:	1a9b      	subgt	r3, r3, r2
 800ceb6:	18ed      	addgt	r5, r5, r3
 800ceb8:	42b5      	cmp	r5, r6
 800ceba:	d11a      	bne.n	800cef2 <_printf_common+0xd2>
 800cebc:	2000      	movs	r0, #0
 800cebe:	e008      	b.n	800ced2 <_printf_common+0xb2>
 800cec0:	2301      	movs	r3, #1
 800cec2:	4652      	mov	r2, sl
 800cec4:	4641      	mov	r1, r8
 800cec6:	4638      	mov	r0, r7
 800cec8:	47c8      	blx	r9
 800ceca:	3001      	adds	r0, #1
 800cecc:	d103      	bne.n	800ced6 <_printf_common+0xb6>
 800cece:	f04f 30ff 	mov.w	r0, #4294967295
 800ced2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ced6:	3501      	adds	r5, #1
 800ced8:	e7c1      	b.n	800ce5e <_printf_common+0x3e>
 800ceda:	2030      	movs	r0, #48	@ 0x30
 800cedc:	18e1      	adds	r1, r4, r3
 800cede:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cee2:	1c5a      	adds	r2, r3, #1
 800cee4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cee8:	4422      	add	r2, r4
 800ceea:	3302      	adds	r3, #2
 800ceec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cef0:	e7c2      	b.n	800ce78 <_printf_common+0x58>
 800cef2:	2301      	movs	r3, #1
 800cef4:	4622      	mov	r2, r4
 800cef6:	4641      	mov	r1, r8
 800cef8:	4638      	mov	r0, r7
 800cefa:	47c8      	blx	r9
 800cefc:	3001      	adds	r0, #1
 800cefe:	d0e6      	beq.n	800cece <_printf_common+0xae>
 800cf00:	3601      	adds	r6, #1
 800cf02:	e7d9      	b.n	800ceb8 <_printf_common+0x98>

0800cf04 <_printf_i>:
 800cf04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf08:	7e0f      	ldrb	r7, [r1, #24]
 800cf0a:	4691      	mov	r9, r2
 800cf0c:	2f78      	cmp	r7, #120	@ 0x78
 800cf0e:	4680      	mov	r8, r0
 800cf10:	460c      	mov	r4, r1
 800cf12:	469a      	mov	sl, r3
 800cf14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cf16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cf1a:	d807      	bhi.n	800cf2c <_printf_i+0x28>
 800cf1c:	2f62      	cmp	r7, #98	@ 0x62
 800cf1e:	d80a      	bhi.n	800cf36 <_printf_i+0x32>
 800cf20:	2f00      	cmp	r7, #0
 800cf22:	f000 80d3 	beq.w	800d0cc <_printf_i+0x1c8>
 800cf26:	2f58      	cmp	r7, #88	@ 0x58
 800cf28:	f000 80ba 	beq.w	800d0a0 <_printf_i+0x19c>
 800cf2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cf34:	e03a      	b.n	800cfac <_printf_i+0xa8>
 800cf36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cf3a:	2b15      	cmp	r3, #21
 800cf3c:	d8f6      	bhi.n	800cf2c <_printf_i+0x28>
 800cf3e:	a101      	add	r1, pc, #4	@ (adr r1, 800cf44 <_printf_i+0x40>)
 800cf40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf44:	0800cf9d 	.word	0x0800cf9d
 800cf48:	0800cfb1 	.word	0x0800cfb1
 800cf4c:	0800cf2d 	.word	0x0800cf2d
 800cf50:	0800cf2d 	.word	0x0800cf2d
 800cf54:	0800cf2d 	.word	0x0800cf2d
 800cf58:	0800cf2d 	.word	0x0800cf2d
 800cf5c:	0800cfb1 	.word	0x0800cfb1
 800cf60:	0800cf2d 	.word	0x0800cf2d
 800cf64:	0800cf2d 	.word	0x0800cf2d
 800cf68:	0800cf2d 	.word	0x0800cf2d
 800cf6c:	0800cf2d 	.word	0x0800cf2d
 800cf70:	0800d0b3 	.word	0x0800d0b3
 800cf74:	0800cfdb 	.word	0x0800cfdb
 800cf78:	0800d06d 	.word	0x0800d06d
 800cf7c:	0800cf2d 	.word	0x0800cf2d
 800cf80:	0800cf2d 	.word	0x0800cf2d
 800cf84:	0800d0d5 	.word	0x0800d0d5
 800cf88:	0800cf2d 	.word	0x0800cf2d
 800cf8c:	0800cfdb 	.word	0x0800cfdb
 800cf90:	0800cf2d 	.word	0x0800cf2d
 800cf94:	0800cf2d 	.word	0x0800cf2d
 800cf98:	0800d075 	.word	0x0800d075
 800cf9c:	6833      	ldr	r3, [r6, #0]
 800cf9e:	1d1a      	adds	r2, r3, #4
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	6032      	str	r2, [r6, #0]
 800cfa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cfac:	2301      	movs	r3, #1
 800cfae:	e09e      	b.n	800d0ee <_printf_i+0x1ea>
 800cfb0:	6833      	ldr	r3, [r6, #0]
 800cfb2:	6820      	ldr	r0, [r4, #0]
 800cfb4:	1d19      	adds	r1, r3, #4
 800cfb6:	6031      	str	r1, [r6, #0]
 800cfb8:	0606      	lsls	r6, r0, #24
 800cfba:	d501      	bpl.n	800cfc0 <_printf_i+0xbc>
 800cfbc:	681d      	ldr	r5, [r3, #0]
 800cfbe:	e003      	b.n	800cfc8 <_printf_i+0xc4>
 800cfc0:	0645      	lsls	r5, r0, #25
 800cfc2:	d5fb      	bpl.n	800cfbc <_printf_i+0xb8>
 800cfc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cfc8:	2d00      	cmp	r5, #0
 800cfca:	da03      	bge.n	800cfd4 <_printf_i+0xd0>
 800cfcc:	232d      	movs	r3, #45	@ 0x2d
 800cfce:	426d      	negs	r5, r5
 800cfd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cfd4:	230a      	movs	r3, #10
 800cfd6:	4859      	ldr	r0, [pc, #356]	@ (800d13c <_printf_i+0x238>)
 800cfd8:	e011      	b.n	800cffe <_printf_i+0xfa>
 800cfda:	6821      	ldr	r1, [r4, #0]
 800cfdc:	6833      	ldr	r3, [r6, #0]
 800cfde:	0608      	lsls	r0, r1, #24
 800cfe0:	f853 5b04 	ldr.w	r5, [r3], #4
 800cfe4:	d402      	bmi.n	800cfec <_printf_i+0xe8>
 800cfe6:	0649      	lsls	r1, r1, #25
 800cfe8:	bf48      	it	mi
 800cfea:	b2ad      	uxthmi	r5, r5
 800cfec:	2f6f      	cmp	r7, #111	@ 0x6f
 800cfee:	6033      	str	r3, [r6, #0]
 800cff0:	bf14      	ite	ne
 800cff2:	230a      	movne	r3, #10
 800cff4:	2308      	moveq	r3, #8
 800cff6:	4851      	ldr	r0, [pc, #324]	@ (800d13c <_printf_i+0x238>)
 800cff8:	2100      	movs	r1, #0
 800cffa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cffe:	6866      	ldr	r6, [r4, #4]
 800d000:	2e00      	cmp	r6, #0
 800d002:	bfa8      	it	ge
 800d004:	6821      	ldrge	r1, [r4, #0]
 800d006:	60a6      	str	r6, [r4, #8]
 800d008:	bfa4      	itt	ge
 800d00a:	f021 0104 	bicge.w	r1, r1, #4
 800d00e:	6021      	strge	r1, [r4, #0]
 800d010:	b90d      	cbnz	r5, 800d016 <_printf_i+0x112>
 800d012:	2e00      	cmp	r6, #0
 800d014:	d04b      	beq.n	800d0ae <_printf_i+0x1aa>
 800d016:	4616      	mov	r6, r2
 800d018:	fbb5 f1f3 	udiv	r1, r5, r3
 800d01c:	fb03 5711 	mls	r7, r3, r1, r5
 800d020:	5dc7      	ldrb	r7, [r0, r7]
 800d022:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d026:	462f      	mov	r7, r5
 800d028:	42bb      	cmp	r3, r7
 800d02a:	460d      	mov	r5, r1
 800d02c:	d9f4      	bls.n	800d018 <_printf_i+0x114>
 800d02e:	2b08      	cmp	r3, #8
 800d030:	d10b      	bne.n	800d04a <_printf_i+0x146>
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	07df      	lsls	r7, r3, #31
 800d036:	d508      	bpl.n	800d04a <_printf_i+0x146>
 800d038:	6923      	ldr	r3, [r4, #16]
 800d03a:	6861      	ldr	r1, [r4, #4]
 800d03c:	4299      	cmp	r1, r3
 800d03e:	bfde      	ittt	le
 800d040:	2330      	movle	r3, #48	@ 0x30
 800d042:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d046:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d04a:	1b92      	subs	r2, r2, r6
 800d04c:	6122      	str	r2, [r4, #16]
 800d04e:	464b      	mov	r3, r9
 800d050:	4621      	mov	r1, r4
 800d052:	4640      	mov	r0, r8
 800d054:	f8cd a000 	str.w	sl, [sp]
 800d058:	aa03      	add	r2, sp, #12
 800d05a:	f7ff fee1 	bl	800ce20 <_printf_common>
 800d05e:	3001      	adds	r0, #1
 800d060:	d14a      	bne.n	800d0f8 <_printf_i+0x1f4>
 800d062:	f04f 30ff 	mov.w	r0, #4294967295
 800d066:	b004      	add	sp, #16
 800d068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06c:	6823      	ldr	r3, [r4, #0]
 800d06e:	f043 0320 	orr.w	r3, r3, #32
 800d072:	6023      	str	r3, [r4, #0]
 800d074:	2778      	movs	r7, #120	@ 0x78
 800d076:	4832      	ldr	r0, [pc, #200]	@ (800d140 <_printf_i+0x23c>)
 800d078:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	6831      	ldr	r1, [r6, #0]
 800d080:	061f      	lsls	r7, r3, #24
 800d082:	f851 5b04 	ldr.w	r5, [r1], #4
 800d086:	d402      	bmi.n	800d08e <_printf_i+0x18a>
 800d088:	065f      	lsls	r7, r3, #25
 800d08a:	bf48      	it	mi
 800d08c:	b2ad      	uxthmi	r5, r5
 800d08e:	6031      	str	r1, [r6, #0]
 800d090:	07d9      	lsls	r1, r3, #31
 800d092:	bf44      	itt	mi
 800d094:	f043 0320 	orrmi.w	r3, r3, #32
 800d098:	6023      	strmi	r3, [r4, #0]
 800d09a:	b11d      	cbz	r5, 800d0a4 <_printf_i+0x1a0>
 800d09c:	2310      	movs	r3, #16
 800d09e:	e7ab      	b.n	800cff8 <_printf_i+0xf4>
 800d0a0:	4826      	ldr	r0, [pc, #152]	@ (800d13c <_printf_i+0x238>)
 800d0a2:	e7e9      	b.n	800d078 <_printf_i+0x174>
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	f023 0320 	bic.w	r3, r3, #32
 800d0aa:	6023      	str	r3, [r4, #0]
 800d0ac:	e7f6      	b.n	800d09c <_printf_i+0x198>
 800d0ae:	4616      	mov	r6, r2
 800d0b0:	e7bd      	b.n	800d02e <_printf_i+0x12a>
 800d0b2:	6833      	ldr	r3, [r6, #0]
 800d0b4:	6825      	ldr	r5, [r4, #0]
 800d0b6:	1d18      	adds	r0, r3, #4
 800d0b8:	6961      	ldr	r1, [r4, #20]
 800d0ba:	6030      	str	r0, [r6, #0]
 800d0bc:	062e      	lsls	r6, r5, #24
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	d501      	bpl.n	800d0c6 <_printf_i+0x1c2>
 800d0c2:	6019      	str	r1, [r3, #0]
 800d0c4:	e002      	b.n	800d0cc <_printf_i+0x1c8>
 800d0c6:	0668      	lsls	r0, r5, #25
 800d0c8:	d5fb      	bpl.n	800d0c2 <_printf_i+0x1be>
 800d0ca:	8019      	strh	r1, [r3, #0]
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	4616      	mov	r6, r2
 800d0d0:	6123      	str	r3, [r4, #16]
 800d0d2:	e7bc      	b.n	800d04e <_printf_i+0x14a>
 800d0d4:	6833      	ldr	r3, [r6, #0]
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	1d1a      	adds	r2, r3, #4
 800d0da:	6032      	str	r2, [r6, #0]
 800d0dc:	681e      	ldr	r6, [r3, #0]
 800d0de:	6862      	ldr	r2, [r4, #4]
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f000 f96b 	bl	800d3bc <memchr>
 800d0e6:	b108      	cbz	r0, 800d0ec <_printf_i+0x1e8>
 800d0e8:	1b80      	subs	r0, r0, r6
 800d0ea:	6060      	str	r0, [r4, #4]
 800d0ec:	6863      	ldr	r3, [r4, #4]
 800d0ee:	6123      	str	r3, [r4, #16]
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0f6:	e7aa      	b.n	800d04e <_printf_i+0x14a>
 800d0f8:	4632      	mov	r2, r6
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	4640      	mov	r0, r8
 800d0fe:	6923      	ldr	r3, [r4, #16]
 800d100:	47d0      	blx	sl
 800d102:	3001      	adds	r0, #1
 800d104:	d0ad      	beq.n	800d062 <_printf_i+0x15e>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	079b      	lsls	r3, r3, #30
 800d10a:	d413      	bmi.n	800d134 <_printf_i+0x230>
 800d10c:	68e0      	ldr	r0, [r4, #12]
 800d10e:	9b03      	ldr	r3, [sp, #12]
 800d110:	4298      	cmp	r0, r3
 800d112:	bfb8      	it	lt
 800d114:	4618      	movlt	r0, r3
 800d116:	e7a6      	b.n	800d066 <_printf_i+0x162>
 800d118:	2301      	movs	r3, #1
 800d11a:	4632      	mov	r2, r6
 800d11c:	4649      	mov	r1, r9
 800d11e:	4640      	mov	r0, r8
 800d120:	47d0      	blx	sl
 800d122:	3001      	adds	r0, #1
 800d124:	d09d      	beq.n	800d062 <_printf_i+0x15e>
 800d126:	3501      	adds	r5, #1
 800d128:	68e3      	ldr	r3, [r4, #12]
 800d12a:	9903      	ldr	r1, [sp, #12]
 800d12c:	1a5b      	subs	r3, r3, r1
 800d12e:	42ab      	cmp	r3, r5
 800d130:	dcf2      	bgt.n	800d118 <_printf_i+0x214>
 800d132:	e7eb      	b.n	800d10c <_printf_i+0x208>
 800d134:	2500      	movs	r5, #0
 800d136:	f104 0619 	add.w	r6, r4, #25
 800d13a:	e7f5      	b.n	800d128 <_printf_i+0x224>
 800d13c:	0800d4ef 	.word	0x0800d4ef
 800d140:	0800d500 	.word	0x0800d500

0800d144 <__sflush_r>:
 800d144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14a:	0716      	lsls	r6, r2, #28
 800d14c:	4605      	mov	r5, r0
 800d14e:	460c      	mov	r4, r1
 800d150:	d454      	bmi.n	800d1fc <__sflush_r+0xb8>
 800d152:	684b      	ldr	r3, [r1, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	dc02      	bgt.n	800d15e <__sflush_r+0x1a>
 800d158:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	dd48      	ble.n	800d1f0 <__sflush_r+0xac>
 800d15e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d160:	2e00      	cmp	r6, #0
 800d162:	d045      	beq.n	800d1f0 <__sflush_r+0xac>
 800d164:	2300      	movs	r3, #0
 800d166:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d16a:	682f      	ldr	r7, [r5, #0]
 800d16c:	6a21      	ldr	r1, [r4, #32]
 800d16e:	602b      	str	r3, [r5, #0]
 800d170:	d030      	beq.n	800d1d4 <__sflush_r+0x90>
 800d172:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	0759      	lsls	r1, r3, #29
 800d178:	d505      	bpl.n	800d186 <__sflush_r+0x42>
 800d17a:	6863      	ldr	r3, [r4, #4]
 800d17c:	1ad2      	subs	r2, r2, r3
 800d17e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d180:	b10b      	cbz	r3, 800d186 <__sflush_r+0x42>
 800d182:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d184:	1ad2      	subs	r2, r2, r3
 800d186:	2300      	movs	r3, #0
 800d188:	4628      	mov	r0, r5
 800d18a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d18c:	6a21      	ldr	r1, [r4, #32]
 800d18e:	47b0      	blx	r6
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	89a3      	ldrh	r3, [r4, #12]
 800d194:	d106      	bne.n	800d1a4 <__sflush_r+0x60>
 800d196:	6829      	ldr	r1, [r5, #0]
 800d198:	291d      	cmp	r1, #29
 800d19a:	d82b      	bhi.n	800d1f4 <__sflush_r+0xb0>
 800d19c:	4a28      	ldr	r2, [pc, #160]	@ (800d240 <__sflush_r+0xfc>)
 800d19e:	410a      	asrs	r2, r1
 800d1a0:	07d6      	lsls	r6, r2, #31
 800d1a2:	d427      	bmi.n	800d1f4 <__sflush_r+0xb0>
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	6062      	str	r2, [r4, #4]
 800d1a8:	6922      	ldr	r2, [r4, #16]
 800d1aa:	04d9      	lsls	r1, r3, #19
 800d1ac:	6022      	str	r2, [r4, #0]
 800d1ae:	d504      	bpl.n	800d1ba <__sflush_r+0x76>
 800d1b0:	1c42      	adds	r2, r0, #1
 800d1b2:	d101      	bne.n	800d1b8 <__sflush_r+0x74>
 800d1b4:	682b      	ldr	r3, [r5, #0]
 800d1b6:	b903      	cbnz	r3, 800d1ba <__sflush_r+0x76>
 800d1b8:	6560      	str	r0, [r4, #84]	@ 0x54
 800d1ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1bc:	602f      	str	r7, [r5, #0]
 800d1be:	b1b9      	cbz	r1, 800d1f0 <__sflush_r+0xac>
 800d1c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1c4:	4299      	cmp	r1, r3
 800d1c6:	d002      	beq.n	800d1ce <__sflush_r+0x8a>
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	f7ff fbf3 	bl	800c9b4 <_free_r>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1d2:	e00d      	b.n	800d1f0 <__sflush_r+0xac>
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	47b0      	blx	r6
 800d1da:	4602      	mov	r2, r0
 800d1dc:	1c50      	adds	r0, r2, #1
 800d1de:	d1c9      	bne.n	800d174 <__sflush_r+0x30>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d0c6      	beq.n	800d174 <__sflush_r+0x30>
 800d1e6:	2b1d      	cmp	r3, #29
 800d1e8:	d001      	beq.n	800d1ee <__sflush_r+0xaa>
 800d1ea:	2b16      	cmp	r3, #22
 800d1ec:	d11d      	bne.n	800d22a <__sflush_r+0xe6>
 800d1ee:	602f      	str	r7, [r5, #0]
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	e021      	b.n	800d238 <__sflush_r+0xf4>
 800d1f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1f8:	b21b      	sxth	r3, r3
 800d1fa:	e01a      	b.n	800d232 <__sflush_r+0xee>
 800d1fc:	690f      	ldr	r7, [r1, #16]
 800d1fe:	2f00      	cmp	r7, #0
 800d200:	d0f6      	beq.n	800d1f0 <__sflush_r+0xac>
 800d202:	0793      	lsls	r3, r2, #30
 800d204:	bf18      	it	ne
 800d206:	2300      	movne	r3, #0
 800d208:	680e      	ldr	r6, [r1, #0]
 800d20a:	bf08      	it	eq
 800d20c:	694b      	ldreq	r3, [r1, #20]
 800d20e:	1bf6      	subs	r6, r6, r7
 800d210:	600f      	str	r7, [r1, #0]
 800d212:	608b      	str	r3, [r1, #8]
 800d214:	2e00      	cmp	r6, #0
 800d216:	ddeb      	ble.n	800d1f0 <__sflush_r+0xac>
 800d218:	4633      	mov	r3, r6
 800d21a:	463a      	mov	r2, r7
 800d21c:	4628      	mov	r0, r5
 800d21e:	6a21      	ldr	r1, [r4, #32]
 800d220:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d224:	47e0      	blx	ip
 800d226:	2800      	cmp	r0, #0
 800d228:	dc07      	bgt.n	800d23a <__sflush_r+0xf6>
 800d22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d22e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d232:	f04f 30ff 	mov.w	r0, #4294967295
 800d236:	81a3      	strh	r3, [r4, #12]
 800d238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d23a:	4407      	add	r7, r0
 800d23c:	1a36      	subs	r6, r6, r0
 800d23e:	e7e9      	b.n	800d214 <__sflush_r+0xd0>
 800d240:	dfbffffe 	.word	0xdfbffffe

0800d244 <_fflush_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	690b      	ldr	r3, [r1, #16]
 800d248:	4605      	mov	r5, r0
 800d24a:	460c      	mov	r4, r1
 800d24c:	b913      	cbnz	r3, 800d254 <_fflush_r+0x10>
 800d24e:	2500      	movs	r5, #0
 800d250:	4628      	mov	r0, r5
 800d252:	bd38      	pop	{r3, r4, r5, pc}
 800d254:	b118      	cbz	r0, 800d25e <_fflush_r+0x1a>
 800d256:	6a03      	ldr	r3, [r0, #32]
 800d258:	b90b      	cbnz	r3, 800d25e <_fflush_r+0x1a>
 800d25a:	f7ff f94d 	bl	800c4f8 <__sinit>
 800d25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d0f3      	beq.n	800d24e <_fflush_r+0xa>
 800d266:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d268:	07d0      	lsls	r0, r2, #31
 800d26a:	d404      	bmi.n	800d276 <_fflush_r+0x32>
 800d26c:	0599      	lsls	r1, r3, #22
 800d26e:	d402      	bmi.n	800d276 <_fflush_r+0x32>
 800d270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d272:	f7ff fb8e 	bl	800c992 <__retarget_lock_acquire_recursive>
 800d276:	4628      	mov	r0, r5
 800d278:	4621      	mov	r1, r4
 800d27a:	f7ff ff63 	bl	800d144 <__sflush_r>
 800d27e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d280:	4605      	mov	r5, r0
 800d282:	07da      	lsls	r2, r3, #31
 800d284:	d4e4      	bmi.n	800d250 <_fflush_r+0xc>
 800d286:	89a3      	ldrh	r3, [r4, #12]
 800d288:	059b      	lsls	r3, r3, #22
 800d28a:	d4e1      	bmi.n	800d250 <_fflush_r+0xc>
 800d28c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d28e:	f7ff fb81 	bl	800c994 <__retarget_lock_release_recursive>
 800d292:	e7dd      	b.n	800d250 <_fflush_r+0xc>

0800d294 <__swhatbuf_r>:
 800d294:	b570      	push	{r4, r5, r6, lr}
 800d296:	460c      	mov	r4, r1
 800d298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d29c:	4615      	mov	r5, r2
 800d29e:	2900      	cmp	r1, #0
 800d2a0:	461e      	mov	r6, r3
 800d2a2:	b096      	sub	sp, #88	@ 0x58
 800d2a4:	da0c      	bge.n	800d2c0 <__swhatbuf_r+0x2c>
 800d2a6:	89a3      	ldrh	r3, [r4, #12]
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d2ae:	bf14      	ite	ne
 800d2b0:	2340      	movne	r3, #64	@ 0x40
 800d2b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d2b6:	2000      	movs	r0, #0
 800d2b8:	6031      	str	r1, [r6, #0]
 800d2ba:	602b      	str	r3, [r5, #0]
 800d2bc:	b016      	add	sp, #88	@ 0x58
 800d2be:	bd70      	pop	{r4, r5, r6, pc}
 800d2c0:	466a      	mov	r2, sp
 800d2c2:	f000 f849 	bl	800d358 <_fstat_r>
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	dbed      	blt.n	800d2a6 <__swhatbuf_r+0x12>
 800d2ca:	9901      	ldr	r1, [sp, #4]
 800d2cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2d4:	4259      	negs	r1, r3
 800d2d6:	4159      	adcs	r1, r3
 800d2d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2dc:	e7eb      	b.n	800d2b6 <__swhatbuf_r+0x22>

0800d2de <__smakebuf_r>:
 800d2de:	898b      	ldrh	r3, [r1, #12]
 800d2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2e2:	079d      	lsls	r5, r3, #30
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	460c      	mov	r4, r1
 800d2e8:	d507      	bpl.n	800d2fa <__smakebuf_r+0x1c>
 800d2ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d2ee:	6023      	str	r3, [r4, #0]
 800d2f0:	6123      	str	r3, [r4, #16]
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	6163      	str	r3, [r4, #20]
 800d2f6:	b003      	add	sp, #12
 800d2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2fa:	466a      	mov	r2, sp
 800d2fc:	ab01      	add	r3, sp, #4
 800d2fe:	f7ff ffc9 	bl	800d294 <__swhatbuf_r>
 800d302:	9f00      	ldr	r7, [sp, #0]
 800d304:	4605      	mov	r5, r0
 800d306:	4639      	mov	r1, r7
 800d308:	4630      	mov	r0, r6
 800d30a:	f7ff fbbd 	bl	800ca88 <_malloc_r>
 800d30e:	b948      	cbnz	r0, 800d324 <__smakebuf_r+0x46>
 800d310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d314:	059a      	lsls	r2, r3, #22
 800d316:	d4ee      	bmi.n	800d2f6 <__smakebuf_r+0x18>
 800d318:	f023 0303 	bic.w	r3, r3, #3
 800d31c:	f043 0302 	orr.w	r3, r3, #2
 800d320:	81a3      	strh	r3, [r4, #12]
 800d322:	e7e2      	b.n	800d2ea <__smakebuf_r+0xc>
 800d324:	89a3      	ldrh	r3, [r4, #12]
 800d326:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d32a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d32e:	81a3      	strh	r3, [r4, #12]
 800d330:	9b01      	ldr	r3, [sp, #4]
 800d332:	6020      	str	r0, [r4, #0]
 800d334:	b15b      	cbz	r3, 800d34e <__smakebuf_r+0x70>
 800d336:	4630      	mov	r0, r6
 800d338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d33c:	f000 f81e 	bl	800d37c <_isatty_r>
 800d340:	b128      	cbz	r0, 800d34e <__smakebuf_r+0x70>
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	f023 0303 	bic.w	r3, r3, #3
 800d348:	f043 0301 	orr.w	r3, r3, #1
 800d34c:	81a3      	strh	r3, [r4, #12]
 800d34e:	89a3      	ldrh	r3, [r4, #12]
 800d350:	431d      	orrs	r5, r3
 800d352:	81a5      	strh	r5, [r4, #12]
 800d354:	e7cf      	b.n	800d2f6 <__smakebuf_r+0x18>
	...

0800d358 <_fstat_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	2300      	movs	r3, #0
 800d35c:	4d06      	ldr	r5, [pc, #24]	@ (800d378 <_fstat_r+0x20>)
 800d35e:	4604      	mov	r4, r0
 800d360:	4608      	mov	r0, r1
 800d362:	4611      	mov	r1, r2
 800d364:	602b      	str	r3, [r5, #0]
 800d366:	f7f3 fdf3 	bl	8000f50 <_fstat>
 800d36a:	1c43      	adds	r3, r0, #1
 800d36c:	d102      	bne.n	800d374 <_fstat_r+0x1c>
 800d36e:	682b      	ldr	r3, [r5, #0]
 800d370:	b103      	cbz	r3, 800d374 <_fstat_r+0x1c>
 800d372:	6023      	str	r3, [r4, #0]
 800d374:	bd38      	pop	{r3, r4, r5, pc}
 800d376:	bf00      	nop
 800d378:	20002f9c 	.word	0x20002f9c

0800d37c <_isatty_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	2300      	movs	r3, #0
 800d380:	4d05      	ldr	r5, [pc, #20]	@ (800d398 <_isatty_r+0x1c>)
 800d382:	4604      	mov	r4, r0
 800d384:	4608      	mov	r0, r1
 800d386:	602b      	str	r3, [r5, #0]
 800d388:	f7f3 fdf1 	bl	8000f6e <_isatty>
 800d38c:	1c43      	adds	r3, r0, #1
 800d38e:	d102      	bne.n	800d396 <_isatty_r+0x1a>
 800d390:	682b      	ldr	r3, [r5, #0]
 800d392:	b103      	cbz	r3, 800d396 <_isatty_r+0x1a>
 800d394:	6023      	str	r3, [r4, #0]
 800d396:	bd38      	pop	{r3, r4, r5, pc}
 800d398:	20002f9c 	.word	0x20002f9c

0800d39c <_sbrk_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	2300      	movs	r3, #0
 800d3a0:	4d05      	ldr	r5, [pc, #20]	@ (800d3b8 <_sbrk_r+0x1c>)
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	4608      	mov	r0, r1
 800d3a6:	602b      	str	r3, [r5, #0]
 800d3a8:	f7f3 fdf8 	bl	8000f9c <_sbrk>
 800d3ac:	1c43      	adds	r3, r0, #1
 800d3ae:	d102      	bne.n	800d3b6 <_sbrk_r+0x1a>
 800d3b0:	682b      	ldr	r3, [r5, #0]
 800d3b2:	b103      	cbz	r3, 800d3b6 <_sbrk_r+0x1a>
 800d3b4:	6023      	str	r3, [r4, #0]
 800d3b6:	bd38      	pop	{r3, r4, r5, pc}
 800d3b8:	20002f9c 	.word	0x20002f9c

0800d3bc <memchr>:
 800d3bc:	4603      	mov	r3, r0
 800d3be:	b510      	push	{r4, lr}
 800d3c0:	b2c9      	uxtb	r1, r1
 800d3c2:	4402      	add	r2, r0
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	d101      	bne.n	800d3ce <memchr+0x12>
 800d3ca:	2000      	movs	r0, #0
 800d3cc:	e003      	b.n	800d3d6 <memchr+0x1a>
 800d3ce:	7804      	ldrb	r4, [r0, #0]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	428c      	cmp	r4, r1
 800d3d4:	d1f6      	bne.n	800d3c4 <memchr+0x8>
 800d3d6:	bd10      	pop	{r4, pc}

0800d3d8 <_init>:
 800d3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3da:	bf00      	nop
 800d3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3de:	bc08      	pop	{r3}
 800d3e0:	469e      	mov	lr, r3
 800d3e2:	4770      	bx	lr

0800d3e4 <_fini>:
 800d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e6:	bf00      	nop
 800d3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ea:	bc08      	pop	{r3}
 800d3ec:	469e      	mov	lr, r3
 800d3ee:	4770      	bx	lr
