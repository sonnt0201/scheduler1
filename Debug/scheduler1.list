
scheduler1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4e8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800d5f8  0800d5f8  0000e5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d75c  0800d75c  0000f1e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d75c  0800d75c  0000f1e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d75c  0800d75c  0000f1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d75c  0800d75c  0000e75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d760  0800d760  0000e760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800d764  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dd0  200001e0  0800d944  0000f1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002fb0  0800d944  0000ffb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe0b  00000000  00000000  0000f209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f3f  00000000  00000000  0002f014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  00033f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001551  00000000  00000000  00035b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd3c  00000000  00000000  00037079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002186c  00000000  00000000  00053db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c691  00000000  00000000  00075621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111cb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d40  00000000  00000000  00111cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00119a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d5e0 	.word	0x0800d5e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800d5e0 	.word	0x0800d5e0

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2iz>:
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000700:	d30f      	bcc.n	8000722 <__aeabi_f2iz+0x2a>
 8000702:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d90d      	bls.n	8000728 <__aeabi_f2iz+0x30>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000714:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000718:	fa23 f002 	lsr.w	r0, r3, r2
 800071c:	bf18      	it	ne
 800071e:	4240      	negne	r0, r0
 8000720:	4770      	bx	lr
 8000722:	f04f 0000 	mov.w	r0, #0
 8000726:	4770      	bx	lr
 8000728:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800072c:	d101      	bne.n	8000732 <__aeabi_f2iz+0x3a>
 800072e:	0242      	lsls	r2, r0, #9
 8000730:	d105      	bne.n	800073e <__aeabi_f2iz+0x46>
 8000732:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000736:	bf08      	it	eq
 8000738:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800073c:	4770      	bx	lr
 800073e:	f04f 0000 	mov.w	r0, #0
 8000742:	4770      	bx	lr

08000744 <DelayMicro>:
#include "dht22.h"
//--------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <DelayMicro+0x34>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <DelayMicro+0x38>)
 8000752:	fba2 2303 	umull	r2, r3, r2, r3
 8000756:	0ddb      	lsrs	r3, r3, #23
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	fb02 f303 	mul.w	r3, r2, r3
 800075e:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8000760:	bf00      	nop
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	1e5a      	subs	r2, r3, #1
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1fa      	bne.n	8000762 <DelayMicro+0x1e>
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	20000004 	.word	0x20000004
 800077c:	ee9bfab5 	.word	0xee9bfab5

08000780 <dht22_init>:

//--------------------------------------------------
void dht22_init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
  HAL_GPIO_DeInit(data_port, data_pin);
 8000792:	2104      	movs	r1, #4
 8000794:	480e      	ldr	r0, [pc, #56]	@ (80007d0 <dht22_init+0x50>)
 8000796:	f001 f80d 	bl	80017b4 <HAL_GPIO_DeInit>
  GPIO_InitStruct.Pin = data_pin;
 800079a:	2304      	movs	r3, #4
 800079c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800079e:	2311      	movs	r3, #17
 80007a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(data_port, &GPIO_InitStruct);
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	4808      	ldr	r0, [pc, #32]	@ (80007d0 <dht22_init+0x50>)
 80007b0:	f000 fe7c 	bl	80014ac <HAL_GPIO_Init>
	///////////////////////////////////////////////////////
  HAL_Delay(1000);
 80007b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b8:	f000 fd74 	bl	80012a4 <HAL_Delay>
  HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2104      	movs	r1, #4
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <dht22_init+0x50>)
 80007c2:	f001 f8ca 	bl	800195a <HAL_GPIO_WritePin>

}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40010800 	.word	0x40010800

080007d4 <DHT22_GetTemp_Humidity>:

uint8_t DHT22_GetTemp_Humidity(float *Temp, float *Humidity)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	uint8_t dataArray[6], myChecksum;
	uint16_t Temp16, Humid16;
	uint8_t i, j = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2104      	movs	r1, #4
 80007e6:	485e      	ldr	r0, [pc, #376]	@ (8000960 <DHT22_GetTemp_Humidity+0x18c>)
 80007e8:	f001 f8b7 	bl	800195a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2104      	movs	r1, #4
 80007f0:	485b      	ldr	r0, [pc, #364]	@ (8000960 <DHT22_GetTemp_Humidity+0x18c>)
 80007f2:	f001 f8b2 	bl	800195a <HAL_GPIO_WritePin>
	DelayMicro(100000);
 80007f6:	485b      	ldr	r0, [pc, #364]	@ (8000964 <DHT22_GetTemp_Humidity+0x190>)
 80007f8:	f7ff ffa4 	bl	8000744 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2104      	movs	r1, #4
 8000800:	4857      	ldr	r0, [pc, #348]	@ (8000960 <DHT22_GetTemp_Humidity+0x18c>)
 8000802:	f001 f8aa 	bl	800195a <HAL_GPIO_WritePin>
	DelayMicro(18000);
 8000806:	f244 6050 	movw	r0, #18000	@ 0x4650
 800080a:	f7ff ff9b 	bl	8000744 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	2104      	movs	r1, #4
 8000812:	4853      	ldr	r0, [pc, #332]	@ (8000960 <DHT22_GetTemp_Humidity+0x18c>)
 8000814:	f001 f8a1 	bl	800195a <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40
 8000818:	2027      	movs	r0, #39	@ 0x27
 800081a:	f7ff ff93 	bl	8000744 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 800081e:	2104      	movs	r1, #4
 8000820:	484f      	ldr	r0, [pc, #316]	@ (8000960 <DHT22_GetTemp_Humidity+0x18c>)
 8000822:	f001 f883 	bl	800192c <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d101      	bne.n	8000830 <DHT22_GetTemp_Humidity+0x5c>
	{
		return 0;
 800082c:	2300      	movs	r3, #0
 800082e:	e093      	b.n	8000958 <DHT22_GetTemp_Humidity+0x184>
	}
	DelayMicro(80);
 8000830:	2050      	movs	r0, #80	@ 0x50
 8000832:	f7ff ff87 	bl	8000744 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 8000836:	2104      	movs	r1, #4
 8000838:	4849      	ldr	r0, [pc, #292]	@ (8000960 <DHT22_GetTemp_Humidity+0x18c>)
 800083a:	f001 f877 	bl	800192c <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <DHT22_GetTemp_Humidity+0x74>
	{
		return 0;
 8000844:	2300      	movs	r3, #0
 8000846:	e087      	b.n	8000958 <DHT22_GetTemp_Humidity+0x184>
	}
	DelayMicro(80);
 8000848:	2050      	movs	r0, #80	@ 0x50
 800084a:	f7ff ff7b 	bl	8000744 <DelayMicro>

	for (j=0; j<5; j++)
 800084e:	2300      	movs	r3, #0
 8000850:	757b      	strb	r3, [r7, #21]
 8000852:	e040      	b.n	80008d6 <DHT22_GetTemp_Humidity+0x102>
	{
		dataArray[j]=0;
 8000854:	7d7b      	ldrb	r3, [r7, #21]
 8000856:	3318      	adds	r3, #24
 8000858:	443b      	add	r3, r7
 800085a:	2200      	movs	r2, #0
 800085c:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(i=0; i<8; i++)
 8000860:	2300      	movs	r3, #0
 8000862:	75bb      	strb	r3, [r7, #22]
 8000864:	e031      	b.n	80008ca <DHT22_GetTemp_Humidity+0xf6>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);
 8000866:	bf00      	nop
 8000868:	2104      	movs	r1, #4
 800086a:	483d      	ldr	r0, [pc, #244]	@ (8000960 <DHT22_GetTemp_Humidity+0x18c>)
 800086c:	f001 f85e 	bl	800192c <HAL_GPIO_ReadPin>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0f8      	beq.n	8000868 <DHT22_GetTemp_Humidity+0x94>
			DelayMicro(30);
 8000876:	201e      	movs	r0, #30
 8000878:	f7ff ff64 	bl	8000744 <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 800087c:	2104      	movs	r1, #4
 800087e:	4838      	ldr	r0, [pc, #224]	@ (8000960 <DHT22_GetTemp_Humidity+0x18c>)
 8000880:	f001 f854 	bl	800192c <HAL_GPIO_ReadPin>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d014      	beq.n	80008b4 <DHT22_GetTemp_Humidity+0xe0>
				dataArray[j] |= (1<<(7-i));
 800088a:	7d7b      	ldrb	r3, [r7, #21]
 800088c:	3318      	adds	r3, #24
 800088e:	443b      	add	r3, r7
 8000890:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000894:	b25a      	sxtb	r2, r3
 8000896:	7dbb      	ldrb	r3, [r7, #22]
 8000898:	f1c3 0307 	rsb	r3, r3, #7
 800089c:	2101      	movs	r1, #1
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	b25a      	sxtb	r2, r3
 80008a8:	7d7b      	ldrb	r3, [r7, #21]
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	3318      	adds	r3, #24
 80008ae:	443b      	add	r3, r7
 80008b0:	f803 2c10 	strb.w	r2, [r3, #-16]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);
 80008b4:	bf00      	nop
 80008b6:	2104      	movs	r1, #4
 80008b8:	4829      	ldr	r0, [pc, #164]	@ (8000960 <DHT22_GetTemp_Humidity+0x18c>)
 80008ba:	f001 f837 	bl	800192c <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d0f8      	beq.n	80008b6 <DHT22_GetTemp_Humidity+0xe2>
		for(i=0; i<8; i++)
 80008c4:	7dbb      	ldrb	r3, [r7, #22]
 80008c6:	3301      	adds	r3, #1
 80008c8:	75bb      	strb	r3, [r7, #22]
 80008ca:	7dbb      	ldrb	r3, [r7, #22]
 80008cc:	2b07      	cmp	r3, #7
 80008ce:	d9ca      	bls.n	8000866 <DHT22_GetTemp_Humidity+0x92>
	for (j=0; j<5; j++)
 80008d0:	7d7b      	ldrb	r3, [r7, #21]
 80008d2:	3301      	adds	r3, #1
 80008d4:	757b      	strb	r3, [r7, #21]
 80008d6:	7d7b      	ldrb	r3, [r7, #21]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d9bb      	bls.n	8000854 <DHT22_GetTemp_Humidity+0x80>
		}
	}
	myChecksum = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	753b      	strb	r3, [r7, #20]
 80008e4:	e00a      	b.n	80008fc <DHT22_GetTemp_Humidity+0x128>
	{
		myChecksum += dataArray[k];
 80008e6:	7d3b      	ldrb	r3, [r7, #20]
 80008e8:	3318      	adds	r3, #24
 80008ea:	443b      	add	r3, r7
 80008ec:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80008f0:	7dfb      	ldrb	r3, [r7, #23]
 80008f2:	4413      	add	r3, r2
 80008f4:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 80008f6:	7d3b      	ldrb	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	753b      	strb	r3, [r7, #20]
 80008fc:	7d3b      	ldrb	r3, [r7, #20]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d9f1      	bls.n	80008e6 <DHT22_GetTemp_Humidity+0x112>
	}

		Temp16 = (dataArray[2] <<8) | dataArray[3];
 8000902:	7abb      	ldrb	r3, [r7, #10]
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	b21a      	sxth	r2, r3
 8000908:	7afb      	ldrb	r3, [r7, #11]
 800090a:	b21b      	sxth	r3, r3
 800090c:	4313      	orrs	r3, r2
 800090e:	b21b      	sxth	r3, r3
 8000910:	827b      	strh	r3, [r7, #18]
		Humid16 = (dataArray[0] <<8) | dataArray[1];
 8000912:	7a3b      	ldrb	r3, [r7, #8]
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	b21a      	sxth	r2, r3
 8000918:	7a7b      	ldrb	r3, [r7, #9]
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b21b      	sxth	r3, r3
 8000920:	823b      	strh	r3, [r7, #16]

		*Temp = Temp16/10.0f;
 8000922:	8a7b      	ldrh	r3, [r7, #18]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fccd 	bl	80002c4 <__aeabi_i2f>
 800092a:	4603      	mov	r3, r0
 800092c:	490e      	ldr	r1, [pc, #56]	@ (8000968 <DHT22_GetTemp_Humidity+0x194>)
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fdd0 	bl	80004d4 <__aeabi_fdiv>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	601a      	str	r2, [r3, #0]
		*Humidity = Humid16/10.0f;
 800093c:	8a3b      	ldrh	r3, [r7, #16]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fcc0 	bl	80002c4 <__aeabi_i2f>
 8000944:	4603      	mov	r3, r0
 8000946:	4908      	ldr	r1, [pc, #32]	@ (8000968 <DHT22_GetTemp_Humidity+0x194>)
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fdc3 	bl	80004d4 <__aeabi_fdiv>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	601a      	str	r2, [r3, #0]
		return 1;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40010800 	.word	0x40010800
 8000964:	000186a0 	.word	0x000186a0
 8000968:	41200000 	.word	0x41200000

0800096c <__io_putchar>:
// ************** DEFINE ****************

/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
    while (CDC_Transmit_FS((uint8_t *)&ch, 1) == USBD_BUSY);
 8000974:	bf00      	nop
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2101      	movs	r1, #1
 800097a:	4618      	mov	r0, r3
 800097c:	f00b fa56 	bl	800be2c <CDC_Transmit_FS>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d0f7      	beq.n	8000976 <__io_putchar+0xa>
    return ch;
 8000986:	687b      	ldr	r3, [r7, #4]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <MPU6050_Init>:
 * Reference to initialized common hi2c1 variable in main.c
 *
 * */
extern I2C_HandleTypeDef hi2c1;

inline void MPU6050_Init (void){
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af04      	add	r7, sp, #16
	uint8_t check,Data;
	// check the sensor ID (SEE WHO AM I DATASHEET)
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099a:	9302      	str	r3, [sp, #8]
 800099c:	2301      	movs	r3, #1
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2301      	movs	r3, #1
 80009a6:	2275      	movs	r2, #117	@ 0x75
 80009a8:	21d0      	movs	r1, #208	@ 0xd0
 80009aa:	4824      	ldr	r0, [pc, #144]	@ (8000a3c <MPU6050_Init+0xac>)
 80009ac:	f001 fa2c 	bl	8001e08 <HAL_I2C_Mem_Read>
	if (check == 104) // the sensor is present
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b68      	cmp	r3, #104	@ 0x68
 80009b4:	d13e      	bne.n	8000a34 <MPU6050_Init+0xa4>
	{
		printf("MPU Detected\n");
 80009b6:	4822      	ldr	r0, [pc, #136]	@ (8000a40 <MPU6050_Init+0xb0>)
 80009b8:	f00b ff40 	bl	800c83c <puts>
		// setting PWR Registers
		Data = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80009c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2301      	movs	r3, #1
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	1dbb      	adds	r3, r7, #6
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	226b      	movs	r2, #107	@ 0x6b
 80009d2:	21d0      	movs	r1, #208	@ 0xd0
 80009d4:	4819      	ldr	r0, [pc, #100]	@ (8000a3c <MPU6050_Init+0xac>)
 80009d6:	f001 f91d 	bl	8001c14 <HAL_I2C_Mem_Write>
		// var sample rate with SMPLRT_DIV_REG
		Data = 0x07;
 80009da:	2307      	movs	r3, #7
 80009dc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80009de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e2:	9302      	str	r3, [sp, #8]
 80009e4:	2301      	movs	r3, #1
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	1dbb      	adds	r3, r7, #6
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	2219      	movs	r2, #25
 80009f0:	21d0      	movs	r1, #208	@ 0xd0
 80009f2:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <MPU6050_Init+0xac>)
 80009f4:	f001 f90e 	bl	8001c14 <HAL_I2C_Mem_Write>
		// var accelerometer config with ACCEL_CONFIG_REG
		Data = 0x00;
 80009f8:	2300      	movs	r3, #0
 80009fa:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80009fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a00:	9302      	str	r3, [sp, #8]
 8000a02:	2301      	movs	r3, #1
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	221c      	movs	r2, #28
 8000a0e:	21d0      	movs	r1, #208	@ 0xd0
 8000a10:	480a      	ldr	r0, [pc, #40]	@ (8000a3c <MPU6050_Init+0xac>)
 8000a12:	f001 f8ff 	bl	8001c14 <HAL_I2C_Mem_Write>
		// var Gyro config with GYRO_CONFIG_REG
		Data = 0x00;
 8000a16:	2300      	movs	r3, #0
 8000a18:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000a1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	2301      	movs	r3, #1
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	1dbb      	adds	r3, r7, #6
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	221b      	movs	r2, #27
 8000a2c:	21d0      	movs	r1, #208	@ 0xd0
 8000a2e:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <MPU6050_Init+0xac>)
 8000a30:	f001 f8f0 	bl	8001c14 <HAL_I2C_Mem_Write>
	}
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000210 	.word	0x20000210
 8000a40:	0800d5f8 	.word	0x0800d5f8

08000a44 <MPU6050_Read_Accel>:


inline void MPU6050_Read_Accel ( void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 8000a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a4e:	9302      	str	r3, [sp, #8]
 8000a50:	2306      	movs	r3, #6
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	463b      	mov	r3, r7
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	223b      	movs	r2, #59	@ 0x3b
 8000a5c:	21d0      	movs	r1, #208	@ 0xd0
 8000a5e:	4829      	ldr	r0, [pc, #164]	@ (8000b04 <MPU6050_Read_Accel+0xc0>)
 8000a60:	f001 f9d2 	bl	8001e08 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000a64:	783b      	ldrb	r3, [r7, #0]
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	787b      	ldrb	r3, [r7, #1]
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	4b25      	ldr	r3, [pc, #148]	@ (8000b08 <MPU6050_Read_Accel+0xc4>)
 8000a74:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000a76:	78bb      	ldrb	r3, [r7, #2]
 8000a78:	021b      	lsls	r3, r3, #8
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b21a      	sxth	r2, r3
 8000a84:	4b21      	ldr	r3, [pc, #132]	@ (8000b0c <MPU6050_Read_Accel+0xc8>)
 8000a86:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000a88:	793b      	ldrb	r3, [r7, #4]
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	b21a      	sxth	r2, r3
 8000a8e:	797b      	ldrb	r3, [r7, #5]
 8000a90:	b21b      	sxth	r3, r3
 8000a92:	4313      	orrs	r3, r2
 8000a94:	b21a      	sxth	r2, r3
 8000a96:	4b1e      	ldr	r3, [pc, #120]	@ (8000b10 <MPU6050_Read_Accel+0xcc>)
 8000a98:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = (float)Accel_X_RAW/16384.0;
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <MPU6050_Read_Accel+0xc4>)
 8000a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fc0f 	bl	80002c4 <__aeabi_i2f>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd11 	bl	80004d4 <__aeabi_fdiv>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <MPU6050_Read_Accel+0xd0>)
 8000ab8:	601a      	str	r2, [r3, #0]
	Ay = (float)Accel_Y_RAW/16384.0;
 8000aba:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MPU6050_Read_Accel+0xc8>)
 8000abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fbff 	bl	80002c4 <__aeabi_i2f>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fd01 	bl	80004d4 <__aeabi_fdiv>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <MPU6050_Read_Accel+0xd4>)
 8000ad8:	601a      	str	r2, [r3, #0]
	Az = (float)Accel_Z_RAW/16384.0;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <MPU6050_Read_Accel+0xcc>)
 8000adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fbef 	bl	80002c4 <__aeabi_i2f>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fcf1 	bl	80004d4 <__aeabi_fdiv>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MPU6050_Read_Accel+0xd8>)
 8000af8:	601a      	str	r2, [r3, #0]
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000210 	.word	0x20000210
 8000b08:	200001fc 	.word	0x200001fc
 8000b0c:	200001fe 	.word	0x200001fe
 8000b10:	20000200 	.word	0x20000200
 8000b14:	20000204 	.word	0x20000204
 8000b18:	20000208 	.word	0x20000208
 8000b1c:	2000020c 	.word	0x2000020c

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b24:	f000 fb8c 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b28:	f000 f82c 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2c:	f000 f8b4 	bl	8000c98 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b30:	f000 f884 	bl	8000c3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MX_USB_DEVICE_Init();
 8000b34:	f00b f8a8 	bl	800bc88 <MX_USB_DEVICE_Init>

//  MPU6050_Init();
  dht22_init();
 8000b38:	f7ff fe22 	bl	8000780 <dht22_init>
//  DWT_Init();


 MPU6050_Init();
 8000b3c:	f7ff ff28 	bl	8000990 <MPU6050_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b40:	f008 fb62 	bl	8009208 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mpu */
  mpuHandle = osThreadNew(TaskMpu, NULL, &mpu_attributes);
 8000b44:	4a09      	ldr	r2, [pc, #36]	@ (8000b6c <main+0x4c>)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <main+0x50>)
 8000b4a:	f008 fba5 	bl	8009298 <osThreadNew>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <main+0x54>)
 8000b52:	6013      	str	r3, [r2, #0]

  /* creation of dht */
  dhtHandle = osThreadNew(TaskDht, NULL, &dht_attributes);
 8000b54:	4a08      	ldr	r2, [pc, #32]	@ (8000b78 <main+0x58>)
 8000b56:	2100      	movs	r1, #0
 8000b58:	4808      	ldr	r0, [pc, #32]	@ (8000b7c <main+0x5c>)
 8000b5a:	f008 fb9d 	bl	8009298 <osThreadNew>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a07      	ldr	r2, [pc, #28]	@ (8000b80 <main+0x60>)
 8000b62:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b64:	f008 fb72 	bl	800924c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <main+0x48>
 8000b6c:	0800d6b4 	.word	0x0800d6b4
 8000b70:	08000d21 	.word	0x08000d21
 8000b74:	20000264 	.word	0x20000264
 8000b78:	0800d6d8 	.word	0x0800d6d8
 8000b7c:	08000dd9 	.word	0x08000dd9
 8000b80:	20000268 	.word	0x20000268

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	@ 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b8e:	2228      	movs	r2, #40	@ 0x28
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f00b ff32 	bl	800c9fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000bd0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 fc9c 	bl	8004518 <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000be6:	f000 f943 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bfa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2101      	movs	r1, #1
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 ff08 	bl	8004a1c <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c12:	f000 f92d 	bl	8000e70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c16:	2310      	movs	r3, #16
 8000c18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000c1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c1e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f004 f8b8 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c2e:	f000 f91f 	bl	8000e70 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3750      	adds	r7, #80	@ 0x50
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c42:	4a13      	ldr	r2, [pc, #76]	@ (8000c90 <MX_I2C1_Init+0x54>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c48:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <MX_I2C1_Init+0x58>)
 8000c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c7a:	f000 fe87 	bl	800198c <HAL_I2C_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c84:	f000 f8f4 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000210 	.word	0x20000210
 8000c90:	40005400 	.word	0x40005400
 8000c94:	000186a0 	.word	0x000186a0

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0310 	add.w	r3, r7, #16
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_GPIO_Init+0x7c>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a18      	ldr	r2, [pc, #96]	@ (8000d14 <MX_GPIO_Init+0x7c>)
 8000cb2:	f043 0320 	orr.w	r3, r3, #32
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_GPIO_Init+0x7c>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0320 	and.w	r3, r3, #32
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_GPIO_Init+0x7c>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <MX_GPIO_Init+0x7c>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <MX_GPIO_Init+0x7c>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <MX_GPIO_Init+0x7c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8000d14 <MX_GPIO_Init+0x7c>)
 8000ce2:	f043 0308 	orr.w	r3, r3, #8
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <MX_GPIO_Init+0x7c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : data_Pin */
  GPIO_InitStruct.Pin = data_Pin;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <MX_GPIO_Init+0x80>)
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(data_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_GPIO_Init+0x84>)
 8000d08:	f000 fbd0 	bl	80014ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000
 8000d18:	10110000 	.word	0x10110000
 8000d1c:	40010800 	.word	0x40010800

08000d20 <TaskMpu>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMpu */
void TaskMpu(void *argument)
{
 8000d20:	b5b0      	push	{r4, r5, r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d28:	f00a ffae 	bl	800bc88 <MX_USB_DEVICE_Init>
  {

//	 start = DWT_GetCycleCount();
	  //
//	  	  MPU6050_Read_Accel();
	    MPU6050_Read_Accel();
 8000d2c:	f7ff fe8a 	bl	8000a44 <MPU6050_Read_Accel>
	  //	  intPart = (int)floorf(Ax * 100);
	  	  printf("ax=%c%d.%d\n", (Ax < 0) ? '-': '+',(int) Ax, abs( ((int)(Ax * 10000)) % 10000)  );
 8000d30:	4b23      	ldr	r3, [pc, #140]	@ (8000dc0 <TaskMpu+0xa0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f04f 0100 	mov.w	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcb5 	bl	80006a8 <__aeabi_fcmplt>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <TaskMpu+0x28>
 8000d44:	242d      	movs	r4, #45	@ 0x2d
 8000d46:	e000      	b.n	8000d4a <TaskMpu+0x2a>
 8000d48:	242b      	movs	r4, #43	@ 0x2b
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <TaskMpu+0xa0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fcd2 	bl	80006f8 <__aeabi_f2iz>
 8000d54:	4605      	mov	r5, r0
 8000d56:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <TaskMpu+0xa0>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	491a      	ldr	r1, [pc, #104]	@ (8000dc4 <TaskMpu+0xa4>)
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fb05 	bl	800036c <__aeabi_fmul>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fcc7 	bl	80006f8 <__aeabi_f2iz>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <TaskMpu+0xa8>)
 8000d6e:	fb83 1302 	smull	r1, r3, r3, r2
 8000d72:	1319      	asrs	r1, r3, #12
 8000d74:	17d3      	asrs	r3, r2, #31
 8000d76:	1acb      	subs	r3, r1, r3
 8000d78:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000d7c:	fb01 f303 	mul.w	r3, r1, r3
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	bfb8      	it	lt
 8000d86:	425b      	neglt	r3, r3
 8000d88:	462a      	mov	r2, r5
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	480f      	ldr	r0, [pc, #60]	@ (8000dcc <TaskMpu+0xac>)
 8000d8e:	f00b fced 	bl	800c76c <iprintf>
	  	  printf("Period task 2: %d ms\n", period_task_2 * 1000);
 8000d92:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <TaskMpu+0xb0>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9c:	fb02 f303 	mul.w	r3, r2, r3
 8000da0:	4619      	mov	r1, r3
 8000da2:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <TaskMpu+0xb4>)
 8000da4:	f00b fce2 	bl	800c76c <iprintf>


	    // print exe time of mpu task
//	  	  printf("%d\n",(int)(DWT_GetCycleCount() - start));

    osDelay(period_task_2 * 1000);
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <TaskMpu+0xb0>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f008 fb00 	bl	80093bc <osDelay>
	    MPU6050_Read_Accel();
 8000dbc:	e7b6      	b.n	8000d2c <TaskMpu+0xc>
 8000dbe:	bf00      	nop
 8000dc0:	20000204 	.word	0x20000204
 8000dc4:	461c4000 	.word	0x461c4000
 8000dc8:	68db8bad 	.word	0x68db8bad
 8000dcc:	0800d610 	.word	0x0800d610
 8000dd0:	20000001 	.word	0x20000001
 8000dd4:	0800d61c 	.word	0x0800d61c

08000dd8 <TaskDht>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskDht */
void TaskDht(void *argument)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskDht */
	float temp = 0, humid = 0;
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
//	 TickType_t  start = 0;
	 uint32_t start = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  for(;;)
  {
//	    start = xTaskGetTickCount();
//	  printf("Hello from rtos \n");
//	  start = DWT_GetCycleCount();
	 	  	  DHT22_GetTemp_Humidity(&temp, &humid);
 8000df0:	f107 020c 	add.w	r2, r7, #12
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fcea 	bl	80007d4 <DHT22_GetTemp_Humidity>

//	 	  	  int intPart = (int)floorf(temp);
	 	  //
	 	  	  printf("t=%d\n",(int) temp);
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fc78 	bl	80006f8 <__aeabi_f2iz>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <TaskDht+0x68>)
 8000e0e:	f00b fcad 	bl	800c76c <iprintf>
	 	  	  printf("Period task 1: %d ms\n", period_task_1 * 5000);
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <TaskDht+0x6c>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000e1c:	fb02 f303 	mul.w	r3, r2, r3
 8000e20:	4619      	mov	r1, r3
 8000e22:	4809      	ldr	r0, [pc, #36]	@ (8000e48 <TaskDht+0x70>)
 8000e24:	f00b fca2 	bl	800c76c <iprintf>
//	 	 	  printf("%d\n",(int)(DWT_GetCycleCount() - start));


    osDelay(period_task_1 * 5000);
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <TaskDht+0x6c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000e32:	fb02 f303 	mul.w	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f008 fac0 	bl	80093bc <osDelay>
	 	  	  DHT22_GetTemp_Humidity(&temp, &humid);
 8000e3c:	bf00      	nop
 8000e3e:	e7d7      	b.n	8000df0 <TaskDht+0x18>
 8000e40:	0800d634 	.word	0x0800d634
 8000e44:	20000000 	.word	0x20000000
 8000e48:	0800d63c 	.word	0x0800d63c

08000e4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e5e:	f000 fa05 	bl	800126c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40012c00 	.word	0x40012c00

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e82:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <HAL_MspInit+0x68>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a17      	ldr	r2, [pc, #92]	@ (8000ee4 <HAL_MspInit+0x68>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6193      	str	r3, [r2, #24]
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_MspInit+0x68>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_MspInit+0x68>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a11      	ldr	r2, [pc, #68]	@ (8000ee4 <HAL_MspInit+0x68>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_MspInit+0x68>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	f06f 0001 	mvn.w	r0, #1
 8000eba:	f000 facc 	bl	8001456 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <HAL_MspInit+0x6c>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <HAL_MspInit+0x6c>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000

08000eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a15      	ldr	r2, [pc, #84]	@ (8000f5c <HAL_I2C_MspInit+0x70>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d123      	bne.n	8000f54 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <HAL_I2C_MspInit+0x74>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a13      	ldr	r2, [pc, #76]	@ (8000f60 <HAL_I2C_MspInit+0x74>)
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <HAL_I2C_MspInit+0x74>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f24:	23c0      	movs	r3, #192	@ 0xc0
 8000f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f28:	2312      	movs	r3, #18
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	480b      	ldr	r0, [pc, #44]	@ (8000f64 <HAL_I2C_MspInit+0x78>)
 8000f38:	f000 fab8 	bl	80014ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <HAL_I2C_MspInit+0x74>)
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	4a07      	ldr	r2, [pc, #28]	@ (8000f60 <HAL_I2C_MspInit+0x74>)
 8000f42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f46:	61d3      	str	r3, [r2, #28]
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_I2C_MspInit+0x74>)
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010c00 	.word	0x40010c00

08000f68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	@ 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001038 <HAL_InitTick+0xd0>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a2d      	ldr	r2, [pc, #180]	@ (8001038 <HAL_InitTick+0xd0>)
 8000f84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001038 <HAL_InitTick+0xd0>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f96:	f107 020c 	add.w	r2, r7, #12
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 feab 	bl	8004cfc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fa6:	f003 fe95 	bl	8004cd4 <HAL_RCC_GetPCLK2Freq>
 8000faa:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fae:	4a23      	ldr	r2, [pc, #140]	@ (800103c <HAL_InitTick+0xd4>)
 8000fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb4:	0c9b      	lsrs	r3, r3, #18
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fba:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <HAL_InitTick+0xd8>)
 8000fbc:	4a21      	ldr	r2, [pc, #132]	@ (8001044 <HAL_InitTick+0xdc>)
 8000fbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <HAL_InitTick+0xd8>)
 8000fc2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fc6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001040 <HAL_InitTick+0xd8>)
 8000fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fcc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <HAL_InitTick+0xd8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_InitTick+0xd8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <HAL_InitTick+0xd8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000fe0:	4817      	ldr	r0, [pc, #92]	@ (8001040 <HAL_InitTick+0xd8>)
 8000fe2:	f003 ff8f 	bl	8004f04 <HAL_TIM_Base_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000fec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d11b      	bne.n	800102c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ff4:	4812      	ldr	r0, [pc, #72]	@ (8001040 <HAL_InitTick+0xd8>)
 8000ff6:	f003 ffdd 	bl	8004fb4 <HAL_TIM_Base_Start_IT>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001000:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001004:	2b00      	cmp	r3, #0
 8001006:	d111      	bne.n	800102c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001008:	2019      	movs	r0, #25
 800100a:	f000 fa40 	bl	800148e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d808      	bhi.n	8001026 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	2019      	movs	r0, #25
 800101a:	f000 fa1c 	bl	8001456 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800101e:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <HAL_InitTick+0xe0>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e002      	b.n	800102c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800102c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001030:	4618      	mov	r0, r3
 8001032:	3730      	adds	r7, #48	@ 0x30
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	431bde83 	.word	0x431bde83
 8001040:	2000026c 	.word	0x2000026c
 8001044:	40012c00 	.word	0x40012c00
 8001048:	20000008 	.word	0x20000008

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001086:	f001 fe02 	bl	8002c8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000296c 	.word	0x2000296c

08001094 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001098:	4802      	ldr	r0, [pc, #8]	@ (80010a4 <TIM1_UP_IRQHandler+0x10>)
 800109a:	f003 ffdd 	bl	8005058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000026c 	.word	0x2000026c

080010a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e00a      	b.n	80010d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ba:	f3af 8000 	nop.w
 80010be:	4601      	mov	r1, r0
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	b2ca      	uxtb	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbf0      	blt.n	80010ba <_read+0x12>
  }

  return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	e009      	b.n	8001108 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	60ba      	str	r2, [r7, #8]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fc35 	bl	800096c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	dbf1      	blt.n	80010f4 <_write+0x12>
  }
  return len;
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_close>:

int _close(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001140:	605a      	str	r2, [r3, #4]
  return 0;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr

0800114e <_isatty>:

int _isatty(int file)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
	...

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f00b fcca 	bl	800cb44 <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20005000 	.word	0x20005000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	200002b4 	.word	0x200002b4
 80011e4:	20002fb0 	.word	0x20002fb0

080011e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f4:	f7ff fff8 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480b      	ldr	r0, [pc, #44]	@ (8001228 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011fa:	490c      	ldr	r1, [pc, #48]	@ (800122c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001230 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a09      	ldr	r2, [pc, #36]	@ (8001234 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001210:	4c09      	ldr	r4, [pc, #36]	@ (8001238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121e:	f00b fc97 	bl	800cb50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001222:	f7ff fc7d 	bl	8000b20 <main>
  bx lr
 8001226:	4770      	bx	lr
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001230:	0800d764 	.word	0x0800d764
  ldr r2, =_sbss
 8001234:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001238:	20002fb0 	.word	0x20002fb0

0800123c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_2_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_Init+0x28>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	@ (8001268 <HAL_Init+0x28>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f8f5 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	200f      	movs	r0, #15
 8001258:	f7ff fe86 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fe0e 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40022000 	.word	0x40022000

0800126c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <HAL_IncTick+0x1c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b05      	ldr	r3, [pc, #20]	@ (800128c <HAL_IncTick+0x20>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a03      	ldr	r2, [pc, #12]	@ (800128c <HAL_IncTick+0x20>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	2000000c 	.word	0x2000000c
 800128c:	200002b8 	.word	0x200002b8

08001290 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b02      	ldr	r3, [pc, #8]	@ (80012a0 <HAL_GetTick+0x10>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	200002b8 	.word	0x200002b8

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff fff0 	bl	8001290 <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffe0 	bl	8001290 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000000c 	.word	0x2000000c

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	@ (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4906      	ldr	r1, [pc, #24]	@ (8001384 <__NVIC_EnableIRQ+0x34>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	@ (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	@ (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	@ 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	@ 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff4f 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff64 	bl	8001334 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ffb2 	bl	80013dc <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff81 	bl	8001388 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff57 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b08b      	sub	sp, #44	@ 0x2c
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014be:	e169      	b.n	8001794 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014c0:	2201      	movs	r2, #1
 80014c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	429a      	cmp	r2, r3
 80014da:	f040 8158 	bne.w	800178e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a9a      	ldr	r2, [pc, #616]	@ (800174c <HAL_GPIO_Init+0x2a0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d05e      	beq.n	80015a6 <HAL_GPIO_Init+0xfa>
 80014e8:	4a98      	ldr	r2, [pc, #608]	@ (800174c <HAL_GPIO_Init+0x2a0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d875      	bhi.n	80015da <HAL_GPIO_Init+0x12e>
 80014ee:	4a98      	ldr	r2, [pc, #608]	@ (8001750 <HAL_GPIO_Init+0x2a4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d058      	beq.n	80015a6 <HAL_GPIO_Init+0xfa>
 80014f4:	4a96      	ldr	r2, [pc, #600]	@ (8001750 <HAL_GPIO_Init+0x2a4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d86f      	bhi.n	80015da <HAL_GPIO_Init+0x12e>
 80014fa:	4a96      	ldr	r2, [pc, #600]	@ (8001754 <HAL_GPIO_Init+0x2a8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d052      	beq.n	80015a6 <HAL_GPIO_Init+0xfa>
 8001500:	4a94      	ldr	r2, [pc, #592]	@ (8001754 <HAL_GPIO_Init+0x2a8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d869      	bhi.n	80015da <HAL_GPIO_Init+0x12e>
 8001506:	4a94      	ldr	r2, [pc, #592]	@ (8001758 <HAL_GPIO_Init+0x2ac>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d04c      	beq.n	80015a6 <HAL_GPIO_Init+0xfa>
 800150c:	4a92      	ldr	r2, [pc, #584]	@ (8001758 <HAL_GPIO_Init+0x2ac>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d863      	bhi.n	80015da <HAL_GPIO_Init+0x12e>
 8001512:	4a92      	ldr	r2, [pc, #584]	@ (800175c <HAL_GPIO_Init+0x2b0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d046      	beq.n	80015a6 <HAL_GPIO_Init+0xfa>
 8001518:	4a90      	ldr	r2, [pc, #576]	@ (800175c <HAL_GPIO_Init+0x2b0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d85d      	bhi.n	80015da <HAL_GPIO_Init+0x12e>
 800151e:	2b12      	cmp	r3, #18
 8001520:	d82a      	bhi.n	8001578 <HAL_GPIO_Init+0xcc>
 8001522:	2b12      	cmp	r3, #18
 8001524:	d859      	bhi.n	80015da <HAL_GPIO_Init+0x12e>
 8001526:	a201      	add	r2, pc, #4	@ (adr r2, 800152c <HAL_GPIO_Init+0x80>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	080015a7 	.word	0x080015a7
 8001530:	08001581 	.word	0x08001581
 8001534:	08001593 	.word	0x08001593
 8001538:	080015d5 	.word	0x080015d5
 800153c:	080015db 	.word	0x080015db
 8001540:	080015db 	.word	0x080015db
 8001544:	080015db 	.word	0x080015db
 8001548:	080015db 	.word	0x080015db
 800154c:	080015db 	.word	0x080015db
 8001550:	080015db 	.word	0x080015db
 8001554:	080015db 	.word	0x080015db
 8001558:	080015db 	.word	0x080015db
 800155c:	080015db 	.word	0x080015db
 8001560:	080015db 	.word	0x080015db
 8001564:	080015db 	.word	0x080015db
 8001568:	080015db 	.word	0x080015db
 800156c:	080015db 	.word	0x080015db
 8001570:	08001589 	.word	0x08001589
 8001574:	0800159d 	.word	0x0800159d
 8001578:	4a79      	ldr	r2, [pc, #484]	@ (8001760 <HAL_GPIO_Init+0x2b4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800157e:	e02c      	b.n	80015da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e029      	b.n	80015dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	3304      	adds	r3, #4
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e024      	b.n	80015dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	3308      	adds	r3, #8
 8001598:	623b      	str	r3, [r7, #32]
          break;
 800159a:	e01f      	b.n	80015dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	330c      	adds	r3, #12
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	e01a      	b.n	80015dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ae:	2304      	movs	r3, #4
 80015b0:	623b      	str	r3, [r7, #32]
          break;
 80015b2:	e013      	b.n	80015dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015bc:	2308      	movs	r3, #8
 80015be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	611a      	str	r2, [r3, #16]
          break;
 80015c6:	e009      	b.n	80015dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c8:	2308      	movs	r3, #8
 80015ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	615a      	str	r2, [r3, #20]
          break;
 80015d2:	e003      	b.n	80015dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e000      	b.n	80015dc <HAL_GPIO_Init+0x130>
          break;
 80015da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2bff      	cmp	r3, #255	@ 0xff
 80015e0:	d801      	bhi.n	80015e6 <HAL_GPIO_Init+0x13a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	e001      	b.n	80015ea <HAL_GPIO_Init+0x13e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3304      	adds	r3, #4
 80015ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2bff      	cmp	r3, #255	@ 0xff
 80015f0:	d802      	bhi.n	80015f8 <HAL_GPIO_Init+0x14c>
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	e002      	b.n	80015fe <HAL_GPIO_Init+0x152>
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	3b08      	subs	r3, #8
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	210f      	movs	r1, #15
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	401a      	ands	r2, r3
 8001610:	6a39      	ldr	r1, [r7, #32]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	431a      	orrs	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 80b1 	beq.w	800178e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800162c:	4b4d      	ldr	r3, [pc, #308]	@ (8001764 <HAL_GPIO_Init+0x2b8>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a4c      	ldr	r2, [pc, #304]	@ (8001764 <HAL_GPIO_Init+0x2b8>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <HAL_GPIO_Init+0x2b8>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001644:	4a48      	ldr	r2, [pc, #288]	@ (8001768 <HAL_GPIO_Init+0x2bc>)
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001650:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4013      	ands	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a40      	ldr	r2, [pc, #256]	@ (800176c <HAL_GPIO_Init+0x2c0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d013      	beq.n	8001698 <HAL_GPIO_Init+0x1ec>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a3f      	ldr	r2, [pc, #252]	@ (8001770 <HAL_GPIO_Init+0x2c4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d00d      	beq.n	8001694 <HAL_GPIO_Init+0x1e8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a3e      	ldr	r2, [pc, #248]	@ (8001774 <HAL_GPIO_Init+0x2c8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d007      	beq.n	8001690 <HAL_GPIO_Init+0x1e4>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a3d      	ldr	r2, [pc, #244]	@ (8001778 <HAL_GPIO_Init+0x2cc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d101      	bne.n	800168c <HAL_GPIO_Init+0x1e0>
 8001688:	2303      	movs	r3, #3
 800168a:	e006      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 800168c:	2304      	movs	r3, #4
 800168e:	e004      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 8001690:	2302      	movs	r3, #2
 8001692:	e002      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 8001698:	2300      	movs	r3, #0
 800169a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169c:	f002 0203 	and.w	r2, r2, #3
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	4093      	lsls	r3, r2
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016aa:	492f      	ldr	r1, [pc, #188]	@ (8001768 <HAL_GPIO_Init+0x2bc>)
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c4:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	492c      	ldr	r1, [pc, #176]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016d2:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	43db      	mvns	r3, r3
 80016da:	4928      	ldr	r1, [pc, #160]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016dc:	4013      	ands	r3, r2
 80016de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016ec:	4b23      	ldr	r3, [pc, #140]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	4922      	ldr	r1, [pc, #136]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60cb      	str	r3, [r1, #12]
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016fa:	4b20      	ldr	r3, [pc, #128]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	43db      	mvns	r3, r3
 8001702:	491e      	ldr	r1, [pc, #120]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 8001704:	4013      	ands	r3, r2
 8001706:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4918      	ldr	r1, [pc, #96]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	43db      	mvns	r3, r3
 800172a:	4914      	ldr	r1, [pc, #80]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 800172c:	4013      	ands	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d021      	beq.n	8001780 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	490e      	ldr	r1, [pc, #56]	@ (800177c <HAL_GPIO_Init+0x2d0>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
 8001748:	e021      	b.n	800178e <HAL_GPIO_Init+0x2e2>
 800174a:	bf00      	nop
 800174c:	10320000 	.word	0x10320000
 8001750:	10310000 	.word	0x10310000
 8001754:	10220000 	.word	0x10220000
 8001758:	10210000 	.word	0x10210000
 800175c:	10120000 	.word	0x10120000
 8001760:	10110000 	.word	0x10110000
 8001764:	40021000 	.word	0x40021000
 8001768:	40010000 	.word	0x40010000
 800176c:	40010800 	.word	0x40010800
 8001770:	40010c00 	.word	0x40010c00
 8001774:	40011000 	.word	0x40011000
 8001778:	40011400 	.word	0x40011400
 800177c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <HAL_GPIO_Init+0x304>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	43db      	mvns	r3, r3
 8001788:	4909      	ldr	r1, [pc, #36]	@ (80017b0 <HAL_GPIO_Init+0x304>)
 800178a:	4013      	ands	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	3301      	adds	r3, #1
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	fa22 f303 	lsr.w	r3, r2, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f47f ae8e 	bne.w	80014c0 <HAL_GPIO_Init+0x14>
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	372c      	adds	r7, #44	@ 0x2c
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80017c2:	e09a      	b.n	80018fa <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 808d 	beq.w	80018f4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80017da:	4a4e      	ldr	r2, [pc, #312]	@ (8001914 <HAL_GPIO_DeInit+0x160>)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	220f      	movs	r2, #15
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4013      	ands	r3, r2
 80017fa:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a46      	ldr	r2, [pc, #280]	@ (8001918 <HAL_GPIO_DeInit+0x164>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d013      	beq.n	800182c <HAL_GPIO_DeInit+0x78>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a45      	ldr	r2, [pc, #276]	@ (800191c <HAL_GPIO_DeInit+0x168>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00d      	beq.n	8001828 <HAL_GPIO_DeInit+0x74>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a44      	ldr	r2, [pc, #272]	@ (8001920 <HAL_GPIO_DeInit+0x16c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d007      	beq.n	8001824 <HAL_GPIO_DeInit+0x70>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a43      	ldr	r2, [pc, #268]	@ (8001924 <HAL_GPIO_DeInit+0x170>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_GPIO_DeInit+0x6c>
 800181c:	2303      	movs	r3, #3
 800181e:	e006      	b.n	800182e <HAL_GPIO_DeInit+0x7a>
 8001820:	2304      	movs	r3, #4
 8001822:	e004      	b.n	800182e <HAL_GPIO_DeInit+0x7a>
 8001824:	2302      	movs	r3, #2
 8001826:	e002      	b.n	800182e <HAL_GPIO_DeInit+0x7a>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_GPIO_DeInit+0x7a>
 800182c:	2300      	movs	r3, #0
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	f002 0203 	and.w	r2, r2, #3
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	4093      	lsls	r3, r2
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	429a      	cmp	r2, r3
 800183c:	d132      	bne.n	80018a4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800183e:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <HAL_GPIO_DeInit+0x174>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	43db      	mvns	r3, r3
 8001846:	4938      	ldr	r1, [pc, #224]	@ (8001928 <HAL_GPIO_DeInit+0x174>)
 8001848:	4013      	ands	r3, r2
 800184a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800184c:	4b36      	ldr	r3, [pc, #216]	@ (8001928 <HAL_GPIO_DeInit+0x174>)
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	43db      	mvns	r3, r3
 8001854:	4934      	ldr	r1, [pc, #208]	@ (8001928 <HAL_GPIO_DeInit+0x174>)
 8001856:	4013      	ands	r3, r2
 8001858:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800185a:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <HAL_GPIO_DeInit+0x174>)
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	43db      	mvns	r3, r3
 8001862:	4931      	ldr	r1, [pc, #196]	@ (8001928 <HAL_GPIO_DeInit+0x174>)
 8001864:	4013      	ands	r3, r2
 8001866:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001868:	4b2f      	ldr	r3, [pc, #188]	@ (8001928 <HAL_GPIO_DeInit+0x174>)
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	43db      	mvns	r3, r3
 8001870:	492d      	ldr	r1, [pc, #180]	@ (8001928 <HAL_GPIO_DeInit+0x174>)
 8001872:	4013      	ands	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001886:	4a23      	ldr	r2, [pc, #140]	@ (8001914 <HAL_GPIO_DeInit+0x160>)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	43da      	mvns	r2, r3
 8001896:	481f      	ldr	r0, [pc, #124]	@ (8001914 <HAL_GPIO_DeInit+0x160>)
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	400a      	ands	r2, r1
 800189e:	3302      	adds	r3, #2
 80018a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2bff      	cmp	r3, #255	@ 0xff
 80018a8:	d801      	bhi.n	80018ae <HAL_GPIO_DeInit+0xfa>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	e001      	b.n	80018b2 <HAL_GPIO_DeInit+0xfe>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3304      	adds	r3, #4
 80018b2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2bff      	cmp	r3, #255	@ 0xff
 80018b8:	d802      	bhi.n	80018c0 <HAL_GPIO_DeInit+0x10c>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	e002      	b.n	80018c6 <HAL_GPIO_DeInit+0x112>
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3b08      	subs	r3, #8
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	210f      	movs	r1, #15
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	2104      	movs	r1, #4
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	431a      	orrs	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	401a      	ands	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	3301      	adds	r3, #1
 80018f8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	f47f af5e 	bne.w	80017c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3724      	adds	r7, #36	@ 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	40010000 	.word	0x40010000
 8001918:	40010800 	.word	0x40010800
 800191c:	40010c00 	.word	0x40010c00
 8001920:	40011000 	.word	0x40011000
 8001924:	40011400 	.word	0x40011400
 8001928:	40010400 	.word	0x40010400

0800192c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	e001      	b.n	800194e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	460b      	mov	r3, r1
 8001964:	807b      	strh	r3, [r7, #2]
 8001966:	4613      	mov	r3, r2
 8001968:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800196a:	787b      	ldrb	r3, [r7, #1]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001970:	887a      	ldrh	r2, [r7, #2]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001976:	e003      	b.n	8001980 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001978:	887b      	ldrh	r3, [r7, #2]
 800197a:	041a      	lsls	r2, r3, #16
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	611a      	str	r2, [r3, #16]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
	...

0800198c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e12b      	b.n	8001bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fa9a 	bl	8000eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2224      	movs	r2, #36	@ 0x24
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019f0:	f003 f95c 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 80019f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a81      	ldr	r2, [pc, #516]	@ (8001c00 <HAL_I2C_Init+0x274>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d807      	bhi.n	8001a10 <HAL_I2C_Init+0x84>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a80      	ldr	r2, [pc, #512]	@ (8001c04 <HAL_I2C_Init+0x278>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	bf94      	ite	ls
 8001a08:	2301      	movls	r3, #1
 8001a0a:	2300      	movhi	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	e006      	b.n	8001a1e <HAL_I2C_Init+0x92>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4a7d      	ldr	r2, [pc, #500]	@ (8001c08 <HAL_I2C_Init+0x27c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	bf94      	ite	ls
 8001a18:	2301      	movls	r3, #1
 8001a1a:	2300      	movhi	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0e7      	b.n	8001bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4a78      	ldr	r2, [pc, #480]	@ (8001c0c <HAL_I2C_Init+0x280>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0c9b      	lsrs	r3, r3, #18
 8001a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a6a      	ldr	r2, [pc, #424]	@ (8001c00 <HAL_I2C_Init+0x274>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d802      	bhi.n	8001a60 <HAL_I2C_Init+0xd4>
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	e009      	b.n	8001a74 <HAL_I2C_Init+0xe8>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	4a69      	ldr	r2, [pc, #420]	@ (8001c10 <HAL_I2C_Init+0x284>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	3301      	adds	r3, #1
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	495c      	ldr	r1, [pc, #368]	@ (8001c00 <HAL_I2C_Init+0x274>)
 8001a90:	428b      	cmp	r3, r1
 8001a92:	d819      	bhi.n	8001ac8 <HAL_I2C_Init+0x13c>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1e59      	subs	r1, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa2:	1c59      	adds	r1, r3, #1
 8001aa4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <HAL_I2C_Init+0x138>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1e59      	subs	r1, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac2:	e051      	b.n	8001b68 <HAL_I2C_Init+0x1dc>
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	e04f      	b.n	8001b68 <HAL_I2C_Init+0x1dc>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d111      	bne.n	8001af4 <HAL_I2C_Init+0x168>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	440b      	add	r3, r1
 8001ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	e012      	b.n	8001b1a <HAL_I2C_Init+0x18e>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1e58      	subs	r0, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	0099      	lsls	r1, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_Init+0x196>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e022      	b.n	8001b68 <HAL_I2C_Init+0x1dc>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10e      	bne.n	8001b48 <HAL_I2C_Init+0x1bc>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1e58      	subs	r0, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6859      	ldr	r1, [r3, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	440b      	add	r3, r1
 8001b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b46:	e00f      	b.n	8001b68 <HAL_I2C_Init+0x1dc>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	0099      	lsls	r1, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	6809      	ldr	r1, [r1, #0]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69da      	ldr	r2, [r3, #28]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6911      	ldr	r1, [r2, #16]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68d2      	ldr	r2, [r2, #12]
 8001ba2:	4311      	orrs	r1, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	000186a0 	.word	0x000186a0
 8001c04:	001e847f 	.word	0x001e847f
 8001c08:	003d08ff 	.word	0x003d08ff
 8001c0c:	431bde83 	.word	0x431bde83
 8001c10:	10624dd3 	.word	0x10624dd3

08001c14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	4608      	mov	r0, r1
 8001c1e:	4611      	mov	r1, r2
 8001c20:	461a      	mov	r2, r3
 8001c22:	4603      	mov	r3, r0
 8001c24:	817b      	strh	r3, [r7, #10]
 8001c26:	460b      	mov	r3, r1
 8001c28:	813b      	strh	r3, [r7, #8]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c2e:	f7ff fb2f 	bl	8001290 <HAL_GetTick>
 8001c32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	f040 80d9 	bne.w	8001df4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2319      	movs	r3, #25
 8001c48:	2201      	movs	r2, #1
 8001c4a:	496d      	ldr	r1, [pc, #436]	@ (8001e00 <HAL_I2C_Mem_Write+0x1ec>)
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 fccd 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e0cc      	b.n	8001df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_I2C_Mem_Write+0x56>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e0c5      	b.n	8001df6 <HAL_I2C_Mem_Write+0x1e2>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d007      	beq.n	8001c90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2221      	movs	r2, #33	@ 0x21
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2240      	movs	r2, #64	@ 0x40
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a3a      	ldr	r2, [r7, #32]
 8001cba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4a4d      	ldr	r2, [pc, #308]	@ (8001e04 <HAL_I2C_Mem_Write+0x1f0>)
 8001cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cd2:	88f8      	ldrh	r0, [r7, #6]
 8001cd4:	893a      	ldrh	r2, [r7, #8]
 8001cd6:	8979      	ldrh	r1, [r7, #10]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 fb04 	bl	80022f0 <I2C_RequestMemoryWrite>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d052      	beq.n	8001d94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e081      	b.n	8001df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 fd92 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00d      	beq.n	8001d1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d107      	bne.n	8001d1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e06b      	b.n	8001df6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d11b      	bne.n	8001d94 <HAL_I2C_Mem_Write+0x180>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d017      	beq.n	8001d94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1aa      	bne.n	8001cf2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 fd85 	bl	80028b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00d      	beq.n	8001dc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d107      	bne.n	8001dc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e016      	b.n	8001df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e000      	b.n	8001df6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001df4:	2302      	movs	r3, #2
  }
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	00100002 	.word	0x00100002
 8001e04:	ffff0000 	.word	0xffff0000

08001e08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	@ 0x30
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4603      	mov	r3, r0
 8001e18:	817b      	strh	r3, [r7, #10]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	813b      	strh	r3, [r7, #8]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e26:	f7ff fa33 	bl	8001290 <HAL_GetTick>
 8001e2a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	f040 8250 	bne.w	80022da <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2319      	movs	r3, #25
 8001e40:	2201      	movs	r2, #1
 8001e42:	4982      	ldr	r1, [pc, #520]	@ (800204c <HAL_I2C_Mem_Read+0x244>)
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fbd1 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001e50:	2302      	movs	r3, #2
 8001e52:	e243      	b.n	80022dc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_I2C_Mem_Read+0x5a>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e23c      	b.n	80022dc <HAL_I2C_Mem_Read+0x4d4>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d007      	beq.n	8001e88 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2222      	movs	r2, #34	@ 0x22
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2240      	movs	r2, #64	@ 0x40
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001eb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a62      	ldr	r2, [pc, #392]	@ (8002050 <HAL_I2C_Mem_Read+0x248>)
 8001ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eca:	88f8      	ldrh	r0, [r7, #6]
 8001ecc:	893a      	ldrh	r2, [r7, #8]
 8001ece:	8979      	ldrh	r1, [r7, #10]
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	4603      	mov	r3, r0
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 fa9e 	bl	800241c <I2C_RequestMemoryRead>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e1f8      	b.n	80022dc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d113      	bne.n	8001f1a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e1cc      	b.n	80022b4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d11e      	bne.n	8001f60 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f32:	b672      	cpsid	i
}
 8001f34:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	61bb      	str	r3, [r7, #24]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f5c:	b662      	cpsie	i
}
 8001f5e:	e035      	b.n	8001fcc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d11e      	bne.n	8001fa6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
}
 8001f7a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fa2:	b662      	cpsie	i
}
 8001fa4:	e012      	b.n	8001fcc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001fb4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001fcc:	e172      	b.n	80022b4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	f200 811f 	bhi.w	8002216 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d123      	bne.n	8002028 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 fcab 	bl	8002940 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e173      	b.n	80022dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002026:	e145      	b.n	80022b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202c:	2b02      	cmp	r3, #2
 800202e:	d152      	bne.n	80020d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002036:	2200      	movs	r2, #0
 8002038:	4906      	ldr	r1, [pc, #24]	@ (8002054 <HAL_I2C_Mem_Read+0x24c>)
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fad6 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e148      	b.n	80022dc <HAL_I2C_Mem_Read+0x4d4>
 800204a:	bf00      	nop
 800204c:	00100002 	.word	0x00100002
 8002050:	ffff0000 	.word	0xffff0000
 8002054:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
}
 800205a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800206a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800209e:	b662      	cpsie	i
}
 80020a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020d4:	e0ee      	b.n	80022b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020dc:	2200      	movs	r2, #0
 80020de:	4981      	ldr	r1, [pc, #516]	@ (80022e4 <HAL_I2C_Mem_Read+0x4dc>)
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fa83 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0f5      	b.n	80022dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002100:	b672      	cpsid	i
}
 8002102:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002136:	4b6c      	ldr	r3, [pc, #432]	@ (80022e8 <HAL_I2C_Mem_Read+0x4e0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	08db      	lsrs	r3, r3, #3
 800213c:	4a6b      	ldr	r2, [pc, #428]	@ (80022ec <HAL_I2C_Mem_Read+0x4e4>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0a1a      	lsrs	r2, r3, #8
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00da      	lsls	r2, r3, #3
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	3b01      	subs	r3, #1
 8002154:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d118      	bne.n	800218e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	f043 0220 	orr.w	r2, r3, #32
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800217e:	b662      	cpsie	i
}
 8002180:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0a6      	b.n	80022dc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b04      	cmp	r3, #4
 800219a:	d1d9      	bne.n	8002150 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021de:	b662      	cpsie	i
}
 80021e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002214:	e04e      	b.n	80022b4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002218:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fb90 	bl	8002940 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e058      	b.n	80022dc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b04      	cmp	r3, #4
 8002268:	d124      	bne.n	80022b4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226e:	2b03      	cmp	r3, #3
 8002270:	d107      	bne.n	8002282 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002280:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f47f ae88 	bne.w	8001fce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80022da:	2302      	movs	r3, #2
  }
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3728      	adds	r7, #40	@ 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	00010004 	.word	0x00010004
 80022e8:	20000004 	.word	0x20000004
 80022ec:	14f8b589 	.word	0x14f8b589

080022f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	817b      	strh	r3, [r7, #10]
 8002302:	460b      	mov	r3, r1
 8002304:	813b      	strh	r3, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002318:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	2200      	movs	r2, #0
 8002322:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f960 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00d      	beq.n	800234e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002340:	d103      	bne.n	800234a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002348:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e05f      	b.n	800240e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800234e:	897b      	ldrh	r3, [r7, #10]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800235c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	6a3a      	ldr	r2, [r7, #32]
 8002362:	492d      	ldr	r1, [pc, #180]	@ (8002418 <I2C_RequestMemoryWrite+0x128>)
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f9bb 	bl	80026e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e04c      	b.n	800240e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800238a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800238c:	6a39      	ldr	r1, [r7, #32]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fa46 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00d      	beq.n	80023b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d107      	bne.n	80023b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e02b      	b.n	800240e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d105      	bne.n	80023c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023bc:	893b      	ldrh	r3, [r7, #8]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	611a      	str	r2, [r3, #16]
 80023c6:	e021      	b.n	800240c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023c8:	893b      	ldrh	r3, [r7, #8]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d8:	6a39      	ldr	r1, [r7, #32]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fa20 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d107      	bne.n	80023fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e005      	b.n	800240e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002402:	893b      	ldrh	r3, [r7, #8]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	00010002 	.word	0x00010002

0800241c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4603      	mov	r3, r0
 800242c:	817b      	strh	r3, [r7, #10]
 800242e:	460b      	mov	r3, r1
 8002430:	813b      	strh	r3, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002444:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002454:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	2200      	movs	r2, #0
 800245e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f8c2 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00d      	beq.n	800248a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800247c:	d103      	bne.n	8002486 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e0aa      	b.n	80025e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800248a:	897b      	ldrh	r3, [r7, #10]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002498:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	6a3a      	ldr	r2, [r7, #32]
 800249e:	4952      	ldr	r1, [pc, #328]	@ (80025e8 <I2C_RequestMemoryRead+0x1cc>)
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f91d 	bl	80026e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e097      	b.n	80025e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c8:	6a39      	ldr	r1, [r7, #32]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f9a8 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d107      	bne.n	80024ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e076      	b.n	80025e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d105      	bne.n	8002504 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024f8:	893b      	ldrh	r3, [r7, #8]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	611a      	str	r2, [r3, #16]
 8002502:	e021      	b.n	8002548 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002504:	893b      	ldrh	r3, [r7, #8]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	b29b      	uxth	r3, r3
 800250a:	b2da      	uxtb	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002514:	6a39      	ldr	r1, [r7, #32]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f982 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00d      	beq.n	800253e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	2b04      	cmp	r3, #4
 8002528:	d107      	bne.n	800253a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002538:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e050      	b.n	80025e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800253e:	893b      	ldrh	r3, [r7, #8]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254a:	6a39      	ldr	r1, [r7, #32]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f967 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00d      	beq.n	8002574 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	2b04      	cmp	r3, #4
 800255e:	d107      	bne.n	8002570 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e035      	b.n	80025e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002582:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2200      	movs	r2, #0
 800258c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f82b 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00d      	beq.n	80025b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025aa:	d103      	bne.n	80025b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e013      	b.n	80025e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025b8:	897b      	ldrh	r3, [r7, #10]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	6a3a      	ldr	r2, [r7, #32]
 80025cc:	4906      	ldr	r1, [pc, #24]	@ (80025e8 <I2C_RequestMemoryRead+0x1cc>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f886 	bl	80026e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	00010002 	.word	0x00010002

080025ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	4613      	mov	r3, r2
 80025fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025fc:	e048      	b.n	8002690 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d044      	beq.n	8002690 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002606:	f7fe fe43 	bl	8001290 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d302      	bcc.n	800261c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d139      	bne.n	8002690 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10d      	bne.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	43da      	mvns	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4013      	ands	r3, r2
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	e00c      	b.n	800265c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	43da      	mvns	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	4013      	ands	r3, r2
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	429a      	cmp	r2, r3
 8002660:	d116      	bne.n	8002690 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e023      	b.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	0c1b      	lsrs	r3, r3, #16
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10d      	bne.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	43da      	mvns	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	e00c      	b.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	43da      	mvns	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4013      	ands	r3, r2
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d093      	beq.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ee:	e071      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026fe:	d123      	bne.n	8002748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800270e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002718:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f043 0204 	orr.w	r2, r3, #4
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e067      	b.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274e:	d041      	beq.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002750:	f7fe fd9e 	bl	8001290 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	429a      	cmp	r2, r3
 800275e:	d302      	bcc.n	8002766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d136      	bne.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10c      	bne.n	800278a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4013      	ands	r3, r2
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf14      	ite	ne
 8002782:	2301      	movne	r3, #1
 8002784:	2300      	moveq	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	e00b      	b.n	80027a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	43da      	mvns	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4013      	ands	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	f043 0220 	orr.w	r2, r3, #32
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e021      	b.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	0c1b      	lsrs	r3, r3, #16
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10c      	bne.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	43da      	mvns	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	4013      	ands	r3, r2
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e00b      	b.n	8002810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4013      	ands	r3, r2
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf14      	ite	ne
 800280a:	2301      	movne	r3, #1
 800280c:	2300      	moveq	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	f47f af6d 	bne.w	80026f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800282c:	e034      	b.n	8002898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f8e3 	bl	80029fa <I2C_IsAcknowledgeFailed>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e034      	b.n	80028a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d028      	beq.n	8002898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002846:	f7fe fd23 	bl	8001290 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	429a      	cmp	r2, r3
 8002854:	d302      	bcc.n	800285c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d11d      	bne.n	8002898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002866:	2b80      	cmp	r3, #128	@ 0x80
 8002868:	d016      	beq.n	8002898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e007      	b.n	80028a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a2:	2b80      	cmp	r3, #128	@ 0x80
 80028a4:	d1c3      	bne.n	800282e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028bc:	e034      	b.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f89b 	bl	80029fa <I2C_IsAcknowledgeFailed>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e034      	b.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d028      	beq.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d6:	f7fe fcdb 	bl	8001290 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d11d      	bne.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d016      	beq.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e007      	b.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b04      	cmp	r3, #4
 8002934:	d1c3      	bne.n	80028be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800294c:	e049      	b.n	80029e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b10      	cmp	r3, #16
 800295a:	d119      	bne.n	8002990 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0210 	mvn.w	r2, #16
 8002964:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e030      	b.n	80029f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002990:	f7fe fc7e 	bl	8001290 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	429a      	cmp	r2, r3
 800299e:	d302      	bcc.n	80029a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d11d      	bne.n	80029e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b0:	2b40      	cmp	r3, #64	@ 0x40
 80029b2:	d016      	beq.n	80029e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f043 0220 	orr.w	r2, r3, #32
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e007      	b.n	80029f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ec:	2b40      	cmp	r3, #64	@ 0x40
 80029ee:	d1ae      	bne.n	800294e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a10:	d11b      	bne.n	8002a4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	f043 0204 	orr.w	r2, r3, #4
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0e8      	b.n	8002c3a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d106      	bne.n	8002a82 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f009 fb09 	bl	800c094 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2203      	movs	r2, #3
 8002a86:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f002 fc96 	bl	80053c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa4:	f002 fc6c 	bl	8005380 <USB_CoreInit>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0bf      	b.n	8002c3a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 fc9a 	bl	80053fa <USB_SetCurrentMode>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0b0      	b.n	8002c3a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e03e      	b.n	8002b5c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	3311      	adds	r3, #17
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	440b      	add	r3, r1
 8002b00:	3310      	adds	r3, #16
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	3313      	adds	r3, #19
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	3320      	adds	r3, #32
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3324      	adds	r3, #36	@ 0x24
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	791b      	ldrb	r3, [r3, #4]
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d3bb      	bcc.n	8002ade <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	e044      	b.n	8002bf6 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	791b      	ldrb	r3, [r3, #4]
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d3b5      	bcc.n	8002b6c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c0a:	f002 fc02 	bl	8005412 <USB_DevInit>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e00c      	b.n	8002c3a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f004 fe81 	bl	800793a <USB_DevDisconnect>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_PCD_Start+0x16>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e016      	b.n	8002c86 <HAL_PCD_Start+0x44>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 fb98 	bl	800539a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f009 fc84 	bl	800c57a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f004 fe55 	bl	8007926 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b088      	sub	sp, #32
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f004 fe57 	bl	800794e <USB_ReadInterrupts>
 8002ca0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fb1a 	bl	80032e6 <PCD_EP_ISR_Handler>

    return;
 8002cb2:	e119      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d013      	beq.n	8002ce6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f009 fa57 	bl	800c18a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002cdc:	2100      	movs	r1, #0
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f905 	bl	8002eee <HAL_PCD_SetAddress>

    return;
 8002ce4:	e100      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00c      	beq.n	8002d0a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d02:	b292      	uxth	r2, r2
 8002d04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d08:	e0ee      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00c      	beq.n	8002d2e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d26:	b292      	uxth	r2, r2
 8002d28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d2c:	e0dc      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d027      	beq.n	8002d88 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0204 	bic.w	r2, r2, #4
 8002d4a:	b292      	uxth	r2, r2
 8002d4c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0208 	bic.w	r2, r2, #8
 8002d62:	b292      	uxth	r2, r2
 8002d64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f009 fa47 	bl	800c1fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d80:	b292      	uxth	r2, r2
 8002d82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d86:	e0af      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8083 	beq.w	8002e9a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	77fb      	strb	r3, [r7, #31]
 8002d98:	e010      	b.n	8002dbc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	7ffb      	ldrb	r3, [r7, #31]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	441a      	add	r2, r3
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
 8002da8:	8812      	ldrh	r2, [r2, #0]
 8002daa:	b292      	uxth	r2, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	3320      	adds	r3, #32
 8002db0:	443b      	add	r3, r7
 8002db2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002db6:	7ffb      	ldrb	r3, [r7, #31]
 8002db8:	3301      	adds	r3, #1
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
 8002dbe:	2b07      	cmp	r3, #7
 8002dc0:	d9eb      	bls.n	8002d9a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	b292      	uxth	r2, r2
 8002dd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	b292      	uxth	r2, r2
 8002dee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002df2:	bf00      	nop
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f6      	beq.n	8002df4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e18:	b292      	uxth	r2, r2
 8002e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	77fb      	strb	r3, [r7, #31]
 8002e22:	e00f      	b.n	8002e44 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002e24:	7ffb      	ldrb	r3, [r7, #31]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	7ffa      	ldrb	r2, [r7, #31]
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	440a      	add	r2, r1
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	3320      	adds	r3, #32
 8002e36:	443b      	add	r3, r7
 8002e38:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002e3c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002e3e:	7ffb      	ldrb	r3, [r7, #31]
 8002e40:	3301      	adds	r3, #1
 8002e42:	77fb      	strb	r3, [r7, #31]
 8002e44:	7ffb      	ldrb	r3, [r7, #31]
 8002e46:	2b07      	cmp	r3, #7
 8002e48:	d9ec      	bls.n	8002e24 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0208 	orr.w	r2, r2, #8
 8002e5c:	b292      	uxth	r2, r2
 8002e5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e74:	b292      	uxth	r2, r2
 8002e76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0204 	orr.w	r2, r2, #4
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f009 f998 	bl	800c1c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e98:	e026      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00f      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002eb6:	b292      	uxth	r2, r2
 8002eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f009 f956 	bl	800c16e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ec2:	e011      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00c      	beq.n	8002ee8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ee6:	bf00      	nop
  }
}
 8002ee8:	3720      	adds	r7, #32
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_PCD_SetAddress+0x1a>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e012      	b.n	8002f2e <HAL_PCD_SetAddress+0x40>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f004 fcee 	bl	8007900 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	4608      	mov	r0, r1
 8002f40:	4611      	mov	r1, r2
 8002f42:	461a      	mov	r2, r3
 8002f44:	4603      	mov	r3, r0
 8002f46:	70fb      	strb	r3, [r7, #3]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	803b      	strh	r3, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da0e      	bge.n	8002f7a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 0207 	and.w	r2, r3, #7
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	3310      	adds	r3, #16
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	705a      	strb	r2, [r3, #1]
 8002f78:	e00e      	b.n	8002f98 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 0207 	and.w	r2, r3, #7
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fa4:	883a      	ldrh	r2, [r7, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	78ba      	ldrb	r2, [r7, #2]
 8002fae:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fb0:	78bb      	ldrb	r3, [r7, #2]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d102      	bne.n	8002fbc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_PCD_EP_Open+0x94>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e00e      	b.n	8002fe8 <HAL_PCD_EP_Open+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 fa37 	bl	800544c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003000:	2b00      	cmp	r3, #0
 8003002:	da0e      	bge.n	8003022 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	f003 0207 	and.w	r2, r3, #7
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	3310      	adds	r3, #16
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	705a      	strb	r2, [r3, #1]
 8003020:	e00e      	b.n	8003040 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	f003 0207 	and.w	r2, r3, #7
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	b2da      	uxtb	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_PCD_EP_Close+0x6a>
 8003056:	2302      	movs	r3, #2
 8003058:	e00e      	b.n	8003078 <HAL_PCD_EP_Close+0x88>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68f9      	ldr	r1, [r7, #12]
 8003068:	4618      	mov	r0, r3
 800306a:	f002 fdaf 	bl	8005bcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	460b      	mov	r3, r1
 800308e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003090:	7afb      	ldrb	r3, [r7, #11]
 8003092:	f003 0207 	and.w	r2, r3, #7
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2200      	movs	r2, #0
 80030be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c0:	7afb      	ldrb	r3, [r7, #11]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6979      	ldr	r1, [r7, #20]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 ff66 	bl	8005fa4 <USB_EPStartXfer>

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 0207 	and.w	r2, r3, #7
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003104:	681b      	ldr	r3, [r3, #0]
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	460b      	mov	r3, r1
 800311e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003120:	7afb      	ldrb	r3, [r7, #11]
 8003122:	f003 0207 	and.w	r2, r3, #7
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	3310      	adds	r3, #16
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2200      	movs	r2, #0
 8003154:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2201      	movs	r2, #1
 800315a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800315c:	7afb      	ldrb	r3, [r7, #11]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	b2da      	uxtb	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6979      	ldr	r1, [r7, #20]
 800316e:	4618      	mov	r0, r3
 8003170:	f002 ff18 	bl	8005fa4 <USB_EPStartXfer>

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	7912      	ldrb	r2, [r2, #4]
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e04c      	b.n	8003236 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800319c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	da0e      	bge.n	80031c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 0207 	and.w	r2, r3, #7
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	3310      	adds	r3, #16
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	4413      	add	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	705a      	strb	r2, [r3, #1]
 80031c0:	e00c      	b.n	80031dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_PCD_EP_SetStall+0x7e>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e01c      	b.n	8003236 <HAL_PCD_EP_SetStall+0xb8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68f9      	ldr	r1, [r7, #12]
 800320a:	4618      	mov	r0, r3
 800320c:	f004 fa7b 	bl	8007706 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	2b00      	cmp	r3, #0
 8003218:	d108      	bne.n	800322c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f004 fba0 	bl	800796c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	7912      	ldrb	r2, [r2, #4]
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e040      	b.n	80032de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800325c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003260:	2b00      	cmp	r3, #0
 8003262:	da0e      	bge.n	8003282 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	f003 0207 	and.w	r2, r3, #7
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	3310      	adds	r3, #16
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4413      	add	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	705a      	strb	r2, [r3, #1]
 8003280:	e00e      	b.n	80032a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 0207 	and.w	r2, r3, #7
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_PCD_EP_ClrStall+0x82>
 80032bc:	2302      	movs	r3, #2
 80032be:	e00e      	b.n	80032de <HAL_PCD_EP_ClrStall+0xa0>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68f9      	ldr	r1, [r7, #12]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 fa69 	bl	80077a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b096      	sub	sp, #88	@ 0x58
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032ee:	e3bb      	b.n	8003a68 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032f8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800330a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 8175 	bne.w	80035fe <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003314:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	d14e      	bne.n	80033be <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800332c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003330:	81fb      	strh	r3, [r7, #14]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	89fb      	ldrh	r3, [r7, #14]
 8003338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800333c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003340:	b29b      	uxth	r3, r3
 8003342:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3310      	adds	r3, #16
 8003348:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003352:	b29b      	uxth	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	3302      	adds	r3, #2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003374:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	441a      	add	r2, r3
 8003380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003382:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003384:	2100      	movs	r1, #0
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f008 fed7 	bl	800c13a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	7b5b      	ldrb	r3, [r3, #13]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8368 	beq.w	8003a68 <PCD_EP_ISR_Handler+0x782>
 8003398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f040 8363 	bne.w	8003a68 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	7b5b      	ldrb	r3, [r3, #13]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	735a      	strb	r2, [r3, #13]
 80033bc:	e354      	b.n	8003a68 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033c4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80033d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80033d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d034      	beq.n	8003446 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	3306      	adds	r3, #6
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003406:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003414:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003418:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800341a:	b29b      	uxth	r3, r3
 800341c:	f004 faf6 	bl	8007a0c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	b29a      	uxth	r2, r3
 8003428:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800342c:	4013      	ands	r3, r2
 800342e:	823b      	strh	r3, [r7, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	8a3a      	ldrh	r2, [r7, #16]
 8003436:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800343a:	b292      	uxth	r2, r2
 800343c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f008 fe4e 	bl	800c0e0 <HAL_PCD_SetupStageCallback>
 8003444:	e310      	b.n	8003a68 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003446:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800344a:	2b00      	cmp	r3, #0
 800344c:	f280 830c 	bge.w	8003a68 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b29a      	uxth	r2, r3
 8003458:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800345c:	4013      	ands	r3, r2
 800345e:	83fb      	strh	r3, [r7, #30]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	8bfa      	ldrh	r2, [r7, #30]
 8003466:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800346a:	b292      	uxth	r2, r2
 800346c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003476:	b29b      	uxth	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	3306      	adds	r3, #6
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003498:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800349a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d019      	beq.n	80034d6 <PCD_EP_ISR_Handler+0x1f0>
 80034a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d015      	beq.n	80034d6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b0:	6959      	ldr	r1, [r3, #20]
 80034b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80034b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f004 faa6 	bl	8007a0c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80034c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	441a      	add	r2, r3
 80034ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034cc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034ce:	2100      	movs	r1, #0
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f008 fe17 	bl	800c104 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80034e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f040 82bd 	bne.w	8003a68 <PCD_EP_ISR_Handler+0x782>
 80034ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034f2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034fa:	f000 82b5 	beq.w	8003a68 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800350c:	b29b      	uxth	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	4413      	add	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003528:	b29a      	uxth	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	801a      	strh	r2, [r3, #0]
 800352e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b3e      	cmp	r3, #62	@ 0x3e
 8003534:	d91d      	bls.n	8003572 <PCD_EP_ISR_Handler+0x28c>
 8003536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	647b      	str	r3, [r7, #68]	@ 0x44
 800353e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <PCD_EP_ISR_Handler+0x26a>
 800354a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800354c:	3b01      	subs	r3, #1
 800354e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	b29a      	uxth	r2, r3
 8003556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003558:	b29b      	uxth	r3, r3
 800355a:	029b      	lsls	r3, r3, #10
 800355c:	b29b      	uxth	r3, r3
 800355e:	4313      	orrs	r3, r2
 8003560:	b29b      	uxth	r3, r3
 8003562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800356a:	b29a      	uxth	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	801a      	strh	r2, [r3, #0]
 8003570:	e026      	b.n	80035c0 <PCD_EP_ISR_Handler+0x2da>
 8003572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <PCD_EP_ISR_Handler+0x2aa>
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003588:	b29a      	uxth	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	801a      	strh	r2, [r3, #0]
 800358e:	e017      	b.n	80035c0 <PCD_EP_ISR_Handler+0x2da>
 8003590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	647b      	str	r3, [r7, #68]	@ 0x44
 8003598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <PCD_EP_ISR_Handler+0x2c4>
 80035a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035a6:	3301      	adds	r3, #1
 80035a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	029b      	lsls	r3, r3, #10
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	4313      	orrs	r3, r2
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d0:	827b      	strh	r3, [r7, #18]
 80035d2:	8a7b      	ldrh	r3, [r7, #18]
 80035d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80035d8:	827b      	strh	r3, [r7, #18]
 80035da:	8a7b      	ldrh	r3, [r7, #18]
 80035dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035e0:	827b      	strh	r3, [r7, #18]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	8a7b      	ldrh	r3, [r7, #18]
 80035e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	8013      	strh	r3, [r2, #0]
 80035fc:	e234      	b.n	8003a68 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003612:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003616:	2b00      	cmp	r3, #0
 8003618:	f280 80fc 	bge.w	8003814 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29a      	uxth	r2, r3
 800362e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003632:	4013      	ands	r3, r2
 8003634:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800364a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800364e:	b292      	uxth	r2, r2
 8003650:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003652:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366a:	7b1b      	ldrb	r3, [r3, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d125      	bne.n	80036bc <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003678:	b29b      	uxth	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	3306      	adds	r3, #6
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003698:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800369c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8092 	beq.w	80037ca <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ac:	6959      	ldr	r1, [r3, #20]
 80036ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b0:	88da      	ldrh	r2, [r3, #6]
 80036b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036b6:	f004 f9a9 	bl	8007a0c <USB_ReadPMA>
 80036ba:	e086      	b.n	80037ca <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80036bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036be:	78db      	ldrb	r3, [r3, #3]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d10a      	bne.n	80036da <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80036c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80036c8:	461a      	mov	r2, r3
 80036ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f9d9 	bl	8003a84 <HAL_PCD_EP_DB_Receive>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80036d8:	e077      	b.n	80037ca <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800370a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800370e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003716:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800371a:	b29b      	uxth	r3, r3
 800371c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d024      	beq.n	8003782 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003740:	b29b      	uxth	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	3302      	adds	r3, #2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003760:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003764:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02e      	beq.n	80037ca <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003772:	6959      	ldr	r1, [r3, #20]
 8003774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003776:	891a      	ldrh	r2, [r3, #8]
 8003778:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800377c:	f004 f946 	bl	8007a0c <USB_ReadPMA>
 8003780:	e023      	b.n	80037ca <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	3306      	adds	r3, #6
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037aa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80037ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037bc:	6959      	ldr	r1, [r3, #20]
 80037be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c0:	895a      	ldrh	r2, [r3, #10]
 80037c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037c6:	f004 f921 	bl	8007a0c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037cc:	69da      	ldr	r2, [r3, #28]
 80037ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037d2:	441a      	add	r2, r3
 80037d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80037d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037da:	695a      	ldr	r2, [r3, #20]
 80037dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037e0:	441a      	add	r2, r3
 80037e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <PCD_EP_ISR_Handler+0x514>
 80037ee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80037f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d206      	bcs.n	8003808 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	4619      	mov	r1, r3
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f008 fc7f 	bl	800c104 <HAL_PCD_DataOutStageCallback>
 8003806:	e005      	b.n	8003814 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800380e:	4618      	mov	r0, r3
 8003810:	f002 fbc8 	bl	8005fa4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003814:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8123 	beq.w	8003a68 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003822:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	3310      	adds	r3, #16
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b29b      	uxth	r3, r3
 8003848:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800384c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003850:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	441a      	add	r2, r3
 8003862:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800386a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800386e:	b29b      	uxth	r3, r3
 8003870:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003874:	78db      	ldrb	r3, [r3, #3]
 8003876:	2b01      	cmp	r3, #1
 8003878:	f040 80a2 	bne.w	80039c0 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800387c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800387e:	2200      	movs	r2, #0
 8003880:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003884:	7b1b      	ldrb	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8093 	beq.w	80039b2 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800388c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d046      	beq.n	8003926 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d126      	bne.n	80038ee <PCD_EP_ISR_Handler+0x608>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	4413      	add	r3, r2
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	011a      	lsls	r2, r3, #4
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	4413      	add	r3, r2
 80038c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038c6:	623b      	str	r3, [r7, #32]
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	801a      	strh	r2, [r3, #0]
 80038ec:	e061      	b.n	80039b2 <PCD_EP_ISR_Handler+0x6cc>
 80038ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f0:	785b      	ldrb	r3, [r3, #1]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d15d      	bne.n	80039b2 <PCD_EP_ISR_Handler+0x6cc>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003904:	b29b      	uxth	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390a:	4413      	add	r3, r2
 800390c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800390e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	011a      	lsls	r2, r3, #4
 8003914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003916:	4413      	add	r3, r2
 8003918:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	2200      	movs	r2, #0
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	e045      	b.n	80039b2 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800392c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392e:	785b      	ldrb	r3, [r3, #1]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d126      	bne.n	8003982 <PCD_EP_ISR_Handler+0x69c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	637b      	str	r3, [r7, #52]	@ 0x34
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003942:	b29b      	uxth	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003948:	4413      	add	r3, r2
 800394a:	637b      	str	r3, [r7, #52]	@ 0x34
 800394c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	011a      	lsls	r2, r3, #4
 8003952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003954:	4413      	add	r3, r2
 8003956:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800395a:	633b      	str	r3, [r7, #48]	@ 0x30
 800395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	b29b      	uxth	r3, r3
 8003962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003966:	b29a      	uxth	r2, r3
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800397a:	b29a      	uxth	r2, r3
 800397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397e:	801a      	strh	r2, [r3, #0]
 8003980:	e017      	b.n	80039b2 <PCD_EP_ISR_Handler+0x6cc>
 8003982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d113      	bne.n	80039b2 <PCD_EP_ISR_Handler+0x6cc>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003992:	b29b      	uxth	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003998:	4413      	add	r3, r2
 800399a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800399c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	011a      	lsls	r2, r3, #4
 80039a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a4:	4413      	add	r3, r2
 80039a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ae:	2200      	movs	r2, #0
 80039b0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	4619      	mov	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f008 fbbe 	bl	800c13a <HAL_PCD_DataInStageCallback>
 80039be:	e053      	b.n	8003a68 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80039c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d146      	bne.n	8003a5a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	3302      	adds	r3, #2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039f4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80039f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fa:	699a      	ldr	r2, [r3, #24]
 80039fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d907      	bls.n	8003a14 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a0c:	1ad2      	subs	r2, r2, r3
 8003a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a10:	619a      	str	r2, [r3, #24]
 8003a12:	e002      	b.n	8003a1a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	4619      	mov	r1, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f008 fb86 	bl	800c13a <HAL_PCD_DataInStageCallback>
 8003a2e:	e01b      	b.n	8003a68 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a38:	441a      	add	r2, r3
 8003a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a3c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a46:	441a      	add	r2, r3
 8003a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a4a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a52:	4618      	mov	r0, r3
 8003a54:	f002 faa6 	bl	8005fa4 <USB_EPStartXfer>
 8003a58:	e006      	b.n	8003a68 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a5e:	461a      	mov	r2, r3
 8003a60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f91b 	bl	8003c9e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	b21b      	sxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f6ff ac3b 	blt.w	80032f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3758      	adds	r7, #88	@ 0x58
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d07e      	beq.n	8003b9a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	8b7b      	ldrh	r3, [r7, #26]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d306      	bcc.n	8003ade <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	8b7b      	ldrh	r3, [r7, #26]
 8003ad6:	1ad2      	subs	r2, r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	619a      	str	r2, [r3, #24]
 8003adc:	e002      	b.n	8003ae4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d123      	bne.n	8003b34 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b06:	833b      	strh	r3, [r7, #24]
 8003b08:	8b3b      	ldrh	r3, [r7, #24]
 8003b0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b0e:	833b      	strh	r3, [r7, #24]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	441a      	add	r2, r3
 8003b1e:	8b3b      	ldrh	r3, [r7, #24]
 8003b20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01f      	beq.n	8003b7e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b58:	82fb      	strh	r3, [r7, #22]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	441a      	add	r2, r3
 8003b68:	8afb      	ldrh	r3, [r7, #22]
 8003b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b7e:	8b7b      	ldrh	r3, [r7, #26]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8087 	beq.w	8003c94 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6959      	ldr	r1, [r3, #20]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	891a      	ldrh	r2, [r3, #8]
 8003b92:	8b7b      	ldrh	r3, [r7, #26]
 8003b94:	f003 ff3a 	bl	8007a0c <USB_ReadPMA>
 8003b98:	e07c      	b.n	8003c94 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4413      	add	r3, r2
 8003bae:	3306      	adds	r3, #6
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	8b7b      	ldrh	r3, [r7, #26]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d306      	bcc.n	8003bdc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	8b7b      	ldrh	r3, [r7, #26]
 8003bd4:	1ad2      	subs	r2, r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	619a      	str	r2, [r3, #24]
 8003bda:	e002      	b.n	8003be2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2200      	movs	r2, #0
 8003be0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d123      	bne.n	8003c32 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c04:	83fb      	strh	r3, [r7, #30]
 8003c06:	8bfb      	ldrh	r3, [r7, #30]
 8003c08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c0c:	83fb      	strh	r3, [r7, #30]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	441a      	add	r2, r3
 8003c1c:	8bfb      	ldrh	r3, [r7, #30]
 8003c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d11f      	bne.n	8003c7c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c56:	83bb      	strh	r3, [r7, #28]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	441a      	add	r2, r3
 8003c66:	8bbb      	ldrh	r3, [r7, #28]
 8003c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c7c:	8b7b      	ldrh	r3, [r7, #26]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6959      	ldr	r1, [r3, #20]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	895a      	ldrh	r2, [r3, #10]
 8003c8e:	8b7b      	ldrh	r3, [r7, #26]
 8003c90:	f003 febc 	bl	8007a0c <USB_ReadPMA>
    }
  }

  return count;
 8003c94:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b0a4      	sub	sp, #144	@ 0x90
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 81dd 	beq.w	8004072 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d907      	bls.n	8003d00 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cf8:	1ad2      	subs	r2, r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	619a      	str	r2, [r3, #24]
 8003cfe:	e002      	b.n	8003d06 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2200      	movs	r2, #0
 8003d04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f040 80b9 	bne.w	8003e82 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	785b      	ldrb	r3, [r3, #1]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d126      	bne.n	8003d66 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2c:	4413      	add	r3, r2
 8003d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	011a      	lsls	r2, r3, #4
 8003d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d38:	4413      	add	r3, r2
 8003d3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d62:	801a      	strh	r2, [r3, #0]
 8003d64:	e01a      	b.n	8003d9c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	785b      	ldrb	r3, [r3, #1]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d116      	bne.n	8003d9c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d82:	4413      	add	r3, r2
 8003d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	011a      	lsls	r2, r3, #4
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d8e:	4413      	add	r3, r2
 8003d90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d98:	2200      	movs	r2, #0
 8003d9a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	785b      	ldrb	r3, [r3, #1]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d126      	bne.n	8003df8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	011a      	lsls	r2, r3, #4
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	801a      	strh	r2, [r3, #0]
 8003df6:	e017      	b.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d113      	bne.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	4413      	add	r3, r2
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	011a      	lsls	r2, r3, #4
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e20:	623b      	str	r3, [r7, #32]
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	2200      	movs	r2, #0
 8003e26:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f008 f983 	bl	800c13a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 82fc 	beq.w	8004438 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5a:	82fb      	strh	r3, [r7, #22]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	441a      	add	r2, r3
 8003e6a:	8afb      	ldrh	r3, [r7, #22]
 8003e6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	8013      	strh	r3, [r2, #0]
 8003e80:	e2da      	b.n	8004438 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d021      	beq.n	8003ed0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	441a      	add	r2, r3
 8003eb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003ebc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ec0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ec4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	f040 82ae 	bne.w	8004438 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ee4:	441a      	add	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ef2:	441a      	add	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6a1a      	ldr	r2, [r3, #32]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d30b      	bcc.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f14:	1ad2      	subs	r2, r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	621a      	str	r2, [r3, #32]
 8003f1a:	e017      	b.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d108      	bne.n	8003f36 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003f24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f34:	e00a      	b.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	785b      	ldrb	r3, [r3, #1]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d165      	bne.n	8004020 <HAL_PCD_EP_DB_Transmit+0x382>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f68:	4413      	add	r3, r2
 8003f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	011a      	lsls	r2, r3, #4
 8003f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f74:	4413      	add	r3, r2
 8003f76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8a:	801a      	strh	r2, [r3, #0]
 8003f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f90:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f92:	d91d      	bls.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x332>
 8003f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <HAL_PCD_EP_DB_Transmit+0x310>
 8003fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003faa:	3b01      	subs	r3, #1
 8003fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	029b      	lsls	r3, r3, #10
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fcc:	801a      	strh	r2, [r3, #0]
 8003fce:	e044      	b.n	800405a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <HAL_PCD_EP_DB_Transmit+0x350>
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	e035      	b.n	800405a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004004:	3301      	adds	r3, #1
 8004006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	b29a      	uxth	r2, r3
 800400e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004010:	b29b      	uxth	r3, r3
 8004012:	029b      	lsls	r3, r3, #10
 8004014:	b29b      	uxth	r3, r3
 8004016:	4313      	orrs	r3, r2
 8004018:	b29a      	uxth	r2, r3
 800401a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401c:	801a      	strh	r2, [r3, #0]
 800401e:	e01c      	b.n	800405a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	785b      	ldrb	r3, [r3, #1]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d118      	bne.n	800405a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	647b      	str	r3, [r7, #68]	@ 0x44
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800403c:	4413      	add	r3, r2
 800403e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	011a      	lsls	r2, r3, #4
 8004046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004048:	4413      	add	r3, r2
 800404a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800404e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004054:	b29a      	uxth	r2, r3
 8004056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004058:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	6959      	ldr	r1, [r3, #20]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	891a      	ldrh	r2, [r3, #8]
 8004066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800406a:	b29b      	uxth	r3, r3
 800406c:	f003 fc89 	bl	8007982 <USB_WritePMA>
 8004070:	e1e2      	b.n	8004438 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800407a:	b29b      	uxth	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4413      	add	r3, r2
 8004086:	3306      	adds	r3, #6
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800409a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d307      	bcc.n	80040ba <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040b2:	1ad2      	subs	r2, r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	619a      	str	r2, [r3, #24]
 80040b8:	e002      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f040 80c0 	bne.w	800424a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	785b      	ldrb	r3, [r3, #1]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d126      	bne.n	8004120 <HAL_PCD_EP_DB_Transmit+0x482>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040e6:	4413      	add	r3, r2
 80040e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	011a      	lsls	r2, r3, #4
 80040f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040f2:	4413      	add	r3, r2
 80040f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004104:	b29a      	uxth	r2, r3
 8004106:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004108:	801a      	strh	r2, [r3, #0]
 800410a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29b      	uxth	r3, r3
 8004110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004118:	b29a      	uxth	r2, r3
 800411a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800411c:	801a      	strh	r2, [r3, #0]
 800411e:	e01a      	b.n	8004156 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	785b      	ldrb	r3, [r3, #1]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d116      	bne.n	8004156 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	667b      	str	r3, [r7, #100]	@ 0x64
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004136:	b29b      	uxth	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800413c:	4413      	add	r3, r2
 800413e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	011a      	lsls	r2, r3, #4
 8004146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004148:	4413      	add	r3, r2
 800414a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800414e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004150:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004152:	2200      	movs	r2, #0
 8004154:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	677b      	str	r3, [r7, #116]	@ 0x74
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d12b      	bne.n	80041bc <HAL_PCD_EP_DB_Transmit+0x51e>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004172:	b29b      	uxth	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004178:	4413      	add	r3, r2
 800417a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	011a      	lsls	r2, r3, #4
 8004182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004184:	4413      	add	r3, r2
 8004186:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800418a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800418e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800419a:	b29a      	uxth	r2, r3
 800419c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041a0:	801a      	strh	r2, [r3, #0]
 80041a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041b8:	801a      	strh	r2, [r3, #0]
 80041ba:	e017      	b.n	80041ec <HAL_PCD_EP_DB_Transmit+0x54e>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d113      	bne.n	80041ec <HAL_PCD_EP_DB_Transmit+0x54e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041d2:	4413      	add	r3, r2
 80041d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	011a      	lsls	r2, r3, #4
 80041dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041de:	4413      	add	r3, r2
 80041e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80041e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041e8:	2200      	movs	r2, #0
 80041ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	4619      	mov	r1, r3
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f007 ffa1 	bl	800c13a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 811a 	bne.w	8004438 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800421a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004234:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004238:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800423c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004244:	b29b      	uxth	r3, r3
 8004246:	8013      	strh	r3, [r2, #0]
 8004248:	e0f6      	b.n	8004438 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d121      	bne.n	8004298 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800426a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800426e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	441a      	add	r2, r3
 8004280:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800428c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004294:	b29b      	uxth	r3, r3
 8004296:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800429e:	2b01      	cmp	r3, #1
 80042a0:	f040 80ca 	bne.w	8004438 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042ac:	441a      	add	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042ba:	441a      	add	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d30b      	bcc.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	6a1a      	ldr	r2, [r3, #32]
 80042d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042dc:	1ad2      	subs	r2, r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	621a      	str	r2, [r3, #32]
 80042e2:	e017      	b.n	8004314 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d108      	bne.n	80042fe <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80042ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042fc:	e00a      	b.n	8004314 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2200      	movs	r2, #0
 800430a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	657b      	str	r3, [r7, #84]	@ 0x54
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	785b      	ldrb	r3, [r3, #1]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d165      	bne.n	80043ee <HAL_PCD_EP_DB_Transmit+0x750>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004330:	b29b      	uxth	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004336:	4413      	add	r3, r2
 8004338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	011a      	lsls	r2, r3, #4
 8004340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004342:	4413      	add	r3, r2
 8004344:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004348:	65bb      	str	r3, [r7, #88]	@ 0x58
 800434a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004354:	b29a      	uxth	r2, r3
 8004356:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800435e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004360:	d91d      	bls.n	800439e <HAL_PCD_EP_DB_Transmit+0x700>
 8004362:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	66bb      	str	r3, [r7, #104]	@ 0x68
 800436a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <HAL_PCD_EP_DB_Transmit+0x6de>
 8004376:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004378:	3b01      	subs	r3, #1
 800437a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800437c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29a      	uxth	r2, r3
 8004382:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004384:	b29b      	uxth	r3, r3
 8004386:	029b      	lsls	r3, r3, #10
 8004388:	b29b      	uxth	r3, r3
 800438a:	4313      	orrs	r3, r2
 800438c:	b29b      	uxth	r3, r3
 800438e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004396:	b29a      	uxth	r2, r3
 8004398:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800439a:	801a      	strh	r2, [r3, #0]
 800439c:	e041      	b.n	8004422 <HAL_PCD_EP_DB_Transmit+0x784>
 800439e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <HAL_PCD_EP_DB_Transmit+0x71e>
 80043a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	e032      	b.n	8004422 <HAL_PCD_EP_DB_Transmit+0x784>
 80043bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x738>
 80043d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043d2:	3301      	adds	r3, #1
 80043d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b29a      	uxth	r2, r3
 80043dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043de:	b29b      	uxth	r3, r3
 80043e0:	029b      	lsls	r3, r3, #10
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	4313      	orrs	r3, r2
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ea:	801a      	strh	r2, [r3, #0]
 80043ec:	e019      	b.n	8004422 <HAL_PCD_EP_DB_Transmit+0x784>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	785b      	ldrb	r3, [r3, #1]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d115      	bne.n	8004422 <HAL_PCD_EP_DB_Transmit+0x784>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043fe:	b29b      	uxth	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004404:	4413      	add	r3, r2
 8004406:	657b      	str	r3, [r7, #84]	@ 0x54
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	011a      	lsls	r2, r3, #4
 800440e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004410:	4413      	add	r3, r2
 8004412:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004416:	653b      	str	r3, [r7, #80]	@ 0x50
 8004418:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800441c:	b29a      	uxth	r2, r3
 800441e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004420:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6959      	ldr	r1, [r3, #20]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	895a      	ldrh	r2, [r3, #10]
 800442e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004432:	b29b      	uxth	r3, r3
 8004434:	f003 faa5 	bl	8007982 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800444e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004452:	82bb      	strh	r3, [r7, #20]
 8004454:	8abb      	ldrh	r3, [r7, #20]
 8004456:	f083 0310 	eor.w	r3, r3, #16
 800445a:	82bb      	strh	r3, [r7, #20]
 800445c:	8abb      	ldrh	r3, [r7, #20]
 800445e:	f083 0320 	eor.w	r3, r3, #32
 8004462:	82bb      	strh	r3, [r7, #20]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	441a      	add	r2, r3
 8004472:	8abb      	ldrh	r3, [r7, #20]
 8004474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800447c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004484:	b29b      	uxth	r3, r3
 8004486:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3790      	adds	r7, #144	@ 0x90
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004492:	b480      	push	{r7}
 8004494:	b087      	sub	sp, #28
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	817b      	strh	r3, [r7, #10]
 80044a0:	4613      	mov	r3, r2
 80044a2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80044a4:	897b      	ldrh	r3, [r7, #10]
 80044a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00b      	beq.n	80044c8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b0:	897b      	ldrh	r3, [r7, #10]
 80044b2:	f003 0207 	and.w	r2, r3, #7
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	3310      	adds	r3, #16
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	e009      	b.n	80044dc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044c8:	897a      	ldrh	r2, [r7, #10]
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4413      	add	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044dc:	893b      	ldrh	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2200      	movs	r2, #0
 80044e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	80da      	strh	r2, [r3, #6]
 80044f0:	e00b      	b.n	800450a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2201      	movs	r2, #1
 80044f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	0c1b      	lsrs	r3, r3, #16
 8004504:	b29a      	uxth	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
	...

08004518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e272      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 8087 	beq.w	8004646 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004538:	4b92      	ldr	r3, [pc, #584]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f003 030c 	and.w	r3, r3, #12
 8004540:	2b04      	cmp	r3, #4
 8004542:	d00c      	beq.n	800455e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004544:	4b8f      	ldr	r3, [pc, #572]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f003 030c 	and.w	r3, r3, #12
 800454c:	2b08      	cmp	r3, #8
 800454e:	d112      	bne.n	8004576 <HAL_RCC_OscConfig+0x5e>
 8004550:	4b8c      	ldr	r3, [pc, #560]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800455c:	d10b      	bne.n	8004576 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455e:	4b89      	ldr	r3, [pc, #548]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d06c      	beq.n	8004644 <HAL_RCC_OscConfig+0x12c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d168      	bne.n	8004644 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e24c      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800457e:	d106      	bne.n	800458e <HAL_RCC_OscConfig+0x76>
 8004580:	4b80      	ldr	r3, [pc, #512]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a7f      	ldr	r2, [pc, #508]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	e02e      	b.n	80045ec <HAL_RCC_OscConfig+0xd4>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x98>
 8004596:	4b7b      	ldr	r3, [pc, #492]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a7a      	ldr	r2, [pc, #488]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 800459c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b78      	ldr	r3, [pc, #480]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a77      	ldr	r2, [pc, #476]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e01d      	b.n	80045ec <HAL_RCC_OscConfig+0xd4>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCC_OscConfig+0xbc>
 80045ba:	4b72      	ldr	r3, [pc, #456]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a71      	ldr	r2, [pc, #452]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a6e      	ldr	r2, [pc, #440]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80045cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e00b      	b.n	80045ec <HAL_RCC_OscConfig+0xd4>
 80045d4:	4b6b      	ldr	r3, [pc, #428]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a6a      	ldr	r2, [pc, #424]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80045da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	4b68      	ldr	r3, [pc, #416]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a67      	ldr	r2, [pc, #412]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80045e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d013      	beq.n	800461c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fc fe4c 	bl	8001290 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fc fe48 	bl	8001290 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	@ 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e200      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b5d      	ldr	r3, [pc, #372]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0xe4>
 800461a:	e014      	b.n	8004646 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fc fe38 	bl	8001290 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004624:	f7fc fe34 	bl	8001290 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	@ 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e1ec      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004636:	4b53      	ldr	r3, [pc, #332]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x10c>
 8004642:	e000      	b.n	8004646 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d063      	beq.n	800471a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004652:	4b4c      	ldr	r3, [pc, #304]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 030c 	and.w	r3, r3, #12
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800465e:	4b49      	ldr	r3, [pc, #292]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b08      	cmp	r3, #8
 8004668:	d11c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x18c>
 800466a:	4b46      	ldr	r3, [pc, #280]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d116      	bne.n	80046a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004676:	4b43      	ldr	r3, [pc, #268]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <HAL_RCC_OscConfig+0x176>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d001      	beq.n	800468e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e1c0      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468e:	4b3d      	ldr	r3, [pc, #244]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4939      	ldr	r1, [pc, #228]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046a2:	e03a      	b.n	800471a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d020      	beq.n	80046ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ac:	4b36      	ldr	r3, [pc, #216]	@ (8004788 <HAL_RCC_OscConfig+0x270>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b2:	f7fc fded 	bl	8001290 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ba:	f7fc fde9 	bl	8001290 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e1a1      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4927      	ldr	r1, [pc, #156]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	600b      	str	r3, [r1, #0]
 80046ec:	e015      	b.n	800471a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ee:	4b26      	ldr	r3, [pc, #152]	@ (8004788 <HAL_RCC_OscConfig+0x270>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fc fdcc 	bl	8001290 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fc:	f7fc fdc8 	bl	8001290 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e180      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470e:	4b1d      	ldr	r3, [pc, #116]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d03a      	beq.n	800479c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d019      	beq.n	8004762 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800472e:	4b17      	ldr	r3, [pc, #92]	@ (800478c <HAL_RCC_OscConfig+0x274>)
 8004730:	2201      	movs	r2, #1
 8004732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004734:	f7fc fdac 	bl	8001290 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473c:	f7fc fda8 	bl	8001290 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e160      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474e:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <HAL_RCC_OscConfig+0x26c>)
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800475a:	2001      	movs	r0, #1
 800475c:	f000 fafe 	bl	8004d5c <RCC_Delay>
 8004760:	e01c      	b.n	800479c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004762:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <HAL_RCC_OscConfig+0x274>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004768:	f7fc fd92 	bl	8001290 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800476e:	e00f      	b.n	8004790 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004770:	f7fc fd8e 	bl	8001290 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d908      	bls.n	8004790 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e146      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000
 8004788:	42420000 	.word	0x42420000
 800478c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	4b92      	ldr	r3, [pc, #584]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e9      	bne.n	8004770 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80a6 	beq.w	80048f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ae:	4b8b      	ldr	r3, [pc, #556]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10d      	bne.n	80047d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	4b88      	ldr	r3, [pc, #544]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	4a87      	ldr	r2, [pc, #540]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c4:	61d3      	str	r3, [r2, #28]
 80047c6:	4b85      	ldr	r3, [pc, #532]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d2:	2301      	movs	r3, #1
 80047d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d6:	4b82      	ldr	r3, [pc, #520]	@ (80049e0 <HAL_RCC_OscConfig+0x4c8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d118      	bne.n	8004814 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047e2:	4b7f      	ldr	r3, [pc, #508]	@ (80049e0 <HAL_RCC_OscConfig+0x4c8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7e      	ldr	r2, [pc, #504]	@ (80049e0 <HAL_RCC_OscConfig+0x4c8>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ee:	f7fc fd4f 	bl	8001290 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f6:	f7fc fd4b 	bl	8001290 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b64      	cmp	r3, #100	@ 0x64
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e103      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004808:	4b75      	ldr	r3, [pc, #468]	@ (80049e0 <HAL_RCC_OscConfig+0x4c8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d106      	bne.n	800482a <HAL_RCC_OscConfig+0x312>
 800481c:	4b6f      	ldr	r3, [pc, #444]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	4a6e      	ldr	r2, [pc, #440]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	6213      	str	r3, [r2, #32]
 8004828:	e02d      	b.n	8004886 <HAL_RCC_OscConfig+0x36e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10c      	bne.n	800484c <HAL_RCC_OscConfig+0x334>
 8004832:	4b6a      	ldr	r3, [pc, #424]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	4a69      	ldr	r2, [pc, #420]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	6213      	str	r3, [r2, #32]
 800483e:	4b67      	ldr	r3, [pc, #412]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	4a66      	ldr	r2, [pc, #408]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004844:	f023 0304 	bic.w	r3, r3, #4
 8004848:	6213      	str	r3, [r2, #32]
 800484a:	e01c      	b.n	8004886 <HAL_RCC_OscConfig+0x36e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b05      	cmp	r3, #5
 8004852:	d10c      	bne.n	800486e <HAL_RCC_OscConfig+0x356>
 8004854:	4b61      	ldr	r3, [pc, #388]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4a60      	ldr	r2, [pc, #384]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 800485a:	f043 0304 	orr.w	r3, r3, #4
 800485e:	6213      	str	r3, [r2, #32]
 8004860:	4b5e      	ldr	r3, [pc, #376]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	4a5d      	ldr	r2, [pc, #372]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6213      	str	r3, [r2, #32]
 800486c:	e00b      	b.n	8004886 <HAL_RCC_OscConfig+0x36e>
 800486e:	4b5b      	ldr	r3, [pc, #364]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	4a5a      	ldr	r2, [pc, #360]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	6213      	str	r3, [r2, #32]
 800487a:	4b58      	ldr	r3, [pc, #352]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	4a57      	ldr	r2, [pc, #348]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004880:	f023 0304 	bic.w	r3, r3, #4
 8004884:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d015      	beq.n	80048ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488e:	f7fc fcff 	bl	8001290 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004894:	e00a      	b.n	80048ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004896:	f7fc fcfb 	bl	8001290 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e0b1      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ac:	4b4b      	ldr	r3, [pc, #300]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0ee      	beq.n	8004896 <HAL_RCC_OscConfig+0x37e>
 80048b8:	e014      	b.n	80048e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ba:	f7fc fce9 	bl	8001290 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c0:	e00a      	b.n	80048d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c2:	f7fc fce5 	bl	8001290 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e09b      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d8:	4b40      	ldr	r3, [pc, #256]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ee      	bne.n	80048c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d105      	bne.n	80048f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ea:	4b3c      	ldr	r3, [pc, #240]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	4a3b      	ldr	r2, [pc, #236]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8087 	beq.w	8004a0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004900:	4b36      	ldr	r3, [pc, #216]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f003 030c 	and.w	r3, r3, #12
 8004908:	2b08      	cmp	r3, #8
 800490a:	d061      	beq.n	80049d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d146      	bne.n	80049a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004914:	4b33      	ldr	r3, [pc, #204]	@ (80049e4 <HAL_RCC_OscConfig+0x4cc>)
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491a:	f7fc fcb9 	bl	8001290 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004922:	f7fc fcb5 	bl	8001290 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e06d      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004934:	4b29      	ldr	r3, [pc, #164]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f0      	bne.n	8004922 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004948:	d108      	bne.n	800495c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800494a:	4b24      	ldr	r3, [pc, #144]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	4921      	ldr	r1, [pc, #132]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800495c:	4b1f      	ldr	r3, [pc, #124]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a19      	ldr	r1, [r3, #32]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	430b      	orrs	r3, r1
 800496e:	491b      	ldr	r1, [pc, #108]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004970:	4313      	orrs	r3, r2
 8004972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004974:	4b1b      	ldr	r3, [pc, #108]	@ (80049e4 <HAL_RCC_OscConfig+0x4cc>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497a:	f7fc fc89 	bl	8001290 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004982:	f7fc fc85 	bl	8001290 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e03d      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004994:	4b11      	ldr	r3, [pc, #68]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x46a>
 80049a0:	e035      	b.n	8004a0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a2:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <HAL_RCC_OscConfig+0x4cc>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7fc fc72 	bl	8001290 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b0:	f7fc fc6e 	bl	8001290 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e026      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c2:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x498>
 80049ce:	e01e      	b.n	8004a0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d107      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e019      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40007000 	.word	0x40007000
 80049e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <HAL_RCC_OscConfig+0x500>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d106      	bne.n	8004a0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d001      	beq.n	8004a0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000

08004a1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0d0      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a30:	4b6a      	ldr	r3, [pc, #424]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d910      	bls.n	8004a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3e:	4b67      	ldr	r3, [pc, #412]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 0207 	bic.w	r2, r3, #7
 8004a46:	4965      	ldr	r1, [pc, #404]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c0>)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4e:	4b63      	ldr	r3, [pc, #396]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e0b8      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d020      	beq.n	8004aae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a78:	4b59      	ldr	r3, [pc, #356]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	4a58      	ldr	r2, [pc, #352]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a90:	4b53      	ldr	r3, [pc, #332]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4a52      	ldr	r2, [pc, #328]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004a9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a9c:	4b50      	ldr	r3, [pc, #320]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	494d      	ldr	r1, [pc, #308]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d040      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac2:	4b47      	ldr	r3, [pc, #284]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d115      	bne.n	8004afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e07f      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ada:	4b41      	ldr	r3, [pc, #260]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e073      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aea:	4b3d      	ldr	r3, [pc, #244]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e06b      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004afa:	4b39      	ldr	r3, [pc, #228]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f023 0203 	bic.w	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	4936      	ldr	r1, [pc, #216]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b0c:	f7fc fbc0 	bl	8001290 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	e00a      	b.n	8004b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b14:	f7fc fbbc 	bl	8001290 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e053      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 020c 	and.w	r2, r3, #12
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d1eb      	bne.n	8004b14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b27      	ldr	r3, [pc, #156]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d210      	bcs.n	8004b6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b24      	ldr	r3, [pc, #144]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 0207 	bic.w	r2, r3, #7
 8004b52:	4922      	ldr	r1, [pc, #136]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c0>)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b20      	ldr	r3, [pc, #128]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e032      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b78:	4b19      	ldr	r3, [pc, #100]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4916      	ldr	r1, [pc, #88]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b96:	4b12      	ldr	r3, [pc, #72]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	490e      	ldr	r1, [pc, #56]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004baa:	f000 f821 	bl	8004bf0 <HAL_RCC_GetSysClockFreq>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	091b      	lsrs	r3, r3, #4
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	490a      	ldr	r1, [pc, #40]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bbc:	5ccb      	ldrb	r3, [r1, r3]
 8004bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc2:	4a09      	ldr	r2, [pc, #36]	@ (8004be8 <HAL_RCC_ClockConfig+0x1cc>)
 8004bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bc6:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <HAL_RCC_ClockConfig+0x1d0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fc f9cc 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40022000 	.word	0x40022000
 8004be0:	40021000 	.word	0x40021000
 8004be4:	0800d6fc 	.word	0x0800d6fc
 8004be8:	20000004 	.word	0x20000004
 8004bec:	20000008 	.word	0x20000008

08004bf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	2300      	movs	r3, #0
 8004c04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d002      	beq.n	8004c20 <HAL_RCC_GetSysClockFreq+0x30>
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCC_GetSysClockFreq+0x36>
 8004c1e:	e027      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c20:	4b19      	ldr	r3, [pc, #100]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c22:	613b      	str	r3, [r7, #16]
      break;
 8004c24:	e027      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	0c9b      	lsrs	r3, r3, #18
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	4a17      	ldr	r2, [pc, #92]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c30:	5cd3      	ldrb	r3, [r2, r3]
 8004c32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d010      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c3e:	4b11      	ldr	r3, [pc, #68]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	0c5b      	lsrs	r3, r3, #17
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	4a11      	ldr	r2, [pc, #68]	@ (8004c90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c4a:	5cd3      	ldrb	r3, [r2, r3]
 8004c4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a0d      	ldr	r2, [pc, #52]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c52:	fb03 f202 	mul.w	r2, r3, r2
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	e004      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a0c      	ldr	r2, [pc, #48]	@ (8004c94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	613b      	str	r3, [r7, #16]
      break;
 8004c6e:	e002      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c70:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c72:	613b      	str	r3, [r7, #16]
      break;
 8004c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c76:	693b      	ldr	r3, [r7, #16]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40021000 	.word	0x40021000
 8004c88:	007a1200 	.word	0x007a1200
 8004c8c:	0800d714 	.word	0x0800d714
 8004c90:	0800d724 	.word	0x0800d724
 8004c94:	003d0900 	.word	0x003d0900

08004c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c9c:	4b02      	ldr	r3, [pc, #8]	@ (8004ca8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	20000004 	.word	0x20000004

08004cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cb0:	f7ff fff2 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	4903      	ldr	r1, [pc, #12]	@ (8004cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	0800d70c 	.word	0x0800d70c

08004cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cd8:	f7ff ffde 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	0adb      	lsrs	r3, r3, #11
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	4903      	ldr	r1, [pc, #12]	@ (8004cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	0800d70c 	.word	0x0800d70c

08004cfc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	220f      	movs	r2, #15
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d0c:	4b11      	ldr	r3, [pc, #68]	@ (8004d54 <HAL_RCC_GetClockConfig+0x58>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 0203 	and.w	r2, r3, #3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d18:	4b0e      	ldr	r3, [pc, #56]	@ (8004d54 <HAL_RCC_GetClockConfig+0x58>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d24:	4b0b      	ldr	r3, [pc, #44]	@ (8004d54 <HAL_RCC_GetClockConfig+0x58>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d30:	4b08      	ldr	r3, [pc, #32]	@ (8004d54 <HAL_RCC_GetClockConfig+0x58>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	08db      	lsrs	r3, r3, #3
 8004d36:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d3e:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <HAL_RCC_GetClockConfig+0x5c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0207 	and.w	r2, r3, #7
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	40021000 	.word	0x40021000
 8004d58:	40022000 	.word	0x40022000

08004d5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d64:	4b0a      	ldr	r3, [pc, #40]	@ (8004d90 <RCC_Delay+0x34>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a0a      	ldr	r2, [pc, #40]	@ (8004d94 <RCC_Delay+0x38>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	0a5b      	lsrs	r3, r3, #9
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d78:	bf00      	nop
  }
  while (Delay --);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1e5a      	subs	r2, r3, #1
 8004d7e:	60fa      	str	r2, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f9      	bne.n	8004d78 <RCC_Delay+0x1c>
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr
 8004d90:	20000004 	.word	0x20000004
 8004d94:	10624dd3 	.word	0x10624dd3

08004d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d07d      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004db4:	2300      	movs	r3, #0
 8004db6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db8:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10d      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dce:	61d3      	str	r3, [r2, #28]
 8004dd0:	4b49      	ldr	r3, [pc, #292]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de0:	4b46      	ldr	r3, [pc, #280]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d118      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dec:	4b43      	ldr	r3, [pc, #268]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a42      	ldr	r2, [pc, #264]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df8:	f7fc fa4a 	bl	8001290 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfe:	e008      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e00:	f7fc fa46 	bl	8001290 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	@ 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e06d      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e12:	4b3a      	ldr	r3, [pc, #232]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e1e:	4b36      	ldr	r3, [pc, #216]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d02e      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d027      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e46:	4b2e      	ldr	r3, [pc, #184]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e52:	4a29      	ldr	r2, [pc, #164]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d014      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e62:	f7fc fa15 	bl	8001290 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fc fa11 	bl	8001290 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e036      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e80:	4b1d      	ldr	r3, [pc, #116]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0ee      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4917      	ldr	r1, [pc, #92]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d105      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea4:	4b14      	ldr	r3, [pc, #80]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	4a13      	ldr	r2, [pc, #76]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	490b      	ldr	r1, [pc, #44]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eda:	4b07      	ldr	r3, [pc, #28]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4904      	ldr	r1, [pc, #16]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	40007000 	.word	0x40007000
 8004f00:	42420440 	.word	0x42420440

08004f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e041      	b.n	8004f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f839 	bl	8004fa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f000 f99c 	bl	8005280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d001      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e03a      	b.n	8005042 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a18      	ldr	r2, [pc, #96]	@ (800504c <HAL_TIM_Base_Start_IT+0x98>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00e      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x58>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff6:	d009      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x58>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a14      	ldr	r2, [pc, #80]	@ (8005050 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x58>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a13      	ldr	r2, [pc, #76]	@ (8005054 <HAL_TIM_Base_Start_IT+0xa0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d111      	bne.n	8005030 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b06      	cmp	r3, #6
 800501c:	d010      	beq.n	8005040 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0201 	orr.w	r2, r2, #1
 800502c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502e:	e007      	b.n	8005040 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800

08005058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d020      	beq.n	80050bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0202 	mvn.w	r2, #2
 800508c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f8d1 	bl	800524a <HAL_TIM_IC_CaptureCallback>
 80050a8:	e005      	b.n	80050b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f8c4 	bl	8005238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f8d3 	bl	800525c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d020      	beq.n	8005108 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01b      	beq.n	8005108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0204 	mvn.w	r2, #4
 80050d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f8ab 	bl	800524a <HAL_TIM_IC_CaptureCallback>
 80050f4:	e005      	b.n	8005102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f89e 	bl	8005238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f8ad 	bl	800525c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d020      	beq.n	8005154 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01b      	beq.n	8005154 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0208 	mvn.w	r2, #8
 8005124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2204      	movs	r2, #4
 800512a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f885 	bl	800524a <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f878 	bl	8005238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f887 	bl	800525c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	2b00      	cmp	r3, #0
 800515c:	d020      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01b      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0210 	mvn.w	r2, #16
 8005170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2208      	movs	r2, #8
 8005176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f85f 	bl	800524a <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f852 	bl	8005238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f861 	bl	800525c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00c      	beq.n	80051c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0201 	mvn.w	r2, #1
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fb fe44 	bl	8000e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00c      	beq.n	80051e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f8c3 	bl	800536e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00c      	beq.n	800520c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f831 	bl	800526e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00c      	beq.n	8005230 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0220 	mvn.w	r2, #32
 8005228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f896 	bl	800535c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr

0800525c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr

0800526e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a2f      	ldr	r2, [pc, #188]	@ (8005350 <TIM_Base_SetConfig+0xd0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00b      	beq.n	80052b0 <TIM_Base_SetConfig+0x30>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800529e:	d007      	beq.n	80052b0 <TIM_Base_SetConfig+0x30>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005354 <TIM_Base_SetConfig+0xd4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0x30>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005358 <TIM_Base_SetConfig+0xd8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d108      	bne.n	80052c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a22      	ldr	r2, [pc, #136]	@ (8005350 <TIM_Base_SetConfig+0xd0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00b      	beq.n	80052e2 <TIM_Base_SetConfig+0x62>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d0:	d007      	beq.n	80052e2 <TIM_Base_SetConfig+0x62>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005354 <TIM_Base_SetConfig+0xd4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <TIM_Base_SetConfig+0x62>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005358 <TIM_Base_SetConfig+0xd8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d108      	bne.n	80052f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a0d      	ldr	r2, [pc, #52]	@ (8005350 <TIM_Base_SetConfig+0xd0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d103      	bne.n	8005328 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f023 0201 	bic.w	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	611a      	str	r2, [r3, #16]
  }
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr
 8005350:	40012c00 	.word	0x40012c00
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800

0800535c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr

0800536e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	4638      	mov	r0, r7
 800538a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr

0800539a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053aa:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80053ae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053ce:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80053d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	43db      	mvns	r3, r3
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	4013      	ands	r3, r2
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	460b      	mov	r3, r1
 8005404:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr

08005412 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	4638      	mov	r0, r7
 800541c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800544c:	b480      	push	{r7}
 800544e:	b09d      	sub	sp, #116	@ 0x74
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800546e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005472:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	78db      	ldrb	r3, [r3, #3]
 800547a:	2b03      	cmp	r3, #3
 800547c:	d81f      	bhi.n	80054be <USB_ActivateEndpoint+0x72>
 800547e:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <USB_ActivateEndpoint+0x38>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	08005495 	.word	0x08005495
 8005488:	080054b1 	.word	0x080054b1
 800548c:	080054c7 	.word	0x080054c7
 8005490:	080054a3 	.word	0x080054a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005494:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005498:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800549c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054a0:	e012      	b.n	80054c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054a6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80054aa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054ae:	e00b      	b.n	80054c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80054b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054bc:	e004      	b.n	80054c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80054c4:	e000      	b.n	80054c8 <USB_ActivateEndpoint+0x7c>
      break;
 80054c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	441a      	add	r2, r3
 80054d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005500:	b29b      	uxth	r3, r3
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	7812      	ldrb	r2, [r2, #0]
 8005506:	4313      	orrs	r3, r2
 8005508:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	441a      	add	r2, r3
 8005516:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800551a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800551e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800552a:	b29b      	uxth	r3, r3
 800552c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	7b1b      	ldrb	r3, [r3, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f040 8178 	bne.w	8005828 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8084 	beq.w	800564a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800554c:	b29b      	uxth	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	4413      	add	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	011a      	lsls	r2, r3, #4
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	88db      	ldrh	r3, [r3, #6]
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	b29b      	uxth	r3, r3
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	827b      	strh	r3, [r7, #18]
 8005584:	8a7b      	ldrh	r3, [r7, #18]
 8005586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d01b      	beq.n	80055c6 <USB_ActivateEndpoint+0x17a>
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	b29b      	uxth	r3, r3
 800559c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a4:	823b      	strh	r3, [r7, #16]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	441a      	add	r2, r3
 80055b0:	8a3b      	ldrh	r3, [r7, #16]
 80055b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	78db      	ldrb	r3, [r3, #3]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d020      	beq.n	8005610 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e4:	81bb      	strh	r3, [r7, #12]
 80055e6:	89bb      	ldrh	r3, [r7, #12]
 80055e8:	f083 0320 	eor.w	r3, r3, #32
 80055ec:	81bb      	strh	r3, [r7, #12]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	441a      	add	r2, r3
 80055f8:	89bb      	ldrh	r3, [r7, #12]
 80055fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800560a:	b29b      	uxth	r3, r3
 800560c:	8013      	strh	r3, [r2, #0]
 800560e:	e2d5      	b.n	8005bbc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005622:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005626:	81fb      	strh	r3, [r7, #14]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	89fb      	ldrh	r3, [r7, #14]
 8005634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800563c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005644:	b29b      	uxth	r3, r3
 8005646:	8013      	strh	r3, [r2, #0]
 8005648:	e2b8      	b.n	8005bbc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	633b      	str	r3, [r7, #48]	@ 0x30
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005654:	b29b      	uxth	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	4413      	add	r3, r2
 800565c:	633b      	str	r3, [r7, #48]	@ 0x30
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	011a      	lsls	r2, r3, #4
 8005664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005666:	4413      	add	r3, r2
 8005668:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800566c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	88db      	ldrh	r3, [r3, #6]
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	b29b      	uxth	r3, r3
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005688:	b29b      	uxth	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	4413      	add	r3, r2
 8005690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	011a      	lsls	r2, r3, #4
 8005698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569a:	4413      	add	r3, r2
 800569c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	801a      	strh	r2, [r3, #0]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80056b8:	d91d      	bls.n	80056f6 <USB_ActivateEndpoint+0x2aa>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <USB_ActivateEndpoint+0x288>
 80056ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056d0:	3b01      	subs	r3, #1
 80056d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	b29a      	uxth	r2, r3
 80056da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056dc:	b29b      	uxth	r3, r3
 80056de:	029b      	lsls	r3, r3, #10
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	4313      	orrs	r3, r2
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	e026      	b.n	8005744 <USB_ActivateEndpoint+0x2f8>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <USB_ActivateEndpoint+0x2c8>
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570c:	b29a      	uxth	r2, r3
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	801a      	strh	r2, [r3, #0]
 8005712:	e017      	b.n	8005744 <USB_ActivateEndpoint+0x2f8>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	085b      	lsrs	r3, r3, #1
 800571a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <USB_ActivateEndpoint+0x2e2>
 8005728:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800572a:	3301      	adds	r3, #1
 800572c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	b29a      	uxth	r2, r3
 8005734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005736:	b29b      	uxth	r3, r3
 8005738:	029b      	lsls	r3, r3, #10
 800573a:	b29b      	uxth	r3, r3
 800573c:	4313      	orrs	r3, r2
 800573e:	b29a      	uxth	r2, r3
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005752:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01b      	beq.n	8005794 <USB_ActivateEndpoint+0x348>
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800576e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005772:	843b      	strh	r3, [r7, #32]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	441a      	add	r2, r3
 800577e:	8c3b      	ldrh	r3, [r7, #32]
 8005780:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005784:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005788:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800578c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005790:	b29b      	uxth	r3, r3
 8005792:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d124      	bne.n	80057e6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b2:	83bb      	strh	r3, [r7, #28]
 80057b4:	8bbb      	ldrh	r3, [r7, #28]
 80057b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80057ba:	83bb      	strh	r3, [r7, #28]
 80057bc:	8bbb      	ldrh	r3, [r7, #28]
 80057be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057c2:	83bb      	strh	r3, [r7, #28]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	441a      	add	r2, r3
 80057ce:	8bbb      	ldrh	r3, [r7, #28]
 80057d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	8013      	strh	r3, [r2, #0]
 80057e4:	e1ea      	b.n	8005bbc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057fc:	83fb      	strh	r3, [r7, #30]
 80057fe:	8bfb      	ldrh	r3, [r7, #30]
 8005800:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005804:	83fb      	strh	r3, [r7, #30]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	441a      	add	r2, r3
 8005810:	8bfb      	ldrh	r3, [r7, #30]
 8005812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800581a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800581e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005822:	b29b      	uxth	r3, r3
 8005824:	8013      	strh	r3, [r2, #0]
 8005826:	e1c9      	b.n	8005bbc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	78db      	ldrb	r3, [r3, #3]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d11e      	bne.n	800586e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005846:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	441a      	add	r2, r3
 8005854:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800585c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005860:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005868:	b29b      	uxth	r3, r3
 800586a:	8013      	strh	r3, [r2, #0]
 800586c:	e01d      	b.n	80058aa <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005884:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	441a      	add	r2, r3
 8005892:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800589a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800589e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058ba:	4413      	add	r3, r2
 80058bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	011a      	lsls	r2, r3, #4
 80058c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	891b      	ldrh	r3, [r3, #8]
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058dc:	801a      	strh	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ee:	4413      	add	r3, r2
 80058f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	011a      	lsls	r2, r3, #4
 80058f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005900:	653b      	str	r3, [r7, #80]	@ 0x50
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	895b      	ldrh	r3, [r3, #10]
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	b29b      	uxth	r3, r3
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005910:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	785b      	ldrb	r3, [r3, #1]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 8093 	bne.w	8005a42 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800592c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01b      	beq.n	8005970 <USB_ActivateEndpoint+0x524>
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b29b      	uxth	r3, r3
 8005946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800594a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800594e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800595c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005964:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596c:	b29b      	uxth	r3, r3
 800596e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800597e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01b      	beq.n	80059c0 <USB_ActivateEndpoint+0x574>
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800599a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80059ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059bc:	b29b      	uxth	r3, r3
 80059be:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80059d8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80059da:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80059de:	873b      	strh	r3, [r7, #56]	@ 0x38
 80059e0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80059e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80059e6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	441a      	add	r2, r3
 80059f2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80059f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	441a      	add	r2, r3
 8005a2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	8013      	strh	r3, [r2, #0]
 8005a40:	e0bc      	b.n	8005bbc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005a52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01d      	beq.n	8005a9a <USB_ActivateEndpoint+0x64e>
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a74:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	441a      	add	r2, r3
 8005a82:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005a86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005aaa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d01d      	beq.n	8005af2 <USB_ActivateEndpoint+0x6a6>
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005acc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	441a      	add	r2, r3
 8005ada:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	78db      	ldrb	r3, [r3, #3]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d024      	beq.n	8005b44 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b10:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005b14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005b18:	f083 0320 	eor.w	r3, r3, #32
 8005b1c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	8013      	strh	r3, [r2, #0]
 8005b42:	e01d      	b.n	8005b80 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b5a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	441a      	add	r2, r3
 8005b68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005b6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b96:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	441a      	add	r2, r3
 8005ba4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005ba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005bbc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3774      	adds	r7, #116	@ 0x74
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop

08005bcc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b08d      	sub	sp, #52	@ 0x34
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	7b1b      	ldrb	r3, [r3, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f040 808e 	bne.w	8005cfc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d044      	beq.n	8005c72 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	81bb      	strh	r3, [r7, #12]
 8005bf6:	89bb      	ldrh	r3, [r7, #12]
 8005bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01b      	beq.n	8005c38 <USB_DeactivateEndpoint+0x6c>
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c16:	817b      	strh	r3, [r7, #10]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	441a      	add	r2, r3
 8005c22:	897b      	ldrh	r3, [r7, #10]
 8005c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c4e:	813b      	strh	r3, [r7, #8]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	441a      	add	r2, r3
 8005c5a:	893b      	ldrh	r3, [r7, #8]
 8005c5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	8013      	strh	r3, [r2, #0]
 8005c70:	e192      	b.n	8005f98 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	827b      	strh	r3, [r7, #18]
 8005c80:	8a7b      	ldrh	r3, [r7, #18]
 8005c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01b      	beq.n	8005cc2 <USB_DeactivateEndpoint+0xf6>
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca0:	823b      	strh	r3, [r7, #16]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	441a      	add	r2, r3
 8005cac:	8a3b      	ldrh	r3, [r7, #16]
 8005cae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd8:	81fb      	strh	r3, [r7, #14]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	441a      	add	r2, r3
 8005ce4:	89fb      	ldrh	r3, [r7, #14]
 8005ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	8013      	strh	r3, [r2, #0]
 8005cfa:	e14d      	b.n	8005f98 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f040 80a5 	bne.w	8005e50 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	843b      	strh	r3, [r7, #32]
 8005d14:	8c3b      	ldrh	r3, [r7, #32]
 8005d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01b      	beq.n	8005d56 <USB_DeactivateEndpoint+0x18a>
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d34:	83fb      	strh	r3, [r7, #30]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	441a      	add	r2, r3
 8005d40:	8bfb      	ldrh	r3, [r7, #30]
 8005d42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	83bb      	strh	r3, [r7, #28]
 8005d64:	8bbb      	ldrh	r3, [r7, #28]
 8005d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d01b      	beq.n	8005da6 <USB_DeactivateEndpoint+0x1da>
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d84:	837b      	strh	r3, [r7, #26]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	441a      	add	r2, r3
 8005d90:	8b7b      	ldrh	r3, [r7, #26]
 8005d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dbc:	833b      	strh	r3, [r7, #24]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	441a      	add	r2, r3
 8005dc8:	8b3b      	ldrh	r3, [r7, #24]
 8005dca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df4:	82fb      	strh	r3, [r7, #22]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	441a      	add	r2, r3
 8005e00:	8afb      	ldrh	r3, [r7, #22]
 8005e02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e2c:	82bb      	strh	r3, [r7, #20]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	441a      	add	r2, r3
 8005e38:	8abb      	ldrh	r3, [r7, #20]
 8005e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	8013      	strh	r3, [r2, #0]
 8005e4e:	e0a3      	b.n	8005f98 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005e5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01b      	beq.n	8005ea0 <USB_DeactivateEndpoint+0x2d4>
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e7e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005eae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01b      	beq.n	8005ef0 <USB_DeactivateEndpoint+0x324>
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ece:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	441a      	add	r2, r3
 8005eda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ee8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f06:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	441a      	add	r2, r3
 8005f12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	441a      	add	r2, r3
 8005f4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f76:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	441a      	add	r2, r3
 8005f82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3734      	adds	r7, #52	@ 0x34
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b0c2      	sub	sp, #264	@ 0x108
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb2:	6018      	str	r0, [r3, #0]
 8005fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fbc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	f040 86b7 	bne.w	8006d3e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d908      	bls.n	8005ffe <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005ffc:	e007      	b.n	800600e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800600e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	7b1b      	ldrb	r3, [r3, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d13a      	bne.n	8006094 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800601e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6959      	ldr	r1, [r3, #20]
 800602a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	88da      	ldrh	r2, [r3, #6]
 8006036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603a:	b29b      	uxth	r3, r3
 800603c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006040:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006044:	6800      	ldr	r0, [r0, #0]
 8006046:	f001 fc9c 	bl	8007982 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800604a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006064:	b29b      	uxth	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4413      	add	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	011a      	lsls	r2, r3, #4
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	4413      	add	r3, r2
 8006080:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	801a      	strh	r2, [r3, #0]
 8006090:	f000 be1f 	b.w	8006cd2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	78db      	ldrb	r3, [r3, #3]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	f040 8462 	bne.w	800696a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80060a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6a1a      	ldr	r2, [r3, #32]
 80060b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	429a      	cmp	r2, r3
 80060c0:	f240 83df 	bls.w	8006882 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80060c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ea:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80060ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	441a      	add	r2, r3
 8006108:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800610c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006110:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006114:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800611c:	b29b      	uxth	r3, r3
 800611e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6a1a      	ldr	r2, [r3, #32]
 800612c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006130:	1ad2      	subs	r2, r2, r3
 8006132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800613e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006142:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 81c7 	beq.w	80064f4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	633b      	str	r3, [r7, #48]	@ 0x30
 8006172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	785b      	ldrb	r3, [r3, #1]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d177      	bne.n	8006272 <USB_EPStartXfer+0x2ce>
 8006182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006186:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800618e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006192:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800619c:	b29b      	uxth	r3, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	4413      	add	r3, r2
 80061a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	011a      	lsls	r2, r3, #4
 80061b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b6:	4413      	add	r3, r2
 80061b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061cc:	801a      	strh	r2, [r3, #0]
 80061ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80061d4:	d921      	bls.n	800621a <USB_EPStartXfer+0x276>
 80061d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061da:	095b      	lsrs	r3, r3, #5
 80061dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <USB_EPStartXfer+0x252>
 80061ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80061f0:	3b01      	subs	r3, #1
 80061f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006200:	b29b      	uxth	r3, r3
 8006202:	029b      	lsls	r3, r3, #10
 8006204:	b29b      	uxth	r3, r3
 8006206:	4313      	orrs	r3, r2
 8006208:	b29b      	uxth	r3, r3
 800620a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006212:	b29a      	uxth	r2, r3
 8006214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	e050      	b.n	80062bc <USB_EPStartXfer+0x318>
 800621a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <USB_EPStartXfer+0x294>
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006230:	b29a      	uxth	r2, r3
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	e041      	b.n	80062bc <USB_EPStartXfer+0x318>
 8006238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d004      	beq.n	8006258 <USB_EPStartXfer+0x2b4>
 800624e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006252:	3301      	adds	r3, #1
 8006254:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29a      	uxth	r2, r3
 800625e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006262:	b29b      	uxth	r3, r3
 8006264:	029b      	lsls	r3, r3, #10
 8006266:	b29b      	uxth	r3, r3
 8006268:	4313      	orrs	r3, r2
 800626a:	b29a      	uxth	r2, r3
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	e024      	b.n	80062bc <USB_EPStartXfer+0x318>
 8006272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d11c      	bne.n	80062bc <USB_EPStartXfer+0x318>
 8006282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006290:	b29b      	uxth	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006296:	4413      	add	r3, r2
 8006298:	633b      	str	r3, [r7, #48]	@ 0x30
 800629a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	011a      	lsls	r2, r3, #4
 80062a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062aa:	4413      	add	r3, r2
 80062ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	895b      	ldrh	r3, [r3, #10]
 80062c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6959      	ldr	r1, [r3, #20]
 80062d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80062e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80062e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	f001 fb49 	bl	8007982 <USB_WritePMA>
            ep->xfer_buff += len;
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695a      	ldr	r2, [r3, #20]
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006300:	441a      	add	r2, r3
 8006302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800630e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6a1a      	ldr	r2, [r3, #32]
 800631a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	429a      	cmp	r2, r3
 8006328:	d90f      	bls.n	800634a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a1a      	ldr	r2, [r3, #32]
 8006336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633a:	1ad2      	subs	r2, r2, r3
 800633c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	621a      	str	r2, [r3, #32]
 8006348:	e00e      	b.n	8006368 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800634a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800635a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2200      	movs	r2, #0
 8006366:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d177      	bne.n	8006468 <USB_EPStartXfer+0x4c4>
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	61bb      	str	r3, [r7, #24]
 8006384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006392:	b29b      	uxth	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	4413      	add	r3, r2
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	011a      	lsls	r2, r3, #4
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063be:	b29a      	uxth	r2, r3
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80063ca:	d921      	bls.n	8006410 <USB_EPStartXfer+0x46c>
 80063cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <USB_EPStartXfer+0x448>
 80063e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063e6:	3b01      	subs	r3, #1
 80063e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	029b      	lsls	r3, r3, #10
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	4313      	orrs	r3, r2
 80063fe:	b29b      	uxth	r3, r3
 8006400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006408:	b29a      	uxth	r2, r3
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	e056      	b.n	80064be <USB_EPStartXfer+0x51a>
 8006410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <USB_EPStartXfer+0x48a>
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006426:	b29a      	uxth	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	e047      	b.n	80064be <USB_EPStartXfer+0x51a>
 800642e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006432:	085b      	lsrs	r3, r3, #1
 8006434:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <USB_EPStartXfer+0x4aa>
 8006444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006448:	3301      	adds	r3, #1
 800644a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29a      	uxth	r2, r3
 8006454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006458:	b29b      	uxth	r3, r3
 800645a:	029b      	lsls	r3, r3, #10
 800645c:	b29b      	uxth	r3, r3
 800645e:	4313      	orrs	r3, r2
 8006460:	b29a      	uxth	r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	801a      	strh	r2, [r3, #0]
 8006466:	e02a      	b.n	80064be <USB_EPStartXfer+0x51a>
 8006468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	785b      	ldrb	r3, [r3, #1]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d122      	bne.n	80064be <USB_EPStartXfer+0x51a>
 8006478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	623b      	str	r3, [r7, #32]
 8006484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006488:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006492:	b29b      	uxth	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	4413      	add	r3, r2
 800649a:	623b      	str	r3, [r7, #32]
 800649c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	011a      	lsls	r2, r3, #4
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	4413      	add	r3, r2
 80064ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	891b      	ldrh	r3, [r3, #8]
 80064ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6959      	ldr	r1, [r3, #20]
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80064e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80064e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80064ec:	6800      	ldr	r0, [r0, #0]
 80064ee:	f001 fa48 	bl	8007982 <USB_WritePMA>
 80064f2:	e3ee      	b.n	8006cd2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d177      	bne.n	80065f4 <USB_EPStartXfer+0x650>
 8006504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006508:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800651e:	b29b      	uxth	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006524:	4413      	add	r3, r2
 8006526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	011a      	lsls	r2, r3, #4
 8006536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006538:	4413      	add	r3, r2
 800653a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800653e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800654a:	b29a      	uxth	r2, r3
 800654c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006554:	2b3e      	cmp	r3, #62	@ 0x3e
 8006556:	d921      	bls.n	800659c <USB_EPStartXfer+0x5f8>
 8006558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006566:	f003 031f 	and.w	r3, r3, #31
 800656a:	2b00      	cmp	r3, #0
 800656c:	d104      	bne.n	8006578 <USB_EPStartXfer+0x5d4>
 800656e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006572:	3b01      	subs	r3, #1
 8006574:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29a      	uxth	r2, r3
 800657e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006582:	b29b      	uxth	r3, r3
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	b29b      	uxth	r3, r3
 8006588:	4313      	orrs	r3, r2
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006594:	b29a      	uxth	r2, r3
 8006596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006598:	801a      	strh	r2, [r3, #0]
 800659a:	e056      	b.n	800664a <USB_EPStartXfer+0x6a6>
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <USB_EPStartXfer+0x616>
 80065a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065b6:	801a      	strh	r2, [r3, #0]
 80065b8:	e047      	b.n	800664a <USB_EPStartXfer+0x6a6>
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80065c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d004      	beq.n	80065da <USB_EPStartXfer+0x636>
 80065d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065d4:	3301      	adds	r3, #1
 80065d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80065da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29a      	uxth	r2, r3
 80065e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	029b      	lsls	r3, r3, #10
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	4313      	orrs	r3, r2
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	e02a      	b.n	800664a <USB_EPStartXfer+0x6a6>
 80065f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	785b      	ldrb	r3, [r3, #1]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d122      	bne.n	800664a <USB_EPStartXfer+0x6a6>
 8006604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006608:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006614:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800661e:	b29b      	uxth	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006624:	4413      	add	r3, r2
 8006626:	653b      	str	r3, [r7, #80]	@ 0x50
 8006628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	011a      	lsls	r2, r3, #4
 8006636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006638:	4413      	add	r3, r2
 800663a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800663e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006644:	b29a      	uxth	r2, r3
 8006646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006648:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800664a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	891b      	ldrh	r3, [r3, #8]
 8006656:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800665a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6959      	ldr	r1, [r3, #20]
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666a:	b29b      	uxth	r3, r3
 800666c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006670:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006674:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006678:	6800      	ldr	r0, [r0, #0]
 800667a:	f001 f982 	bl	8007982 <USB_WritePMA>
            ep->xfer_buff += len;
 800667e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695a      	ldr	r2, [r3, #20]
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668e:	441a      	add	r2, r3
 8006690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800669c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6a1a      	ldr	r2, [r3, #32]
 80066a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d90f      	bls.n	80066d8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80066b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6a1a      	ldr	r2, [r3, #32]
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c8:	1ad2      	subs	r2, r2, r3
 80066ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	621a      	str	r2, [r3, #32]
 80066d6:	e00e      	b.n	80066f6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80066d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80066e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2200      	movs	r2, #0
 80066f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	643b      	str	r3, [r7, #64]	@ 0x40
 8006702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	785b      	ldrb	r3, [r3, #1]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d177      	bne.n	8006802 <USB_EPStartXfer+0x85e>
 8006712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006716:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800671e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006722:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006732:	4413      	add	r3, r2
 8006734:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	011a      	lsls	r2, r3, #4
 8006744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006746:	4413      	add	r3, r2
 8006748:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800674c:	637b      	str	r3, [r7, #52]	@ 0x34
 800674e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006758:	b29a      	uxth	r2, r3
 800675a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675c:	801a      	strh	r2, [r3, #0]
 800675e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006762:	2b3e      	cmp	r3, #62	@ 0x3e
 8006764:	d921      	bls.n	80067aa <USB_EPStartXfer+0x806>
 8006766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <USB_EPStartXfer+0x7e2>
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006780:	3b01      	subs	r3, #1
 8006782:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29a      	uxth	r2, r3
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006790:	b29b      	uxth	r3, r3
 8006792:	029b      	lsls	r3, r3, #10
 8006794:	b29b      	uxth	r3, r3
 8006796:	4313      	orrs	r3, r2
 8006798:	b29b      	uxth	r3, r3
 800679a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e050      	b.n	800684c <USB_EPStartXfer+0x8a8>
 80067aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <USB_EPStartXfer+0x824>
 80067b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c4:	801a      	strh	r2, [r3, #0]
 80067c6:	e041      	b.n	800684c <USB_EPStartXfer+0x8a8>
 80067c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <USB_EPStartXfer+0x844>
 80067de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e2:	3301      	adds	r3, #1
 80067e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	029b      	lsls	r3, r3, #10
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	4313      	orrs	r3, r2
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	e024      	b.n	800684c <USB_EPStartXfer+0x8a8>
 8006802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d11c      	bne.n	800684c <USB_EPStartXfer+0x8a8>
 8006812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006820:	b29b      	uxth	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006826:	4413      	add	r3, r2
 8006828:	643b      	str	r3, [r7, #64]	@ 0x40
 800682a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	011a      	lsls	r2, r3, #4
 8006838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800683a:	4413      	add	r3, r2
 800683c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006846:	b29a      	uxth	r2, r3
 8006848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800684c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	895b      	ldrh	r3, [r3, #10]
 8006858:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800685c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6959      	ldr	r1, [r3, #20]
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686c:	b29b      	uxth	r3, r3
 800686e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006872:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006876:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800687a:	6800      	ldr	r0, [r0, #0]
 800687c:	f001 f881 	bl	8007982 <USB_WritePMA>
 8006880:	e227      	b.n	8006cd2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80068b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80068bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80068da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006908:	b29b      	uxth	r3, r3
 800690a:	461a      	mov	r2, r3
 800690c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800690e:	4413      	add	r3, r2
 8006910:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	011a      	lsls	r2, r3, #4
 8006920:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006922:	4413      	add	r3, r2
 8006924:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006928:	65bb      	str	r3, [r7, #88]	@ 0x58
 800692a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692e:	b29a      	uxth	r2, r3
 8006930:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006932:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	891b      	ldrh	r3, [r3, #8]
 8006940:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6959      	ldr	r1, [r3, #20]
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006954:	b29b      	uxth	r3, r3
 8006956:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800695a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800695e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006962:	6800      	ldr	r0, [r0, #0]
 8006964:	f001 f80d 	bl	8007982 <USB_WritePMA>
 8006968:	e1b3      	b.n	8006cd2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800696a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6a1a      	ldr	r2, [r3, #32]
 8006976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697a:	1ad2      	subs	r2, r2, r3
 800697c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 80c6 	beq.w	8006b3c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80069bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d177      	bne.n	8006abc <USB_EPStartXfer+0xb18>
 80069cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	461a      	mov	r2, r3
 80069ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069ec:	4413      	add	r3, r2
 80069ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	011a      	lsls	r2, r3, #4
 80069fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a00:	4413      	add	r3, r2
 8006a02:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a06:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a1e:	d921      	bls.n	8006a64 <USB_EPStartXfer+0xac0>
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a24:	095b      	lsrs	r3, r3, #5
 8006a26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <USB_EPStartXfer+0xa9c>
 8006a36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	029b      	lsls	r3, r3, #10
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	e050      	b.n	8006b06 <USB_EPStartXfer+0xb62>
 8006a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <USB_EPStartXfer+0xade>
 8006a6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a7e:	801a      	strh	r2, [r3, #0]
 8006a80:	e041      	b.n	8006b06 <USB_EPStartXfer+0xb62>
 8006a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a86:	085b      	lsrs	r3, r3, #1
 8006a88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d004      	beq.n	8006aa2 <USB_EPStartXfer+0xafe>
 8006a98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006aa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	029b      	lsls	r3, r3, #10
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ab8:	801a      	strh	r2, [r3, #0]
 8006aba:	e024      	b.n	8006b06 <USB_EPStartXfer+0xb62>
 8006abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d11c      	bne.n	8006b06 <USB_EPStartXfer+0xb62>
 8006acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ae0:	4413      	add	r3, r2
 8006ae2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	011a      	lsls	r2, r3, #4
 8006af2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006af4:	4413      	add	r3, r2
 8006af6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b04:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	895b      	ldrh	r3, [r3, #10]
 8006b12:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6959      	ldr	r1, [r3, #20]
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b2c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b30:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b34:	6800      	ldr	r0, [r0, #0]
 8006b36:	f000 ff24 	bl	8007982 <USB_WritePMA>
 8006b3a:	e0ca      	b.n	8006cd2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d177      	bne.n	8006c3c <USB_EPStartXfer+0xc98>
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b6c:	4413      	add	r3, r2
 8006b6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	011a      	lsls	r2, r3, #4
 8006b7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b80:	4413      	add	r3, r2
 8006b82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b9e:	d921      	bls.n	8006be4 <USB_EPStartXfer+0xc40>
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bae:	f003 031f 	and.w	r3, r3, #31
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d104      	bne.n	8006bc0 <USB_EPStartXfer+0xc1c>
 8006bb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	029b      	lsls	r3, r3, #10
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	e05c      	b.n	8006c9e <USB_EPStartXfer+0xcfa>
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <USB_EPStartXfer+0xc5e>
 8006bec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bfe:	801a      	strh	r2, [r3, #0]
 8006c00:	e04d      	b.n	8006c9e <USB_EPStartXfer+0xcfa>
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c06:	085b      	lsrs	r3, r3, #1
 8006c08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d004      	beq.n	8006c22 <USB_EPStartXfer+0xc7e>
 8006c18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	029b      	lsls	r3, r3, #10
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	4313      	orrs	r3, r2
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c38:	801a      	strh	r2, [r3, #0]
 8006c3a:	e030      	b.n	8006c9e <USB_EPStartXfer+0xcfa>
 8006c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	785b      	ldrb	r3, [r3, #1]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d128      	bne.n	8006c9e <USB_EPStartXfer+0xcfa>
 8006c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c70:	4413      	add	r3, r2
 8006c72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	011a      	lsls	r2, r3, #4
 8006c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c88:	4413      	add	r3, r2
 8006c8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	891b      	ldrh	r3, [r3, #8]
 8006caa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6959      	ldr	r1, [r3, #20]
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cc4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cc8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ccc:	6800      	ldr	r0, [r0, #0]
 8006cce:	f000 fe58 	bl	8007982 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cf8:	817b      	strh	r3, [r7, #10]
 8006cfa:	897b      	ldrh	r3, [r7, #10]
 8006cfc:	f083 0310 	eor.w	r3, r3, #16
 8006d00:	817b      	strh	r3, [r7, #10]
 8006d02:	897b      	ldrh	r3, [r7, #10]
 8006d04:	f083 0320 	eor.w	r3, r3, #32
 8006d08:	817b      	strh	r3, [r7, #10]
 8006d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	441a      	add	r2, r3
 8006d24:	897b      	ldrh	r3, [r7, #10]
 8006d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	8013      	strh	r3, [r2, #0]
 8006d3a:	f000 bcde 	b.w	80076fa <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	7b1b      	ldrb	r3, [r3, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f040 80bb 	bne.w	8006ec6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699a      	ldr	r2, [r3, #24]
 8006d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d917      	bls.n	8006d9c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	699a      	ldr	r2, [r3, #24]
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8c:	1ad2      	subs	r2, r2, r3
 8006d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	619a      	str	r2, [r3, #24]
 8006d9a:	e00e      	b.n	8006dba <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2200      	movs	r2, #0
 8006db8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006dde:	4413      	add	r3, r2
 8006de0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	011a      	lsls	r2, r3, #4
 8006df2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006df6:	4413      	add	r3, r2
 8006df8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006dfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e12:	801a      	strh	r2, [r3, #0]
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e18:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e1a:	d924      	bls.n	8006e66 <USB_EPStartXfer+0xec2>
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e20:	095b      	lsrs	r3, r3, #5
 8006e22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2a:	f003 031f 	and.w	r3, r3, #31
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d104      	bne.n	8006e3c <USB_EPStartXfer+0xe98>
 8006e32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e36:	3b01      	subs	r3, #1
 8006e38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	029b      	lsls	r3, r3, #10
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e60:	801a      	strh	r2, [r3, #0]
 8006e62:	f000 bc10 	b.w	8007686 <USB_EPStartXfer+0x16e2>
 8006e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10c      	bne.n	8006e88 <USB_EPStartXfer+0xee4>
 8006e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	e3fe      	b.n	8007686 <USB_EPStartXfer+0x16e2>
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d004      	beq.n	8006ea8 <USB_EPStartXfer+0xf04>
 8006e9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	029b      	lsls	r3, r3, #10
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ec2:	801a      	strh	r2, [r3, #0]
 8006ec4:	e3df      	b.n	8007686 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	78db      	ldrb	r3, [r3, #3]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	f040 8218 	bne.w	8007308 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f040 809d 	bne.w	8007024 <USB_EPStartXfer+0x1080>
 8006eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f0e:	4413      	add	r3, r2
 8006f10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	011a      	lsls	r2, r3, #4
 8006f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f26:	4413      	add	r3, r2
 8006f28:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f42:	801a      	strh	r2, [r3, #0]
 8006f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f52:	d92b      	bls.n	8006fac <USB_EPStartXfer+0x1008>
 8006f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	095b      	lsrs	r3, r3, #5
 8006f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d104      	bne.n	8006f84 <USB_EPStartXfer+0xfe0>
 8006f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	029b      	lsls	r3, r3, #10
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	4313      	orrs	r3, r2
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fa8:	801a      	strh	r2, [r3, #0]
 8006faa:	e070      	b.n	800708e <USB_EPStartXfer+0x10ea>
 8006fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10c      	bne.n	8006fd6 <USB_EPStartXfer+0x1032>
 8006fbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fd2:	801a      	strh	r2, [r3, #0]
 8006fd4:	e05b      	b.n	800708e <USB_EPStartXfer+0x10ea>
 8006fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <USB_EPStartXfer+0x1062>
 8006ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007000:	3301      	adds	r3, #1
 8007002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29a      	uxth	r2, r3
 800700e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007012:	b29b      	uxth	r3, r3
 8007014:	029b      	lsls	r3, r3, #10
 8007016:	b29b      	uxth	r3, r3
 8007018:	4313      	orrs	r3, r2
 800701a:	b29a      	uxth	r2, r3
 800701c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	e034      	b.n	800708e <USB_EPStartXfer+0x10ea>
 8007024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d12c      	bne.n	800708e <USB_EPStartXfer+0x10ea>
 8007034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007050:	b29b      	uxth	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007058:	4413      	add	r3, r2
 800705a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800705e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	011a      	lsls	r2, r3, #4
 800706c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007070:	4413      	add	r3, r2
 8007072:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007076:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800707a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	b29a      	uxth	r2, r3
 8007088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800708c:	801a      	strh	r2, [r3, #0]
 800708e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007092:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800709c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	785b      	ldrb	r3, [r3, #1]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f040 809d 	bne.w	80071e8 <USB_EPStartXfer+0x1244>
 80070ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	461a      	mov	r2, r3
 80070ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070d2:	4413      	add	r3, r2
 80070d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	011a      	lsls	r2, r3, #4
 80070e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070ea:	4413      	add	r3, r2
 80070ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007100:	b29a      	uxth	r2, r3
 8007102:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007106:	801a      	strh	r2, [r3, #0]
 8007108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b3e      	cmp	r3, #62	@ 0x3e
 8007116:	d92b      	bls.n	8007170 <USB_EPStartXfer+0x11cc>
 8007118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	095b      	lsrs	r3, r3, #5
 8007126:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800712a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 031f 	and.w	r3, r3, #31
 800713a:	2b00      	cmp	r3, #0
 800713c:	d104      	bne.n	8007148 <USB_EPStartXfer+0x11a4>
 800713e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007142:	3b01      	subs	r3, #1
 8007144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007148:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29a      	uxth	r2, r3
 8007150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007154:	b29b      	uxth	r3, r3
 8007156:	029b      	lsls	r3, r3, #10
 8007158:	b29b      	uxth	r3, r3
 800715a:	4313      	orrs	r3, r2
 800715c:	b29b      	uxth	r3, r3
 800715e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007166:	b29a      	uxth	r2, r3
 8007168:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800716c:	801a      	strh	r2, [r3, #0]
 800716e:	e069      	b.n	8007244 <USB_EPStartXfer+0x12a0>
 8007170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10c      	bne.n	800719a <USB_EPStartXfer+0x11f6>
 8007180:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800718c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007190:	b29a      	uxth	r2, r3
 8007192:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007196:	801a      	strh	r2, [r3, #0]
 8007198:	e054      	b.n	8007244 <USB_EPStartXfer+0x12a0>
 800719a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	085b      	lsrs	r3, r3, #1
 80071a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <USB_EPStartXfer+0x1226>
 80071c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071c4:	3301      	adds	r3, #1
 80071c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	029b      	lsls	r3, r3, #10
 80071da:	b29b      	uxth	r3, r3
 80071dc:	4313      	orrs	r3, r2
 80071de:	b29a      	uxth	r2, r3
 80071e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	e02d      	b.n	8007244 <USB_EPStartXfer+0x12a0>
 80071e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d125      	bne.n	8007244 <USB_EPStartXfer+0x12a0>
 80071f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007206:	b29b      	uxth	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800720e:	4413      	add	r3, r2
 8007210:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	011a      	lsls	r2, r3, #4
 8007222:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007226:	4413      	add	r3, r2
 8007228:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800722c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	b29a      	uxth	r2, r3
 800723e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007242:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8218 	beq.w	8007686 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007276:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800727a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <USB_EPStartXfer+0x12ea>
 8007282:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10d      	bne.n	80072aa <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800728e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 81f5 	bne.w	8007686 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800729c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f040 81ee 	bne.w	8007686 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80072aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072d0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80072d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	441a      	add	r2, r3
 80072ee:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80072f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007302:	b29b      	uxth	r3, r3
 8007304:	8013      	strh	r3, [r2, #0]
 8007306:	e1be      	b.n	8007686 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	78db      	ldrb	r3, [r3, #3]
 8007314:	2b01      	cmp	r3, #1
 8007316:	f040 81b4 	bne.w	8007682 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800731a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699a      	ldr	r2, [r3, #24]
 8007326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	429a      	cmp	r2, r3
 8007334:	d917      	bls.n	8007366 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699a      	ldr	r2, [r3, #24]
 8007352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007356:	1ad2      	subs	r2, r2, r3
 8007358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	619a      	str	r2, [r3, #24]
 8007364:	e00e      	b.n	8007384 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2200      	movs	r2, #0
 8007382:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f040 8085 	bne.w	80074a0 <USB_EPStartXfer+0x14fc>
 8007396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073ba:	4413      	add	r3, r2
 80073bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	011a      	lsls	r2, r3, #4
 80073ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073d2:	4413      	add	r3, r2
 80073d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80073f6:	d923      	bls.n	8007440 <USB_EPStartXfer+0x149c>
 80073f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007406:	f003 031f 	and.w	r3, r3, #31
 800740a:	2b00      	cmp	r3, #0
 800740c:	d104      	bne.n	8007418 <USB_EPStartXfer+0x1474>
 800740e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007412:	3b01      	subs	r3, #1
 8007414:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007418:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29a      	uxth	r2, r3
 8007420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007424:	b29b      	uxth	r3, r3
 8007426:	029b      	lsls	r3, r3, #10
 8007428:	b29b      	uxth	r3, r3
 800742a:	4313      	orrs	r3, r2
 800742c:	b29b      	uxth	r3, r3
 800742e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007436:	b29a      	uxth	r2, r3
 8007438:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	e060      	b.n	8007502 <USB_EPStartXfer+0x155e>
 8007440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10c      	bne.n	8007462 <USB_EPStartXfer+0x14be>
 8007448:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007458:	b29a      	uxth	r2, r3
 800745a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800745e:	801a      	strh	r2, [r3, #0]
 8007460:	e04f      	b.n	8007502 <USB_EPStartXfer+0x155e>
 8007462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800746c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d004      	beq.n	8007482 <USB_EPStartXfer+0x14de>
 8007478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800747c:	3301      	adds	r3, #1
 800747e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007482:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	b29a      	uxth	r2, r3
 800748a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800748e:	b29b      	uxth	r3, r3
 8007490:	029b      	lsls	r3, r3, #10
 8007492:	b29b      	uxth	r3, r3
 8007494:	4313      	orrs	r3, r2
 8007496:	b29a      	uxth	r2, r3
 8007498:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	e030      	b.n	8007502 <USB_EPStartXfer+0x155e>
 80074a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d128      	bne.n	8007502 <USB_EPStartXfer+0x155e>
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074d4:	4413      	add	r3, r2
 80074d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	011a      	lsls	r2, r3, #4
 80074e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074ec:	4413      	add	r3, r2
 80074ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007500:	801a      	strh	r2, [r3, #0]
 8007502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	2b00      	cmp	r3, #0
 800751e:	f040 8085 	bne.w	800762c <USB_EPStartXfer+0x1688>
 8007522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007526:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800753e:	b29b      	uxth	r3, r3
 8007540:	461a      	mov	r2, r3
 8007542:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007546:	4413      	add	r3, r2
 8007548:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800754c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	011a      	lsls	r2, r3, #4
 800755a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800755e:	4413      	add	r3, r2
 8007560:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007568:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	b29b      	uxth	r3, r3
 8007570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007574:	b29a      	uxth	r2, r3
 8007576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800757a:	801a      	strh	r2, [r3, #0]
 800757c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007580:	2b3e      	cmp	r3, #62	@ 0x3e
 8007582:	d923      	bls.n	80075cc <USB_EPStartXfer+0x1628>
 8007584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007592:	f003 031f 	and.w	r3, r3, #31
 8007596:	2b00      	cmp	r3, #0
 8007598:	d104      	bne.n	80075a4 <USB_EPStartXfer+0x1600>
 800759a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800759e:	3b01      	subs	r3, #1
 80075a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	029b      	lsls	r3, r3, #10
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	4313      	orrs	r3, r2
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075c8:	801a      	strh	r2, [r3, #0]
 80075ca:	e05c      	b.n	8007686 <USB_EPStartXfer+0x16e2>
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10c      	bne.n	80075ee <USB_EPStartXfer+0x164a>
 80075d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075ea:	801a      	strh	r2, [r3, #0]
 80075ec:	e04b      	b.n	8007686 <USB_EPStartXfer+0x16e2>
 80075ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f2:	085b      	lsrs	r3, r3, #1
 80075f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d004      	beq.n	800760e <USB_EPStartXfer+0x166a>
 8007604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007608:	3301      	adds	r3, #1
 800760a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800760e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	b29a      	uxth	r2, r3
 8007616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800761a:	b29b      	uxth	r3, r3
 800761c:	029b      	lsls	r3, r3, #10
 800761e:	b29b      	uxth	r3, r3
 8007620:	4313      	orrs	r3, r2
 8007622:	b29a      	uxth	r2, r3
 8007624:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007628:	801a      	strh	r2, [r3, #0]
 800762a:	e02c      	b.n	8007686 <USB_EPStartXfer+0x16e2>
 800762c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d124      	bne.n	8007686 <USB_EPStartXfer+0x16e2>
 800763c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007640:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800764a:	b29b      	uxth	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007652:	4413      	add	r3, r2
 8007654:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	011a      	lsls	r2, r3, #4
 8007666:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800766a:	4413      	add	r3, r2
 800766c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007670:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007678:	b29a      	uxth	r2, r3
 800767a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800767e:	801a      	strh	r2, [r3, #0]
 8007680:	e001      	b.n	8007686 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e03a      	b.n	80076fc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80076b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80076c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	441a      	add	r2, r3
 80076e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80076e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007706:	b480      	push	{r7}
 8007708:	b085      	sub	sp, #20
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d020      	beq.n	800775a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800772a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800772e:	81bb      	strh	r3, [r7, #12]
 8007730:	89bb      	ldrh	r3, [r7, #12]
 8007732:	f083 0310 	eor.w	r3, r3, #16
 8007736:	81bb      	strh	r3, [r7, #12]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	441a      	add	r2, r3
 8007742:	89bb      	ldrh	r3, [r7, #12]
 8007744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800774c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007754:	b29b      	uxth	r3, r3
 8007756:	8013      	strh	r3, [r2, #0]
 8007758:	e01f      	b.n	800779a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	b29b      	uxth	r3, r3
 8007768:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800776c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007770:	81fb      	strh	r3, [r7, #14]
 8007772:	89fb      	ldrh	r3, [r7, #14]
 8007774:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007778:	81fb      	strh	r3, [r7, #14]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	441a      	add	r2, r3
 8007784:	89fb      	ldrh	r3, [r7, #14]
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr

080077a6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b087      	sub	sp, #28
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	7b1b      	ldrb	r3, [r3, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f040 809d 	bne.w	80078f4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	785b      	ldrb	r3, [r3, #1]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d04c      	beq.n	800785c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	823b      	strh	r3, [r7, #16]
 80077d0:	8a3b      	ldrh	r3, [r7, #16]
 80077d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d01b      	beq.n	8007812 <USB_EPClearStall+0x6c>
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077f0:	81fb      	strh	r3, [r7, #14]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	441a      	add	r2, r3
 80077fc:	89fb      	ldrh	r3, [r7, #14]
 80077fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800780a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800780e:	b29b      	uxth	r3, r3
 8007810:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	78db      	ldrb	r3, [r3, #3]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d06c      	beq.n	80078f4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800782c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007830:	81bb      	strh	r3, [r7, #12]
 8007832:	89bb      	ldrh	r3, [r7, #12]
 8007834:	f083 0320 	eor.w	r3, r3, #32
 8007838:	81bb      	strh	r3, [r7, #12]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	441a      	add	r2, r3
 8007844:	89bb      	ldrh	r3, [r7, #12]
 8007846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800784a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800784e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007856:	b29b      	uxth	r3, r3
 8007858:	8013      	strh	r3, [r2, #0]
 800785a:	e04b      	b.n	80078f4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	82fb      	strh	r3, [r7, #22]
 800786a:	8afb      	ldrh	r3, [r7, #22]
 800786c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01b      	beq.n	80078ac <USB_EPClearStall+0x106>
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800788a:	82bb      	strh	r3, [r7, #20]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	441a      	add	r2, r3
 8007896:	8abb      	ldrh	r3, [r7, #20]
 8007898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800789c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078c2:	827b      	strh	r3, [r7, #18]
 80078c4:	8a7b      	ldrh	r3, [r7, #18]
 80078c6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80078ca:	827b      	strh	r3, [r7, #18]
 80078cc:	8a7b      	ldrh	r3, [r7, #18]
 80078ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80078d2:	827b      	strh	r3, [r7, #18]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	441a      	add	r2, r3
 80078de:	8a7b      	ldrh	r3, [r7, #18]
 80078e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr

08007900 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d103      	bne.n	800791a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2280      	movs	r2, #128	@ 0x80
 8007916:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	bc80      	pop	{r7}
 8007924:	4770      	bx	lr

08007926 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	bc80      	pop	{r7}
 8007938:	4770      	bx	lr

0800793a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr

0800794e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800795c:	b29b      	uxth	r3, r3
 800795e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007960:	68fb      	ldr	r3, [r7, #12]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	bc80      	pop	{r7}
 800796a:	4770      	bx	lr

0800796c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr

08007982 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007982:	b480      	push	{r7}
 8007984:	b08b      	sub	sp, #44	@ 0x2c
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	4611      	mov	r1, r2
 800798e:	461a      	mov	r2, r3
 8007990:	460b      	mov	r3, r1
 8007992:	80fb      	strh	r3, [r7, #6]
 8007994:	4613      	mov	r3, r2
 8007996:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007998:	88bb      	ldrh	r3, [r7, #4]
 800799a:	3301      	adds	r3, #1
 800799c:	085b      	lsrs	r3, r3, #1
 800799e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079a8:	88fb      	ldrh	r3, [r7, #6]
 80079aa:	005a      	lsls	r2, r3, #1
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079b4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ba:	e01e      	b.n	80079fa <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	3301      	adds	r3, #1
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	b21a      	sxth	r2, r3
 80079cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	b21b      	sxth	r3, r3
 80079d4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	8a7a      	ldrh	r2, [r7, #18]
 80079da:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	3302      	adds	r3, #2
 80079e0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	3302      	adds	r3, #2
 80079e6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	3301      	adds	r3, #1
 80079ec:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	3301      	adds	r3, #1
 80079f2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80079f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f6:	3b01      	subs	r3, #1
 80079f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1dd      	bne.n	80079bc <USB_WritePMA+0x3a>
  }
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	372c      	adds	r7, #44	@ 0x2c
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr

08007a0c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b08b      	sub	sp, #44	@ 0x2c
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	4611      	mov	r1, r2
 8007a18:	461a      	mov	r2, r3
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	80fb      	strh	r3, [r7, #6]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a22:	88bb      	ldrh	r3, [r7, #4]
 8007a24:	085b      	lsrs	r3, r3, #1
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	005a      	lsls	r2, r3, #1
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a3e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a44:	e01b      	b.n	8007a7e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	3302      	adds	r3, #2
 8007a52:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	0a1b      	lsrs	r3, r3, #8
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	3302      	adds	r3, #2
 8007a76:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e0      	bne.n	8007a46 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007a84:	88bb      	ldrh	r3, [r7, #4]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	701a      	strb	r2, [r3, #0]
  }
}
 8007aa0:	bf00      	nop
 8007aa2:	372c      	adds	r7, #44	@ 0x2c
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc80      	pop	{r7}
 8007aa8:	4770      	bx	lr

08007aaa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	7c1b      	ldrb	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d115      	bne.n	8007aee <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ac2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	2181      	movs	r1, #129	@ 0x81
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f004 fc19 	bl	800c302 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ada:	2202      	movs	r2, #2
 8007adc:	2101      	movs	r1, #1
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f004 fc0f 	bl	800c302 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007aec:	e012      	b.n	8007b14 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007aee:	2340      	movs	r3, #64	@ 0x40
 8007af0:	2202      	movs	r2, #2
 8007af2:	2181      	movs	r1, #129	@ 0x81
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f004 fc04 	bl	800c302 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b00:	2340      	movs	r3, #64	@ 0x40
 8007b02:	2202      	movs	r2, #2
 8007b04:	2101      	movs	r1, #1
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f004 fbfb 	bl	800c302 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b14:	2308      	movs	r3, #8
 8007b16:	2203      	movs	r2, #3
 8007b18:	2182      	movs	r1, #130	@ 0x82
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f004 fbf1 	bl	800c302 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b26:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b2a:	f004 fd11 	bl	800c550 <USBD_static_malloc>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007b40:	2301      	movs	r3, #1
 8007b42:	73fb      	strb	r3, [r7, #15]
 8007b44:	e026      	b.n	8007b94 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b4c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	7c1b      	ldrb	r3, [r3, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d109      	bne.n	8007b84 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f004 fcb0 	bl	800c4e2 <USBD_LL_PrepareReceive>
 8007b82:	e007      	b.n	8007b94 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b8a:	2340      	movs	r3, #64	@ 0x40
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f004 fca7 	bl	800c4e2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007bae:	2181      	movs	r1, #129	@ 0x81
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f004 fbcc 	bl	800c34e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f004 fbc5 	bl	800c34e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007bcc:	2182      	movs	r1, #130	@ 0x82
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f004 fbbd 	bl	800c34e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00e      	beq.n	8007c02 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f004 fcb7 	bl	800c568 <USBD_static_free>
    pdev->pClassData = NULL;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c1c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d039      	beq.n	8007caa <USBD_CDC_Setup+0x9e>
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	d17f      	bne.n	8007d3a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	88db      	ldrh	r3, [r3, #6]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d029      	beq.n	8007c96 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	b25b      	sxtb	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	da11      	bge.n	8007c70 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007c58:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	88d2      	ldrh	r2, [r2, #6]
 8007c5e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007c60:	6939      	ldr	r1, [r7, #16]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	88db      	ldrh	r3, [r3, #6]
 8007c66:	461a      	mov	r2, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 fa05 	bl	8009078 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007c6e:	e06b      	b.n	8007d48 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	785a      	ldrb	r2, [r3, #1]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	88db      	ldrh	r3, [r3, #6]
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007c86:	6939      	ldr	r1, [r7, #16]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	88db      	ldrh	r3, [r3, #6]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f001 fa20 	bl	80090d4 <USBD_CtlPrepareRx>
      break;
 8007c94:	e058      	b.n	8007d48 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	7850      	ldrb	r0, [r2, #1]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	4798      	blx	r3
      break;
 8007ca8:	e04e      	b.n	8007d48 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b0b      	cmp	r3, #11
 8007cb0:	d02e      	beq.n	8007d10 <USBD_CDC_Setup+0x104>
 8007cb2:	2b0b      	cmp	r3, #11
 8007cb4:	dc38      	bgt.n	8007d28 <USBD_CDC_Setup+0x11c>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <USBD_CDC_Setup+0xb4>
 8007cba:	2b0a      	cmp	r3, #10
 8007cbc:	d014      	beq.n	8007ce8 <USBD_CDC_Setup+0xdc>
 8007cbe:	e033      	b.n	8007d28 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d107      	bne.n	8007cda <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007cca:	f107 030c 	add.w	r3, r7, #12
 8007cce:	2202      	movs	r2, #2
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 f9d0 	bl	8009078 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cd8:	e02e      	b.n	8007d38 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 f961 	bl	8008fa4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ce6:	e027      	b.n	8007d38 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d107      	bne.n	8007d02 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007cf2:	f107 030f 	add.w	r3, r7, #15
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f001 f9bc 	bl	8009078 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d00:	e01a      	b.n	8007d38 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f001 f94d 	bl	8008fa4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d0e:	e013      	b.n	8007d38 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d00d      	beq.n	8007d36 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 f941 	bl	8008fa4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d22:	2302      	movs	r3, #2
 8007d24:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d26:	e006      	b.n	8007d36 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 f93a 	bl	8008fa4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d30:	2302      	movs	r3, #2
 8007d32:	75fb      	strb	r3, [r7, #23]
          break;
 8007d34:	e000      	b.n	8007d38 <USBD_CDC_Setup+0x12c>
          break;
 8007d36:	bf00      	nop
      }
      break;
 8007d38:	e006      	b.n	8007d48 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 f931 	bl	8008fa4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d42:	2302      	movs	r3, #2
 8007d44:	75fb      	strb	r3, [r7, #23]
      break;
 8007d46:	bf00      	nop
  }

  return ret;
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d64:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d6c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d03a      	beq.n	8007dee <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d78:	78fa      	ldrb	r2, [r7, #3]
 8007d7a:	6879      	ldr	r1, [r7, #4]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	440b      	add	r3, r1
 8007d86:	331c      	adds	r3, #28
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d029      	beq.n	8007de2 <USBD_CDC_DataIn+0x90>
 8007d8e:	78fa      	ldrb	r2, [r7, #3]
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4613      	mov	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	331c      	adds	r3, #28
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	78f9      	ldrb	r1, [r7, #3]
 8007da2:	68b8      	ldr	r0, [r7, #8]
 8007da4:	460b      	mov	r3, r1
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	4403      	add	r3, r0
 8007dae:	3320      	adds	r3, #32
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	fbb2 f1f3 	udiv	r1, r2, r3
 8007db6:	fb01 f303 	mul.w	r3, r1, r3
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d110      	bne.n	8007de2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007dc0:	78fa      	ldrb	r2, [r7, #3]
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	331c      	adds	r3, #28
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007dd4:	78f9      	ldrb	r1, [r7, #3]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	2200      	movs	r2, #0
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f004 fb5e 	bl	800c49c <USBD_LL_Transmit>
 8007de0:	e003      	b.n	8007dea <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	e000      	b.n	8007df0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007dee:	2302      	movs	r3, #2
  }
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e0c:	78fb      	ldrb	r3, [r7, #3]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f004 fb89 	bl	800c528 <USBD_LL_GetRxDataSize>
 8007e16:	4602      	mov	r2, r0
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00d      	beq.n	8007e44 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	4798      	blx	r3

    return USBD_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	e000      	b.n	8007e46 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007e44:	2302      	movs	r3, #2
  }
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e5c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d014      	beq.n	8007e92 <USBD_CDC_EP0_RxReady+0x44>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007e6e:	2bff      	cmp	r3, #255	@ 0xff
 8007e70:	d00f      	beq.n	8007e92 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007e80:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	22ff      	movs	r2, #255	@ 0xff
 8007e8e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2243      	movs	r2, #67	@ 0x43
 8007ea8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007eaa:	4b03      	ldr	r3, [pc, #12]	@ (8007eb8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bc80      	pop	{r7}
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	20000098 	.word	0x20000098

08007ebc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2243      	movs	r2, #67	@ 0x43
 8007ec8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007eca:	4b03      	ldr	r3, [pc, #12]	@ (8007ed8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bc80      	pop	{r7}
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	20000054 	.word	0x20000054

08007edc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2243      	movs	r2, #67	@ 0x43
 8007ee8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007eea:	4b03      	ldr	r3, [pc, #12]	@ (8007ef8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bc80      	pop	{r7}
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	200000dc 	.word	0x200000dc

08007efc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	220a      	movs	r2, #10
 8007f08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007f0a:	4b03      	ldr	r3, [pc, #12]	@ (8007f18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bc80      	pop	{r7}
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	20000010 	.word	0x20000010

08007f1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007f26:	2302      	movs	r3, #2
 8007f28:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bc80      	pop	{r7}
 8007f46:	4770      	bx	lr

08007f48 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	4613      	mov	r3, r2
 8007f54:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f5c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007f66:	88fa      	ldrh	r2, [r7, #6]
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	371c      	adds	r7, #28
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bc80      	pop	{r7}
 8007f78:	4770      	bx	lr

08007f7a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f8a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr

08007fa0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d01c      	beq.n	8007ff4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d115      	bne.n	8007ff0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	2181      	movs	r1, #129	@ 0x81
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f004 fa58 	bl	800c49c <USBD_LL_Transmit>

      return USBD_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	e002      	b.n	8007ff6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e000      	b.n	8007ff6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007ff4:	2302      	movs	r3, #2
  }
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800800c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d017      	beq.n	8008048 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	7c1b      	ldrb	r3, [r3, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d109      	bne.n	8008034 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008026:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800802a:	2101      	movs	r1, #1
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f004 fa58 	bl	800c4e2 <USBD_LL_PrepareReceive>
 8008032:	e007      	b.n	8008044 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800803a:	2340      	movs	r3, #64	@ 0x40
 800803c:	2101      	movs	r1, #1
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f004 fa4f 	bl	800c4e2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	e000      	b.n	800804a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008048:	2302      	movs	r3, #2
  }
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	60f8      	str	r0, [r7, #12]
 800805a:	60b9      	str	r1, [r7, #8]
 800805c:	4613      	mov	r3, r2
 800805e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008066:	2302      	movs	r3, #2
 8008068:	e01a      	b.n	80080a0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	79fa      	ldrb	r2, [r7, #7]
 8008096:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f004 f8bd 	bl	800c218 <USBD_LL_Init>

  return USBD_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d006      	beq.n	80080ca <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73fb      	strb	r3, [r7, #15]
 80080c8:	e001      	b.n	80080ce <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80080ca:	2302      	movs	r3, #2
 80080cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr

080080da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f004 f8f2 	bl	800c2cc <USBD_LL_Start>

  return USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	bc80      	pop	{r7}
 8008104:	4770      	bx	lr

08008106 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008112:	2302      	movs	r3, #2
 8008114:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00c      	beq.n	800813a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	4611      	mov	r1, r2
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	4798      	blx	r3
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800813a:	7bfb      	ldrb	r3, [r7, #15]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	78fa      	ldrb	r2, [r7, #3]
 800815a:	4611      	mov	r1, r2
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	4798      	blx	r3

  return USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fed8 	bl	8008f32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008190:	461a      	mov	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800819e:	f003 031f 	and.w	r3, r3, #31
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d016      	beq.n	80081d4 <USBD_LL_SetupStage+0x6a>
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d81c      	bhi.n	80081e4 <USBD_LL_SetupStage+0x7a>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <USBD_LL_SetupStage+0x4a>
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d008      	beq.n	80081c4 <USBD_LL_SetupStage+0x5a>
 80081b2:	e017      	b.n	80081e4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f9cb 	bl	8008558 <USBD_StdDevReq>
      break;
 80081c2:	e01a      	b.n	80081fa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa2d 	bl	800862c <USBD_StdItfReq>
      break;
 80081d2:	e012      	b.n	80081fa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fa6d 	bl	80086bc <USBD_StdEPReq>
      break;
 80081e2:	e00a      	b.n	80081fa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80081ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f004 f8ca 	bl	800c38c <USBD_LL_StallEP>
      break;
 80081f8:	bf00      	nop
  }

  return USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	460b      	mov	r3, r1
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008212:	7afb      	ldrb	r3, [r7, #11]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d14b      	bne.n	80082b0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800821e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008226:	2b03      	cmp	r3, #3
 8008228:	d134      	bne.n	8008294 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	429a      	cmp	r2, r3
 8008234:	d919      	bls.n	800826a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	1ad2      	subs	r2, r2, r3
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	68da      	ldr	r2, [r3, #12]
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800824c:	429a      	cmp	r2, r3
 800824e:	d203      	bcs.n	8008258 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008254:	b29b      	uxth	r3, r3
 8008256:	e002      	b.n	800825e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800825c:	b29b      	uxth	r3, r3
 800825e:	461a      	mov	r2, r3
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 ff54 	bl	8009110 <USBD_CtlContinueRx>
 8008268:	e038      	b.n	80082dc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800827c:	2b03      	cmp	r3, #3
 800827e:	d105      	bne.n	800828c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 ff51 	bl	8009134 <USBD_CtlSendStatus>
 8008292:	e023      	b.n	80082dc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800829a:	2b05      	cmp	r3, #5
 800829c:	d11e      	bne.n	80082dc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80082a6:	2100      	movs	r1, #0
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f004 f86f 	bl	800c38c <USBD_LL_StallEP>
 80082ae:	e015      	b.n	80082dc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00d      	beq.n	80082d8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d108      	bne.n	80082d8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	7afa      	ldrb	r2, [r7, #11]
 80082d0:	4611      	mov	r1, r2
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	4798      	blx	r3
 80082d6:	e001      	b.n	80082dc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082d8:	2302      	movs	r3, #2
 80082da:	e000      	b.n	80082de <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b086      	sub	sp, #24
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	460b      	mov	r3, r1
 80082f0:	607a      	str	r2, [r7, #4]
 80082f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80082f4:	7afb      	ldrb	r3, [r7, #11]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d17f      	bne.n	80083fa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3314      	adds	r3, #20
 80082fe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008306:	2b02      	cmp	r3, #2
 8008308:	d15c      	bne.n	80083c4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	429a      	cmp	r2, r3
 8008314:	d915      	bls.n	8008342 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	1ad2      	subs	r2, r2, r3
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	b29b      	uxth	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 febe 	bl	80090b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008334:	2300      	movs	r3, #0
 8008336:	2200      	movs	r2, #0
 8008338:	2100      	movs	r1, #0
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f004 f8d1 	bl	800c4e2 <USBD_LL_PrepareReceive>
 8008340:	e04e      	b.n	80083e0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	6912      	ldr	r2, [r2, #16]
 800834a:	fbb3 f1f2 	udiv	r1, r3, r2
 800834e:	fb01 f202 	mul.w	r2, r1, r2
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d11c      	bne.n	8008392 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008360:	429a      	cmp	r2, r3
 8008362:	d316      	bcc.n	8008392 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	689a      	ldr	r2, [r3, #8]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800836e:	429a      	cmp	r2, r3
 8008370:	d20f      	bcs.n	8008392 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008372:	2200      	movs	r2, #0
 8008374:	2100      	movs	r1, #0
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 fe9a 	bl	80090b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008384:	2300      	movs	r3, #0
 8008386:	2200      	movs	r2, #0
 8008388:	2100      	movs	r1, #0
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f004 f8a9 	bl	800c4e2 <USBD_LL_PrepareReceive>
 8008390:	e026      	b.n	80083e0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d105      	bne.n	80083b4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80083b4:	2180      	movs	r1, #128	@ 0x80
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f003 ffe8 	bl	800c38c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fecc 	bl	800915a <USBD_CtlReceiveStatus>
 80083c2:	e00d      	b.n	80083e0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80083ca:	2b04      	cmp	r3, #4
 80083cc:	d004      	beq.n	80083d8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d103      	bne.n	80083e0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80083d8:	2180      	movs	r1, #128	@ 0x80
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f003 ffd6 	bl	800c38c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d11d      	bne.n	8008426 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff fe81 	bl	80080f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80083f8:	e015      	b.n	8008426 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00d      	beq.n	8008422 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800840c:	2b03      	cmp	r3, #3
 800840e:	d108      	bne.n	8008422 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	7afa      	ldrb	r2, [r7, #11]
 800841a:	4611      	mov	r1, r2
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	4798      	blx	r3
 8008420:	e001      	b.n	8008426 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008422:	2302      	movs	r3, #2
 8008424:	e000      	b.n	8008428 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008438:	2340      	movs	r3, #64	@ 0x40
 800843a:	2200      	movs	r2, #0
 800843c:	2100      	movs	r1, #0
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f003 ff5f 	bl	800c302 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2240      	movs	r2, #64	@ 0x40
 8008450:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008454:	2340      	movs	r3, #64	@ 0x40
 8008456:	2200      	movs	r2, #0
 8008458:	2180      	movs	r1, #128	@ 0x80
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f003 ff51 	bl	800c302 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2240      	movs	r2, #64	@ 0x40
 800846a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008490:	2b00      	cmp	r3, #0
 8008492:	d009      	beq.n	80084a8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6852      	ldr	r2, [r2, #4]
 80084a0:	b2d2      	uxtb	r2, r2
 80084a2:	4611      	mov	r1, r2
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	4798      	blx	r3
  }

  return USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	78fa      	ldrb	r2, [r7, #3]
 80084c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bc80      	pop	{r7}
 80084ce:	4770      	bx	lr

080084d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2204      	movs	r2, #4
 80084e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bc80      	pop	{r7}
 80084f6:	4770      	bx	lr

080084f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008506:	2b04      	cmp	r3, #4
 8008508:	d105      	bne.n	8008516 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	bc80      	pop	{r7}
 8008520:	4770      	bx	lr

08008522 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008530:	2b03      	cmp	r3, #3
 8008532:	d10b      	bne.n	800854c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
	...

08008558 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800856e:	2b40      	cmp	r3, #64	@ 0x40
 8008570:	d005      	beq.n	800857e <USBD_StdDevReq+0x26>
 8008572:	2b40      	cmp	r3, #64	@ 0x40
 8008574:	d84f      	bhi.n	8008616 <USBD_StdDevReq+0xbe>
 8008576:	2b00      	cmp	r3, #0
 8008578:	d009      	beq.n	800858e <USBD_StdDevReq+0x36>
 800857a:	2b20      	cmp	r3, #32
 800857c:	d14b      	bne.n	8008616 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	4798      	blx	r3
      break;
 800858c:	e048      	b.n	8008620 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	785b      	ldrb	r3, [r3, #1]
 8008592:	2b09      	cmp	r3, #9
 8008594:	d839      	bhi.n	800860a <USBD_StdDevReq+0xb2>
 8008596:	a201      	add	r2, pc, #4	@ (adr r2, 800859c <USBD_StdDevReq+0x44>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	080085ed 	.word	0x080085ed
 80085a0:	08008601 	.word	0x08008601
 80085a4:	0800860b 	.word	0x0800860b
 80085a8:	080085f7 	.word	0x080085f7
 80085ac:	0800860b 	.word	0x0800860b
 80085b0:	080085cf 	.word	0x080085cf
 80085b4:	080085c5 	.word	0x080085c5
 80085b8:	0800860b 	.word	0x0800860b
 80085bc:	080085e3 	.word	0x080085e3
 80085c0:	080085d9 	.word	0x080085d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f9dc 	bl	8008984 <USBD_GetDescriptor>
          break;
 80085cc:	e022      	b.n	8008614 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fb3f 	bl	8008c54 <USBD_SetAddress>
          break;
 80085d6:	e01d      	b.n	8008614 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fb7e 	bl	8008cdc <USBD_SetConfig>
          break;
 80085e0:	e018      	b.n	8008614 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fc07 	bl	8008df8 <USBD_GetConfig>
          break;
 80085ea:	e013      	b.n	8008614 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fc37 	bl	8008e62 <USBD_GetStatus>
          break;
 80085f4:	e00e      	b.n	8008614 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fc65 	bl	8008ec8 <USBD_SetFeature>
          break;
 80085fe:	e009      	b.n	8008614 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fc74 	bl	8008ef0 <USBD_ClrFeature>
          break;
 8008608:	e004      	b.n	8008614 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fcc9 	bl	8008fa4 <USBD_CtlError>
          break;
 8008612:	bf00      	nop
      }
      break;
 8008614:	e004      	b.n	8008620 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fcc3 	bl	8008fa4 <USBD_CtlError>
      break;
 800861e:	bf00      	nop
  }

  return ret;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop

0800862c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008642:	2b40      	cmp	r3, #64	@ 0x40
 8008644:	d005      	beq.n	8008652 <USBD_StdItfReq+0x26>
 8008646:	2b40      	cmp	r3, #64	@ 0x40
 8008648:	d82e      	bhi.n	80086a8 <USBD_StdItfReq+0x7c>
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <USBD_StdItfReq+0x26>
 800864e:	2b20      	cmp	r3, #32
 8008650:	d12a      	bne.n	80086a8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008658:	3b01      	subs	r3, #1
 800865a:	2b02      	cmp	r3, #2
 800865c:	d81d      	bhi.n	800869a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	889b      	ldrh	r3, [r3, #4]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	d813      	bhi.n	8008690 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
 8008676:	4603      	mov	r3, r0
 8008678:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	88db      	ldrh	r3, [r3, #6]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d110      	bne.n	80086a4 <USBD_StdItfReq+0x78>
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10d      	bne.n	80086a4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fd53 	bl	8009134 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800868e:	e009      	b.n	80086a4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fc86 	bl	8008fa4 <USBD_CtlError>
          break;
 8008698:	e004      	b.n	80086a4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fc81 	bl	8008fa4 <USBD_CtlError>
          break;
 80086a2:	e000      	b.n	80086a6 <USBD_StdItfReq+0x7a>
          break;
 80086a4:	bf00      	nop
      }
      break;
 80086a6:	e004      	b.n	80086b2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fc7a 	bl	8008fa4 <USBD_CtlError>
      break;
 80086b0:	bf00      	nop
  }

  return USBD_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	889b      	ldrh	r3, [r3, #4]
 80086ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086d8:	2b40      	cmp	r3, #64	@ 0x40
 80086da:	d007      	beq.n	80086ec <USBD_StdEPReq+0x30>
 80086dc:	2b40      	cmp	r3, #64	@ 0x40
 80086de:	f200 8146 	bhi.w	800896e <USBD_StdEPReq+0x2b2>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00a      	beq.n	80086fc <USBD_StdEPReq+0x40>
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	f040 8141 	bne.w	800896e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3
      break;
 80086fa:	e13d      	b.n	8008978 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008704:	2b20      	cmp	r3, #32
 8008706:	d10a      	bne.n	800871e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
 8008716:	4603      	mov	r3, r0
 8008718:	73fb      	strb	r3, [r7, #15]

        return ret;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	e12d      	b.n	800897a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	785b      	ldrb	r3, [r3, #1]
 8008722:	2b03      	cmp	r3, #3
 8008724:	d007      	beq.n	8008736 <USBD_StdEPReq+0x7a>
 8008726:	2b03      	cmp	r3, #3
 8008728:	f300 811b 	bgt.w	8008962 <USBD_StdEPReq+0x2a6>
 800872c:	2b00      	cmp	r3, #0
 800872e:	d072      	beq.n	8008816 <USBD_StdEPReq+0x15a>
 8008730:	2b01      	cmp	r3, #1
 8008732:	d03a      	beq.n	80087aa <USBD_StdEPReq+0xee>
 8008734:	e115      	b.n	8008962 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800873c:	2b02      	cmp	r3, #2
 800873e:	d002      	beq.n	8008746 <USBD_StdEPReq+0x8a>
 8008740:	2b03      	cmp	r3, #3
 8008742:	d015      	beq.n	8008770 <USBD_StdEPReq+0xb4>
 8008744:	e02b      	b.n	800879e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00c      	beq.n	8008766 <USBD_StdEPReq+0xaa>
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	2b80      	cmp	r3, #128	@ 0x80
 8008750:	d009      	beq.n	8008766 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f003 fe18 	bl	800c38c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800875c:	2180      	movs	r1, #128	@ 0x80
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f003 fe14 	bl	800c38c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008764:	e020      	b.n	80087a8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fc1b 	bl	8008fa4 <USBD_CtlError>
              break;
 800876e:	e01b      	b.n	80087a8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	885b      	ldrh	r3, [r3, #2]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10e      	bne.n	8008796 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00b      	beq.n	8008796 <USBD_StdEPReq+0xda>
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	2b80      	cmp	r3, #128	@ 0x80
 8008782:	d008      	beq.n	8008796 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	88db      	ldrh	r3, [r3, #6]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d104      	bne.n	8008796 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f003 fdfb 	bl	800c38c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fccc 	bl	8009134 <USBD_CtlSendStatus>

              break;
 800879c:	e004      	b.n	80087a8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fbff 	bl	8008fa4 <USBD_CtlError>
              break;
 80087a6:	bf00      	nop
          }
          break;
 80087a8:	e0e0      	b.n	800896c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d002      	beq.n	80087ba <USBD_StdEPReq+0xfe>
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d015      	beq.n	80087e4 <USBD_StdEPReq+0x128>
 80087b8:	e026      	b.n	8008808 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00c      	beq.n	80087da <USBD_StdEPReq+0x11e>
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	2b80      	cmp	r3, #128	@ 0x80
 80087c4:	d009      	beq.n	80087da <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f003 fdde 	bl	800c38c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80087d0:	2180      	movs	r1, #128	@ 0x80
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f003 fdda 	bl	800c38c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087d8:	e01c      	b.n	8008814 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fbe1 	bl	8008fa4 <USBD_CtlError>
              break;
 80087e2:	e017      	b.n	8008814 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	885b      	ldrh	r3, [r3, #2]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d112      	bne.n	8008812 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d004      	beq.n	8008800 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f003 fde5 	bl	800c3ca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fc97 	bl	8009134 <USBD_CtlSendStatus>
              }
              break;
 8008806:	e004      	b.n	8008812 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fbca 	bl	8008fa4 <USBD_CtlError>
              break;
 8008810:	e000      	b.n	8008814 <USBD_StdEPReq+0x158>
              break;
 8008812:	bf00      	nop
          }
          break;
 8008814:	e0aa      	b.n	800896c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800881c:	2b02      	cmp	r3, #2
 800881e:	d002      	beq.n	8008826 <USBD_StdEPReq+0x16a>
 8008820:	2b03      	cmp	r3, #3
 8008822:	d032      	beq.n	800888a <USBD_StdEPReq+0x1ce>
 8008824:	e097      	b.n	8008956 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d007      	beq.n	800883c <USBD_StdEPReq+0x180>
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	2b80      	cmp	r3, #128	@ 0x80
 8008830:	d004      	beq.n	800883c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fbb5 	bl	8008fa4 <USBD_CtlError>
                break;
 800883a:	e091      	b.n	8008960 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800883c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008840:	2b00      	cmp	r3, #0
 8008842:	da0b      	bge.n	800885c <USBD_StdEPReq+0x1a0>
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	3310      	adds	r3, #16
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	4413      	add	r3, r2
 8008858:	3304      	adds	r3, #4
 800885a:	e00b      	b.n	8008874 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008862:	4613      	mov	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	3304      	adds	r3, #4
 8008874:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	2202      	movs	r2, #2
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fbf8 	bl	8009078 <USBD_CtlSendData>
              break;
 8008888:	e06a      	b.n	8008960 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800888a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800888e:	2b00      	cmp	r3, #0
 8008890:	da11      	bge.n	80088b6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	f003 020f 	and.w	r2, r3, #15
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	3318      	adds	r3, #24
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d117      	bne.n	80088dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fb78 	bl	8008fa4 <USBD_CtlError>
                  break;
 80088b4:	e054      	b.n	8008960 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
 80088b8:	f003 020f 	and.w	r2, r3, #15
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d104      	bne.n	80088dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fb65 	bl	8008fa4 <USBD_CtlError>
                  break;
 80088da:	e041      	b.n	8008960 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	da0b      	bge.n	80088fc <USBD_StdEPReq+0x240>
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088ea:	4613      	mov	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	3310      	adds	r3, #16
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	4413      	add	r3, r2
 80088f8:	3304      	adds	r3, #4
 80088fa:	e00b      	b.n	8008914 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008902:	4613      	mov	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	3304      	adds	r3, #4
 8008914:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <USBD_StdEPReq+0x266>
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b80      	cmp	r3, #128	@ 0x80
 8008920:	d103      	bne.n	800892a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	e00e      	b.n	8008948 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800892a:	7bbb      	ldrb	r3, [r7, #14]
 800892c:	4619      	mov	r1, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f003 fd6a 	bl	800c408 <USBD_LL_IsStallEP>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2201      	movs	r2, #1
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	e002      	b.n	8008948 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2202      	movs	r2, #2
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fb92 	bl	8009078 <USBD_CtlSendData>
              break;
 8008954:	e004      	b.n	8008960 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fb23 	bl	8008fa4 <USBD_CtlError>
              break;
 800895e:	bf00      	nop
          }
          break;
 8008960:	e004      	b.n	800896c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fb1d 	bl	8008fa4 <USBD_CtlError>
          break;
 800896a:	bf00      	nop
      }
      break;
 800896c:	e004      	b.n	8008978 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fb17 	bl	8008fa4 <USBD_CtlError>
      break;
 8008976:	bf00      	nop
  }

  return ret;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
	...

08008984 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008992:	2300      	movs	r3, #0
 8008994:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	885b      	ldrh	r3, [r3, #2]
 800899e:	0a1b      	lsrs	r3, r3, #8
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	3b01      	subs	r3, #1
 80089a4:	2b06      	cmp	r3, #6
 80089a6:	f200 8128 	bhi.w	8008bfa <USBD_GetDescriptor+0x276>
 80089aa:	a201      	add	r2, pc, #4	@ (adr r2, 80089b0 <USBD_GetDescriptor+0x2c>)
 80089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b0:	080089cd 	.word	0x080089cd
 80089b4:	080089e5 	.word	0x080089e5
 80089b8:	08008a25 	.word	0x08008a25
 80089bc:	08008bfb 	.word	0x08008bfb
 80089c0:	08008bfb 	.word	0x08008bfb
 80089c4:	08008b9b 	.word	0x08008b9b
 80089c8:	08008bc7 	.word	0x08008bc7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	7c12      	ldrb	r2, [r2, #16]
 80089d8:	f107 0108 	add.w	r1, r7, #8
 80089dc:	4610      	mov	r0, r2
 80089de:	4798      	blx	r3
 80089e0:	60f8      	str	r0, [r7, #12]
      break;
 80089e2:	e112      	b.n	8008c0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	7c1b      	ldrb	r3, [r3, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10d      	bne.n	8008a08 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f4:	f107 0208 	add.w	r2, r7, #8
 80089f8:	4610      	mov	r0, r2
 80089fa:	4798      	blx	r3
 80089fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	3301      	adds	r3, #1
 8008a02:	2202      	movs	r2, #2
 8008a04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a06:	e100      	b.n	8008c0a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a10:	f107 0208 	add.w	r2, r7, #8
 8008a14:	4610      	mov	r0, r2
 8008a16:	4798      	blx	r3
 8008a18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	2202      	movs	r2, #2
 8008a20:	701a      	strb	r2, [r3, #0]
      break;
 8008a22:	e0f2      	b.n	8008c0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	885b      	ldrh	r3, [r3, #2]
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b05      	cmp	r3, #5
 8008a2c:	f200 80ac 	bhi.w	8008b88 <USBD_GetDescriptor+0x204>
 8008a30:	a201      	add	r2, pc, #4	@ (adr r2, 8008a38 <USBD_GetDescriptor+0xb4>)
 8008a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a36:	bf00      	nop
 8008a38:	08008a51 	.word	0x08008a51
 8008a3c:	08008a85 	.word	0x08008a85
 8008a40:	08008ab9 	.word	0x08008ab9
 8008a44:	08008aed 	.word	0x08008aed
 8008a48:	08008b21 	.word	0x08008b21
 8008a4c:	08008b55 	.word	0x08008b55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00b      	beq.n	8008a74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	7c12      	ldrb	r2, [r2, #16]
 8008a68:	f107 0108 	add.w	r1, r7, #8
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
 8008a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a72:	e091      	b.n	8008b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa94 	bl	8008fa4 <USBD_CtlError>
            err++;
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	72fb      	strb	r3, [r7, #11]
          break;
 8008a82:	e089      	b.n	8008b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	7c12      	ldrb	r2, [r2, #16]
 8008a9c:	f107 0108 	add.w	r1, r7, #8
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	4798      	blx	r3
 8008aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aa6:	e077      	b.n	8008b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fa7a 	bl	8008fa4 <USBD_CtlError>
            err++;
 8008ab0:	7afb      	ldrb	r3, [r7, #11]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ab6:	e06f      	b.n	8008b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00b      	beq.n	8008adc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	7c12      	ldrb	r2, [r2, #16]
 8008ad0:	f107 0108 	add.w	r1, r7, #8
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	4798      	blx	r3
 8008ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ada:	e05d      	b.n	8008b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fa60 	bl	8008fa4 <USBD_CtlError>
            err++;
 8008ae4:	7afb      	ldrb	r3, [r7, #11]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8008aea:	e055      	b.n	8008b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00b      	beq.n	8008b10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	7c12      	ldrb	r2, [r2, #16]
 8008b04:	f107 0108 	add.w	r1, r7, #8
 8008b08:	4610      	mov	r0, r2
 8008b0a:	4798      	blx	r3
 8008b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b0e:	e043      	b.n	8008b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fa46 	bl	8008fa4 <USBD_CtlError>
            err++;
 8008b18:	7afb      	ldrb	r3, [r7, #11]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b1e:	e03b      	b.n	8008b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	7c12      	ldrb	r2, [r2, #16]
 8008b38:	f107 0108 	add.w	r1, r7, #8
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	4798      	blx	r3
 8008b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b42:	e029      	b.n	8008b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fa2c 	bl	8008fa4 <USBD_CtlError>
            err++;
 8008b4c:	7afb      	ldrb	r3, [r7, #11]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	72fb      	strb	r3, [r7, #11]
          break;
 8008b52:	e021      	b.n	8008b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	7c12      	ldrb	r2, [r2, #16]
 8008b6c:	f107 0108 	add.w	r1, r7, #8
 8008b70:	4610      	mov	r0, r2
 8008b72:	4798      	blx	r3
 8008b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b76:	e00f      	b.n	8008b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fa12 	bl	8008fa4 <USBD_CtlError>
            err++;
 8008b80:	7afb      	ldrb	r3, [r7, #11]
 8008b82:	3301      	adds	r3, #1
 8008b84:	72fb      	strb	r3, [r7, #11]
          break;
 8008b86:	e007      	b.n	8008b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa0a 	bl	8008fa4 <USBD_CtlError>
          err++;
 8008b90:	7afb      	ldrb	r3, [r7, #11]
 8008b92:	3301      	adds	r3, #1
 8008b94:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008b96:	e038      	b.n	8008c0a <USBD_GetDescriptor+0x286>
 8008b98:	e037      	b.n	8008c0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	7c1b      	ldrb	r3, [r3, #16]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008baa:	f107 0208 	add.w	r2, r7, #8
 8008bae:	4610      	mov	r0, r2
 8008bb0:	4798      	blx	r3
 8008bb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bb4:	e029      	b.n	8008c0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f9f3 	bl	8008fa4 <USBD_CtlError>
        err++;
 8008bbe:	7afb      	ldrb	r3, [r7, #11]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008bc4:	e021      	b.n	8008c0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	7c1b      	ldrb	r3, [r3, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10d      	bne.n	8008bea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd6:	f107 0208 	add.w	r2, r7, #8
 8008bda:	4610      	mov	r0, r2
 8008bdc:	4798      	blx	r3
 8008bde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3301      	adds	r3, #1
 8008be4:	2207      	movs	r2, #7
 8008be6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008be8:	e00f      	b.n	8008c0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f9d9 	bl	8008fa4 <USBD_CtlError>
        err++;
 8008bf2:	7afb      	ldrb	r3, [r7, #11]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	72fb      	strb	r3, [r7, #11]
      break;
 8008bf8:	e007      	b.n	8008c0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f9d1 	bl	8008fa4 <USBD_CtlError>
      err++;
 8008c02:	7afb      	ldrb	r3, [r7, #11]
 8008c04:	3301      	adds	r3, #1
 8008c06:	72fb      	strb	r3, [r7, #11]
      break;
 8008c08:	bf00      	nop
  }

  if (err != 0U)
 8008c0a:	7afb      	ldrb	r3, [r7, #11]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d11c      	bne.n	8008c4a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008c10:	893b      	ldrh	r3, [r7, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d011      	beq.n	8008c3a <USBD_GetDescriptor+0x2b6>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	88db      	ldrh	r3, [r3, #6]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00d      	beq.n	8008c3a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	88da      	ldrh	r2, [r3, #6]
 8008c22:	893b      	ldrh	r3, [r7, #8]
 8008c24:	4293      	cmp	r3, r2
 8008c26:	bf28      	it	cs
 8008c28:	4613      	movcs	r3, r2
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c2e:	893b      	ldrh	r3, [r7, #8]
 8008c30:	461a      	mov	r2, r3
 8008c32:	68f9      	ldr	r1, [r7, #12]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fa1f 	bl	8009078 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	88db      	ldrh	r3, [r3, #6]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d104      	bne.n	8008c4c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fa76 	bl	8009134 <USBD_CtlSendStatus>
 8008c48:	e000      	b.n	8008c4c <USBD_GetDescriptor+0x2c8>
    return;
 8008c4a:	bf00      	nop
    }
  }
}
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop

08008c54 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	889b      	ldrh	r3, [r3, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d130      	bne.n	8008cc8 <USBD_SetAddress+0x74>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d12c      	bne.n	8008cc8 <USBD_SetAddress+0x74>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	885b      	ldrh	r3, [r3, #2]
 8008c72:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c74:	d828      	bhi.n	8008cc8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	885b      	ldrh	r3, [r3, #2]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d104      	bne.n	8008c96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f988 	bl	8008fa4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c94:	e01d      	b.n	8008cd2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	7bfa      	ldrb	r2, [r7, #15]
 8008c9a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f003 fbdb 	bl	800c45e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fa43 	bl	8009134 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbc:	e009      	b.n	8008cd2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc6:	e004      	b.n	8008cd2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f96a 	bl	8008fa4 <USBD_CtlError>
  }
}
 8008cd0:	bf00      	nop
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
	...

08008cdc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	885b      	ldrh	r3, [r3, #2]
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	4b41      	ldr	r3, [pc, #260]	@ (8008df4 <USBD_SetConfig+0x118>)
 8008cee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cf0:	4b40      	ldr	r3, [pc, #256]	@ (8008df4 <USBD_SetConfig+0x118>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d904      	bls.n	8008d02 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f952 	bl	8008fa4 <USBD_CtlError>
 8008d00:	e075      	b.n	8008dee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d002      	beq.n	8008d12 <USBD_SetConfig+0x36>
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d023      	beq.n	8008d58 <USBD_SetConfig+0x7c>
 8008d10:	e062      	b.n	8008dd8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008d12:	4b38      	ldr	r3, [pc, #224]	@ (8008df4 <USBD_SetConfig+0x118>)
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d01a      	beq.n	8008d50 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008d1a:	4b36      	ldr	r3, [pc, #216]	@ (8008df4 <USBD_SetConfig+0x118>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2203      	movs	r2, #3
 8008d28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d2c:	4b31      	ldr	r3, [pc, #196]	@ (8008df4 <USBD_SetConfig+0x118>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7ff f9e7 	bl	8008106 <USBD_SetClassConfig>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d104      	bne.n	8008d48 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f92f 	bl	8008fa4 <USBD_CtlError>
            return;
 8008d46:	e052      	b.n	8008dee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f9f3 	bl	8009134 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008d4e:	e04e      	b.n	8008dee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f9ef 	bl	8009134 <USBD_CtlSendStatus>
        break;
 8008d56:	e04a      	b.n	8008dee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008d58:	4b26      	ldr	r3, [pc, #152]	@ (8008df4 <USBD_SetConfig+0x118>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d112      	bne.n	8008d86 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008d68:	4b22      	ldr	r3, [pc, #136]	@ (8008df4 <USBD_SetConfig+0x118>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008d72:	4b20      	ldr	r3, [pc, #128]	@ (8008df4 <USBD_SetConfig+0x118>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff f9e3 	bl	8008144 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f9d8 	bl	8009134 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008d84:	e033      	b.n	8008dee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008d86:	4b1b      	ldr	r3, [pc, #108]	@ (8008df4 <USBD_SetConfig+0x118>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d01d      	beq.n	8008dd0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff f9d1 	bl	8008144 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008da2:	4b14      	ldr	r3, [pc, #80]	@ (8008df4 <USBD_SetConfig+0x118>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008dac:	4b11      	ldr	r3, [pc, #68]	@ (8008df4 <USBD_SetConfig+0x118>)
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff f9a7 	bl	8008106 <USBD_SetClassConfig>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d104      	bne.n	8008dc8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f8ef 	bl	8008fa4 <USBD_CtlError>
            return;
 8008dc6:	e012      	b.n	8008dee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f9b3 	bl	8009134 <USBD_CtlSendStatus>
        break;
 8008dce:	e00e      	b.n	8008dee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f9af 	bl	8009134 <USBD_CtlSendStatus>
        break;
 8008dd6:	e00a      	b.n	8008dee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f8e2 	bl	8008fa4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008de0:	4b04      	ldr	r3, [pc, #16]	@ (8008df4 <USBD_SetConfig+0x118>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff f9ac 	bl	8008144 <USBD_ClrClassConfig>
        break;
 8008dec:	bf00      	nop
    }
  }
}
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	200002bc 	.word	0x200002bc

08008df8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	88db      	ldrh	r3, [r3, #6]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d004      	beq.n	8008e14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f8c9 	bl	8008fa4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e12:	e022      	b.n	8008e5a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	dc02      	bgt.n	8008e24 <USBD_GetConfig+0x2c>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	dc03      	bgt.n	8008e2a <USBD_GetConfig+0x32>
 8008e22:	e015      	b.n	8008e50 <USBD_GetConfig+0x58>
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d00b      	beq.n	8008e40 <USBD_GetConfig+0x48>
 8008e28:	e012      	b.n	8008e50 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3308      	adds	r3, #8
 8008e34:	2201      	movs	r2, #1
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f91d 	bl	8009078 <USBD_CtlSendData>
        break;
 8008e3e:	e00c      	b.n	8008e5a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3304      	adds	r3, #4
 8008e44:	2201      	movs	r2, #1
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f915 	bl	8009078 <USBD_CtlSendData>
        break;
 8008e4e:	e004      	b.n	8008e5a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f8a6 	bl	8008fa4 <USBD_CtlError>
        break;
 8008e58:	bf00      	nop
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e72:	3b01      	subs	r3, #1
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d81e      	bhi.n	8008eb6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	88db      	ldrh	r3, [r3, #6]
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d004      	beq.n	8008e8a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f88e 	bl	8008fa4 <USBD_CtlError>
        break;
 8008e88:	e01a      	b.n	8008ec0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d005      	beq.n	8008ea6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f043 0202 	orr.w	r2, r3, #2
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	330c      	adds	r3, #12
 8008eaa:	2202      	movs	r2, #2
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f8e2 	bl	8009078 <USBD_CtlSendData>
      break;
 8008eb4:	e004      	b.n	8008ec0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f873 	bl	8008fa4 <USBD_CtlError>
      break;
 8008ebe:	bf00      	nop
  }
}
 8008ec0:	bf00      	nop
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	885b      	ldrh	r3, [r3, #2]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d106      	bne.n	8008ee8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f926 	bl	8009134 <USBD_CtlSendStatus>
  }
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f00:	3b01      	subs	r3, #1
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d80b      	bhi.n	8008f1e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	885b      	ldrh	r3, [r3, #2]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d10c      	bne.n	8008f28 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f90c 	bl	8009134 <USBD_CtlSendStatus>
      }
      break;
 8008f1c:	e004      	b.n	8008f28 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f83f 	bl	8008fa4 <USBD_CtlError>
      break;
 8008f26:	e000      	b.n	8008f2a <USBD_ClrFeature+0x3a>
      break;
 8008f28:	bf00      	nop
  }
}
 8008f2a:	bf00      	nop
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b083      	sub	sp, #12
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781a      	ldrb	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	785a      	ldrb	r2, [r3, #1]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	3302      	adds	r3, #2
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	461a      	mov	r2, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	3303      	adds	r3, #3
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	021b      	lsls	r3, r3, #8
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	4413      	add	r3, r2
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	3304      	adds	r3, #4
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	3305      	adds	r3, #5
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	4413      	add	r3, r2
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	3306      	adds	r3, #6
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	461a      	mov	r2, r3
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	3307      	adds	r3, #7
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	021b      	lsls	r3, r3, #8
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	4413      	add	r3, r2
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	80da      	strh	r2, [r3, #6]

}
 8008f9a:	bf00      	nop
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bc80      	pop	{r7}
 8008fa2:	4770      	bx	lr

08008fa4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008fae:	2180      	movs	r1, #128	@ 0x80
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f003 f9eb 	bl	800c38c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f003 f9e7 	bl	800c38c <USBD_LL_StallEP>
}
 8008fbe:	bf00      	nop
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b086      	sub	sp, #24
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d032      	beq.n	8009042 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 f834 	bl	800904a <USBD_GetLen>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	005b      	lsls	r3, r3, #1
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	75fa      	strb	r2, [r7, #23]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	7812      	ldrb	r2, [r2, #0]
 8009000:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009002:	7dfb      	ldrb	r3, [r7, #23]
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	75fa      	strb	r2, [r7, #23]
 8009008:	461a      	mov	r2, r3
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	2203      	movs	r2, #3
 8009010:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009012:	e012      	b.n	800903a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	60fa      	str	r2, [r7, #12]
 800901a:	7dfa      	ldrb	r2, [r7, #23]
 800901c:	1c51      	adds	r1, r2, #1
 800901e:	75f9      	strb	r1, [r7, #23]
 8009020:	4611      	mov	r1, r2
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	440a      	add	r2, r1
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	1c5a      	adds	r2, r3, #1
 800902e:	75fa      	strb	r2, [r7, #23]
 8009030:	461a      	mov	r2, r3
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	4413      	add	r3, r2
 8009036:	2200      	movs	r2, #0
 8009038:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1e8      	bne.n	8009014 <USBD_GetString+0x4e>
    }
  }
}
 8009042:	bf00      	nop
 8009044:	3718      	adds	r7, #24
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800904a:	b480      	push	{r7}
 800904c:	b085      	sub	sp, #20
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009056:	e005      	b.n	8009064 <USBD_GetLen+0x1a>
  {
    len++;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	3301      	adds	r3, #1
 800905c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	3301      	adds	r3, #1
 8009062:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1f5      	bne.n	8009058 <USBD_GetLen+0xe>
  }

  return len;
 800906c:	7bfb      	ldrb	r3, [r7, #15]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr

08009078 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	4613      	mov	r3, r2
 8009084:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2202      	movs	r2, #2
 800908a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800908e:	88fa      	ldrh	r2, [r7, #6]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009094:	88fa      	ldrh	r2, [r7, #6]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800909a:	88fb      	ldrh	r3, [r7, #6]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	2100      	movs	r1, #0
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f003 f9fb 	bl	800c49c <USBD_LL_Transmit>

  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	4613      	mov	r3, r2
 80090bc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090be:	88fb      	ldrh	r3, [r7, #6]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	2100      	movs	r1, #0
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f003 f9e9 	bl	800c49c <USBD_LL_Transmit>

  return USBD_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	4613      	mov	r3, r2
 80090e0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2203      	movs	r2, #3
 80090e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80090ea:	88fa      	ldrh	r2, [r7, #6]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80090f2:	88fa      	ldrh	r2, [r7, #6]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090fa:	88fb      	ldrh	r3, [r7, #6]
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	2100      	movs	r1, #0
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f003 f9ee 	bl	800c4e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	4613      	mov	r3, r2
 800911c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800911e:	88fb      	ldrh	r3, [r7, #6]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	2100      	movs	r1, #0
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f003 f9dc 	bl	800c4e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2204      	movs	r2, #4
 8009140:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009144:	2300      	movs	r3, #0
 8009146:	2200      	movs	r2, #0
 8009148:	2100      	movs	r1, #0
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f003 f9a6 	bl	800c49c <USBD_LL_Transmit>

  return USBD_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2205      	movs	r2, #5
 8009166:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800916a:	2300      	movs	r3, #0
 800916c:	2200      	movs	r2, #0
 800916e:	2100      	movs	r1, #0
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f003 f9b6 	bl	800c4e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <__NVIC_SetPriority>:
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	6039      	str	r1, [r7, #0]
 800918a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800918c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009190:	2b00      	cmp	r3, #0
 8009192:	db0a      	blt.n	80091aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	b2da      	uxtb	r2, r3
 8009198:	490c      	ldr	r1, [pc, #48]	@ (80091cc <__NVIC_SetPriority+0x4c>)
 800919a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800919e:	0112      	lsls	r2, r2, #4
 80091a0:	b2d2      	uxtb	r2, r2
 80091a2:	440b      	add	r3, r1
 80091a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80091a8:	e00a      	b.n	80091c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	4908      	ldr	r1, [pc, #32]	@ (80091d0 <__NVIC_SetPriority+0x50>)
 80091b0:	79fb      	ldrb	r3, [r7, #7]
 80091b2:	f003 030f 	and.w	r3, r3, #15
 80091b6:	3b04      	subs	r3, #4
 80091b8:	0112      	lsls	r2, r2, #4
 80091ba:	b2d2      	uxtb	r2, r2
 80091bc:	440b      	add	r3, r1
 80091be:	761a      	strb	r2, [r3, #24]
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bc80      	pop	{r7}
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	e000e100 	.word	0xe000e100
 80091d0:	e000ed00 	.word	0xe000ed00

080091d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80091d8:	4b05      	ldr	r3, [pc, #20]	@ (80091f0 <SysTick_Handler+0x1c>)
 80091da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80091dc:	f001 fd38 	bl	800ac50 <xTaskGetSchedulerState>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d001      	beq.n	80091ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80091e6:	f002 fadf 	bl	800b7a8 <xPortSysTickHandler>
  }
}
 80091ea:	bf00      	nop
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	e000e010 	.word	0xe000e010

080091f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80091f8:	2100      	movs	r1, #0
 80091fa:	f06f 0004 	mvn.w	r0, #4
 80091fe:	f7ff ffbf 	bl	8009180 <__NVIC_SetPriority>
#endif
}
 8009202:	bf00      	nop
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800920e:	f3ef 8305 	mrs	r3, IPSR
 8009212:	603b      	str	r3, [r7, #0]
  return(result);
 8009214:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800921a:	f06f 0305 	mvn.w	r3, #5
 800921e:	607b      	str	r3, [r7, #4]
 8009220:	e00c      	b.n	800923c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009222:	4b09      	ldr	r3, [pc, #36]	@ (8009248 <osKernelInitialize+0x40>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d105      	bne.n	8009236 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800922a:	4b07      	ldr	r3, [pc, #28]	@ (8009248 <osKernelInitialize+0x40>)
 800922c:	2201      	movs	r2, #1
 800922e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009230:	2300      	movs	r3, #0
 8009232:	607b      	str	r3, [r7, #4]
 8009234:	e002      	b.n	800923c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009236:	f04f 33ff 	mov.w	r3, #4294967295
 800923a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800923c:	687b      	ldr	r3, [r7, #4]
}
 800923e:	4618      	mov	r0, r3
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	bc80      	pop	{r7}
 8009246:	4770      	bx	lr
 8009248:	200002c0 	.word	0x200002c0

0800924c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009252:	f3ef 8305 	mrs	r3, IPSR
 8009256:	603b      	str	r3, [r7, #0]
  return(result);
 8009258:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <osKernelStart+0x1a>
    stat = osErrorISR;
 800925e:	f06f 0305 	mvn.w	r3, #5
 8009262:	607b      	str	r3, [r7, #4]
 8009264:	e010      	b.n	8009288 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009266:	4b0b      	ldr	r3, [pc, #44]	@ (8009294 <osKernelStart+0x48>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d109      	bne.n	8009282 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800926e:	f7ff ffc1 	bl	80091f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009272:	4b08      	ldr	r3, [pc, #32]	@ (8009294 <osKernelStart+0x48>)
 8009274:	2202      	movs	r2, #2
 8009276:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009278:	f001 f88a 	bl	800a390 <vTaskStartScheduler>
      stat = osOK;
 800927c:	2300      	movs	r3, #0
 800927e:	607b      	str	r3, [r7, #4]
 8009280:	e002      	b.n	8009288 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009282:	f04f 33ff 	mov.w	r3, #4294967295
 8009286:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009288:	687b      	ldr	r3, [r7, #4]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	200002c0 	.word	0x200002c0

08009298 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009298:	b580      	push	{r7, lr}
 800929a:	b08e      	sub	sp, #56	@ 0x38
 800929c:	af04      	add	r7, sp, #16
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80092a4:	2300      	movs	r3, #0
 80092a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092a8:	f3ef 8305 	mrs	r3, IPSR
 80092ac:	617b      	str	r3, [r7, #20]
  return(result);
 80092ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d17e      	bne.n	80093b2 <osThreadNew+0x11a>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d07b      	beq.n	80093b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80092ba:	2380      	movs	r3, #128	@ 0x80
 80092bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80092be:	2318      	movs	r3, #24
 80092c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80092c2:	2300      	movs	r3, #0
 80092c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80092c6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d045      	beq.n	800935e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <osThreadNew+0x48>
        name = attr->name;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d008      	beq.n	8009306 <osThreadNew+0x6e>
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	2b38      	cmp	r3, #56	@ 0x38
 80092f8:	d805      	bhi.n	8009306 <osThreadNew+0x6e>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <osThreadNew+0x72>
        return (NULL);
 8009306:	2300      	movs	r3, #0
 8009308:	e054      	b.n	80093b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	089b      	lsrs	r3, r3, #2
 8009318:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00e      	beq.n	8009340 <osThreadNew+0xa8>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	2ba7      	cmp	r3, #167	@ 0xa7
 8009328:	d90a      	bls.n	8009340 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800932e:	2b00      	cmp	r3, #0
 8009330:	d006      	beq.n	8009340 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <osThreadNew+0xa8>
        mem = 1;
 800933a:	2301      	movs	r3, #1
 800933c:	61bb      	str	r3, [r7, #24]
 800933e:	e010      	b.n	8009362 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10c      	bne.n	8009362 <osThreadNew+0xca>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d108      	bne.n	8009362 <osThreadNew+0xca>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d104      	bne.n	8009362 <osThreadNew+0xca>
          mem = 0;
 8009358:	2300      	movs	r3, #0
 800935a:	61bb      	str	r3, [r7, #24]
 800935c:	e001      	b.n	8009362 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d110      	bne.n	800938a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009370:	9202      	str	r2, [sp, #8]
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	6a3a      	ldr	r2, [r7, #32]
 800937c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 fe12 	bl	8009fa8 <xTaskCreateStatic>
 8009384:	4603      	mov	r3, r0
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	e013      	b.n	80093b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d110      	bne.n	80093b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	b29a      	uxth	r2, r3
 8009394:	f107 0310 	add.w	r3, r7, #16
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f000 fe60 	bl	800a068 <xTaskCreate>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d001      	beq.n	80093b2 <osThreadNew+0x11a>
            hTask = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80093b2:	693b      	ldr	r3, [r7, #16]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3728      	adds	r7, #40	@ 0x28
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093c4:	f3ef 8305 	mrs	r3, IPSR
 80093c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80093ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <osDelay+0x1c>
    stat = osErrorISR;
 80093d0:	f06f 0305 	mvn.w	r3, #5
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	e007      	b.n	80093e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80093d8:	2300      	movs	r3, #0
 80093da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 ff9e 	bl	800a324 <vTaskDelay>
    }
  }

  return (stat);
 80093e8:	68fb      	ldr	r3, [r7, #12]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4a06      	ldr	r2, [pc, #24]	@ (800941c <vApplicationGetIdleTaskMemory+0x28>)
 8009404:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	4a05      	ldr	r2, [pc, #20]	@ (8009420 <vApplicationGetIdleTaskMemory+0x2c>)
 800940a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2280      	movs	r2, #128	@ 0x80
 8009410:	601a      	str	r2, [r3, #0]
}
 8009412:	bf00      	nop
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr
 800941c:	200002c4 	.word	0x200002c4
 8009420:	2000036c 	.word	0x2000036c

08009424 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4a07      	ldr	r2, [pc, #28]	@ (8009450 <vApplicationGetTimerTaskMemory+0x2c>)
 8009434:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	4a06      	ldr	r2, [pc, #24]	@ (8009454 <vApplicationGetTimerTaskMemory+0x30>)
 800943a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009442:	601a      	str	r2, [r3, #0]
}
 8009444:	bf00      	nop
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	bc80      	pop	{r7}
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	2000056c 	.word	0x2000056c
 8009454:	20000614 	.word	0x20000614

08009458 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f103 0208 	add.w	r2, r3, #8
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f04f 32ff 	mov.w	r2, #4294967295
 8009470:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f103 0208 	add.w	r2, r3, #8
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f103 0208 	add.w	r2, r3, #8
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	bc80      	pop	{r7}
 8009494:	4770      	bx	lr

08009496 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009496:	b480      	push	{r7}
 8009498:	b083      	sub	sp, #12
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bc80      	pop	{r7}
 80094ac:	4770      	bx	lr

080094ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094ae:	b480      	push	{r7}
 80094b0:	b085      	sub	sp, #20
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	1c5a      	adds	r2, r3, #1
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	601a      	str	r2, [r3, #0]
}
 80094ea:	bf00      	nop
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bc80      	pop	{r7}
 80094f2:	4770      	bx	lr

080094f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950a:	d103      	bne.n	8009514 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	60fb      	str	r3, [r7, #12]
 8009512:	e00c      	b.n	800952e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3308      	adds	r3, #8
 8009518:	60fb      	str	r3, [r7, #12]
 800951a:	e002      	b.n	8009522 <vListInsert+0x2e>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	429a      	cmp	r2, r3
 800952c:	d2f6      	bcs.n	800951c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	1c5a      	adds	r2, r3, #1
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	601a      	str	r2, [r3, #0]
}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	bc80      	pop	{r7}
 8009562:	4770      	bx	lr

08009564 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	6892      	ldr	r2, [r2, #8]
 800957a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	6852      	ldr	r2, [r2, #4]
 8009584:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	429a      	cmp	r2, r3
 800958e:	d103      	bne.n	8009598 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	1e5a      	subs	r2, r3, #1
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bc80      	pop	{r7}
 80095b4:	4770      	bx	lr
	...

080095b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80095de:	bf00      	nop
 80095e0:	bf00      	nop
 80095e2:	e7fd      	b.n	80095e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80095e4:	f002 f862 	bl	800b6ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f0:	68f9      	ldr	r1, [r7, #12]
 80095f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80095f4:	fb01 f303 	mul.w	r3, r1, r3
 80095f8:	441a      	add	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009614:	3b01      	subs	r3, #1
 8009616:	68f9      	ldr	r1, [r7, #12]
 8009618:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800961a:	fb01 f303 	mul.w	r3, r1, r3
 800961e:	441a      	add	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	22ff      	movs	r2, #255	@ 0xff
 8009628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	22ff      	movs	r2, #255	@ 0xff
 8009630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d114      	bne.n	8009664 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d01a      	beq.n	8009678 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3310      	adds	r3, #16
 8009646:	4618      	mov	r0, r3
 8009648:	f001 f93c 	bl	800a8c4 <xTaskRemoveFromEventList>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d012      	beq.n	8009678 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009652:	4b0d      	ldr	r3, [pc, #52]	@ (8009688 <xQueueGenericReset+0xd0>)
 8009654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	e009      	b.n	8009678 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	3310      	adds	r3, #16
 8009668:	4618      	mov	r0, r3
 800966a:	f7ff fef5 	bl	8009458 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3324      	adds	r3, #36	@ 0x24
 8009672:	4618      	mov	r0, r3
 8009674:	f7ff fef0 	bl	8009458 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009678:	f002 f848 	bl	800b70c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800967c:	2301      	movs	r3, #1
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	e000ed04 	.word	0xe000ed04

0800968c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08e      	sub	sp, #56	@ 0x38
 8009690:	af02      	add	r7, sp, #8
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10b      	bne.n	80096b8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
 80096b6:	e7fd      	b.n	80096b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10b      	bne.n	80096d6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096d0:	bf00      	nop
 80096d2:	bf00      	nop
 80096d4:	e7fd      	b.n	80096d2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <xQueueGenericCreateStatic+0x56>
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <xQueueGenericCreateStatic+0x5a>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e000      	b.n	80096e8 <xQueueGenericCreateStatic+0x5c>
 80096e6:	2300      	movs	r3, #0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10b      	bne.n	8009704 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	623b      	str	r3, [r7, #32]
}
 80096fe:	bf00      	nop
 8009700:	bf00      	nop
 8009702:	e7fd      	b.n	8009700 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d102      	bne.n	8009710 <xQueueGenericCreateStatic+0x84>
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <xQueueGenericCreateStatic+0x88>
 8009710:	2301      	movs	r3, #1
 8009712:	e000      	b.n	8009716 <xQueueGenericCreateStatic+0x8a>
 8009714:	2300      	movs	r3, #0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10b      	bne.n	8009732 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	61fb      	str	r3, [r7, #28]
}
 800972c:	bf00      	nop
 800972e:	bf00      	nop
 8009730:	e7fd      	b.n	800972e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009732:	2350      	movs	r3, #80	@ 0x50
 8009734:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2b50      	cmp	r3, #80	@ 0x50
 800973a:	d00b      	beq.n	8009754 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	61bb      	str	r3, [r7, #24]
}
 800974e:	bf00      	nop
 8009750:	bf00      	nop
 8009752:	e7fd      	b.n	8009750 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009754:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800975a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00d      	beq.n	800977c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009768:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800976c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	4613      	mov	r3, r2
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	68b9      	ldr	r1, [r7, #8]
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 f805 	bl	8009786 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800977c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800977e:	4618      	mov	r0, r3
 8009780:	3730      	adds	r7, #48	@ 0x30
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
 8009792:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d103      	bne.n	80097a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	601a      	str	r2, [r3, #0]
 80097a0:	e002      	b.n	80097a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097b4:	2101      	movs	r1, #1
 80097b6:	69b8      	ldr	r0, [r7, #24]
 80097b8:	f7ff fefe 	bl	80095b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	78fa      	ldrb	r2, [r7, #3]
 80097c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097c4:	bf00      	nop
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b08e      	sub	sp, #56	@ 0x38
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097da:	2300      	movs	r3, #0
 80097dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80097e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10b      	bne.n	8009800 <xQueueGenericSend+0x34>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097fa:	bf00      	nop
 80097fc:	bf00      	nop
 80097fe:	e7fd      	b.n	80097fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d103      	bne.n	800980e <xQueueGenericSend+0x42>
 8009806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <xQueueGenericSend+0x46>
 800980e:	2301      	movs	r3, #1
 8009810:	e000      	b.n	8009814 <xQueueGenericSend+0x48>
 8009812:	2300      	movs	r3, #0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10b      	bne.n	8009830 <xQueueGenericSend+0x64>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800982a:	bf00      	nop
 800982c:	bf00      	nop
 800982e:	e7fd      	b.n	800982c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b02      	cmp	r3, #2
 8009834:	d103      	bne.n	800983e <xQueueGenericSend+0x72>
 8009836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800983a:	2b01      	cmp	r3, #1
 800983c:	d101      	bne.n	8009842 <xQueueGenericSend+0x76>
 800983e:	2301      	movs	r3, #1
 8009840:	e000      	b.n	8009844 <xQueueGenericSend+0x78>
 8009842:	2300      	movs	r3, #0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10b      	bne.n	8009860 <xQueueGenericSend+0x94>
	__asm volatile
 8009848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	623b      	str	r3, [r7, #32]
}
 800985a:	bf00      	nop
 800985c:	bf00      	nop
 800985e:	e7fd      	b.n	800985c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009860:	f001 f9f6 	bl	800ac50 <xTaskGetSchedulerState>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d102      	bne.n	8009870 <xQueueGenericSend+0xa4>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <xQueueGenericSend+0xa8>
 8009870:	2301      	movs	r3, #1
 8009872:	e000      	b.n	8009876 <xQueueGenericSend+0xaa>
 8009874:	2300      	movs	r3, #0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10b      	bne.n	8009892 <xQueueGenericSend+0xc6>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	61fb      	str	r3, [r7, #28]
}
 800988c:	bf00      	nop
 800988e:	bf00      	nop
 8009890:	e7fd      	b.n	800988e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009892:	f001 ff0b 	bl	800b6ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800989a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800989e:	429a      	cmp	r2, r3
 80098a0:	d302      	bcc.n	80098a8 <xQueueGenericSend+0xdc>
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d129      	bne.n	80098fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	68b9      	ldr	r1, [r7, #8]
 80098ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098ae:	f000 fa0f 	bl	8009cd0 <prvCopyDataToQueue>
 80098b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d010      	beq.n	80098de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098be:	3324      	adds	r3, #36	@ 0x24
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 ffff 	bl	800a8c4 <xTaskRemoveFromEventList>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d013      	beq.n	80098f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098cc:	4b3f      	ldr	r3, [pc, #252]	@ (80099cc <xQueueGenericSend+0x200>)
 80098ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	e00a      	b.n	80098f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d007      	beq.n	80098f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098e4:	4b39      	ldr	r3, [pc, #228]	@ (80099cc <xQueueGenericSend+0x200>)
 80098e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098f4:	f001 ff0a 	bl	800b70c <vPortExitCritical>
				return pdPASS;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e063      	b.n	80099c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d103      	bne.n	800990a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009902:	f001 ff03 	bl	800b70c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009906:	2300      	movs	r3, #0
 8009908:	e05c      	b.n	80099c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800990a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990c:	2b00      	cmp	r3, #0
 800990e:	d106      	bne.n	800991e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009910:	f107 0314 	add.w	r3, r7, #20
 8009914:	4618      	mov	r0, r3
 8009916:	f001 f839 	bl	800a98c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800991a:	2301      	movs	r3, #1
 800991c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800991e:	f001 fef5 	bl	800b70c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009922:	f000 fda5 	bl	800a470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009926:	f001 fec1 	bl	800b6ac <vPortEnterCritical>
 800992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009930:	b25b      	sxtb	r3, r3
 8009932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009936:	d103      	bne.n	8009940 <xQueueGenericSend+0x174>
 8009938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009946:	b25b      	sxtb	r3, r3
 8009948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994c:	d103      	bne.n	8009956 <xQueueGenericSend+0x18a>
 800994e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009956:	f001 fed9 	bl	800b70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800995a:	1d3a      	adds	r2, r7, #4
 800995c:	f107 0314 	add.w	r3, r7, #20
 8009960:	4611      	mov	r1, r2
 8009962:	4618      	mov	r0, r3
 8009964:	f001 f828 	bl	800a9b8 <xTaskCheckForTimeOut>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d124      	bne.n	80099b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800996e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009970:	f000 faa6 	bl	8009ec0 <prvIsQueueFull>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d018      	beq.n	80099ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	3310      	adds	r3, #16
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	4611      	mov	r1, r2
 8009982:	4618      	mov	r0, r3
 8009984:	f000 ff4c 	bl	800a820 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800998a:	f000 fa31 	bl	8009df0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800998e:	f000 fd7d 	bl	800a48c <xTaskResumeAll>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	f47f af7c 	bne.w	8009892 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800999a:	4b0c      	ldr	r3, [pc, #48]	@ (80099cc <xQueueGenericSend+0x200>)
 800999c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099a0:	601a      	str	r2, [r3, #0]
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	e772      	b.n	8009892 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80099ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80099ae:	f000 fa1f 	bl	8009df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099b2:	f000 fd6b 	bl	800a48c <xTaskResumeAll>
 80099b6:	e76c      	b.n	8009892 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80099b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80099ba:	f000 fa19 	bl	8009df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099be:	f000 fd65 	bl	800a48c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3738      	adds	r7, #56	@ 0x38
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	e000ed04 	.word	0xe000ed04

080099d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b090      	sub	sp, #64	@ 0x40
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
 80099dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80099e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10b      	bne.n	8009a00 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80099fa:	bf00      	nop
 80099fc:	bf00      	nop
 80099fe:	e7fd      	b.n	80099fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d103      	bne.n	8009a0e <xQueueGenericSendFromISR+0x3e>
 8009a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d101      	bne.n	8009a12 <xQueueGenericSendFromISR+0x42>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e000      	b.n	8009a14 <xQueueGenericSendFromISR+0x44>
 8009a12:	2300      	movs	r3, #0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10b      	bne.n	8009a30 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a2a:	bf00      	nop
 8009a2c:	bf00      	nop
 8009a2e:	e7fd      	b.n	8009a2c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d103      	bne.n	8009a3e <xQueueGenericSendFromISR+0x6e>
 8009a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d101      	bne.n	8009a42 <xQueueGenericSendFromISR+0x72>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e000      	b.n	8009a44 <xQueueGenericSendFromISR+0x74>
 8009a42:	2300      	movs	r3, #0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10b      	bne.n	8009a60 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	623b      	str	r3, [r7, #32]
}
 8009a5a:	bf00      	nop
 8009a5c:	bf00      	nop
 8009a5e:	e7fd      	b.n	8009a5c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a60:	f001 fee6 	bl	800b830 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a64:	f3ef 8211 	mrs	r2, BASEPRI
 8009a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	61fa      	str	r2, [r7, #28]
 8009a7a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a7c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a7e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d302      	bcc.n	8009a92 <xQueueGenericSendFromISR+0xc2>
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d12f      	bne.n	8009af2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009aa8:	f000 f912 	bl	8009cd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009aac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab4:	d112      	bne.n	8009adc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d016      	beq.n	8009aec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac0:	3324      	adds	r3, #36	@ 0x24
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 fefe 	bl	800a8c4 <xTaskRemoveFromEventList>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00e      	beq.n	8009aec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	e007      	b.n	8009aec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009adc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	b25a      	sxtb	r2, r3
 8009ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009aec:	2301      	movs	r3, #1
 8009aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009af0:	e001      	b.n	8009af6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3740      	adds	r7, #64	@ 0x40
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08c      	sub	sp, #48	@ 0x30
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d10b      	bne.n	8009b3e <xQueueReceive+0x32>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	623b      	str	r3, [r7, #32]
}
 8009b38:	bf00      	nop
 8009b3a:	bf00      	nop
 8009b3c:	e7fd      	b.n	8009b3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d103      	bne.n	8009b4c <xQueueReceive+0x40>
 8009b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <xQueueReceive+0x44>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e000      	b.n	8009b52 <xQueueReceive+0x46>
 8009b50:	2300      	movs	r3, #0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10b      	bne.n	8009b6e <xQueueReceive+0x62>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	61fb      	str	r3, [r7, #28]
}
 8009b68:	bf00      	nop
 8009b6a:	bf00      	nop
 8009b6c:	e7fd      	b.n	8009b6a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b6e:	f001 f86f 	bl	800ac50 <xTaskGetSchedulerState>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d102      	bne.n	8009b7e <xQueueReceive+0x72>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d101      	bne.n	8009b82 <xQueueReceive+0x76>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e000      	b.n	8009b84 <xQueueReceive+0x78>
 8009b82:	2300      	movs	r3, #0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10b      	bne.n	8009ba0 <xQueueReceive+0x94>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	61bb      	str	r3, [r7, #24]
}
 8009b9a:	bf00      	nop
 8009b9c:	bf00      	nop
 8009b9e:	e7fd      	b.n	8009b9c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ba0:	f001 fd84 	bl	800b6ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01f      	beq.n	8009bf0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bb0:	68b9      	ldr	r1, [r7, #8]
 8009bb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bb4:	f000 f8f6 	bl	8009da4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	1e5a      	subs	r2, r3, #1
 8009bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bbe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00f      	beq.n	8009be8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bca:	3310      	adds	r3, #16
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 fe79 	bl	800a8c4 <xTaskRemoveFromEventList>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d007      	beq.n	8009be8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8009ccc <xQueueReceive+0x1c0>)
 8009bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009be8:	f001 fd90 	bl	800b70c <vPortExitCritical>
				return pdPASS;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e069      	b.n	8009cc4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d103      	bne.n	8009bfe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bf6:	f001 fd89 	bl	800b70c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e062      	b.n	8009cc4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d106      	bne.n	8009c12 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c04:	f107 0310 	add.w	r3, r7, #16
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 febf 	bl	800a98c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c12:	f001 fd7b 	bl	800b70c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c16:	f000 fc2b 	bl	800a470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c1a:	f001 fd47 	bl	800b6ac <vPortEnterCritical>
 8009c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c24:	b25b      	sxtb	r3, r3
 8009c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2a:	d103      	bne.n	8009c34 <xQueueReceive+0x128>
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c3a:	b25b      	sxtb	r3, r3
 8009c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c40:	d103      	bne.n	8009c4a <xQueueReceive+0x13e>
 8009c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c4a:	f001 fd5f 	bl	800b70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c4e:	1d3a      	adds	r2, r7, #4
 8009c50:	f107 0310 	add.w	r3, r7, #16
 8009c54:	4611      	mov	r1, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 feae 	bl	800a9b8 <xTaskCheckForTimeOut>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d123      	bne.n	8009caa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c64:	f000 f916 	bl	8009e94 <prvIsQueueEmpty>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d017      	beq.n	8009c9e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c70:	3324      	adds	r3, #36	@ 0x24
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	4611      	mov	r1, r2
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 fdd2 	bl	800a820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c7e:	f000 f8b7 	bl	8009df0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c82:	f000 fc03 	bl	800a48c <xTaskResumeAll>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d189      	bne.n	8009ba0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009ccc <xQueueReceive+0x1c0>)
 8009c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	e780      	b.n	8009ba0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ca0:	f000 f8a6 	bl	8009df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ca4:	f000 fbf2 	bl	800a48c <xTaskResumeAll>
 8009ca8:	e77a      	b.n	8009ba0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009caa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cac:	f000 f8a0 	bl	8009df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cb0:	f000 fbec 	bl	800a48c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cb6:	f000 f8ed 	bl	8009e94 <prvIsQueueEmpty>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f43f af6f 	beq.w	8009ba0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3730      	adds	r7, #48	@ 0x30
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	e000ed04 	.word	0xe000ed04

08009cd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10d      	bne.n	8009d0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d14d      	bne.n	8009d92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 ffc6 	bl	800ac8c <xTaskPriorityDisinherit>
 8009d00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	609a      	str	r2, [r3, #8]
 8009d08:	e043      	b.n	8009d92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d119      	bne.n	8009d44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6858      	ldr	r0, [r3, #4]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d18:	461a      	mov	r2, r3
 8009d1a:	68b9      	ldr	r1, [r7, #8]
 8009d1c:	f002 ff3f 	bl	800cb9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d28:	441a      	add	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	685a      	ldr	r2, [r3, #4]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d32b      	bcc.n	8009d92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	605a      	str	r2, [r3, #4]
 8009d42:	e026      	b.n	8009d92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	68d8      	ldr	r0, [r3, #12]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	68b9      	ldr	r1, [r7, #8]
 8009d50:	f002 ff25 	bl	800cb9e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	68da      	ldr	r2, [r3, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d5c:	425b      	negs	r3, r3
 8009d5e:	441a      	add	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	68da      	ldr	r2, [r3, #12]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d207      	bcs.n	8009d80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	689a      	ldr	r2, [r3, #8]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d78:	425b      	negs	r3, r3
 8009d7a:	441a      	add	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	d105      	bne.n	8009d92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009d9a:	697b      	ldr	r3, [r7, #20]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d018      	beq.n	8009de8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68da      	ldr	r2, [r3, #12]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dbe:	441a      	add	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68da      	ldr	r2, [r3, #12]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d303      	bcc.n	8009dd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68d9      	ldr	r1, [r3, #12]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de0:	461a      	mov	r2, r3
 8009de2:	6838      	ldr	r0, [r7, #0]
 8009de4:	f002 fedb 	bl	800cb9e <memcpy>
	}
}
 8009de8:	bf00      	nop
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009df8:	f001 fc58 	bl	800b6ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e04:	e011      	b.n	8009e2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d012      	beq.n	8009e34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	3324      	adds	r3, #36	@ 0x24
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 fd56 	bl	800a8c4 <xTaskRemoveFromEventList>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e1e:	f000 fe2f 	bl	800aa80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e22:	7bfb      	ldrb	r3, [r7, #15]
 8009e24:	3b01      	subs	r3, #1
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dce9      	bgt.n	8009e06 <prvUnlockQueue+0x16>
 8009e32:	e000      	b.n	8009e36 <prvUnlockQueue+0x46>
					break;
 8009e34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	22ff      	movs	r2, #255	@ 0xff
 8009e3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009e3e:	f001 fc65 	bl	800b70c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e42:	f001 fc33 	bl	800b6ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e4e:	e011      	b.n	8009e74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d012      	beq.n	8009e7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3310      	adds	r3, #16
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 fd31 	bl	800a8c4 <xTaskRemoveFromEventList>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e68:	f000 fe0a 	bl	800aa80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dce9      	bgt.n	8009e50 <prvUnlockQueue+0x60>
 8009e7c:	e000      	b.n	8009e80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	22ff      	movs	r2, #255	@ 0xff
 8009e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009e88:	f001 fc40 	bl	800b70c <vPortExitCritical>
}
 8009e8c:	bf00      	nop
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e9c:	f001 fc06 	bl	800b6ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d102      	bne.n	8009eae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	e001      	b.n	8009eb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009eb2:	f001 fc2b 	bl	800b70c <vPortExitCritical>

	return xReturn;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ec8:	f001 fbf0 	bl	800b6ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d102      	bne.n	8009ede <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	e001      	b.n	8009ee2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ee2:	f001 fc13 	bl	800b70c <vPortExitCritical>

	return xReturn;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009efa:	2300      	movs	r3, #0
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	e014      	b.n	8009f2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009f00:	4a0e      	ldr	r2, [pc, #56]	@ (8009f3c <vQueueAddToRegistry+0x4c>)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10b      	bne.n	8009f24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f0c:	490b      	ldr	r1, [pc, #44]	@ (8009f3c <vQueueAddToRegistry+0x4c>)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f16:	4a09      	ldr	r2, [pc, #36]	@ (8009f3c <vQueueAddToRegistry+0x4c>)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	00db      	lsls	r3, r3, #3
 8009f1c:	4413      	add	r3, r2
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f22:	e006      	b.n	8009f32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	3301      	adds	r3, #1
 8009f28:	60fb      	str	r3, [r7, #12]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b07      	cmp	r3, #7
 8009f2e:	d9e7      	bls.n	8009f00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f30:	bf00      	nop
 8009f32:	bf00      	nop
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bc80      	pop	{r7}
 8009f3a:	4770      	bx	lr
 8009f3c:	20000a14 	.word	0x20000a14

08009f40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f50:	f001 fbac 	bl	800b6ac <vPortEnterCritical>
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f5a:	b25b      	sxtb	r3, r3
 8009f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f60:	d103      	bne.n	8009f6a <vQueueWaitForMessageRestricted+0x2a>
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f70:	b25b      	sxtb	r3, r3
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f76:	d103      	bne.n	8009f80 <vQueueWaitForMessageRestricted+0x40>
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f80:	f001 fbc4 	bl	800b70c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d106      	bne.n	8009f9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	3324      	adds	r3, #36	@ 0x24
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 fc69 	bl	800a86c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f9a:	6978      	ldr	r0, [r7, #20]
 8009f9c:	f7ff ff28 	bl	8009df0 <prvUnlockQueue>
	}
 8009fa0:	bf00      	nop
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08e      	sub	sp, #56	@ 0x38
 8009fac:	af04      	add	r7, sp, #16
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10b      	bne.n	8009fd4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	623b      	str	r3, [r7, #32]
}
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
 8009fd2:	e7fd      	b.n	8009fd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10b      	bne.n	8009ff2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	61fb      	str	r3, [r7, #28]
}
 8009fec:	bf00      	nop
 8009fee:	bf00      	nop
 8009ff0:	e7fd      	b.n	8009fee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ff2:	23a8      	movs	r3, #168	@ 0xa8
 8009ff4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	2ba8      	cmp	r3, #168	@ 0xa8
 8009ffa:	d00b      	beq.n	800a014 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a000:	f383 8811 	msr	BASEPRI, r3
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	61bb      	str	r3, [r7, #24]
}
 800a00e:	bf00      	nop
 800a010:	bf00      	nop
 800a012:	e7fd      	b.n	800a010 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a014:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01e      	beq.n	800a05a <xTaskCreateStatic+0xb2>
 800a01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d01b      	beq.n	800a05a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a024:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a028:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a02a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02e:	2202      	movs	r2, #2
 800a030:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a034:	2300      	movs	r3, #0
 800a036:	9303      	str	r3, [sp, #12]
 800a038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03a:	9302      	str	r3, [sp, #8]
 800a03c:	f107 0314 	add.w	r3, r7, #20
 800a040:	9301      	str	r3, [sp, #4]
 800a042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	68b9      	ldr	r1, [r7, #8]
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 f851 	bl	800a0f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a052:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a054:	f000 f8f6 	bl	800a244 <prvAddNewTaskToReadyList>
 800a058:	e001      	b.n	800a05e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a05e:	697b      	ldr	r3, [r7, #20]
	}
 800a060:	4618      	mov	r0, r3
 800a062:	3728      	adds	r7, #40	@ 0x28
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08c      	sub	sp, #48	@ 0x30
 800a06c:	af04      	add	r7, sp, #16
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	4613      	mov	r3, r2
 800a076:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a078:	88fb      	ldrh	r3, [r7, #6]
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4618      	mov	r0, r3
 800a07e:	f001 fc17 	bl	800b8b0 <pvPortMalloc>
 800a082:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00e      	beq.n	800a0a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a08a:	20a8      	movs	r0, #168	@ 0xa8
 800a08c:	f001 fc10 	bl	800b8b0 <pvPortMalloc>
 800a090:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d003      	beq.n	800a0a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a09e:	e005      	b.n	800a0ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0a0:	6978      	ldr	r0, [r7, #20]
 800a0a2:	f001 fcd3 	bl	800ba4c <vPortFree>
 800a0a6:	e001      	b.n	800a0ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d017      	beq.n	800a0e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0ba:	88fa      	ldrh	r2, [r7, #6]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	9303      	str	r3, [sp, #12]
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	9302      	str	r3, [sp, #8]
 800a0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 f80f 	bl	800a0f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0d6:	69f8      	ldr	r0, [r7, #28]
 800a0d8:	f000 f8b4 	bl	800a244 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	61bb      	str	r3, [r7, #24]
 800a0e0:	e002      	b.n	800a0e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
	}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3720      	adds	r7, #32
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a104:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	461a      	mov	r2, r3
 800a10c:	21a5      	movs	r1, #165	@ 0xa5
 800a10e:	f002 fc75 	bl	800c9fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a11c:	3b01      	subs	r3, #1
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4413      	add	r3, r2
 800a122:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	f023 0307 	bic.w	r3, r3, #7
 800a12a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	f003 0307 	and.w	r3, r3, #7
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00b      	beq.n	800a14e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	617b      	str	r3, [r7, #20]
}
 800a148:	bf00      	nop
 800a14a:	bf00      	nop
 800a14c:	e7fd      	b.n	800a14a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d01f      	beq.n	800a194 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a154:	2300      	movs	r3, #0
 800a156:	61fb      	str	r3, [r7, #28]
 800a158:	e012      	b.n	800a180 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	4413      	add	r3, r2
 800a160:	7819      	ldrb	r1, [r3, #0]
 800a162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	4413      	add	r3, r2
 800a168:	3334      	adds	r3, #52	@ 0x34
 800a16a:	460a      	mov	r2, r1
 800a16c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	4413      	add	r3, r2
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d006      	beq.n	800a188 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	3301      	adds	r3, #1
 800a17e:	61fb      	str	r3, [r7, #28]
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	2b0f      	cmp	r3, #15
 800a184:	d9e9      	bls.n	800a15a <prvInitialiseNewTask+0x66>
 800a186:	e000      	b.n	800a18a <prvInitialiseNewTask+0x96>
			{
				break;
 800a188:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a192:	e003      	b.n	800a19c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19e:	2b37      	cmp	r3, #55	@ 0x37
 800a1a0:	d901      	bls.n	800a1a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1a2:	2337      	movs	r3, #55	@ 0x37
 800a1a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7ff f96a 	bl	8009496 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c4:	3318      	adds	r3, #24
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff f965 	bl	8009496 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	3354      	adds	r3, #84	@ 0x54
 800a1f6:	224c      	movs	r2, #76	@ 0x4c
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f002 fbfe 	bl	800c9fc <memset>
 800a200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a202:	4a0d      	ldr	r2, [pc, #52]	@ (800a238 <prvInitialiseNewTask+0x144>)
 800a204:	659a      	str	r2, [r3, #88]	@ 0x58
 800a206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a208:	4a0c      	ldr	r2, [pc, #48]	@ (800a23c <prvInitialiseNewTask+0x148>)
 800a20a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20e:	4a0c      	ldr	r2, [pc, #48]	@ (800a240 <prvInitialiseNewTask+0x14c>)
 800a210:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	68f9      	ldr	r1, [r7, #12]
 800a216:	69b8      	ldr	r0, [r7, #24]
 800a218:	f001 f954 	bl	800b4c4 <pxPortInitialiseStack>
 800a21c:	4602      	mov	r2, r0
 800a21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a220:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a22a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a22c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a22e:	bf00      	nop
 800a230:	3720      	adds	r7, #32
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20002e64 	.word	0x20002e64
 800a23c:	20002ecc 	.word	0x20002ecc
 800a240:	20002f34 	.word	0x20002f34

0800a244 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a24c:	f001 fa2e 	bl	800b6ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a250:	4b2d      	ldr	r3, [pc, #180]	@ (800a308 <prvAddNewTaskToReadyList+0xc4>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3301      	adds	r3, #1
 800a256:	4a2c      	ldr	r2, [pc, #176]	@ (800a308 <prvAddNewTaskToReadyList+0xc4>)
 800a258:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a25a:	4b2c      	ldr	r3, [pc, #176]	@ (800a30c <prvAddNewTaskToReadyList+0xc8>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d109      	bne.n	800a276 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a262:	4a2a      	ldr	r2, [pc, #168]	@ (800a30c <prvAddNewTaskToReadyList+0xc8>)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a268:	4b27      	ldr	r3, [pc, #156]	@ (800a308 <prvAddNewTaskToReadyList+0xc4>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d110      	bne.n	800a292 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a270:	f000 fc2a 	bl	800aac8 <prvInitialiseTaskLists>
 800a274:	e00d      	b.n	800a292 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a276:	4b26      	ldr	r3, [pc, #152]	@ (800a310 <prvAddNewTaskToReadyList+0xcc>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d109      	bne.n	800a292 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a27e:	4b23      	ldr	r3, [pc, #140]	@ (800a30c <prvAddNewTaskToReadyList+0xc8>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a288:	429a      	cmp	r2, r3
 800a28a:	d802      	bhi.n	800a292 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a28c:	4a1f      	ldr	r2, [pc, #124]	@ (800a30c <prvAddNewTaskToReadyList+0xc8>)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a292:	4b20      	ldr	r3, [pc, #128]	@ (800a314 <prvAddNewTaskToReadyList+0xd0>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3301      	adds	r3, #1
 800a298:	4a1e      	ldr	r2, [pc, #120]	@ (800a314 <prvAddNewTaskToReadyList+0xd0>)
 800a29a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a29c:	4b1d      	ldr	r3, [pc, #116]	@ (800a314 <prvAddNewTaskToReadyList+0xd0>)
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a318 <prvAddNewTaskToReadyList+0xd4>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d903      	bls.n	800a2b8 <prvAddNewTaskToReadyList+0x74>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b4:	4a18      	ldr	r2, [pc, #96]	@ (800a318 <prvAddNewTaskToReadyList+0xd4>)
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2bc:	4613      	mov	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4a15      	ldr	r2, [pc, #84]	@ (800a31c <prvAddNewTaskToReadyList+0xd8>)
 800a2c6:	441a      	add	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	f7ff f8ed 	bl	80094ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2d4:	f001 fa1a 	bl	800b70c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2d8:	4b0d      	ldr	r3, [pc, #52]	@ (800a310 <prvAddNewTaskToReadyList+0xcc>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00e      	beq.n	800a2fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a30c <prvAddNewTaskToReadyList+0xc8>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d207      	bcs.n	800a2fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a320 <prvAddNewTaskToReadyList+0xdc>)
 800a2f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2fe:	bf00      	nop
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	20000f28 	.word	0x20000f28
 800a30c:	20000a54 	.word	0x20000a54
 800a310:	20000f34 	.word	0x20000f34
 800a314:	20000f44 	.word	0x20000f44
 800a318:	20000f30 	.word	0x20000f30
 800a31c:	20000a58 	.word	0x20000a58
 800a320:	e000ed04 	.word	0xe000ed04

0800a324 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a32c:	2300      	movs	r3, #0
 800a32e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d018      	beq.n	800a368 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a336:	4b14      	ldr	r3, [pc, #80]	@ (800a388 <vTaskDelay+0x64>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00b      	beq.n	800a356 <vTaskDelay+0x32>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	60bb      	str	r3, [r7, #8]
}
 800a350:	bf00      	nop
 800a352:	bf00      	nop
 800a354:	e7fd      	b.n	800a352 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a356:	f000 f88b 	bl	800a470 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a35a:	2100      	movs	r1, #0
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fd05 	bl	800ad6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a362:	f000 f893 	bl	800a48c <xTaskResumeAll>
 800a366:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d107      	bne.n	800a37e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a36e:	4b07      	ldr	r3, [pc, #28]	@ (800a38c <vTaskDelay+0x68>)
 800a370:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a37e:	bf00      	nop
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20000f50 	.word	0x20000f50
 800a38c:	e000ed04 	.word	0xe000ed04

0800a390 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08a      	sub	sp, #40	@ 0x28
 800a394:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a396:	2300      	movs	r3, #0
 800a398:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a39a:	2300      	movs	r3, #0
 800a39c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a39e:	463a      	mov	r2, r7
 800a3a0:	1d39      	adds	r1, r7, #4
 800a3a2:	f107 0308 	add.w	r3, r7, #8
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff f824 	bl	80093f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	9202      	str	r2, [sp, #8]
 800a3b4:	9301      	str	r3, [sp, #4]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	460a      	mov	r2, r1
 800a3be:	4924      	ldr	r1, [pc, #144]	@ (800a450 <vTaskStartScheduler+0xc0>)
 800a3c0:	4824      	ldr	r0, [pc, #144]	@ (800a454 <vTaskStartScheduler+0xc4>)
 800a3c2:	f7ff fdf1 	bl	8009fa8 <xTaskCreateStatic>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	4a23      	ldr	r2, [pc, #140]	@ (800a458 <vTaskStartScheduler+0xc8>)
 800a3ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a3cc:	4b22      	ldr	r3, [pc, #136]	@ (800a458 <vTaskStartScheduler+0xc8>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	617b      	str	r3, [r7, #20]
 800a3d8:	e001      	b.n	800a3de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d102      	bne.n	800a3ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a3e4:	f000 fd16 	bl	800ae14 <xTimerCreateTimerTask>
 800a3e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d11b      	bne.n	800a428 <vTaskStartScheduler+0x98>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	613b      	str	r3, [r7, #16]
}
 800a402:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a404:	4b15      	ldr	r3, [pc, #84]	@ (800a45c <vTaskStartScheduler+0xcc>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3354      	adds	r3, #84	@ 0x54
 800a40a:	4a15      	ldr	r2, [pc, #84]	@ (800a460 <vTaskStartScheduler+0xd0>)
 800a40c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a40e:	4b15      	ldr	r3, [pc, #84]	@ (800a464 <vTaskStartScheduler+0xd4>)
 800a410:	f04f 32ff 	mov.w	r2, #4294967295
 800a414:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a416:	4b14      	ldr	r3, [pc, #80]	@ (800a468 <vTaskStartScheduler+0xd8>)
 800a418:	2201      	movs	r2, #1
 800a41a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a41c:	4b13      	ldr	r3, [pc, #76]	@ (800a46c <vTaskStartScheduler+0xdc>)
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a422:	f001 f8d1 	bl	800b5c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a426:	e00f      	b.n	800a448 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42e:	d10b      	bne.n	800a448 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	60fb      	str	r3, [r7, #12]
}
 800a442:	bf00      	nop
 800a444:	bf00      	nop
 800a446:	e7fd      	b.n	800a444 <vTaskStartScheduler+0xb4>
}
 800a448:	bf00      	nop
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	0800d654 	.word	0x0800d654
 800a454:	0800aa99 	.word	0x0800aa99
 800a458:	20000f4c 	.word	0x20000f4c
 800a45c:	20000a54 	.word	0x20000a54
 800a460:	20000190 	.word	0x20000190
 800a464:	20000f48 	.word	0x20000f48
 800a468:	20000f34 	.word	0x20000f34
 800a46c:	20000f2c 	.word	0x20000f2c

0800a470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a470:	b480      	push	{r7}
 800a472:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a474:	4b04      	ldr	r3, [pc, #16]	@ (800a488 <vTaskSuspendAll+0x18>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3301      	adds	r3, #1
 800a47a:	4a03      	ldr	r2, [pc, #12]	@ (800a488 <vTaskSuspendAll+0x18>)
 800a47c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a47e:	bf00      	nop
 800a480:	46bd      	mov	sp, r7
 800a482:	bc80      	pop	{r7}
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	20000f50 	.word	0x20000f50

0800a48c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a496:	2300      	movs	r3, #0
 800a498:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a49a:	4b42      	ldr	r3, [pc, #264]	@ (800a5a4 <xTaskResumeAll+0x118>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10b      	bne.n	800a4ba <xTaskResumeAll+0x2e>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	603b      	str	r3, [r7, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	e7fd      	b.n	800a4b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a4ba:	f001 f8f7 	bl	800b6ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a4be:	4b39      	ldr	r3, [pc, #228]	@ (800a5a4 <xTaskResumeAll+0x118>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	4a37      	ldr	r2, [pc, #220]	@ (800a5a4 <xTaskResumeAll+0x118>)
 800a4c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4c8:	4b36      	ldr	r3, [pc, #216]	@ (800a5a4 <xTaskResumeAll+0x118>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d162      	bne.n	800a596 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a4d0:	4b35      	ldr	r3, [pc, #212]	@ (800a5a8 <xTaskResumeAll+0x11c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d05e      	beq.n	800a596 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4d8:	e02f      	b.n	800a53a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4da:	4b34      	ldr	r3, [pc, #208]	@ (800a5ac <xTaskResumeAll+0x120>)
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3318      	adds	r3, #24
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff f83c 	bl	8009564 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff f837 	bl	8009564 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4fa:	4b2d      	ldr	r3, [pc, #180]	@ (800a5b0 <xTaskResumeAll+0x124>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d903      	bls.n	800a50a <xTaskResumeAll+0x7e>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a506:	4a2a      	ldr	r2, [pc, #168]	@ (800a5b0 <xTaskResumeAll+0x124>)
 800a508:	6013      	str	r3, [r2, #0]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a50e:	4613      	mov	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4a27      	ldr	r2, [pc, #156]	@ (800a5b4 <xTaskResumeAll+0x128>)
 800a518:	441a      	add	r2, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3304      	adds	r3, #4
 800a51e:	4619      	mov	r1, r3
 800a520:	4610      	mov	r0, r2
 800a522:	f7fe ffc4 	bl	80094ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a52a:	4b23      	ldr	r3, [pc, #140]	@ (800a5b8 <xTaskResumeAll+0x12c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a530:	429a      	cmp	r2, r3
 800a532:	d302      	bcc.n	800a53a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a534:	4b21      	ldr	r3, [pc, #132]	@ (800a5bc <xTaskResumeAll+0x130>)
 800a536:	2201      	movs	r2, #1
 800a538:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a53a:	4b1c      	ldr	r3, [pc, #112]	@ (800a5ac <xTaskResumeAll+0x120>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1cb      	bne.n	800a4da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a548:	f000 fb62 	bl	800ac10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a54c:	4b1c      	ldr	r3, [pc, #112]	@ (800a5c0 <xTaskResumeAll+0x134>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d010      	beq.n	800a57a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a558:	f000 f844 	bl	800a5e4 <xTaskIncrementTick>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d002      	beq.n	800a568 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a562:	4b16      	ldr	r3, [pc, #88]	@ (800a5bc <xTaskResumeAll+0x130>)
 800a564:	2201      	movs	r2, #1
 800a566:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3b01      	subs	r3, #1
 800a56c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1f1      	bne.n	800a558 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a574:	4b12      	ldr	r3, [pc, #72]	@ (800a5c0 <xTaskResumeAll+0x134>)
 800a576:	2200      	movs	r2, #0
 800a578:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a57a:	4b10      	ldr	r3, [pc, #64]	@ (800a5bc <xTaskResumeAll+0x130>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d009      	beq.n	800a596 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a582:	2301      	movs	r3, #1
 800a584:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a586:	4b0f      	ldr	r3, [pc, #60]	@ (800a5c4 <xTaskResumeAll+0x138>)
 800a588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a596:	f001 f8b9 	bl	800b70c <vPortExitCritical>

	return xAlreadyYielded;
 800a59a:	68bb      	ldr	r3, [r7, #8]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	20000f50 	.word	0x20000f50
 800a5a8:	20000f28 	.word	0x20000f28
 800a5ac:	20000ee8 	.word	0x20000ee8
 800a5b0:	20000f30 	.word	0x20000f30
 800a5b4:	20000a58 	.word	0x20000a58
 800a5b8:	20000a54 	.word	0x20000a54
 800a5bc:	20000f3c 	.word	0x20000f3c
 800a5c0:	20000f38 	.word	0x20000f38
 800a5c4:	e000ed04 	.word	0xe000ed04

0800a5c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a5ce:	4b04      	ldr	r3, [pc, #16]	@ (800a5e0 <xTaskGetTickCount+0x18>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a5d4:	687b      	ldr	r3, [r7, #4]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr
 800a5e0:	20000f2c 	.word	0x20000f2c

0800a5e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5ee:	4b4f      	ldr	r3, [pc, #316]	@ (800a72c <xTaskIncrementTick+0x148>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f040 8090 	bne.w	800a718 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5f8:	4b4d      	ldr	r3, [pc, #308]	@ (800a730 <xTaskIncrementTick+0x14c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a600:	4a4b      	ldr	r2, [pc, #300]	@ (800a730 <xTaskIncrementTick+0x14c>)
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d121      	bne.n	800a650 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a60c:	4b49      	ldr	r3, [pc, #292]	@ (800a734 <xTaskIncrementTick+0x150>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00b      	beq.n	800a62e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	603b      	str	r3, [r7, #0]
}
 800a628:	bf00      	nop
 800a62a:	bf00      	nop
 800a62c:	e7fd      	b.n	800a62a <xTaskIncrementTick+0x46>
 800a62e:	4b41      	ldr	r3, [pc, #260]	@ (800a734 <xTaskIncrementTick+0x150>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	4b40      	ldr	r3, [pc, #256]	@ (800a738 <xTaskIncrementTick+0x154>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a3e      	ldr	r2, [pc, #248]	@ (800a734 <xTaskIncrementTick+0x150>)
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	4a3e      	ldr	r2, [pc, #248]	@ (800a738 <xTaskIncrementTick+0x154>)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6013      	str	r3, [r2, #0]
 800a642:	4b3e      	ldr	r3, [pc, #248]	@ (800a73c <xTaskIncrementTick+0x158>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	3301      	adds	r3, #1
 800a648:	4a3c      	ldr	r2, [pc, #240]	@ (800a73c <xTaskIncrementTick+0x158>)
 800a64a:	6013      	str	r3, [r2, #0]
 800a64c:	f000 fae0 	bl	800ac10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a650:	4b3b      	ldr	r3, [pc, #236]	@ (800a740 <xTaskIncrementTick+0x15c>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	429a      	cmp	r2, r3
 800a658:	d349      	bcc.n	800a6ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a65a:	4b36      	ldr	r3, [pc, #216]	@ (800a734 <xTaskIncrementTick+0x150>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d104      	bne.n	800a66e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a664:	4b36      	ldr	r3, [pc, #216]	@ (800a740 <xTaskIncrementTick+0x15c>)
 800a666:	f04f 32ff 	mov.w	r2, #4294967295
 800a66a:	601a      	str	r2, [r3, #0]
					break;
 800a66c:	e03f      	b.n	800a6ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a66e:	4b31      	ldr	r3, [pc, #196]	@ (800a734 <xTaskIncrementTick+0x150>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a67e:	693a      	ldr	r2, [r7, #16]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	429a      	cmp	r2, r3
 800a684:	d203      	bcs.n	800a68e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a686:	4a2e      	ldr	r2, [pc, #184]	@ (800a740 <xTaskIncrementTick+0x15c>)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a68c:	e02f      	b.n	800a6ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	3304      	adds	r3, #4
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe ff66 	bl	8009564 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d004      	beq.n	800a6aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	3318      	adds	r3, #24
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fe ff5d 	bl	8009564 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6ae:	4b25      	ldr	r3, [pc, #148]	@ (800a744 <xTaskIncrementTick+0x160>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d903      	bls.n	800a6be <xTaskIncrementTick+0xda>
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ba:	4a22      	ldr	r2, [pc, #136]	@ (800a744 <xTaskIncrementTick+0x160>)
 800a6bc:	6013      	str	r3, [r2, #0]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4a1f      	ldr	r2, [pc, #124]	@ (800a748 <xTaskIncrementTick+0x164>)
 800a6cc:	441a      	add	r2, r3
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	f7fe feea 	bl	80094ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6de:	4b1b      	ldr	r3, [pc, #108]	@ (800a74c <xTaskIncrementTick+0x168>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d3b8      	bcc.n	800a65a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6ec:	e7b5      	b.n	800a65a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6ee:	4b17      	ldr	r3, [pc, #92]	@ (800a74c <xTaskIncrementTick+0x168>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f4:	4914      	ldr	r1, [pc, #80]	@ (800a748 <xTaskIncrementTick+0x164>)
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	440b      	add	r3, r1
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d901      	bls.n	800a70a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a706:	2301      	movs	r3, #1
 800a708:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a70a:	4b11      	ldr	r3, [pc, #68]	@ (800a750 <xTaskIncrementTick+0x16c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d007      	beq.n	800a722 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a712:	2301      	movs	r3, #1
 800a714:	617b      	str	r3, [r7, #20]
 800a716:	e004      	b.n	800a722 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a718:	4b0e      	ldr	r3, [pc, #56]	@ (800a754 <xTaskIncrementTick+0x170>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	3301      	adds	r3, #1
 800a71e:	4a0d      	ldr	r2, [pc, #52]	@ (800a754 <xTaskIncrementTick+0x170>)
 800a720:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a722:	697b      	ldr	r3, [r7, #20]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	20000f50 	.word	0x20000f50
 800a730:	20000f2c 	.word	0x20000f2c
 800a734:	20000ee0 	.word	0x20000ee0
 800a738:	20000ee4 	.word	0x20000ee4
 800a73c:	20000f40 	.word	0x20000f40
 800a740:	20000f48 	.word	0x20000f48
 800a744:	20000f30 	.word	0x20000f30
 800a748:	20000a58 	.word	0x20000a58
 800a74c:	20000a54 	.word	0x20000a54
 800a750:	20000f3c 	.word	0x20000f3c
 800a754:	20000f38 	.word	0x20000f38

0800a758 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a75e:	4b2a      	ldr	r3, [pc, #168]	@ (800a808 <vTaskSwitchContext+0xb0>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d003      	beq.n	800a76e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a766:	4b29      	ldr	r3, [pc, #164]	@ (800a80c <vTaskSwitchContext+0xb4>)
 800a768:	2201      	movs	r2, #1
 800a76a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a76c:	e047      	b.n	800a7fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a76e:	4b27      	ldr	r3, [pc, #156]	@ (800a80c <vTaskSwitchContext+0xb4>)
 800a770:	2200      	movs	r2, #0
 800a772:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a774:	4b26      	ldr	r3, [pc, #152]	@ (800a810 <vTaskSwitchContext+0xb8>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	e011      	b.n	800a7a0 <vTaskSwitchContext+0x48>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10b      	bne.n	800a79a <vTaskSwitchContext+0x42>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	607b      	str	r3, [r7, #4]
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop
 800a798:	e7fd      	b.n	800a796 <vTaskSwitchContext+0x3e>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	491c      	ldr	r1, [pc, #112]	@ (800a814 <vTaskSwitchContext+0xbc>)
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	440b      	add	r3, r1
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d0e3      	beq.n	800a77c <vTaskSwitchContext+0x24>
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4a15      	ldr	r2, [pc, #84]	@ (800a814 <vTaskSwitchContext+0xbc>)
 800a7c0:	4413      	add	r3, r2
 800a7c2:	60bb      	str	r3, [r7, #8]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	605a      	str	r2, [r3, #4]
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	685a      	ldr	r2, [r3, #4]
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d104      	bne.n	800a7e4 <vTaskSwitchContext+0x8c>
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	605a      	str	r2, [r3, #4]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	4a0b      	ldr	r2, [pc, #44]	@ (800a818 <vTaskSwitchContext+0xc0>)
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	4a08      	ldr	r2, [pc, #32]	@ (800a810 <vTaskSwitchContext+0xb8>)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7f4:	4b08      	ldr	r3, [pc, #32]	@ (800a818 <vTaskSwitchContext+0xc0>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3354      	adds	r3, #84	@ 0x54
 800a7fa:	4a08      	ldr	r2, [pc, #32]	@ (800a81c <vTaskSwitchContext+0xc4>)
 800a7fc:	6013      	str	r3, [r2, #0]
}
 800a7fe:	bf00      	nop
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	bc80      	pop	{r7}
 800a806:	4770      	bx	lr
 800a808:	20000f50 	.word	0x20000f50
 800a80c:	20000f3c 	.word	0x20000f3c
 800a810:	20000f30 	.word	0x20000f30
 800a814:	20000a58 	.word	0x20000a58
 800a818:	20000a54 	.word	0x20000a54
 800a81c:	20000190 	.word	0x20000190

0800a820 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10b      	bne.n	800a848 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	60fb      	str	r3, [r7, #12]
}
 800a842:	bf00      	nop
 800a844:	bf00      	nop
 800a846:	e7fd      	b.n	800a844 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a848:	4b07      	ldr	r3, [pc, #28]	@ (800a868 <vTaskPlaceOnEventList+0x48>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	3318      	adds	r3, #24
 800a84e:	4619      	mov	r1, r3
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7fe fe4f 	bl	80094f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a856:	2101      	movs	r1, #1
 800a858:	6838      	ldr	r0, [r7, #0]
 800a85a:	f000 fa87 	bl	800ad6c <prvAddCurrentTaskToDelayedList>
}
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	20000a54 	.word	0x20000a54

0800a86c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10b      	bne.n	800a896 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	617b      	str	r3, [r7, #20]
}
 800a890:	bf00      	nop
 800a892:	bf00      	nop
 800a894:	e7fd      	b.n	800a892 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a896:	4b0a      	ldr	r3, [pc, #40]	@ (800a8c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3318      	adds	r3, #24
 800a89c:	4619      	mov	r1, r3
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f7fe fe05 	bl	80094ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d002      	beq.n	800a8b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a8b0:	6879      	ldr	r1, [r7, #4]
 800a8b2:	68b8      	ldr	r0, [r7, #8]
 800a8b4:	f000 fa5a 	bl	800ad6c <prvAddCurrentTaskToDelayedList>
	}
 800a8b8:	bf00      	nop
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	20000a54 	.word	0x20000a54

0800a8c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10b      	bne.n	800a8f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	60fb      	str	r3, [r7, #12]
}
 800a8ec:	bf00      	nop
 800a8ee:	bf00      	nop
 800a8f0:	e7fd      	b.n	800a8ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	3318      	adds	r3, #24
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe fe34 	bl	8009564 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8fc:	4b1d      	ldr	r3, [pc, #116]	@ (800a974 <xTaskRemoveFromEventList+0xb0>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d11d      	bne.n	800a940 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	3304      	adds	r3, #4
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fe fe2b 	bl	8009564 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a912:	4b19      	ldr	r3, [pc, #100]	@ (800a978 <xTaskRemoveFromEventList+0xb4>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	429a      	cmp	r2, r3
 800a918:	d903      	bls.n	800a922 <xTaskRemoveFromEventList+0x5e>
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a91e:	4a16      	ldr	r2, [pc, #88]	@ (800a978 <xTaskRemoveFromEventList+0xb4>)
 800a920:	6013      	str	r3, [r2, #0]
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a926:	4613      	mov	r3, r2
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4413      	add	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4a13      	ldr	r2, [pc, #76]	@ (800a97c <xTaskRemoveFromEventList+0xb8>)
 800a930:	441a      	add	r2, r3
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	3304      	adds	r3, #4
 800a936:	4619      	mov	r1, r3
 800a938:	4610      	mov	r0, r2
 800a93a:	f7fe fdb8 	bl	80094ae <vListInsertEnd>
 800a93e:	e005      	b.n	800a94c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	3318      	adds	r3, #24
 800a944:	4619      	mov	r1, r3
 800a946:	480e      	ldr	r0, [pc, #56]	@ (800a980 <xTaskRemoveFromEventList+0xbc>)
 800a948:	f7fe fdb1 	bl	80094ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a950:	4b0c      	ldr	r3, [pc, #48]	@ (800a984 <xTaskRemoveFromEventList+0xc0>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a956:	429a      	cmp	r2, r3
 800a958:	d905      	bls.n	800a966 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a95a:	2301      	movs	r3, #1
 800a95c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a95e:	4b0a      	ldr	r3, [pc, #40]	@ (800a988 <xTaskRemoveFromEventList+0xc4>)
 800a960:	2201      	movs	r2, #1
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	e001      	b.n	800a96a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a966:	2300      	movs	r3, #0
 800a968:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a96a:	697b      	ldr	r3, [r7, #20]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20000f50 	.word	0x20000f50
 800a978:	20000f30 	.word	0x20000f30
 800a97c:	20000a58 	.word	0x20000a58
 800a980:	20000ee8 	.word	0x20000ee8
 800a984:	20000a54 	.word	0x20000a54
 800a988:	20000f3c 	.word	0x20000f3c

0800a98c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a994:	4b06      	ldr	r3, [pc, #24]	@ (800a9b0 <vTaskInternalSetTimeOutState+0x24>)
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a99c:	4b05      	ldr	r3, [pc, #20]	@ (800a9b4 <vTaskInternalSetTimeOutState+0x28>)
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	605a      	str	r2, [r3, #4]
}
 800a9a4:	bf00      	nop
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bc80      	pop	{r7}
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	20000f40 	.word	0x20000f40
 800a9b4:	20000f2c 	.word	0x20000f2c

0800a9b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10b      	bne.n	800a9e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	613b      	str	r3, [r7, #16]
}
 800a9da:	bf00      	nop
 800a9dc:	bf00      	nop
 800a9de:	e7fd      	b.n	800a9dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10b      	bne.n	800a9fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	60fb      	str	r3, [r7, #12]
}
 800a9f8:	bf00      	nop
 800a9fa:	bf00      	nop
 800a9fc:	e7fd      	b.n	800a9fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a9fe:	f000 fe55 	bl	800b6ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aa02:	4b1d      	ldr	r3, [pc, #116]	@ (800aa78 <xTaskCheckForTimeOut+0xc0>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	69ba      	ldr	r2, [r7, #24]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1a:	d102      	bne.n	800aa22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	61fb      	str	r3, [r7, #28]
 800aa20:	e023      	b.n	800aa6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	4b15      	ldr	r3, [pc, #84]	@ (800aa7c <xTaskCheckForTimeOut+0xc4>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d007      	beq.n	800aa3e <xTaskCheckForTimeOut+0x86>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	69ba      	ldr	r2, [r7, #24]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d302      	bcc.n	800aa3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	61fb      	str	r3, [r7, #28]
 800aa3c:	e015      	b.n	800aa6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d20b      	bcs.n	800aa60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	1ad2      	subs	r2, r2, r3
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7ff ff99 	bl	800a98c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	61fb      	str	r3, [r7, #28]
 800aa5e:	e004      	b.n	800aa6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2200      	movs	r2, #0
 800aa64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa66:	2301      	movs	r3, #1
 800aa68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa6a:	f000 fe4f 	bl	800b70c <vPortExitCritical>

	return xReturn;
 800aa6e:	69fb      	ldr	r3, [r7, #28]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3720      	adds	r7, #32
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20000f2c 	.word	0x20000f2c
 800aa7c:	20000f40 	.word	0x20000f40

0800aa80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa84:	4b03      	ldr	r3, [pc, #12]	@ (800aa94 <vTaskMissedYield+0x14>)
 800aa86:	2201      	movs	r2, #1
 800aa88:	601a      	str	r2, [r3, #0]
}
 800aa8a:	bf00      	nop
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bc80      	pop	{r7}
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	20000f3c 	.word	0x20000f3c

0800aa98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aaa0:	f000 f852 	bl	800ab48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aaa4:	4b06      	ldr	r3, [pc, #24]	@ (800aac0 <prvIdleTask+0x28>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d9f9      	bls.n	800aaa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aaac:	4b05      	ldr	r3, [pc, #20]	@ (800aac4 <prvIdleTask+0x2c>)
 800aaae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aabc:	e7f0      	b.n	800aaa0 <prvIdleTask+0x8>
 800aabe:	bf00      	nop
 800aac0:	20000a58 	.word	0x20000a58
 800aac4:	e000ed04 	.word	0xe000ed04

0800aac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aace:	2300      	movs	r3, #0
 800aad0:	607b      	str	r3, [r7, #4]
 800aad2:	e00c      	b.n	800aaee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	4613      	mov	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4a12      	ldr	r2, [pc, #72]	@ (800ab28 <prvInitialiseTaskLists+0x60>)
 800aae0:	4413      	add	r3, r2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fcb8 	bl	8009458 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3301      	adds	r3, #1
 800aaec:	607b      	str	r3, [r7, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b37      	cmp	r3, #55	@ 0x37
 800aaf2:	d9ef      	bls.n	800aad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aaf4:	480d      	ldr	r0, [pc, #52]	@ (800ab2c <prvInitialiseTaskLists+0x64>)
 800aaf6:	f7fe fcaf 	bl	8009458 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aafa:	480d      	ldr	r0, [pc, #52]	@ (800ab30 <prvInitialiseTaskLists+0x68>)
 800aafc:	f7fe fcac 	bl	8009458 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab00:	480c      	ldr	r0, [pc, #48]	@ (800ab34 <prvInitialiseTaskLists+0x6c>)
 800ab02:	f7fe fca9 	bl	8009458 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ab06:	480c      	ldr	r0, [pc, #48]	@ (800ab38 <prvInitialiseTaskLists+0x70>)
 800ab08:	f7fe fca6 	bl	8009458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ab0c:	480b      	ldr	r0, [pc, #44]	@ (800ab3c <prvInitialiseTaskLists+0x74>)
 800ab0e:	f7fe fca3 	bl	8009458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab12:	4b0b      	ldr	r3, [pc, #44]	@ (800ab40 <prvInitialiseTaskLists+0x78>)
 800ab14:	4a05      	ldr	r2, [pc, #20]	@ (800ab2c <prvInitialiseTaskLists+0x64>)
 800ab16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab18:	4b0a      	ldr	r3, [pc, #40]	@ (800ab44 <prvInitialiseTaskLists+0x7c>)
 800ab1a:	4a05      	ldr	r2, [pc, #20]	@ (800ab30 <prvInitialiseTaskLists+0x68>)
 800ab1c:	601a      	str	r2, [r3, #0]
}
 800ab1e:	bf00      	nop
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	20000a58 	.word	0x20000a58
 800ab2c:	20000eb8 	.word	0x20000eb8
 800ab30:	20000ecc 	.word	0x20000ecc
 800ab34:	20000ee8 	.word	0x20000ee8
 800ab38:	20000efc 	.word	0x20000efc
 800ab3c:	20000f14 	.word	0x20000f14
 800ab40:	20000ee0 	.word	0x20000ee0
 800ab44:	20000ee4 	.word	0x20000ee4

0800ab48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab4e:	e019      	b.n	800ab84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab50:	f000 fdac 	bl	800b6ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab54:	4b10      	ldr	r3, [pc, #64]	@ (800ab98 <prvCheckTasksWaitingTermination+0x50>)
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe fcff 	bl	8009564 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab66:	4b0d      	ldr	r3, [pc, #52]	@ (800ab9c <prvCheckTasksWaitingTermination+0x54>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	4a0b      	ldr	r2, [pc, #44]	@ (800ab9c <prvCheckTasksWaitingTermination+0x54>)
 800ab6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab70:	4b0b      	ldr	r3, [pc, #44]	@ (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	4a0a      	ldr	r2, [pc, #40]	@ (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab7a:	f000 fdc7 	bl	800b70c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f810 	bl	800aba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab84:	4b06      	ldr	r3, [pc, #24]	@ (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e1      	bne.n	800ab50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20000efc 	.word	0x20000efc
 800ab9c:	20000f28 	.word	0x20000f28
 800aba0:	20000f10 	.word	0x20000f10

0800aba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3354      	adds	r3, #84	@ 0x54
 800abb0:	4618      	mov	r0, r3
 800abb2:	f001 ff3b 	bl	800ca2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d108      	bne.n	800abd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 ff41 	bl	800ba4c <vPortFree>
				vPortFree( pxTCB );
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 ff3e 	bl	800ba4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800abd0:	e019      	b.n	800ac06 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d103      	bne.n	800abe4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 ff35 	bl	800ba4c <vPortFree>
	}
 800abe2:	e010      	b.n	800ac06 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800abea:	2b02      	cmp	r3, #2
 800abec:	d00b      	beq.n	800ac06 <prvDeleteTCB+0x62>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	60fb      	str	r3, [r7, #12]
}
 800ac00:	bf00      	nop
 800ac02:	bf00      	nop
 800ac04:	e7fd      	b.n	800ac02 <prvDeleteTCB+0x5e>
	}
 800ac06:	bf00      	nop
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac16:	4b0c      	ldr	r3, [pc, #48]	@ (800ac48 <prvResetNextTaskUnblockTime+0x38>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d104      	bne.n	800ac2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac20:	4b0a      	ldr	r3, [pc, #40]	@ (800ac4c <prvResetNextTaskUnblockTime+0x3c>)
 800ac22:	f04f 32ff 	mov.w	r2, #4294967295
 800ac26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac28:	e008      	b.n	800ac3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac2a:	4b07      	ldr	r3, [pc, #28]	@ (800ac48 <prvResetNextTaskUnblockTime+0x38>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	4a04      	ldr	r2, [pc, #16]	@ (800ac4c <prvResetNextTaskUnblockTime+0x3c>)
 800ac3a:	6013      	str	r3, [r2, #0]
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bc80      	pop	{r7}
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	20000ee0 	.word	0x20000ee0
 800ac4c:	20000f48 	.word	0x20000f48

0800ac50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac56:	4b0b      	ldr	r3, [pc, #44]	@ (800ac84 <xTaskGetSchedulerState+0x34>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d102      	bne.n	800ac64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	607b      	str	r3, [r7, #4]
 800ac62:	e008      	b.n	800ac76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac64:	4b08      	ldr	r3, [pc, #32]	@ (800ac88 <xTaskGetSchedulerState+0x38>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d102      	bne.n	800ac72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac6c:	2302      	movs	r3, #2
 800ac6e:	607b      	str	r3, [r7, #4]
 800ac70:	e001      	b.n	800ac76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac72:	2300      	movs	r3, #0
 800ac74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac76:	687b      	ldr	r3, [r7, #4]
	}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bc80      	pop	{r7}
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	20000f34 	.word	0x20000f34
 800ac88:	20000f50 	.word	0x20000f50

0800ac8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d058      	beq.n	800ad54 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aca2:	4b2f      	ldr	r3, [pc, #188]	@ (800ad60 <xTaskPriorityDisinherit+0xd4>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d00b      	beq.n	800acc4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	60fb      	str	r3, [r7, #12]
}
 800acbe:	bf00      	nop
 800acc0:	bf00      	nop
 800acc2:	e7fd      	b.n	800acc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10b      	bne.n	800ace4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	60bb      	str	r3, [r7, #8]
}
 800acde:	bf00      	nop
 800ace0:	bf00      	nop
 800ace2:	e7fd      	b.n	800ace0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ace8:	1e5a      	subs	r2, r3, #1
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d02c      	beq.n	800ad54 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d128      	bne.n	800ad54 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	3304      	adds	r3, #4
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe fc2c 	bl	8009564 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad24:	4b0f      	ldr	r3, [pc, #60]	@ (800ad64 <xTaskPriorityDisinherit+0xd8>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d903      	bls.n	800ad34 <xTaskPriorityDisinherit+0xa8>
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad30:	4a0c      	ldr	r2, [pc, #48]	@ (800ad64 <xTaskPriorityDisinherit+0xd8>)
 800ad32:	6013      	str	r3, [r2, #0]
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad38:	4613      	mov	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4a09      	ldr	r2, [pc, #36]	@ (800ad68 <xTaskPriorityDisinherit+0xdc>)
 800ad42:	441a      	add	r2, r3
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	3304      	adds	r3, #4
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	f7fe fbaf 	bl	80094ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad50:	2301      	movs	r3, #1
 800ad52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad54:	697b      	ldr	r3, [r7, #20]
	}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3718      	adds	r7, #24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	20000a54 	.word	0x20000a54
 800ad64:	20000f30 	.word	0x20000f30
 800ad68:	20000a58 	.word	0x20000a58

0800ad6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad76:	4b21      	ldr	r3, [pc, #132]	@ (800adfc <prvAddCurrentTaskToDelayedList+0x90>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad7c:	4b20      	ldr	r3, [pc, #128]	@ (800ae00 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3304      	adds	r3, #4
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe fbee 	bl	8009564 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad8e:	d10a      	bne.n	800ada6 <prvAddCurrentTaskToDelayedList+0x3a>
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d007      	beq.n	800ada6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad96:	4b1a      	ldr	r3, [pc, #104]	@ (800ae00 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4819      	ldr	r0, [pc, #100]	@ (800ae04 <prvAddCurrentTaskToDelayedList+0x98>)
 800ada0:	f7fe fb85 	bl	80094ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ada4:	e026      	b.n	800adf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4413      	add	r3, r2
 800adac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800adae:	4b14      	ldr	r3, [pc, #80]	@ (800ae00 <prvAddCurrentTaskToDelayedList+0x94>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d209      	bcs.n	800add2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adbe:	4b12      	ldr	r3, [pc, #72]	@ (800ae08 <prvAddCurrentTaskToDelayedList+0x9c>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	4b0f      	ldr	r3, [pc, #60]	@ (800ae00 <prvAddCurrentTaskToDelayedList+0x94>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3304      	adds	r3, #4
 800adc8:	4619      	mov	r1, r3
 800adca:	4610      	mov	r0, r2
 800adcc:	f7fe fb92 	bl	80094f4 <vListInsert>
}
 800add0:	e010      	b.n	800adf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800add2:	4b0e      	ldr	r3, [pc, #56]	@ (800ae0c <prvAddCurrentTaskToDelayedList+0xa0>)
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	4b0a      	ldr	r3, [pc, #40]	@ (800ae00 <prvAddCurrentTaskToDelayedList+0x94>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	3304      	adds	r3, #4
 800addc:	4619      	mov	r1, r3
 800adde:	4610      	mov	r0, r2
 800ade0:	f7fe fb88 	bl	80094f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ade4:	4b0a      	ldr	r3, [pc, #40]	@ (800ae10 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68ba      	ldr	r2, [r7, #8]
 800adea:	429a      	cmp	r2, r3
 800adec:	d202      	bcs.n	800adf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800adee:	4a08      	ldr	r2, [pc, #32]	@ (800ae10 <prvAddCurrentTaskToDelayedList+0xa4>)
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	6013      	str	r3, [r2, #0]
}
 800adf4:	bf00      	nop
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	20000f2c 	.word	0x20000f2c
 800ae00:	20000a54 	.word	0x20000a54
 800ae04:	20000f14 	.word	0x20000f14
 800ae08:	20000ee4 	.word	0x20000ee4
 800ae0c:	20000ee0 	.word	0x20000ee0
 800ae10:	20000f48 	.word	0x20000f48

0800ae14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08a      	sub	sp, #40	@ 0x28
 800ae18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae1e:	f000 fb11 	bl	800b444 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae22:	4b1d      	ldr	r3, [pc, #116]	@ (800ae98 <xTimerCreateTimerTask+0x84>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d021      	beq.n	800ae6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae32:	1d3a      	adds	r2, r7, #4
 800ae34:	f107 0108 	add.w	r1, r7, #8
 800ae38:	f107 030c 	add.w	r3, r7, #12
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fe faf1 	bl	8009424 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae42:	6879      	ldr	r1, [r7, #4]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	9202      	str	r2, [sp, #8]
 800ae4a:	9301      	str	r3, [sp, #4]
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	2300      	movs	r3, #0
 800ae52:	460a      	mov	r2, r1
 800ae54:	4911      	ldr	r1, [pc, #68]	@ (800ae9c <xTimerCreateTimerTask+0x88>)
 800ae56:	4812      	ldr	r0, [pc, #72]	@ (800aea0 <xTimerCreateTimerTask+0x8c>)
 800ae58:	f7ff f8a6 	bl	8009fa8 <xTaskCreateStatic>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	4a11      	ldr	r2, [pc, #68]	@ (800aea4 <xTimerCreateTimerTask+0x90>)
 800ae60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae62:	4b10      	ldr	r3, [pc, #64]	@ (800aea4 <xTimerCreateTimerTask+0x90>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10b      	bne.n	800ae8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	613b      	str	r3, [r7, #16]
}
 800ae86:	bf00      	nop
 800ae88:	bf00      	nop
 800ae8a:	e7fd      	b.n	800ae88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae8c:	697b      	ldr	r3, [r7, #20]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	20000f84 	.word	0x20000f84
 800ae9c:	0800d65c 	.word	0x0800d65c
 800aea0:	0800afe1 	.word	0x0800afe1
 800aea4:	20000f88 	.word	0x20000f88

0800aea8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b08a      	sub	sp, #40	@ 0x28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
 800aeb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10b      	bne.n	800aed8 <xTimerGenericCommand+0x30>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	623b      	str	r3, [r7, #32]
}
 800aed2:	bf00      	nop
 800aed4:	bf00      	nop
 800aed6:	e7fd      	b.n	800aed4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aed8:	4b19      	ldr	r3, [pc, #100]	@ (800af40 <xTimerGenericCommand+0x98>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d02a      	beq.n	800af36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	2b05      	cmp	r3, #5
 800aef0:	dc18      	bgt.n	800af24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aef2:	f7ff fead 	bl	800ac50 <xTaskGetSchedulerState>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d109      	bne.n	800af10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aefc:	4b10      	ldr	r3, [pc, #64]	@ (800af40 <xTimerGenericCommand+0x98>)
 800aefe:	6818      	ldr	r0, [r3, #0]
 800af00:	f107 0110 	add.w	r1, r7, #16
 800af04:	2300      	movs	r3, #0
 800af06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af08:	f7fe fc60 	bl	80097cc <xQueueGenericSend>
 800af0c:	6278      	str	r0, [r7, #36]	@ 0x24
 800af0e:	e012      	b.n	800af36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af10:	4b0b      	ldr	r3, [pc, #44]	@ (800af40 <xTimerGenericCommand+0x98>)
 800af12:	6818      	ldr	r0, [r3, #0]
 800af14:	f107 0110 	add.w	r1, r7, #16
 800af18:	2300      	movs	r3, #0
 800af1a:	2200      	movs	r2, #0
 800af1c:	f7fe fc56 	bl	80097cc <xQueueGenericSend>
 800af20:	6278      	str	r0, [r7, #36]	@ 0x24
 800af22:	e008      	b.n	800af36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af24:	4b06      	ldr	r3, [pc, #24]	@ (800af40 <xTimerGenericCommand+0x98>)
 800af26:	6818      	ldr	r0, [r3, #0]
 800af28:	f107 0110 	add.w	r1, r7, #16
 800af2c:	2300      	movs	r3, #0
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	f7fe fd4e 	bl	80099d0 <xQueueGenericSendFromISR>
 800af34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3728      	adds	r7, #40	@ 0x28
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	20000f84 	.word	0x20000f84

0800af44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b088      	sub	sp, #32
 800af48:	af02      	add	r7, sp, #8
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af4e:	4b23      	ldr	r3, [pc, #140]	@ (800afdc <prvProcessExpiredTimer+0x98>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	3304      	adds	r3, #4
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fe fb01 	bl	8009564 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af68:	f003 0304 	and.w	r3, r3, #4
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d023      	beq.n	800afb8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	699a      	ldr	r2, [r3, #24]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	18d1      	adds	r1, r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	6978      	ldr	r0, [r7, #20]
 800af7e:	f000 f8d3 	bl	800b128 <prvInsertTimerInActiveList>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d020      	beq.n	800afca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af88:	2300      	movs	r3, #0
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	2300      	movs	r3, #0
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	2100      	movs	r1, #0
 800af92:	6978      	ldr	r0, [r7, #20]
 800af94:	f7ff ff88 	bl	800aea8 <xTimerGenericCommand>
 800af98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d114      	bne.n	800afca <prvProcessExpiredTimer+0x86>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	60fb      	str	r3, [r7, #12]
}
 800afb2:	bf00      	nop
 800afb4:	bf00      	nop
 800afb6:	e7fd      	b.n	800afb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afbe:	f023 0301 	bic.w	r3, r3, #1
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	6978      	ldr	r0, [r7, #20]
 800afd0:	4798      	blx	r3
}
 800afd2:	bf00      	nop
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	20000f7c 	.word	0x20000f7c

0800afe0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afe8:	f107 0308 	add.w	r3, r7, #8
 800afec:	4618      	mov	r0, r3
 800afee:	f000 f859 	bl	800b0a4 <prvGetNextExpireTime>
 800aff2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	4619      	mov	r1, r3
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f000 f805 	bl	800b008 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800affe:	f000 f8d5 	bl	800b1ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b002:	bf00      	nop
 800b004:	e7f0      	b.n	800afe8 <prvTimerTask+0x8>
	...

0800b008 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b012:	f7ff fa2d 	bl	800a470 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b016:	f107 0308 	add.w	r3, r7, #8
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 f864 	bl	800b0e8 <prvSampleTimeNow>
 800b020:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d130      	bne.n	800b08a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10a      	bne.n	800b044 <prvProcessTimerOrBlockTask+0x3c>
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	429a      	cmp	r2, r3
 800b034:	d806      	bhi.n	800b044 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b036:	f7ff fa29 	bl	800a48c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b03a:	68f9      	ldr	r1, [r7, #12]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7ff ff81 	bl	800af44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b042:	e024      	b.n	800b08e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d008      	beq.n	800b05c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b04a:	4b13      	ldr	r3, [pc, #76]	@ (800b098 <prvProcessTimerOrBlockTask+0x90>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <prvProcessTimerOrBlockTask+0x50>
 800b054:	2301      	movs	r3, #1
 800b056:	e000      	b.n	800b05a <prvProcessTimerOrBlockTask+0x52>
 800b058:	2300      	movs	r3, #0
 800b05a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b05c:	4b0f      	ldr	r3, [pc, #60]	@ (800b09c <prvProcessTimerOrBlockTask+0x94>)
 800b05e:	6818      	ldr	r0, [r3, #0]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	4619      	mov	r1, r3
 800b06a:	f7fe ff69 	bl	8009f40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b06e:	f7ff fa0d 	bl	800a48c <xTaskResumeAll>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10a      	bne.n	800b08e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b078:	4b09      	ldr	r3, [pc, #36]	@ (800b0a0 <prvProcessTimerOrBlockTask+0x98>)
 800b07a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b07e:	601a      	str	r2, [r3, #0]
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	f3bf 8f6f 	isb	sy
}
 800b088:	e001      	b.n	800b08e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b08a:	f7ff f9ff 	bl	800a48c <xTaskResumeAll>
}
 800b08e:	bf00      	nop
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	20000f80 	.word	0x20000f80
 800b09c:	20000f84 	.word	0x20000f84
 800b0a0:	e000ed04 	.word	0xe000ed04

0800b0a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e4 <prvGetNextExpireTime+0x40>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <prvGetNextExpireTime+0x16>
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	e000      	b.n	800b0bc <prvGetNextExpireTime+0x18>
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d105      	bne.n	800b0d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0c8:	4b06      	ldr	r3, [pc, #24]	@ (800b0e4 <prvGetNextExpireTime+0x40>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	e001      	b.n	800b0d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bc80      	pop	{r7}
 800b0e2:	4770      	bx	lr
 800b0e4:	20000f7c 	.word	0x20000f7c

0800b0e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0f0:	f7ff fa6a 	bl	800a5c8 <xTaskGetTickCount>
 800b0f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b124 <prvSampleTimeNow+0x3c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d205      	bcs.n	800b10c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b100:	f000 f93a 	bl	800b378 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	601a      	str	r2, [r3, #0]
 800b10a:	e002      	b.n	800b112 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b112:	4a04      	ldr	r2, [pc, #16]	@ (800b124 <prvSampleTimeNow+0x3c>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b118:	68fb      	ldr	r3, [r7, #12]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	20000f8c 	.word	0x20000f8c

0800b128 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
 800b134:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b136:	2300      	movs	r3, #0
 800b138:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d812      	bhi.n	800b174 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	1ad2      	subs	r2, r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d302      	bcc.n	800b162 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b15c:	2301      	movs	r3, #1
 800b15e:	617b      	str	r3, [r7, #20]
 800b160:	e01b      	b.n	800b19a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b162:	4b10      	ldr	r3, [pc, #64]	@ (800b1a4 <prvInsertTimerInActiveList+0x7c>)
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3304      	adds	r3, #4
 800b16a:	4619      	mov	r1, r3
 800b16c:	4610      	mov	r0, r2
 800b16e:	f7fe f9c1 	bl	80094f4 <vListInsert>
 800b172:	e012      	b.n	800b19a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d206      	bcs.n	800b18a <prvInsertTimerInActiveList+0x62>
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d302      	bcc.n	800b18a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b184:	2301      	movs	r3, #1
 800b186:	617b      	str	r3, [r7, #20]
 800b188:	e007      	b.n	800b19a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b18a:	4b07      	ldr	r3, [pc, #28]	@ (800b1a8 <prvInsertTimerInActiveList+0x80>)
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3304      	adds	r3, #4
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f7fe f9ad 	bl	80094f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b19a:	697b      	ldr	r3, [r7, #20]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	20000f80 	.word	0x20000f80
 800b1a8:	20000f7c 	.word	0x20000f7c

0800b1ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08e      	sub	sp, #56	@ 0x38
 800b1b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1b2:	e0ce      	b.n	800b352 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	da19      	bge.n	800b1ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1ba:	1d3b      	adds	r3, r7, #4
 800b1bc:	3304      	adds	r3, #4
 800b1be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10b      	bne.n	800b1de <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	61fb      	str	r3, [r7, #28]
}
 800b1d8:	bf00      	nop
 800b1da:	bf00      	nop
 800b1dc:	e7fd      	b.n	800b1da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1e4:	6850      	ldr	r0, [r2, #4]
 800b1e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1e8:	6892      	ldr	r2, [r2, #8]
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f2c0 80ae 	blt.w	800b352 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d004      	beq.n	800b20c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b204:	3304      	adds	r3, #4
 800b206:	4618      	mov	r0, r3
 800b208:	f7fe f9ac 	bl	8009564 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b20c:	463b      	mov	r3, r7
 800b20e:	4618      	mov	r0, r3
 800b210:	f7ff ff6a 	bl	800b0e8 <prvSampleTimeNow>
 800b214:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b09      	cmp	r3, #9
 800b21a:	f200 8097 	bhi.w	800b34c <prvProcessReceivedCommands+0x1a0>
 800b21e:	a201      	add	r2, pc, #4	@ (adr r2, 800b224 <prvProcessReceivedCommands+0x78>)
 800b220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b224:	0800b24d 	.word	0x0800b24d
 800b228:	0800b24d 	.word	0x0800b24d
 800b22c:	0800b24d 	.word	0x0800b24d
 800b230:	0800b2c3 	.word	0x0800b2c3
 800b234:	0800b2d7 	.word	0x0800b2d7
 800b238:	0800b323 	.word	0x0800b323
 800b23c:	0800b24d 	.word	0x0800b24d
 800b240:	0800b24d 	.word	0x0800b24d
 800b244:	0800b2c3 	.word	0x0800b2c3
 800b248:	0800b2d7 	.word	0x0800b2d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b252:	f043 0301 	orr.w	r3, r3, #1
 800b256:	b2da      	uxtb	r2, r3
 800b258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	18d1      	adds	r1, r2, r3
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b26a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b26c:	f7ff ff5c 	bl	800b128 <prvInsertTimerInActiveList>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d06c      	beq.n	800b350 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b27c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b284:	f003 0304 	and.w	r3, r3, #4
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d061      	beq.n	800b350 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	441a      	add	r2, r3
 800b294:	2300      	movs	r3, #0
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	2300      	movs	r3, #0
 800b29a:	2100      	movs	r1, #0
 800b29c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b29e:	f7ff fe03 	bl	800aea8 <xTimerGenericCommand>
 800b2a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d152      	bne.n	800b350 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	61bb      	str	r3, [r7, #24]
}
 800b2bc:	bf00      	nop
 800b2be:	bf00      	nop
 800b2c0:	e7fd      	b.n	800b2be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2c8:	f023 0301 	bic.w	r3, r3, #1
 800b2cc:	b2da      	uxtb	r2, r3
 800b2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b2d4:	e03d      	b.n	800b352 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2dc:	f043 0301 	orr.w	r3, r3, #1
 800b2e0:	b2da      	uxtb	r2, r3
 800b2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10b      	bne.n	800b30e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	617b      	str	r3, [r7, #20]
}
 800b308:	bf00      	nop
 800b30a:	bf00      	nop
 800b30c:	e7fd      	b.n	800b30a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b310:	699a      	ldr	r2, [r3, #24]
 800b312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b314:	18d1      	adds	r1, r2, r3
 800b316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b31a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b31c:	f7ff ff04 	bl	800b128 <prvInsertTimerInActiveList>
					break;
 800b320:	e017      	b.n	800b352 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b328:	f003 0302 	and.w	r3, r3, #2
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d103      	bne.n	800b338 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b330:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b332:	f000 fb8b 	bl	800ba4c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b336:	e00c      	b.n	800b352 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b33e:	f023 0301 	bic.w	r3, r3, #1
 800b342:	b2da      	uxtb	r2, r3
 800b344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b346:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b34a:	e002      	b.n	800b352 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b34c:	bf00      	nop
 800b34e:	e000      	b.n	800b352 <prvProcessReceivedCommands+0x1a6>
					break;
 800b350:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b352:	4b08      	ldr	r3, [pc, #32]	@ (800b374 <prvProcessReceivedCommands+0x1c8>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	1d39      	adds	r1, r7, #4
 800b358:	2200      	movs	r2, #0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fbd6 	bl	8009b0c <xQueueReceive>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	f47f af26 	bne.w	800b1b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b368:	bf00      	nop
 800b36a:	bf00      	nop
 800b36c:	3730      	adds	r7, #48	@ 0x30
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20000f84 	.word	0x20000f84

0800b378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b088      	sub	sp, #32
 800b37c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b37e:	e049      	b.n	800b414 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b380:	4b2e      	ldr	r3, [pc, #184]	@ (800b43c <prvSwitchTimerLists+0xc4>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b38a:	4b2c      	ldr	r3, [pc, #176]	@ (800b43c <prvSwitchTimerLists+0xc4>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	3304      	adds	r3, #4
 800b398:	4618      	mov	r0, r3
 800b39a:	f7fe f8e3 	bl	8009564 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6a1b      	ldr	r3, [r3, #32]
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d02f      	beq.n	800b414 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d90e      	bls.n	800b3e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3d2:	4b1a      	ldr	r3, [pc, #104]	@ (800b43c <prvSwitchTimerLists+0xc4>)
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3304      	adds	r3, #4
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4610      	mov	r0, r2
 800b3de:	f7fe f889 	bl	80094f4 <vListInsert>
 800b3e2:	e017      	b.n	800b414 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7ff fd5a 	bl	800aea8 <xTimerGenericCommand>
 800b3f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10b      	bne.n	800b414 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	603b      	str	r3, [r7, #0]
}
 800b40e:	bf00      	nop
 800b410:	bf00      	nop
 800b412:	e7fd      	b.n	800b410 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b414:	4b09      	ldr	r3, [pc, #36]	@ (800b43c <prvSwitchTimerLists+0xc4>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1b0      	bne.n	800b380 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b41e:	4b07      	ldr	r3, [pc, #28]	@ (800b43c <prvSwitchTimerLists+0xc4>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b424:	4b06      	ldr	r3, [pc, #24]	@ (800b440 <prvSwitchTimerLists+0xc8>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a04      	ldr	r2, [pc, #16]	@ (800b43c <prvSwitchTimerLists+0xc4>)
 800b42a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b42c:	4a04      	ldr	r2, [pc, #16]	@ (800b440 <prvSwitchTimerLists+0xc8>)
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	6013      	str	r3, [r2, #0]
}
 800b432:	bf00      	nop
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	20000f7c 	.word	0x20000f7c
 800b440:	20000f80 	.word	0x20000f80

0800b444 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b44a:	f000 f92f 	bl	800b6ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b44e:	4b15      	ldr	r3, [pc, #84]	@ (800b4a4 <prvCheckForValidListAndQueue+0x60>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d120      	bne.n	800b498 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b456:	4814      	ldr	r0, [pc, #80]	@ (800b4a8 <prvCheckForValidListAndQueue+0x64>)
 800b458:	f7fd fffe 	bl	8009458 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b45c:	4813      	ldr	r0, [pc, #76]	@ (800b4ac <prvCheckForValidListAndQueue+0x68>)
 800b45e:	f7fd fffb 	bl	8009458 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b462:	4b13      	ldr	r3, [pc, #76]	@ (800b4b0 <prvCheckForValidListAndQueue+0x6c>)
 800b464:	4a10      	ldr	r2, [pc, #64]	@ (800b4a8 <prvCheckForValidListAndQueue+0x64>)
 800b466:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b468:	4b12      	ldr	r3, [pc, #72]	@ (800b4b4 <prvCheckForValidListAndQueue+0x70>)
 800b46a:	4a10      	ldr	r2, [pc, #64]	@ (800b4ac <prvCheckForValidListAndQueue+0x68>)
 800b46c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b46e:	2300      	movs	r3, #0
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	4b11      	ldr	r3, [pc, #68]	@ (800b4b8 <prvCheckForValidListAndQueue+0x74>)
 800b474:	4a11      	ldr	r2, [pc, #68]	@ (800b4bc <prvCheckForValidListAndQueue+0x78>)
 800b476:	2110      	movs	r1, #16
 800b478:	200a      	movs	r0, #10
 800b47a:	f7fe f907 	bl	800968c <xQueueGenericCreateStatic>
 800b47e:	4603      	mov	r3, r0
 800b480:	4a08      	ldr	r2, [pc, #32]	@ (800b4a4 <prvCheckForValidListAndQueue+0x60>)
 800b482:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b484:	4b07      	ldr	r3, [pc, #28]	@ (800b4a4 <prvCheckForValidListAndQueue+0x60>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d005      	beq.n	800b498 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b48c:	4b05      	ldr	r3, [pc, #20]	@ (800b4a4 <prvCheckForValidListAndQueue+0x60>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	490b      	ldr	r1, [pc, #44]	@ (800b4c0 <prvCheckForValidListAndQueue+0x7c>)
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe fd2c 	bl	8009ef0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b498:	f000 f938 	bl	800b70c <vPortExitCritical>
}
 800b49c:	bf00      	nop
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	20000f84 	.word	0x20000f84
 800b4a8:	20000f54 	.word	0x20000f54
 800b4ac:	20000f68 	.word	0x20000f68
 800b4b0:	20000f7c 	.word	0x20000f7c
 800b4b4:	20000f80 	.word	0x20000f80
 800b4b8:	20001030 	.word	0x20001030
 800b4bc:	20000f90 	.word	0x20000f90
 800b4c0:	0800d664 	.word	0x0800d664

0800b4c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	3b04      	subs	r3, #4
 800b4d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b4dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	3b04      	subs	r3, #4
 800b4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f023 0201 	bic.w	r2, r3, #1
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	3b04      	subs	r3, #4
 800b4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4f4:	4a08      	ldr	r2, [pc, #32]	@ (800b518 <pxPortInitialiseStack+0x54>)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	3b14      	subs	r3, #20
 800b4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	3b20      	subs	r3, #32
 800b50a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b50c:	68fb      	ldr	r3, [r7, #12]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3714      	adds	r7, #20
 800b512:	46bd      	mov	sp, r7
 800b514:	bc80      	pop	{r7}
 800b516:	4770      	bx	lr
 800b518:	0800b51d 	.word	0x0800b51d

0800b51c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b522:	2300      	movs	r3, #0
 800b524:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b526:	4b12      	ldr	r3, [pc, #72]	@ (800b570 <prvTaskExitError+0x54>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52e:	d00b      	beq.n	800b548 <prvTaskExitError+0x2c>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	60fb      	str	r3, [r7, #12]
}
 800b542:	bf00      	nop
 800b544:	bf00      	nop
 800b546:	e7fd      	b.n	800b544 <prvTaskExitError+0x28>
	__asm volatile
 800b548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b54c:	f383 8811 	msr	BASEPRI, r3
 800b550:	f3bf 8f6f 	isb	sy
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	60bb      	str	r3, [r7, #8]
}
 800b55a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b55c:	bf00      	nop
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d0fc      	beq.n	800b55e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b564:	bf00      	nop
 800b566:	bf00      	nop
 800b568:	3714      	adds	r7, #20
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bc80      	pop	{r7}
 800b56e:	4770      	bx	lr
 800b570:	20000120 	.word	0x20000120
	...

0800b580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b580:	4b07      	ldr	r3, [pc, #28]	@ (800b5a0 <pxCurrentTCBConst2>)
 800b582:	6819      	ldr	r1, [r3, #0]
 800b584:	6808      	ldr	r0, [r1, #0]
 800b586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b58a:	f380 8809 	msr	PSP, r0
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f04f 0000 	mov.w	r0, #0
 800b596:	f380 8811 	msr	BASEPRI, r0
 800b59a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b59e:	4770      	bx	lr

0800b5a0 <pxCurrentTCBConst2>:
 800b5a0:	20000a54 	.word	0x20000a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop

0800b5a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b5a8:	4806      	ldr	r0, [pc, #24]	@ (800b5c4 <prvPortStartFirstTask+0x1c>)
 800b5aa:	6800      	ldr	r0, [r0, #0]
 800b5ac:	6800      	ldr	r0, [r0, #0]
 800b5ae:	f380 8808 	msr	MSP, r0
 800b5b2:	b662      	cpsie	i
 800b5b4:	b661      	cpsie	f
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	df00      	svc	0
 800b5c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5c2:	bf00      	nop
 800b5c4:	e000ed08 	.word	0xe000ed08

0800b5c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5ce:	4b32      	ldr	r3, [pc, #200]	@ (800b698 <xPortStartScheduler+0xd0>)
 800b5d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	22ff      	movs	r2, #255	@ 0xff
 800b5de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5e8:	78fb      	ldrb	r3, [r7, #3]
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	4b2a      	ldr	r3, [pc, #168]	@ (800b69c <xPortStartScheduler+0xd4>)
 800b5f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5f6:	4b2a      	ldr	r3, [pc, #168]	@ (800b6a0 <xPortStartScheduler+0xd8>)
 800b5f8:	2207      	movs	r2, #7
 800b5fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5fc:	e009      	b.n	800b612 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b5fe:	4b28      	ldr	r3, [pc, #160]	@ (800b6a0 <xPortStartScheduler+0xd8>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3b01      	subs	r3, #1
 800b604:	4a26      	ldr	r2, [pc, #152]	@ (800b6a0 <xPortStartScheduler+0xd8>)
 800b606:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b608:	78fb      	ldrb	r3, [r7, #3]
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	005b      	lsls	r3, r3, #1
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b612:	78fb      	ldrb	r3, [r7, #3]
 800b614:	b2db      	uxtb	r3, r3
 800b616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b61a:	2b80      	cmp	r3, #128	@ 0x80
 800b61c:	d0ef      	beq.n	800b5fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b61e:	4b20      	ldr	r3, [pc, #128]	@ (800b6a0 <xPortStartScheduler+0xd8>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f1c3 0307 	rsb	r3, r3, #7
 800b626:	2b04      	cmp	r3, #4
 800b628:	d00b      	beq.n	800b642 <xPortStartScheduler+0x7a>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	60bb      	str	r3, [r7, #8]
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	e7fd      	b.n	800b63e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b642:	4b17      	ldr	r3, [pc, #92]	@ (800b6a0 <xPortStartScheduler+0xd8>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	021b      	lsls	r3, r3, #8
 800b648:	4a15      	ldr	r2, [pc, #84]	@ (800b6a0 <xPortStartScheduler+0xd8>)
 800b64a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b64c:	4b14      	ldr	r3, [pc, #80]	@ (800b6a0 <xPortStartScheduler+0xd8>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b654:	4a12      	ldr	r2, [pc, #72]	@ (800b6a0 <xPortStartScheduler+0xd8>)
 800b656:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	b2da      	uxtb	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b660:	4b10      	ldr	r3, [pc, #64]	@ (800b6a4 <xPortStartScheduler+0xdc>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a0f      	ldr	r2, [pc, #60]	@ (800b6a4 <xPortStartScheduler+0xdc>)
 800b666:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b66a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b66c:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a4 <xPortStartScheduler+0xdc>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a0c      	ldr	r2, [pc, #48]	@ (800b6a4 <xPortStartScheduler+0xdc>)
 800b672:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b676:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b678:	f000 f8b8 	bl	800b7ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b67c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a8 <xPortStartScheduler+0xe0>)
 800b67e:	2200      	movs	r2, #0
 800b680:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b682:	f7ff ff91 	bl	800b5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b686:	f7ff f867 	bl	800a758 <vTaskSwitchContext>
	prvTaskExitError();
 800b68a:	f7ff ff47 	bl	800b51c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	e000e400 	.word	0xe000e400
 800b69c:	20001080 	.word	0x20001080
 800b6a0:	20001084 	.word	0x20001084
 800b6a4:	e000ed20 	.word	0xe000ed20
 800b6a8:	20000120 	.word	0x20000120

0800b6ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	607b      	str	r3, [r7, #4]
}
 800b6c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b704 <vPortEnterCritical+0x58>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	4a0d      	ldr	r2, [pc, #52]	@ (800b704 <vPortEnterCritical+0x58>)
 800b6ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b704 <vPortEnterCritical+0x58>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d110      	bne.n	800b6fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6d8:	4b0b      	ldr	r3, [pc, #44]	@ (800b708 <vPortEnterCritical+0x5c>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00b      	beq.n	800b6fa <vPortEnterCritical+0x4e>
	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	603b      	str	r3, [r7, #0]
}
 800b6f4:	bf00      	nop
 800b6f6:	bf00      	nop
 800b6f8:	e7fd      	b.n	800b6f6 <vPortEnterCritical+0x4a>
	}
}
 800b6fa:	bf00      	nop
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bc80      	pop	{r7}
 800b702:	4770      	bx	lr
 800b704:	20000120 	.word	0x20000120
 800b708:	e000ed04 	.word	0xe000ed04

0800b70c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b712:	4b12      	ldr	r3, [pc, #72]	@ (800b75c <vPortExitCritical+0x50>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10b      	bne.n	800b732 <vPortExitCritical+0x26>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	607b      	str	r3, [r7, #4]
}
 800b72c:	bf00      	nop
 800b72e:	bf00      	nop
 800b730:	e7fd      	b.n	800b72e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b732:	4b0a      	ldr	r3, [pc, #40]	@ (800b75c <vPortExitCritical+0x50>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3b01      	subs	r3, #1
 800b738:	4a08      	ldr	r2, [pc, #32]	@ (800b75c <vPortExitCritical+0x50>)
 800b73a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b73c:	4b07      	ldr	r3, [pc, #28]	@ (800b75c <vPortExitCritical+0x50>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d105      	bne.n	800b750 <vPortExitCritical+0x44>
 800b744:	2300      	movs	r3, #0
 800b746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	f383 8811 	msr	BASEPRI, r3
}
 800b74e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	bc80      	pop	{r7}
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	20000120 	.word	0x20000120

0800b760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b760:	f3ef 8009 	mrs	r0, PSP
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a0 <pxCurrentTCBConst>)
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b770:	6010      	str	r0, [r2, #0]
 800b772:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b776:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b77a:	f380 8811 	msr	BASEPRI, r0
 800b77e:	f7fe ffeb 	bl	800a758 <vTaskSwitchContext>
 800b782:	f04f 0000 	mov.w	r0, #0
 800b786:	f380 8811 	msr	BASEPRI, r0
 800b78a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b78e:	6819      	ldr	r1, [r3, #0]
 800b790:	6808      	ldr	r0, [r1, #0]
 800b792:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b796:	f380 8809 	msr	PSP, r0
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	4770      	bx	lr

0800b7a0 <pxCurrentTCBConst>:
 800b7a0:	20000a54 	.word	0x20000a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop

0800b7a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	607b      	str	r3, [r7, #4]
}
 800b7c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b7c2:	f7fe ff0f 	bl	800a5e4 <xTaskIncrementTick>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7cc:	4b06      	ldr	r3, [pc, #24]	@ (800b7e8 <xPortSysTickHandler+0x40>)
 800b7ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	f383 8811 	msr	BASEPRI, r3
}
 800b7de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7e0:	bf00      	nop
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	e000ed04 	.word	0xe000ed04

0800b7ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b81c <vPortSetupTimerInterrupt+0x30>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b820 <vPortSetupTimerInterrupt+0x34>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7fc:	4b09      	ldr	r3, [pc, #36]	@ (800b824 <vPortSetupTimerInterrupt+0x38>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a09      	ldr	r2, [pc, #36]	@ (800b828 <vPortSetupTimerInterrupt+0x3c>)
 800b802:	fba2 2303 	umull	r2, r3, r2, r3
 800b806:	099b      	lsrs	r3, r3, #6
 800b808:	4a08      	ldr	r2, [pc, #32]	@ (800b82c <vPortSetupTimerInterrupt+0x40>)
 800b80a:	3b01      	subs	r3, #1
 800b80c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b80e:	4b03      	ldr	r3, [pc, #12]	@ (800b81c <vPortSetupTimerInterrupt+0x30>)
 800b810:	2207      	movs	r2, #7
 800b812:	601a      	str	r2, [r3, #0]
}
 800b814:	bf00      	nop
 800b816:	46bd      	mov	sp, r7
 800b818:	bc80      	pop	{r7}
 800b81a:	4770      	bx	lr
 800b81c:	e000e010 	.word	0xe000e010
 800b820:	e000e018 	.word	0xe000e018
 800b824:	20000004 	.word	0x20000004
 800b828:	10624dd3 	.word	0x10624dd3
 800b82c:	e000e014 	.word	0xe000e014

0800b830 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b836:	f3ef 8305 	mrs	r3, IPSR
 800b83a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2b0f      	cmp	r3, #15
 800b840:	d915      	bls.n	800b86e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b842:	4a17      	ldr	r2, [pc, #92]	@ (800b8a0 <vPortValidateInterruptPriority+0x70>)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	4413      	add	r3, r2
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b84c:	4b15      	ldr	r3, [pc, #84]	@ (800b8a4 <vPortValidateInterruptPriority+0x74>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	7afa      	ldrb	r2, [r7, #11]
 800b852:	429a      	cmp	r2, r3
 800b854:	d20b      	bcs.n	800b86e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	607b      	str	r3, [r7, #4]
}
 800b868:	bf00      	nop
 800b86a:	bf00      	nop
 800b86c:	e7fd      	b.n	800b86a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b86e:	4b0e      	ldr	r3, [pc, #56]	@ (800b8a8 <vPortValidateInterruptPriority+0x78>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b876:	4b0d      	ldr	r3, [pc, #52]	@ (800b8ac <vPortValidateInterruptPriority+0x7c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d90b      	bls.n	800b896 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	603b      	str	r3, [r7, #0]
}
 800b890:	bf00      	nop
 800b892:	bf00      	nop
 800b894:	e7fd      	b.n	800b892 <vPortValidateInterruptPriority+0x62>
	}
 800b896:	bf00      	nop
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bc80      	pop	{r7}
 800b89e:	4770      	bx	lr
 800b8a0:	e000e3f0 	.word	0xe000e3f0
 800b8a4:	20001080 	.word	0x20001080
 800b8a8:	e000ed0c 	.word	0xe000ed0c
 800b8ac:	20001084 	.word	0x20001084

0800b8b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b08a      	sub	sp, #40	@ 0x28
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8bc:	f7fe fdd8 	bl	800a470 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8c0:	4b5c      	ldr	r3, [pc, #368]	@ (800ba34 <pvPortMalloc+0x184>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d101      	bne.n	800b8cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8c8:	f000 f924 	bl	800bb14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8cc:	4b5a      	ldr	r3, [pc, #360]	@ (800ba38 <pvPortMalloc+0x188>)
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4013      	ands	r3, r2
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f040 8095 	bne.w	800ba04 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d01e      	beq.n	800b91e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b8e0:	2208      	movs	r2, #8
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f003 0307 	and.w	r3, r3, #7
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d015      	beq.n	800b91e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f023 0307 	bic.w	r3, r3, #7
 800b8f8:	3308      	adds	r3, #8
 800b8fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f003 0307 	and.w	r3, r3, #7
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00b      	beq.n	800b91e <pvPortMalloc+0x6e>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	617b      	str	r3, [r7, #20]
}
 800b918:	bf00      	nop
 800b91a:	bf00      	nop
 800b91c:	e7fd      	b.n	800b91a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d06f      	beq.n	800ba04 <pvPortMalloc+0x154>
 800b924:	4b45      	ldr	r3, [pc, #276]	@ (800ba3c <pvPortMalloc+0x18c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d86a      	bhi.n	800ba04 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b92e:	4b44      	ldr	r3, [pc, #272]	@ (800ba40 <pvPortMalloc+0x190>)
 800b930:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b932:	4b43      	ldr	r3, [pc, #268]	@ (800ba40 <pvPortMalloc+0x190>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b938:	e004      	b.n	800b944 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d903      	bls.n	800b956 <pvPortMalloc+0xa6>
 800b94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1f1      	bne.n	800b93a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b956:	4b37      	ldr	r3, [pc, #220]	@ (800ba34 <pvPortMalloc+0x184>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d051      	beq.n	800ba04 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2208      	movs	r2, #8
 800b966:	4413      	add	r3, r2
 800b968:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	6a3b      	ldr	r3, [r7, #32]
 800b970:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	1ad2      	subs	r2, r2, r3
 800b97a:	2308      	movs	r3, #8
 800b97c:	005b      	lsls	r3, r3, #1
 800b97e:	429a      	cmp	r2, r3
 800b980:	d920      	bls.n	800b9c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4413      	add	r3, r2
 800b988:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	f003 0307 	and.w	r3, r3, #7
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00b      	beq.n	800b9ac <pvPortMalloc+0xfc>
	__asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	613b      	str	r3, [r7, #16]
}
 800b9a6:	bf00      	nop
 800b9a8:	bf00      	nop
 800b9aa:	e7fd      	b.n	800b9a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ae:	685a      	ldr	r2, [r3, #4]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	1ad2      	subs	r2, r2, r3
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9be:	69b8      	ldr	r0, [r7, #24]
 800b9c0:	f000 f90a 	bl	800bbd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9c4:	4b1d      	ldr	r3, [pc, #116]	@ (800ba3c <pvPortMalloc+0x18c>)
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	4a1b      	ldr	r2, [pc, #108]	@ (800ba3c <pvPortMalloc+0x18c>)
 800b9d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9d2:	4b1a      	ldr	r3, [pc, #104]	@ (800ba3c <pvPortMalloc+0x18c>)
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	4b1b      	ldr	r3, [pc, #108]	@ (800ba44 <pvPortMalloc+0x194>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d203      	bcs.n	800b9e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9de:	4b17      	ldr	r3, [pc, #92]	@ (800ba3c <pvPortMalloc+0x18c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a18      	ldr	r2, [pc, #96]	@ (800ba44 <pvPortMalloc+0x194>)
 800b9e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e8:	685a      	ldr	r2, [r3, #4]
 800b9ea:	4b13      	ldr	r3, [pc, #76]	@ (800ba38 <pvPortMalloc+0x188>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	431a      	orrs	r2, r3
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b9fa:	4b13      	ldr	r3, [pc, #76]	@ (800ba48 <pvPortMalloc+0x198>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	4a11      	ldr	r2, [pc, #68]	@ (800ba48 <pvPortMalloc+0x198>)
 800ba02:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba04:	f7fe fd42 	bl	800a48c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	f003 0307 	and.w	r3, r3, #7
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00b      	beq.n	800ba2a <pvPortMalloc+0x17a>
	__asm volatile
 800ba12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba16:	f383 8811 	msr	BASEPRI, r3
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	60fb      	str	r3, [r7, #12]
}
 800ba24:	bf00      	nop
 800ba26:	bf00      	nop
 800ba28:	e7fd      	b.n	800ba26 <pvPortMalloc+0x176>
	return pvReturn;
 800ba2a:	69fb      	ldr	r3, [r7, #28]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3728      	adds	r7, #40	@ 0x28
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20001c90 	.word	0x20001c90
 800ba38:	20001ca4 	.word	0x20001ca4
 800ba3c:	20001c94 	.word	0x20001c94
 800ba40:	20001c88 	.word	0x20001c88
 800ba44:	20001c98 	.word	0x20001c98
 800ba48:	20001c9c 	.word	0x20001c9c

0800ba4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d04f      	beq.n	800bafe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba5e:	2308      	movs	r3, #8
 800ba60:	425b      	negs	r3, r3
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	4413      	add	r3, r2
 800ba66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	685a      	ldr	r2, [r3, #4]
 800ba70:	4b25      	ldr	r3, [pc, #148]	@ (800bb08 <vPortFree+0xbc>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4013      	ands	r3, r2
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10b      	bne.n	800ba92 <vPortFree+0x46>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	60fb      	str	r3, [r7, #12]
}
 800ba8c:	bf00      	nop
 800ba8e:	bf00      	nop
 800ba90:	e7fd      	b.n	800ba8e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00b      	beq.n	800bab2 <vPortFree+0x66>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	60bb      	str	r3, [r7, #8]
}
 800baac:	bf00      	nop
 800baae:	bf00      	nop
 800bab0:	e7fd      	b.n	800baae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	685a      	ldr	r2, [r3, #4]
 800bab6:	4b14      	ldr	r3, [pc, #80]	@ (800bb08 <vPortFree+0xbc>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4013      	ands	r3, r2
 800babc:	2b00      	cmp	r3, #0
 800babe:	d01e      	beq.n	800bafe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d11a      	bne.n	800bafe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	4b0e      	ldr	r3, [pc, #56]	@ (800bb08 <vPortFree+0xbc>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	43db      	mvns	r3, r3
 800bad2:	401a      	ands	r2, r3
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bad8:	f7fe fcca 	bl	800a470 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	685a      	ldr	r2, [r3, #4]
 800bae0:	4b0a      	ldr	r3, [pc, #40]	@ (800bb0c <vPortFree+0xc0>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4413      	add	r3, r2
 800bae6:	4a09      	ldr	r2, [pc, #36]	@ (800bb0c <vPortFree+0xc0>)
 800bae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800baea:	6938      	ldr	r0, [r7, #16]
 800baec:	f000 f874 	bl	800bbd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800baf0:	4b07      	ldr	r3, [pc, #28]	@ (800bb10 <vPortFree+0xc4>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3301      	adds	r3, #1
 800baf6:	4a06      	ldr	r2, [pc, #24]	@ (800bb10 <vPortFree+0xc4>)
 800baf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bafa:	f7fe fcc7 	bl	800a48c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bafe:	bf00      	nop
 800bb00:	3718      	adds	r7, #24
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	20001ca4 	.word	0x20001ca4
 800bb0c:	20001c94 	.word	0x20001c94
 800bb10:	20001ca0 	.word	0x20001ca0

0800bb14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800bb1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb20:	4b27      	ldr	r3, [pc, #156]	@ (800bbc0 <prvHeapInit+0xac>)
 800bb22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f003 0307 	and.w	r3, r3, #7
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00c      	beq.n	800bb48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3307      	adds	r3, #7
 800bb32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f023 0307 	bic.w	r3, r3, #7
 800bb3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	4a1f      	ldr	r2, [pc, #124]	@ (800bbc0 <prvHeapInit+0xac>)
 800bb44:	4413      	add	r3, r2
 800bb46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb4c:	4a1d      	ldr	r2, [pc, #116]	@ (800bbc4 <prvHeapInit+0xb0>)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb52:	4b1c      	ldr	r3, [pc, #112]	@ (800bbc4 <prvHeapInit+0xb0>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb60:	2208      	movs	r2, #8
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	1a9b      	subs	r3, r3, r2
 800bb66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f023 0307 	bic.w	r3, r3, #7
 800bb6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	4a15      	ldr	r2, [pc, #84]	@ (800bbc8 <prvHeapInit+0xb4>)
 800bb74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb76:	4b14      	ldr	r3, [pc, #80]	@ (800bbc8 <prvHeapInit+0xb4>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb7e:	4b12      	ldr	r3, [pc, #72]	@ (800bbc8 <prvHeapInit+0xb4>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2200      	movs	r2, #0
 800bb84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	1ad2      	subs	r2, r2, r3
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb94:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc8 <prvHeapInit+0xb4>)
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	4a0a      	ldr	r2, [pc, #40]	@ (800bbcc <prvHeapInit+0xb8>)
 800bba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	4a09      	ldr	r2, [pc, #36]	@ (800bbd0 <prvHeapInit+0xbc>)
 800bbaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbac:	4b09      	ldr	r3, [pc, #36]	@ (800bbd4 <prvHeapInit+0xc0>)
 800bbae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bbb2:	601a      	str	r2, [r3, #0]
}
 800bbb4:	bf00      	nop
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bc80      	pop	{r7}
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	20001088 	.word	0x20001088
 800bbc4:	20001c88 	.word	0x20001c88
 800bbc8:	20001c90 	.word	0x20001c90
 800bbcc:	20001c98 	.word	0x20001c98
 800bbd0:	20001c94 	.word	0x20001c94
 800bbd4:	20001ca4 	.word	0x20001ca4

0800bbd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbe0:	4b27      	ldr	r3, [pc, #156]	@ (800bc80 <prvInsertBlockIntoFreeList+0xa8>)
 800bbe2:	60fb      	str	r3, [r7, #12]
 800bbe4:	e002      	b.n	800bbec <prvInsertBlockIntoFreeList+0x14>
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	60fb      	str	r3, [r7, #12]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d8f7      	bhi.n	800bbe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	68ba      	ldr	r2, [r7, #8]
 800bc00:	4413      	add	r3, r2
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d108      	bne.n	800bc1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	685a      	ldr	r2, [r3, #4]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	441a      	add	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	441a      	add	r2, r3
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d118      	bne.n	800bc60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	4b14      	ldr	r3, [pc, #80]	@ (800bc84 <prvInsertBlockIntoFreeList+0xac>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d00d      	beq.n	800bc56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	441a      	add	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	601a      	str	r2, [r3, #0]
 800bc54:	e008      	b.n	800bc68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc56:	4b0b      	ldr	r3, [pc, #44]	@ (800bc84 <prvInsertBlockIntoFreeList+0xac>)
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	601a      	str	r2, [r3, #0]
 800bc5e:	e003      	b.n	800bc68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d002      	beq.n	800bc76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc76:	bf00      	nop
 800bc78:	3714      	adds	r7, #20
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bc80      	pop	{r7}
 800bc7e:	4770      	bx	lr
 800bc80:	20001c88 	.word	0x20001c88
 800bc84:	20001c90 	.word	0x20001c90

0800bc88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	4912      	ldr	r1, [pc, #72]	@ (800bcd8 <MX_USB_DEVICE_Init+0x50>)
 800bc90:	4812      	ldr	r0, [pc, #72]	@ (800bcdc <MX_USB_DEVICE_Init+0x54>)
 800bc92:	f7fc f9de 	bl	8008052 <USBD_Init>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d001      	beq.n	800bca0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc9c:	f7f5 f8e8 	bl	8000e70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bca0:	490f      	ldr	r1, [pc, #60]	@ (800bce0 <MX_USB_DEVICE_Init+0x58>)
 800bca2:	480e      	ldr	r0, [pc, #56]	@ (800bcdc <MX_USB_DEVICE_Init+0x54>)
 800bca4:	f7fc fa00 	bl	80080a8 <USBD_RegisterClass>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d001      	beq.n	800bcb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bcae:	f7f5 f8df 	bl	8000e70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bcb2:	490c      	ldr	r1, [pc, #48]	@ (800bce4 <MX_USB_DEVICE_Init+0x5c>)
 800bcb4:	4809      	ldr	r0, [pc, #36]	@ (800bcdc <MX_USB_DEVICE_Init+0x54>)
 800bcb6:	f7fc f931 	bl	8007f1c <USBD_CDC_RegisterInterface>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bcc0:	f7f5 f8d6 	bl	8000e70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bcc4:	4805      	ldr	r0, [pc, #20]	@ (800bcdc <MX_USB_DEVICE_Init+0x54>)
 800bcc6:	f7fc fa08 	bl	80080da <USBD_Start>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d001      	beq.n	800bcd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bcd0:	f7f5 f8ce 	bl	8000e70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bcd4:	bf00      	nop
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	20000134 	.word	0x20000134
 800bcdc:	20001ca8 	.word	0x20001ca8
 800bce0:	2000001c 	.word	0x2000001c
 800bce4:	20000124 	.word	0x20000124

0800bce8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bcec:	2200      	movs	r2, #0
 800bcee:	4905      	ldr	r1, [pc, #20]	@ (800bd04 <CDC_Init_FS+0x1c>)
 800bcf0:	4805      	ldr	r0, [pc, #20]	@ (800bd08 <CDC_Init_FS+0x20>)
 800bcf2:	f7fc f929 	bl	8007f48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bcf6:	4905      	ldr	r1, [pc, #20]	@ (800bd0c <CDC_Init_FS+0x24>)
 800bcf8:	4803      	ldr	r0, [pc, #12]	@ (800bd08 <CDC_Init_FS+0x20>)
 800bcfa:	f7fc f93e 	bl	8007f7a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bcfe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	2000236c 	.word	0x2000236c
 800bd08:	20001ca8 	.word	0x20001ca8
 800bd0c:	20001f6c 	.word	0x20001f6c

0800bd10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bd10:	b480      	push	{r7}
 800bd12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bd14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bc80      	pop	{r7}
 800bd1c:	4770      	bx	lr
	...

0800bd20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	6039      	str	r1, [r7, #0]
 800bd2a:	71fb      	strb	r3, [r7, #7]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	2b23      	cmp	r3, #35	@ 0x23
 800bd34:	d84a      	bhi.n	800bdcc <CDC_Control_FS+0xac>
 800bd36:	a201      	add	r2, pc, #4	@ (adr r2, 800bd3c <CDC_Control_FS+0x1c>)
 800bd38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd3c:	0800bdcd 	.word	0x0800bdcd
 800bd40:	0800bdcd 	.word	0x0800bdcd
 800bd44:	0800bdcd 	.word	0x0800bdcd
 800bd48:	0800bdcd 	.word	0x0800bdcd
 800bd4c:	0800bdcd 	.word	0x0800bdcd
 800bd50:	0800bdcd 	.word	0x0800bdcd
 800bd54:	0800bdcd 	.word	0x0800bdcd
 800bd58:	0800bdcd 	.word	0x0800bdcd
 800bd5c:	0800bdcd 	.word	0x0800bdcd
 800bd60:	0800bdcd 	.word	0x0800bdcd
 800bd64:	0800bdcd 	.word	0x0800bdcd
 800bd68:	0800bdcd 	.word	0x0800bdcd
 800bd6c:	0800bdcd 	.word	0x0800bdcd
 800bd70:	0800bdcd 	.word	0x0800bdcd
 800bd74:	0800bdcd 	.word	0x0800bdcd
 800bd78:	0800bdcd 	.word	0x0800bdcd
 800bd7c:	0800bdcd 	.word	0x0800bdcd
 800bd80:	0800bdcd 	.word	0x0800bdcd
 800bd84:	0800bdcd 	.word	0x0800bdcd
 800bd88:	0800bdcd 	.word	0x0800bdcd
 800bd8c:	0800bdcd 	.word	0x0800bdcd
 800bd90:	0800bdcd 	.word	0x0800bdcd
 800bd94:	0800bdcd 	.word	0x0800bdcd
 800bd98:	0800bdcd 	.word	0x0800bdcd
 800bd9c:	0800bdcd 	.word	0x0800bdcd
 800bda0:	0800bdcd 	.word	0x0800bdcd
 800bda4:	0800bdcd 	.word	0x0800bdcd
 800bda8:	0800bdcd 	.word	0x0800bdcd
 800bdac:	0800bdcd 	.word	0x0800bdcd
 800bdb0:	0800bdcd 	.word	0x0800bdcd
 800bdb4:	0800bdcd 	.word	0x0800bdcd
 800bdb8:	0800bdcd 	.word	0x0800bdcd
 800bdbc:	0800bdcd 	.word	0x0800bdcd
 800bdc0:	0800bdcd 	.word	0x0800bdcd
 800bdc4:	0800bdcd 	.word	0x0800bdcd
 800bdc8:	0800bdcd 	.word	0x0800bdcd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bdcc:	bf00      	nop
  }

  return (USBD_OK);
 800bdce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bc80      	pop	{r7}
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop

0800bddc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bde6:	6879      	ldr	r1, [r7, #4]
 800bde8:	480d      	ldr	r0, [pc, #52]	@ (800be20 <CDC_Receive_FS+0x44>)
 800bdea:	f7fc f8c6 	bl	8007f7a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bdee:	480c      	ldr	r0, [pc, #48]	@ (800be20 <CDC_Receive_FS+0x44>)
 800bdf0:	f7fc f905 	bl	8007ffe <USBD_CDC_ReceivePacket>

  if (*Buf >= 1 && *Buf <= 5) {
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00b      	beq.n	800be14 <CDC_Receive_FS+0x38>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	2b05      	cmp	r3, #5
 800be02:	d807      	bhi.n	800be14 <CDC_Receive_FS+0x38>
	    period_task_1 = *Buf;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	781a      	ldrb	r2, [r3, #0]
 800be08:	4b06      	ldr	r3, [pc, #24]	@ (800be24 <CDC_Receive_FS+0x48>)
 800be0a:	701a      	strb	r2, [r3, #0]

	    period_task_2 = *Buf;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	781a      	ldrb	r2, [r3, #0]
 800be10:	4b05      	ldr	r3, [pc, #20]	@ (800be28 <CDC_Receive_FS+0x4c>)
 800be12:	701a      	strb	r2, [r3, #0]



//    printf("Received: %d\n", len);

  return (USBD_OK);
 800be14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800be16:	4618      	mov	r0, r3
 800be18:	3708      	adds	r7, #8
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20001ca8 	.word	0x20001ca8
 800be24:	20000000 	.word	0x20000000
 800be28:	20000001 	.word	0x20000001

0800be2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	460b      	mov	r3, r1
 800be36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800be38:	2300      	movs	r3, #0
 800be3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800be3c:	4b0d      	ldr	r3, [pc, #52]	@ (800be74 <CDC_Transmit_FS+0x48>)
 800be3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800be4e:	2301      	movs	r3, #1
 800be50:	e00b      	b.n	800be6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800be52:	887b      	ldrh	r3, [r7, #2]
 800be54:	461a      	mov	r2, r3
 800be56:	6879      	ldr	r1, [r7, #4]
 800be58:	4806      	ldr	r0, [pc, #24]	@ (800be74 <CDC_Transmit_FS+0x48>)
 800be5a:	f7fc f875 	bl	8007f48 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800be5e:	4805      	ldr	r0, [pc, #20]	@ (800be74 <CDC_Transmit_FS+0x48>)
 800be60:	f7fc f89e 	bl	8007fa0 <USBD_CDC_TransmitPacket>
 800be64:	4603      	mov	r3, r0
 800be66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800be68:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	20001ca8 	.word	0x20001ca8

0800be78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	4603      	mov	r3, r0
 800be80:	6039      	str	r1, [r7, #0]
 800be82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2212      	movs	r2, #18
 800be88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be8a:	4b03      	ldr	r3, [pc, #12]	@ (800be98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	bc80      	pop	{r7}
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	20000150 	.word	0x20000150

0800be9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	4603      	mov	r3, r0
 800bea4:	6039      	str	r1, [r7, #0]
 800bea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2204      	movs	r2, #4
 800beac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800beae:	4b03      	ldr	r3, [pc, #12]	@ (800bebc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bc80      	pop	{r7}
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	20000164 	.word	0x20000164

0800bec0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	6039      	str	r1, [r7, #0]
 800beca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800becc:	79fb      	ldrb	r3, [r7, #7]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d105      	bne.n	800bede <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	4907      	ldr	r1, [pc, #28]	@ (800bef4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bed6:	4808      	ldr	r0, [pc, #32]	@ (800bef8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bed8:	f7fd f875 	bl	8008fc6 <USBD_GetString>
 800bedc:	e004      	b.n	800bee8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	4904      	ldr	r1, [pc, #16]	@ (800bef4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bee2:	4805      	ldr	r0, [pc, #20]	@ (800bef8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bee4:	f7fd f86f 	bl	8008fc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bee8:	4b02      	ldr	r3, [pc, #8]	@ (800bef4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	2000276c 	.word	0x2000276c
 800bef8:	0800d66c 	.word	0x0800d66c

0800befc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	6039      	str	r1, [r7, #0]
 800bf06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	4904      	ldr	r1, [pc, #16]	@ (800bf1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bf0c:	4804      	ldr	r0, [pc, #16]	@ (800bf20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf0e:	f7fd f85a 	bl	8008fc6 <USBD_GetString>
  return USBD_StrDesc;
 800bf12:	4b02      	ldr	r3, [pc, #8]	@ (800bf1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	2000276c 	.word	0x2000276c
 800bf20:	0800d684 	.word	0x0800d684

0800bf24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	6039      	str	r1, [r7, #0]
 800bf2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	221a      	movs	r2, #26
 800bf34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf36:	f000 f843 	bl	800bfc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bf3a:	4b02      	ldr	r3, [pc, #8]	@ (800bf44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	20000168 	.word	0x20000168

0800bf48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	4603      	mov	r3, r0
 800bf50:	6039      	str	r1, [r7, #0]
 800bf52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf54:	79fb      	ldrb	r3, [r7, #7]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d105      	bne.n	800bf66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	4907      	ldr	r1, [pc, #28]	@ (800bf7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf5e:	4808      	ldr	r0, [pc, #32]	@ (800bf80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf60:	f7fd f831 	bl	8008fc6 <USBD_GetString>
 800bf64:	e004      	b.n	800bf70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	4904      	ldr	r1, [pc, #16]	@ (800bf7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf6a:	4805      	ldr	r0, [pc, #20]	@ (800bf80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf6c:	f7fd f82b 	bl	8008fc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf70:	4b02      	ldr	r3, [pc, #8]	@ (800bf7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	2000276c 	.word	0x2000276c
 800bf80:	0800d698 	.word	0x0800d698

0800bf84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	6039      	str	r1, [r7, #0]
 800bf8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d105      	bne.n	800bfa2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	4907      	ldr	r1, [pc, #28]	@ (800bfb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf9a:	4808      	ldr	r0, [pc, #32]	@ (800bfbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf9c:	f7fd f813 	bl	8008fc6 <USBD_GetString>
 800bfa0:	e004      	b.n	800bfac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	4904      	ldr	r1, [pc, #16]	@ (800bfb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfa6:	4805      	ldr	r0, [pc, #20]	@ (800bfbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfa8:	f7fd f80d 	bl	8008fc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfac:	4b02      	ldr	r3, [pc, #8]	@ (800bfb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	2000276c 	.word	0x2000276c
 800bfbc:	0800d6a4 	.word	0x0800d6a4

0800bfc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfc6:	4b0f      	ldr	r3, [pc, #60]	@ (800c004 <Get_SerialNum+0x44>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfcc:	4b0e      	ldr	r3, [pc, #56]	@ (800c008 <Get_SerialNum+0x48>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bfd2:	4b0e      	ldr	r3, [pc, #56]	@ (800c00c <Get_SerialNum+0x4c>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4413      	add	r3, r2
 800bfde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d009      	beq.n	800bffa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bfe6:	2208      	movs	r2, #8
 800bfe8:	4909      	ldr	r1, [pc, #36]	@ (800c010 <Get_SerialNum+0x50>)
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 f814 	bl	800c018 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bff0:	2204      	movs	r2, #4
 800bff2:	4908      	ldr	r1, [pc, #32]	@ (800c014 <Get_SerialNum+0x54>)
 800bff4:	68b8      	ldr	r0, [r7, #8]
 800bff6:	f000 f80f 	bl	800c018 <IntToUnicode>
  }
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	1ffff7e8 	.word	0x1ffff7e8
 800c008:	1ffff7ec 	.word	0x1ffff7ec
 800c00c:	1ffff7f0 	.word	0x1ffff7f0
 800c010:	2000016a 	.word	0x2000016a
 800c014:	2000017a 	.word	0x2000017a

0800c018 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c018:	b480      	push	{r7}
 800c01a:	b087      	sub	sp, #28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	4613      	mov	r3, r2
 800c024:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c026:	2300      	movs	r3, #0
 800c028:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c02a:	2300      	movs	r3, #0
 800c02c:	75fb      	strb	r3, [r7, #23]
 800c02e:	e027      	b.n	800c080 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	0f1b      	lsrs	r3, r3, #28
 800c034:	2b09      	cmp	r3, #9
 800c036:	d80b      	bhi.n	800c050 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	0f1b      	lsrs	r3, r3, #28
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	4619      	mov	r1, r3
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	440b      	add	r3, r1
 800c048:	3230      	adds	r2, #48	@ 0x30
 800c04a:	b2d2      	uxtb	r2, r2
 800c04c:	701a      	strb	r2, [r3, #0]
 800c04e:	e00a      	b.n	800c066 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	0f1b      	lsrs	r3, r3, #28
 800c054:	b2da      	uxtb	r2, r3
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	005b      	lsls	r3, r3, #1
 800c05a:	4619      	mov	r1, r3
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	440b      	add	r3, r1
 800c060:	3237      	adds	r2, #55	@ 0x37
 800c062:	b2d2      	uxtb	r2, r2
 800c064:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	011b      	lsls	r3, r3, #4
 800c06a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c06c:	7dfb      	ldrb	r3, [r7, #23]
 800c06e:	005b      	lsls	r3, r3, #1
 800c070:	3301      	adds	r3, #1
 800c072:	68ba      	ldr	r2, [r7, #8]
 800c074:	4413      	add	r3, r2
 800c076:	2200      	movs	r2, #0
 800c078:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	3301      	adds	r3, #1
 800c07e:	75fb      	strb	r3, [r7, #23]
 800c080:	7dfa      	ldrb	r2, [r7, #23]
 800c082:	79fb      	ldrb	r3, [r7, #7]
 800c084:	429a      	cmp	r2, r3
 800c086:	d3d3      	bcc.n	800c030 <IntToUnicode+0x18>
  }
}
 800c088:	bf00      	nop
 800c08a:	bf00      	nop
 800c08c:	371c      	adds	r7, #28
 800c08e:	46bd      	mov	sp, r7
 800c090:	bc80      	pop	{r7}
 800c092:	4770      	bx	lr

0800c094 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a0d      	ldr	r2, [pc, #52]	@ (800c0d8 <HAL_PCD_MspInit+0x44>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d113      	bne.n	800c0ce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c0dc <HAL_PCD_MspInit+0x48>)
 800c0a8:	69db      	ldr	r3, [r3, #28]
 800c0aa:	4a0c      	ldr	r2, [pc, #48]	@ (800c0dc <HAL_PCD_MspInit+0x48>)
 800c0ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c0b0:	61d3      	str	r3, [r2, #28]
 800c0b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c0dc <HAL_PCD_MspInit+0x48>)
 800c0b4:	69db      	ldr	r3, [r3, #28]
 800c0b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0ba:	60fb      	str	r3, [r7, #12]
 800c0bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800c0be:	2200      	movs	r2, #0
 800c0c0:	2105      	movs	r1, #5
 800c0c2:	2014      	movs	r0, #20
 800c0c4:	f7f5 f9c7 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c0c8:	2014      	movs	r0, #20
 800c0ca:	f7f5 f9e0 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c0ce:	bf00      	nop
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	40005c00 	.word	0x40005c00
 800c0dc:	40021000 	.word	0x40021000

0800c0e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	4610      	mov	r0, r2
 800c0f8:	f7fc f837 	bl	800816a <USBD_LL_SetupStage>
}
 800c0fc:	bf00      	nop
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	460b      	mov	r3, r1
 800c10e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800c116:	78fa      	ldrb	r2, [r7, #3]
 800c118:	6879      	ldr	r1, [r7, #4]
 800c11a:	4613      	mov	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	00db      	lsls	r3, r3, #3
 800c122:	440b      	add	r3, r1
 800c124:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	78fb      	ldrb	r3, [r7, #3]
 800c12c:	4619      	mov	r1, r3
 800c12e:	f7fc f869 	bl	8008204 <USBD_LL_DataOutStage>
}
 800c132:	bf00      	nop
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b082      	sub	sp, #8
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	460b      	mov	r3, r1
 800c144:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800c14c:	78fa      	ldrb	r2, [r7, #3]
 800c14e:	6879      	ldr	r1, [r7, #4]
 800c150:	4613      	mov	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	00db      	lsls	r3, r3, #3
 800c158:	440b      	add	r3, r1
 800c15a:	3324      	adds	r3, #36	@ 0x24
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	78fb      	ldrb	r3, [r7, #3]
 800c160:	4619      	mov	r1, r3
 800c162:	f7fc f8c0 	bl	80082e6 <USBD_LL_DataInStage>
}
 800c166:	bf00      	nop
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b082      	sub	sp, #8
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7fc f9d0 	bl	8008522 <USBD_LL_SOF>
}
 800c182:	bf00      	nop
 800c184:	3708      	adds	r7, #8
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b084      	sub	sp, #16
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c192:	2301      	movs	r3, #1
 800c194:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	799b      	ldrb	r3, [r3, #6]
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	d001      	beq.n	800c1a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c19e:	f7f4 fe67 	bl	8000e70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1a8:	7bfa      	ldrb	r2, [r7, #15]
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fc f980 	bl	80084b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fc f939 	bl	8008430 <USBD_LL_Reset>
}
 800c1be:	bf00      	nop
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
	...

0800c1c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fc f97a 	bl	80084d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	7a9b      	ldrb	r3, [r3, #10]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d005      	beq.n	800c1f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1e4:	4b04      	ldr	r3, [pc, #16]	@ (800c1f8 <HAL_PCD_SuspendCallback+0x30>)
 800c1e6:	691b      	ldr	r3, [r3, #16]
 800c1e8:	4a03      	ldr	r2, [pc, #12]	@ (800c1f8 <HAL_PCD_SuspendCallback+0x30>)
 800c1ea:	f043 0306 	orr.w	r3, r3, #6
 800c1ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1f0:	bf00      	nop
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	e000ed00 	.word	0xe000ed00

0800c1fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fc f974 	bl	80084f8 <USBD_LL_Resume>
}
 800c210:	bf00      	nop
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c220:	4a28      	ldr	r2, [pc, #160]	@ (800c2c4 <USBD_LL_Init+0xac>)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a26      	ldr	r2, [pc, #152]	@ (800c2c4 <USBD_LL_Init+0xac>)
 800c22c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c230:	4b24      	ldr	r3, [pc, #144]	@ (800c2c4 <USBD_LL_Init+0xac>)
 800c232:	4a25      	ldr	r2, [pc, #148]	@ (800c2c8 <USBD_LL_Init+0xb0>)
 800c234:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c236:	4b23      	ldr	r3, [pc, #140]	@ (800c2c4 <USBD_LL_Init+0xac>)
 800c238:	2208      	movs	r2, #8
 800c23a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c23c:	4b21      	ldr	r3, [pc, #132]	@ (800c2c4 <USBD_LL_Init+0xac>)
 800c23e:	2202      	movs	r2, #2
 800c240:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c242:	4b20      	ldr	r3, [pc, #128]	@ (800c2c4 <USBD_LL_Init+0xac>)
 800c244:	2200      	movs	r2, #0
 800c246:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c248:	4b1e      	ldr	r3, [pc, #120]	@ (800c2c4 <USBD_LL_Init+0xac>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c24e:	4b1d      	ldr	r3, [pc, #116]	@ (800c2c4 <USBD_LL_Init+0xac>)
 800c250:	2200      	movs	r2, #0
 800c252:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c254:	481b      	ldr	r0, [pc, #108]	@ (800c2c4 <USBD_LL_Init+0xac>)
 800c256:	f7f6 fbfe 	bl	8002a56 <HAL_PCD_Init>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d001      	beq.n	800c264 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c260:	f7f4 fe06 	bl	8000e70 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c26a:	2318      	movs	r3, #24
 800c26c:	2200      	movs	r2, #0
 800c26e:	2100      	movs	r1, #0
 800c270:	f7f8 f90f 	bl	8004492 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c27a:	2358      	movs	r3, #88	@ 0x58
 800c27c:	2200      	movs	r2, #0
 800c27e:	2180      	movs	r1, #128	@ 0x80
 800c280:	f7f8 f907 	bl	8004492 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c28a:	23c0      	movs	r3, #192	@ 0xc0
 800c28c:	2200      	movs	r2, #0
 800c28e:	2181      	movs	r1, #129	@ 0x81
 800c290:	f7f8 f8ff 	bl	8004492 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c29a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c29e:	2200      	movs	r2, #0
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	f7f8 f8f6 	bl	8004492 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c2ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	2182      	movs	r1, #130	@ 0x82
 800c2b4:	f7f8 f8ed 	bl	8004492 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	2000296c 	.word	0x2000296c
 800c2c8:	40005c00 	.word	0x40005c00

0800c2cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7f6 fcad 	bl	8002c42 <HAL_PCD_Start>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ec:	7bfb      	ldrb	r3, [r7, #15]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 f94e 	bl	800c590 <USBD_Get_USB_Status>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b084      	sub	sp, #16
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	4608      	mov	r0, r1
 800c30c:	4611      	mov	r1, r2
 800c30e:	461a      	mov	r2, r3
 800c310:	4603      	mov	r3, r0
 800c312:	70fb      	strb	r3, [r7, #3]
 800c314:	460b      	mov	r3, r1
 800c316:	70bb      	strb	r3, [r7, #2]
 800c318:	4613      	mov	r3, r2
 800c31a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c32a:	78bb      	ldrb	r3, [r7, #2]
 800c32c:	883a      	ldrh	r2, [r7, #0]
 800c32e:	78f9      	ldrb	r1, [r7, #3]
 800c330:	f7f6 fe01 	bl	8002f36 <HAL_PCD_EP_Open>
 800c334:	4603      	mov	r3, r0
 800c336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c338:	7bfb      	ldrb	r3, [r7, #15]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 f928 	bl	800c590 <USBD_Get_USB_Status>
 800c340:	4603      	mov	r3, r0
 800c342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c344:	7bbb      	ldrb	r3, [r7, #14]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b084      	sub	sp, #16
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	460b      	mov	r3, r1
 800c358:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c368:	78fa      	ldrb	r2, [r7, #3]
 800c36a:	4611      	mov	r1, r2
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7f6 fe3f 	bl	8002ff0 <HAL_PCD_EP_Close>
 800c372:	4603      	mov	r3, r0
 800c374:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c376:	7bfb      	ldrb	r3, [r7, #15]
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 f909 	bl	800c590 <USBD_Get_USB_Status>
 800c37e:	4603      	mov	r3, r0
 800c380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c382:	7bbb      	ldrb	r3, [r7, #14]
}
 800c384:	4618      	mov	r0, r3
 800c386:	3710      	adds	r7, #16
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	460b      	mov	r3, r1
 800c396:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c398:	2300      	movs	r3, #0
 800c39a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c39c:	2300      	movs	r3, #0
 800c39e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c3a6:	78fa      	ldrb	r2, [r7, #3]
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7f6 fee7 	bl	800317e <HAL_PCD_EP_SetStall>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3b4:	7bfb      	ldrb	r3, [r7, #15]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f000 f8ea 	bl	800c590 <USBD_Get_USB_Status>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b084      	sub	sp, #16
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c3e4:	78fa      	ldrb	r2, [r7, #3]
 800c3e6:	4611      	mov	r1, r2
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7f6 ff28 	bl	800323e <HAL_PCD_EP_ClrStall>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3f2:	7bfb      	ldrb	r3, [r7, #15]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f000 f8cb 	bl	800c590 <USBD_Get_USB_Status>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c41a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c41c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c420:	2b00      	cmp	r3, #0
 800c422:	da0b      	bge.n	800c43c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c424:	78fb      	ldrb	r3, [r7, #3]
 800c426:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c42a:	68f9      	ldr	r1, [r7, #12]
 800c42c:	4613      	mov	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4413      	add	r3, r2
 800c432:	00db      	lsls	r3, r3, #3
 800c434:	440b      	add	r3, r1
 800c436:	3312      	adds	r3, #18
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	e00b      	b.n	800c454 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c43c:	78fb      	ldrb	r3, [r7, #3]
 800c43e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c442:	68f9      	ldr	r1, [r7, #12]
 800c444:	4613      	mov	r3, r2
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	00db      	lsls	r3, r3, #3
 800c44c:	440b      	add	r3, r1
 800c44e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c452:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c454:	4618      	mov	r0, r3
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	bc80      	pop	{r7}
 800c45c:	4770      	bx	lr

0800c45e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b084      	sub	sp, #16
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	460b      	mov	r3, r1
 800c468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c478:	78fa      	ldrb	r2, [r7, #3]
 800c47a:	4611      	mov	r1, r2
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7f6 fd36 	bl	8002eee <HAL_PCD_SetAddress>
 800c482:	4603      	mov	r3, r0
 800c484:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	4618      	mov	r0, r3
 800c48a:	f000 f881 	bl	800c590 <USBD_Get_USB_Status>
 800c48e:	4603      	mov	r3, r0
 800c490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c492:	7bbb      	ldrb	r3, [r7, #14]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	607a      	str	r2, [r7, #4]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	72fb      	strb	r3, [r7, #11]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c4be:	893b      	ldrh	r3, [r7, #8]
 800c4c0:	7af9      	ldrb	r1, [r7, #11]
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	f7f6 fe24 	bl	8003110 <HAL_PCD_EP_Transmit>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4cc:	7dfb      	ldrb	r3, [r7, #23]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f000 f85e 	bl	800c590 <USBD_Get_USB_Status>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3718      	adds	r7, #24
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b086      	sub	sp, #24
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	60f8      	str	r0, [r7, #12]
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	72fb      	strb	r3, [r7, #11]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c504:	893b      	ldrh	r3, [r7, #8]
 800c506:	7af9      	ldrb	r1, [r7, #11]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	f7f6 fdb9 	bl	8003080 <HAL_PCD_EP_Receive>
 800c50e:	4603      	mov	r3, r0
 800c510:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c512:	7dfb      	ldrb	r3, [r7, #23]
 800c514:	4618      	mov	r0, r3
 800c516:	f000 f83b 	bl	800c590 <USBD_Get_USB_Status>
 800c51a:	4603      	mov	r3, r0
 800c51c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c51e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3718      	adds	r7, #24
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	460b      	mov	r3, r1
 800c532:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c53a:	78fa      	ldrb	r2, [r7, #3]
 800c53c:	4611      	mov	r1, r2
 800c53e:	4618      	mov	r0, r3
 800c540:	f7f6 fdcf 	bl	80030e2 <HAL_PCD_EP_GetRxCount>
 800c544:	4603      	mov	r3, r0
}
 800c546:	4618      	mov	r0, r3
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
	...

0800c550 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c558:	4b02      	ldr	r3, [pc, #8]	@ (800c564 <USBD_static_malloc+0x14>)
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	bc80      	pop	{r7}
 800c562:	4770      	bx	lr
 800c564:	20002c44 	.word	0x20002c44

0800c568 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]

}
 800c570:	bf00      	nop
 800c572:	370c      	adds	r7, #12
 800c574:	46bd      	mov	sp, r7
 800c576:	bc80      	pop	{r7}
 800c578:	4770      	bx	lr

0800c57a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c57a:	b480      	push	{r7}
 800c57c:	b083      	sub	sp, #12
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
 800c582:	460b      	mov	r3, r1
 800c584:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c586:	bf00      	nop
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bc80      	pop	{r7}
 800c58e:	4770      	bx	lr

0800c590 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c590:	b480      	push	{r7}
 800c592:	b085      	sub	sp, #20
 800c594:	af00      	add	r7, sp, #0
 800c596:	4603      	mov	r3, r0
 800c598:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c59a:	2300      	movs	r3, #0
 800c59c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c59e:	79fb      	ldrb	r3, [r7, #7]
 800c5a0:	2b03      	cmp	r3, #3
 800c5a2:	d817      	bhi.n	800c5d4 <USBD_Get_USB_Status+0x44>
 800c5a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c5ac <USBD_Get_USB_Status+0x1c>)
 800c5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5aa:	bf00      	nop
 800c5ac:	0800c5bd 	.word	0x0800c5bd
 800c5b0:	0800c5c3 	.word	0x0800c5c3
 800c5b4:	0800c5c9 	.word	0x0800c5c9
 800c5b8:	0800c5cf 	.word	0x0800c5cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c0:	e00b      	b.n	800c5da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c6:	e008      	b.n	800c5da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c5cc:	e005      	b.n	800c5da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5ce:	2302      	movs	r3, #2
 800c5d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d2:	e002      	b.n	800c5da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5d4:	2302      	movs	r3, #2
 800c5d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d8:	bf00      	nop
  }
  return usb_status;
 800c5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3714      	adds	r7, #20
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bc80      	pop	{r7}
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop

0800c5e8 <std>:
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	b510      	push	{r4, lr}
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c5f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5f6:	6083      	str	r3, [r0, #8]
 800c5f8:	8181      	strh	r1, [r0, #12]
 800c5fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5fc:	81c2      	strh	r2, [r0, #14]
 800c5fe:	6183      	str	r3, [r0, #24]
 800c600:	4619      	mov	r1, r3
 800c602:	2208      	movs	r2, #8
 800c604:	305c      	adds	r0, #92	@ 0x5c
 800c606:	f000 f9f9 	bl	800c9fc <memset>
 800c60a:	4b0d      	ldr	r3, [pc, #52]	@ (800c640 <std+0x58>)
 800c60c:	6224      	str	r4, [r4, #32]
 800c60e:	6263      	str	r3, [r4, #36]	@ 0x24
 800c610:	4b0c      	ldr	r3, [pc, #48]	@ (800c644 <std+0x5c>)
 800c612:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c614:	4b0c      	ldr	r3, [pc, #48]	@ (800c648 <std+0x60>)
 800c616:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c618:	4b0c      	ldr	r3, [pc, #48]	@ (800c64c <std+0x64>)
 800c61a:	6323      	str	r3, [r4, #48]	@ 0x30
 800c61c:	4b0c      	ldr	r3, [pc, #48]	@ (800c650 <std+0x68>)
 800c61e:	429c      	cmp	r4, r3
 800c620:	d006      	beq.n	800c630 <std+0x48>
 800c622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c626:	4294      	cmp	r4, r2
 800c628:	d002      	beq.n	800c630 <std+0x48>
 800c62a:	33d0      	adds	r3, #208	@ 0xd0
 800c62c:	429c      	cmp	r4, r3
 800c62e:	d105      	bne.n	800c63c <std+0x54>
 800c630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c638:	f000 baae 	b.w	800cb98 <__retarget_lock_init_recursive>
 800c63c:	bd10      	pop	{r4, pc}
 800c63e:	bf00      	nop
 800c640:	0800c84d 	.word	0x0800c84d
 800c644:	0800c86f 	.word	0x0800c86f
 800c648:	0800c8a7 	.word	0x0800c8a7
 800c64c:	0800c8cb 	.word	0x0800c8cb
 800c650:	20002e64 	.word	0x20002e64

0800c654 <stdio_exit_handler>:
 800c654:	4a02      	ldr	r2, [pc, #8]	@ (800c660 <stdio_exit_handler+0xc>)
 800c656:	4903      	ldr	r1, [pc, #12]	@ (800c664 <stdio_exit_handler+0x10>)
 800c658:	4803      	ldr	r0, [pc, #12]	@ (800c668 <stdio_exit_handler+0x14>)
 800c65a:	f000 b869 	b.w	800c730 <_fwalk_sglue>
 800c65e:	bf00      	nop
 800c660:	20000184 	.word	0x20000184
 800c664:	0800d44d 	.word	0x0800d44d
 800c668:	20000194 	.word	0x20000194

0800c66c <cleanup_stdio>:
 800c66c:	6841      	ldr	r1, [r0, #4]
 800c66e:	4b0c      	ldr	r3, [pc, #48]	@ (800c6a0 <cleanup_stdio+0x34>)
 800c670:	b510      	push	{r4, lr}
 800c672:	4299      	cmp	r1, r3
 800c674:	4604      	mov	r4, r0
 800c676:	d001      	beq.n	800c67c <cleanup_stdio+0x10>
 800c678:	f000 fee8 	bl	800d44c <_fflush_r>
 800c67c:	68a1      	ldr	r1, [r4, #8]
 800c67e:	4b09      	ldr	r3, [pc, #36]	@ (800c6a4 <cleanup_stdio+0x38>)
 800c680:	4299      	cmp	r1, r3
 800c682:	d002      	beq.n	800c68a <cleanup_stdio+0x1e>
 800c684:	4620      	mov	r0, r4
 800c686:	f000 fee1 	bl	800d44c <_fflush_r>
 800c68a:	68e1      	ldr	r1, [r4, #12]
 800c68c:	4b06      	ldr	r3, [pc, #24]	@ (800c6a8 <cleanup_stdio+0x3c>)
 800c68e:	4299      	cmp	r1, r3
 800c690:	d004      	beq.n	800c69c <cleanup_stdio+0x30>
 800c692:	4620      	mov	r0, r4
 800c694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c698:	f000 bed8 	b.w	800d44c <_fflush_r>
 800c69c:	bd10      	pop	{r4, pc}
 800c69e:	bf00      	nop
 800c6a0:	20002e64 	.word	0x20002e64
 800c6a4:	20002ecc 	.word	0x20002ecc
 800c6a8:	20002f34 	.word	0x20002f34

0800c6ac <global_stdio_init.part.0>:
 800c6ac:	b510      	push	{r4, lr}
 800c6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c6dc <global_stdio_init.part.0+0x30>)
 800c6b0:	4c0b      	ldr	r4, [pc, #44]	@ (800c6e0 <global_stdio_init.part.0+0x34>)
 800c6b2:	4a0c      	ldr	r2, [pc, #48]	@ (800c6e4 <global_stdio_init.part.0+0x38>)
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	2104      	movs	r1, #4
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f7ff ff94 	bl	800c5e8 <std>
 800c6c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	2109      	movs	r1, #9
 800c6c8:	f7ff ff8e 	bl	800c5e8 <std>
 800c6cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c6d0:	2202      	movs	r2, #2
 800c6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d6:	2112      	movs	r1, #18
 800c6d8:	f7ff bf86 	b.w	800c5e8 <std>
 800c6dc:	20002f9c 	.word	0x20002f9c
 800c6e0:	20002e64 	.word	0x20002e64
 800c6e4:	0800c655 	.word	0x0800c655

0800c6e8 <__sfp_lock_acquire>:
 800c6e8:	4801      	ldr	r0, [pc, #4]	@ (800c6f0 <__sfp_lock_acquire+0x8>)
 800c6ea:	f000 ba56 	b.w	800cb9a <__retarget_lock_acquire_recursive>
 800c6ee:	bf00      	nop
 800c6f0:	20002fa5 	.word	0x20002fa5

0800c6f4 <__sfp_lock_release>:
 800c6f4:	4801      	ldr	r0, [pc, #4]	@ (800c6fc <__sfp_lock_release+0x8>)
 800c6f6:	f000 ba51 	b.w	800cb9c <__retarget_lock_release_recursive>
 800c6fa:	bf00      	nop
 800c6fc:	20002fa5 	.word	0x20002fa5

0800c700 <__sinit>:
 800c700:	b510      	push	{r4, lr}
 800c702:	4604      	mov	r4, r0
 800c704:	f7ff fff0 	bl	800c6e8 <__sfp_lock_acquire>
 800c708:	6a23      	ldr	r3, [r4, #32]
 800c70a:	b11b      	cbz	r3, 800c714 <__sinit+0x14>
 800c70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c710:	f7ff bff0 	b.w	800c6f4 <__sfp_lock_release>
 800c714:	4b04      	ldr	r3, [pc, #16]	@ (800c728 <__sinit+0x28>)
 800c716:	6223      	str	r3, [r4, #32]
 800c718:	4b04      	ldr	r3, [pc, #16]	@ (800c72c <__sinit+0x2c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d1f5      	bne.n	800c70c <__sinit+0xc>
 800c720:	f7ff ffc4 	bl	800c6ac <global_stdio_init.part.0>
 800c724:	e7f2      	b.n	800c70c <__sinit+0xc>
 800c726:	bf00      	nop
 800c728:	0800c66d 	.word	0x0800c66d
 800c72c:	20002f9c 	.word	0x20002f9c

0800c730 <_fwalk_sglue>:
 800c730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c734:	4607      	mov	r7, r0
 800c736:	4688      	mov	r8, r1
 800c738:	4614      	mov	r4, r2
 800c73a:	2600      	movs	r6, #0
 800c73c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c740:	f1b9 0901 	subs.w	r9, r9, #1
 800c744:	d505      	bpl.n	800c752 <_fwalk_sglue+0x22>
 800c746:	6824      	ldr	r4, [r4, #0]
 800c748:	2c00      	cmp	r4, #0
 800c74a:	d1f7      	bne.n	800c73c <_fwalk_sglue+0xc>
 800c74c:	4630      	mov	r0, r6
 800c74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c752:	89ab      	ldrh	r3, [r5, #12]
 800c754:	2b01      	cmp	r3, #1
 800c756:	d907      	bls.n	800c768 <_fwalk_sglue+0x38>
 800c758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c75c:	3301      	adds	r3, #1
 800c75e:	d003      	beq.n	800c768 <_fwalk_sglue+0x38>
 800c760:	4629      	mov	r1, r5
 800c762:	4638      	mov	r0, r7
 800c764:	47c0      	blx	r8
 800c766:	4306      	orrs	r6, r0
 800c768:	3568      	adds	r5, #104	@ 0x68
 800c76a:	e7e9      	b.n	800c740 <_fwalk_sglue+0x10>

0800c76c <iprintf>:
 800c76c:	b40f      	push	{r0, r1, r2, r3}
 800c76e:	b507      	push	{r0, r1, r2, lr}
 800c770:	4906      	ldr	r1, [pc, #24]	@ (800c78c <iprintf+0x20>)
 800c772:	ab04      	add	r3, sp, #16
 800c774:	6808      	ldr	r0, [r1, #0]
 800c776:	f853 2b04 	ldr.w	r2, [r3], #4
 800c77a:	6881      	ldr	r1, [r0, #8]
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	f000 fb3b 	bl	800cdf8 <_vfiprintf_r>
 800c782:	b003      	add	sp, #12
 800c784:	f85d eb04 	ldr.w	lr, [sp], #4
 800c788:	b004      	add	sp, #16
 800c78a:	4770      	bx	lr
 800c78c:	20000190 	.word	0x20000190

0800c790 <_puts_r>:
 800c790:	6a03      	ldr	r3, [r0, #32]
 800c792:	b570      	push	{r4, r5, r6, lr}
 800c794:	4605      	mov	r5, r0
 800c796:	460e      	mov	r6, r1
 800c798:	6884      	ldr	r4, [r0, #8]
 800c79a:	b90b      	cbnz	r3, 800c7a0 <_puts_r+0x10>
 800c79c:	f7ff ffb0 	bl	800c700 <__sinit>
 800c7a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7a2:	07db      	lsls	r3, r3, #31
 800c7a4:	d405      	bmi.n	800c7b2 <_puts_r+0x22>
 800c7a6:	89a3      	ldrh	r3, [r4, #12]
 800c7a8:	0598      	lsls	r0, r3, #22
 800c7aa:	d402      	bmi.n	800c7b2 <_puts_r+0x22>
 800c7ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7ae:	f000 f9f4 	bl	800cb9a <__retarget_lock_acquire_recursive>
 800c7b2:	89a3      	ldrh	r3, [r4, #12]
 800c7b4:	0719      	lsls	r1, r3, #28
 800c7b6:	d502      	bpl.n	800c7be <_puts_r+0x2e>
 800c7b8:	6923      	ldr	r3, [r4, #16]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d135      	bne.n	800c82a <_puts_r+0x9a>
 800c7be:	4621      	mov	r1, r4
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	f000 f8c5 	bl	800c950 <__swsetup_r>
 800c7c6:	b380      	cbz	r0, 800c82a <_puts_r+0x9a>
 800c7c8:	f04f 35ff 	mov.w	r5, #4294967295
 800c7cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7ce:	07da      	lsls	r2, r3, #31
 800c7d0:	d405      	bmi.n	800c7de <_puts_r+0x4e>
 800c7d2:	89a3      	ldrh	r3, [r4, #12]
 800c7d4:	059b      	lsls	r3, r3, #22
 800c7d6:	d402      	bmi.n	800c7de <_puts_r+0x4e>
 800c7d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7da:	f000 f9df 	bl	800cb9c <__retarget_lock_release_recursive>
 800c7de:	4628      	mov	r0, r5
 800c7e0:	bd70      	pop	{r4, r5, r6, pc}
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	da04      	bge.n	800c7f0 <_puts_r+0x60>
 800c7e6:	69a2      	ldr	r2, [r4, #24]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	dc17      	bgt.n	800c81c <_puts_r+0x8c>
 800c7ec:	290a      	cmp	r1, #10
 800c7ee:	d015      	beq.n	800c81c <_puts_r+0x8c>
 800c7f0:	6823      	ldr	r3, [r4, #0]
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	6022      	str	r2, [r4, #0]
 800c7f6:	7019      	strb	r1, [r3, #0]
 800c7f8:	68a3      	ldr	r3, [r4, #8]
 800c7fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c7fe:	3b01      	subs	r3, #1
 800c800:	60a3      	str	r3, [r4, #8]
 800c802:	2900      	cmp	r1, #0
 800c804:	d1ed      	bne.n	800c7e2 <_puts_r+0x52>
 800c806:	2b00      	cmp	r3, #0
 800c808:	da11      	bge.n	800c82e <_puts_r+0x9e>
 800c80a:	4622      	mov	r2, r4
 800c80c:	210a      	movs	r1, #10
 800c80e:	4628      	mov	r0, r5
 800c810:	f000 f85f 	bl	800c8d2 <__swbuf_r>
 800c814:	3001      	adds	r0, #1
 800c816:	d0d7      	beq.n	800c7c8 <_puts_r+0x38>
 800c818:	250a      	movs	r5, #10
 800c81a:	e7d7      	b.n	800c7cc <_puts_r+0x3c>
 800c81c:	4622      	mov	r2, r4
 800c81e:	4628      	mov	r0, r5
 800c820:	f000 f857 	bl	800c8d2 <__swbuf_r>
 800c824:	3001      	adds	r0, #1
 800c826:	d1e7      	bne.n	800c7f8 <_puts_r+0x68>
 800c828:	e7ce      	b.n	800c7c8 <_puts_r+0x38>
 800c82a:	3e01      	subs	r6, #1
 800c82c:	e7e4      	b.n	800c7f8 <_puts_r+0x68>
 800c82e:	6823      	ldr	r3, [r4, #0]
 800c830:	1c5a      	adds	r2, r3, #1
 800c832:	6022      	str	r2, [r4, #0]
 800c834:	220a      	movs	r2, #10
 800c836:	701a      	strb	r2, [r3, #0]
 800c838:	e7ee      	b.n	800c818 <_puts_r+0x88>
	...

0800c83c <puts>:
 800c83c:	4b02      	ldr	r3, [pc, #8]	@ (800c848 <puts+0xc>)
 800c83e:	4601      	mov	r1, r0
 800c840:	6818      	ldr	r0, [r3, #0]
 800c842:	f7ff bfa5 	b.w	800c790 <_puts_r>
 800c846:	bf00      	nop
 800c848:	20000190 	.word	0x20000190

0800c84c <__sread>:
 800c84c:	b510      	push	{r4, lr}
 800c84e:	460c      	mov	r4, r1
 800c850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c854:	f000 f952 	bl	800cafc <_read_r>
 800c858:	2800      	cmp	r0, #0
 800c85a:	bfab      	itete	ge
 800c85c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c85e:	89a3      	ldrhlt	r3, [r4, #12]
 800c860:	181b      	addge	r3, r3, r0
 800c862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c866:	bfac      	ite	ge
 800c868:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c86a:	81a3      	strhlt	r3, [r4, #12]
 800c86c:	bd10      	pop	{r4, pc}

0800c86e <__swrite>:
 800c86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c872:	461f      	mov	r7, r3
 800c874:	898b      	ldrh	r3, [r1, #12]
 800c876:	4605      	mov	r5, r0
 800c878:	05db      	lsls	r3, r3, #23
 800c87a:	460c      	mov	r4, r1
 800c87c:	4616      	mov	r6, r2
 800c87e:	d505      	bpl.n	800c88c <__swrite+0x1e>
 800c880:	2302      	movs	r3, #2
 800c882:	2200      	movs	r2, #0
 800c884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c888:	f000 f926 	bl	800cad8 <_lseek_r>
 800c88c:	89a3      	ldrh	r3, [r4, #12]
 800c88e:	4632      	mov	r2, r6
 800c890:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c894:	81a3      	strh	r3, [r4, #12]
 800c896:	4628      	mov	r0, r5
 800c898:	463b      	mov	r3, r7
 800c89a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a2:	f000 b93d 	b.w	800cb20 <_write_r>

0800c8a6 <__sseek>:
 800c8a6:	b510      	push	{r4, lr}
 800c8a8:	460c      	mov	r4, r1
 800c8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ae:	f000 f913 	bl	800cad8 <_lseek_r>
 800c8b2:	1c43      	adds	r3, r0, #1
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	bf15      	itete	ne
 800c8b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c8ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c8be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c8c2:	81a3      	strheq	r3, [r4, #12]
 800c8c4:	bf18      	it	ne
 800c8c6:	81a3      	strhne	r3, [r4, #12]
 800c8c8:	bd10      	pop	{r4, pc}

0800c8ca <__sclose>:
 800c8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ce:	f000 b89d 	b.w	800ca0c <_close_r>

0800c8d2 <__swbuf_r>:
 800c8d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d4:	460e      	mov	r6, r1
 800c8d6:	4614      	mov	r4, r2
 800c8d8:	4605      	mov	r5, r0
 800c8da:	b118      	cbz	r0, 800c8e4 <__swbuf_r+0x12>
 800c8dc:	6a03      	ldr	r3, [r0, #32]
 800c8de:	b90b      	cbnz	r3, 800c8e4 <__swbuf_r+0x12>
 800c8e0:	f7ff ff0e 	bl	800c700 <__sinit>
 800c8e4:	69a3      	ldr	r3, [r4, #24]
 800c8e6:	60a3      	str	r3, [r4, #8]
 800c8e8:	89a3      	ldrh	r3, [r4, #12]
 800c8ea:	071a      	lsls	r2, r3, #28
 800c8ec:	d501      	bpl.n	800c8f2 <__swbuf_r+0x20>
 800c8ee:	6923      	ldr	r3, [r4, #16]
 800c8f0:	b943      	cbnz	r3, 800c904 <__swbuf_r+0x32>
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	f000 f82b 	bl	800c950 <__swsetup_r>
 800c8fa:	b118      	cbz	r0, 800c904 <__swbuf_r+0x32>
 800c8fc:	f04f 37ff 	mov.w	r7, #4294967295
 800c900:	4638      	mov	r0, r7
 800c902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	6922      	ldr	r2, [r4, #16]
 800c908:	b2f6      	uxtb	r6, r6
 800c90a:	1a98      	subs	r0, r3, r2
 800c90c:	6963      	ldr	r3, [r4, #20]
 800c90e:	4637      	mov	r7, r6
 800c910:	4283      	cmp	r3, r0
 800c912:	dc05      	bgt.n	800c920 <__swbuf_r+0x4e>
 800c914:	4621      	mov	r1, r4
 800c916:	4628      	mov	r0, r5
 800c918:	f000 fd98 	bl	800d44c <_fflush_r>
 800c91c:	2800      	cmp	r0, #0
 800c91e:	d1ed      	bne.n	800c8fc <__swbuf_r+0x2a>
 800c920:	68a3      	ldr	r3, [r4, #8]
 800c922:	3b01      	subs	r3, #1
 800c924:	60a3      	str	r3, [r4, #8]
 800c926:	6823      	ldr	r3, [r4, #0]
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	6022      	str	r2, [r4, #0]
 800c92c:	701e      	strb	r6, [r3, #0]
 800c92e:	6962      	ldr	r2, [r4, #20]
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	429a      	cmp	r2, r3
 800c934:	d004      	beq.n	800c940 <__swbuf_r+0x6e>
 800c936:	89a3      	ldrh	r3, [r4, #12]
 800c938:	07db      	lsls	r3, r3, #31
 800c93a:	d5e1      	bpl.n	800c900 <__swbuf_r+0x2e>
 800c93c:	2e0a      	cmp	r6, #10
 800c93e:	d1df      	bne.n	800c900 <__swbuf_r+0x2e>
 800c940:	4621      	mov	r1, r4
 800c942:	4628      	mov	r0, r5
 800c944:	f000 fd82 	bl	800d44c <_fflush_r>
 800c948:	2800      	cmp	r0, #0
 800c94a:	d0d9      	beq.n	800c900 <__swbuf_r+0x2e>
 800c94c:	e7d6      	b.n	800c8fc <__swbuf_r+0x2a>
	...

0800c950 <__swsetup_r>:
 800c950:	b538      	push	{r3, r4, r5, lr}
 800c952:	4b29      	ldr	r3, [pc, #164]	@ (800c9f8 <__swsetup_r+0xa8>)
 800c954:	4605      	mov	r5, r0
 800c956:	6818      	ldr	r0, [r3, #0]
 800c958:	460c      	mov	r4, r1
 800c95a:	b118      	cbz	r0, 800c964 <__swsetup_r+0x14>
 800c95c:	6a03      	ldr	r3, [r0, #32]
 800c95e:	b90b      	cbnz	r3, 800c964 <__swsetup_r+0x14>
 800c960:	f7ff fece 	bl	800c700 <__sinit>
 800c964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c968:	0719      	lsls	r1, r3, #28
 800c96a:	d422      	bmi.n	800c9b2 <__swsetup_r+0x62>
 800c96c:	06da      	lsls	r2, r3, #27
 800c96e:	d407      	bmi.n	800c980 <__swsetup_r+0x30>
 800c970:	2209      	movs	r2, #9
 800c972:	602a      	str	r2, [r5, #0]
 800c974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c978:	f04f 30ff 	mov.w	r0, #4294967295
 800c97c:	81a3      	strh	r3, [r4, #12]
 800c97e:	e033      	b.n	800c9e8 <__swsetup_r+0x98>
 800c980:	0758      	lsls	r0, r3, #29
 800c982:	d512      	bpl.n	800c9aa <__swsetup_r+0x5a>
 800c984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c986:	b141      	cbz	r1, 800c99a <__swsetup_r+0x4a>
 800c988:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c98c:	4299      	cmp	r1, r3
 800c98e:	d002      	beq.n	800c996 <__swsetup_r+0x46>
 800c990:	4628      	mov	r0, r5
 800c992:	f000 f913 	bl	800cbbc <_free_r>
 800c996:	2300      	movs	r3, #0
 800c998:	6363      	str	r3, [r4, #52]	@ 0x34
 800c99a:	89a3      	ldrh	r3, [r4, #12]
 800c99c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c9a0:	81a3      	strh	r3, [r4, #12]
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	6063      	str	r3, [r4, #4]
 800c9a6:	6923      	ldr	r3, [r4, #16]
 800c9a8:	6023      	str	r3, [r4, #0]
 800c9aa:	89a3      	ldrh	r3, [r4, #12]
 800c9ac:	f043 0308 	orr.w	r3, r3, #8
 800c9b0:	81a3      	strh	r3, [r4, #12]
 800c9b2:	6923      	ldr	r3, [r4, #16]
 800c9b4:	b94b      	cbnz	r3, 800c9ca <__swsetup_r+0x7a>
 800c9b6:	89a3      	ldrh	r3, [r4, #12]
 800c9b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c9bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9c0:	d003      	beq.n	800c9ca <__swsetup_r+0x7a>
 800c9c2:	4621      	mov	r1, r4
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f000 fd8e 	bl	800d4e6 <__smakebuf_r>
 800c9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ce:	f013 0201 	ands.w	r2, r3, #1
 800c9d2:	d00a      	beq.n	800c9ea <__swsetup_r+0x9a>
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	60a2      	str	r2, [r4, #8]
 800c9d8:	6962      	ldr	r2, [r4, #20]
 800c9da:	4252      	negs	r2, r2
 800c9dc:	61a2      	str	r2, [r4, #24]
 800c9de:	6922      	ldr	r2, [r4, #16]
 800c9e0:	b942      	cbnz	r2, 800c9f4 <__swsetup_r+0xa4>
 800c9e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c9e6:	d1c5      	bne.n	800c974 <__swsetup_r+0x24>
 800c9e8:	bd38      	pop	{r3, r4, r5, pc}
 800c9ea:	0799      	lsls	r1, r3, #30
 800c9ec:	bf58      	it	pl
 800c9ee:	6962      	ldrpl	r2, [r4, #20]
 800c9f0:	60a2      	str	r2, [r4, #8]
 800c9f2:	e7f4      	b.n	800c9de <__swsetup_r+0x8e>
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	e7f7      	b.n	800c9e8 <__swsetup_r+0x98>
 800c9f8:	20000190 	.word	0x20000190

0800c9fc <memset>:
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	4402      	add	r2, r0
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d100      	bne.n	800ca06 <memset+0xa>
 800ca04:	4770      	bx	lr
 800ca06:	f803 1b01 	strb.w	r1, [r3], #1
 800ca0a:	e7f9      	b.n	800ca00 <memset+0x4>

0800ca0c <_close_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	2300      	movs	r3, #0
 800ca10:	4d05      	ldr	r5, [pc, #20]	@ (800ca28 <_close_r+0x1c>)
 800ca12:	4604      	mov	r4, r0
 800ca14:	4608      	mov	r0, r1
 800ca16:	602b      	str	r3, [r5, #0]
 800ca18:	f7f4 fb7f 	bl	800111a <_close>
 800ca1c:	1c43      	adds	r3, r0, #1
 800ca1e:	d102      	bne.n	800ca26 <_close_r+0x1a>
 800ca20:	682b      	ldr	r3, [r5, #0]
 800ca22:	b103      	cbz	r3, 800ca26 <_close_r+0x1a>
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	bd38      	pop	{r3, r4, r5, pc}
 800ca28:	20002fa0 	.word	0x20002fa0

0800ca2c <_reclaim_reent>:
 800ca2c:	4b29      	ldr	r3, [pc, #164]	@ (800cad4 <_reclaim_reent+0xa8>)
 800ca2e:	b570      	push	{r4, r5, r6, lr}
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4604      	mov	r4, r0
 800ca34:	4283      	cmp	r3, r0
 800ca36:	d04b      	beq.n	800cad0 <_reclaim_reent+0xa4>
 800ca38:	69c3      	ldr	r3, [r0, #28]
 800ca3a:	b1ab      	cbz	r3, 800ca68 <_reclaim_reent+0x3c>
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	b16b      	cbz	r3, 800ca5c <_reclaim_reent+0x30>
 800ca40:	2500      	movs	r5, #0
 800ca42:	69e3      	ldr	r3, [r4, #28]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	5959      	ldr	r1, [r3, r5]
 800ca48:	2900      	cmp	r1, #0
 800ca4a:	d13b      	bne.n	800cac4 <_reclaim_reent+0x98>
 800ca4c:	3504      	adds	r5, #4
 800ca4e:	2d80      	cmp	r5, #128	@ 0x80
 800ca50:	d1f7      	bne.n	800ca42 <_reclaim_reent+0x16>
 800ca52:	69e3      	ldr	r3, [r4, #28]
 800ca54:	4620      	mov	r0, r4
 800ca56:	68d9      	ldr	r1, [r3, #12]
 800ca58:	f000 f8b0 	bl	800cbbc <_free_r>
 800ca5c:	69e3      	ldr	r3, [r4, #28]
 800ca5e:	6819      	ldr	r1, [r3, #0]
 800ca60:	b111      	cbz	r1, 800ca68 <_reclaim_reent+0x3c>
 800ca62:	4620      	mov	r0, r4
 800ca64:	f000 f8aa 	bl	800cbbc <_free_r>
 800ca68:	6961      	ldr	r1, [r4, #20]
 800ca6a:	b111      	cbz	r1, 800ca72 <_reclaim_reent+0x46>
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f000 f8a5 	bl	800cbbc <_free_r>
 800ca72:	69e1      	ldr	r1, [r4, #28]
 800ca74:	b111      	cbz	r1, 800ca7c <_reclaim_reent+0x50>
 800ca76:	4620      	mov	r0, r4
 800ca78:	f000 f8a0 	bl	800cbbc <_free_r>
 800ca7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ca7e:	b111      	cbz	r1, 800ca86 <_reclaim_reent+0x5a>
 800ca80:	4620      	mov	r0, r4
 800ca82:	f000 f89b 	bl	800cbbc <_free_r>
 800ca86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca88:	b111      	cbz	r1, 800ca90 <_reclaim_reent+0x64>
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f000 f896 	bl	800cbbc <_free_r>
 800ca90:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ca92:	b111      	cbz	r1, 800ca9a <_reclaim_reent+0x6e>
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 f891 	bl	800cbbc <_free_r>
 800ca9a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ca9c:	b111      	cbz	r1, 800caa4 <_reclaim_reent+0x78>
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f000 f88c 	bl	800cbbc <_free_r>
 800caa4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800caa6:	b111      	cbz	r1, 800caae <_reclaim_reent+0x82>
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 f887 	bl	800cbbc <_free_r>
 800caae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cab0:	b111      	cbz	r1, 800cab8 <_reclaim_reent+0x8c>
 800cab2:	4620      	mov	r0, r4
 800cab4:	f000 f882 	bl	800cbbc <_free_r>
 800cab8:	6a23      	ldr	r3, [r4, #32]
 800caba:	b14b      	cbz	r3, 800cad0 <_reclaim_reent+0xa4>
 800cabc:	4620      	mov	r0, r4
 800cabe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cac2:	4718      	bx	r3
 800cac4:	680e      	ldr	r6, [r1, #0]
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 f878 	bl	800cbbc <_free_r>
 800cacc:	4631      	mov	r1, r6
 800cace:	e7bb      	b.n	800ca48 <_reclaim_reent+0x1c>
 800cad0:	bd70      	pop	{r4, r5, r6, pc}
 800cad2:	bf00      	nop
 800cad4:	20000190 	.word	0x20000190

0800cad8 <_lseek_r>:
 800cad8:	b538      	push	{r3, r4, r5, lr}
 800cada:	4604      	mov	r4, r0
 800cadc:	4608      	mov	r0, r1
 800cade:	4611      	mov	r1, r2
 800cae0:	2200      	movs	r2, #0
 800cae2:	4d05      	ldr	r5, [pc, #20]	@ (800caf8 <_lseek_r+0x20>)
 800cae4:	602a      	str	r2, [r5, #0]
 800cae6:	461a      	mov	r2, r3
 800cae8:	f7f4 fb3b 	bl	8001162 <_lseek>
 800caec:	1c43      	adds	r3, r0, #1
 800caee:	d102      	bne.n	800caf6 <_lseek_r+0x1e>
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	b103      	cbz	r3, 800caf6 <_lseek_r+0x1e>
 800caf4:	6023      	str	r3, [r4, #0]
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	20002fa0 	.word	0x20002fa0

0800cafc <_read_r>:
 800cafc:	b538      	push	{r3, r4, r5, lr}
 800cafe:	4604      	mov	r4, r0
 800cb00:	4608      	mov	r0, r1
 800cb02:	4611      	mov	r1, r2
 800cb04:	2200      	movs	r2, #0
 800cb06:	4d05      	ldr	r5, [pc, #20]	@ (800cb1c <_read_r+0x20>)
 800cb08:	602a      	str	r2, [r5, #0]
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	f7f4 facc 	bl	80010a8 <_read>
 800cb10:	1c43      	adds	r3, r0, #1
 800cb12:	d102      	bne.n	800cb1a <_read_r+0x1e>
 800cb14:	682b      	ldr	r3, [r5, #0]
 800cb16:	b103      	cbz	r3, 800cb1a <_read_r+0x1e>
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	bd38      	pop	{r3, r4, r5, pc}
 800cb1c:	20002fa0 	.word	0x20002fa0

0800cb20 <_write_r>:
 800cb20:	b538      	push	{r3, r4, r5, lr}
 800cb22:	4604      	mov	r4, r0
 800cb24:	4608      	mov	r0, r1
 800cb26:	4611      	mov	r1, r2
 800cb28:	2200      	movs	r2, #0
 800cb2a:	4d05      	ldr	r5, [pc, #20]	@ (800cb40 <_write_r+0x20>)
 800cb2c:	602a      	str	r2, [r5, #0]
 800cb2e:	461a      	mov	r2, r3
 800cb30:	f7f4 fad7 	bl	80010e2 <_write>
 800cb34:	1c43      	adds	r3, r0, #1
 800cb36:	d102      	bne.n	800cb3e <_write_r+0x1e>
 800cb38:	682b      	ldr	r3, [r5, #0]
 800cb3a:	b103      	cbz	r3, 800cb3e <_write_r+0x1e>
 800cb3c:	6023      	str	r3, [r4, #0]
 800cb3e:	bd38      	pop	{r3, r4, r5, pc}
 800cb40:	20002fa0 	.word	0x20002fa0

0800cb44 <__errno>:
 800cb44:	4b01      	ldr	r3, [pc, #4]	@ (800cb4c <__errno+0x8>)
 800cb46:	6818      	ldr	r0, [r3, #0]
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	20000190 	.word	0x20000190

0800cb50 <__libc_init_array>:
 800cb50:	b570      	push	{r4, r5, r6, lr}
 800cb52:	2600      	movs	r6, #0
 800cb54:	4d0c      	ldr	r5, [pc, #48]	@ (800cb88 <__libc_init_array+0x38>)
 800cb56:	4c0d      	ldr	r4, [pc, #52]	@ (800cb8c <__libc_init_array+0x3c>)
 800cb58:	1b64      	subs	r4, r4, r5
 800cb5a:	10a4      	asrs	r4, r4, #2
 800cb5c:	42a6      	cmp	r6, r4
 800cb5e:	d109      	bne.n	800cb74 <__libc_init_array+0x24>
 800cb60:	f000 fd3e 	bl	800d5e0 <_init>
 800cb64:	2600      	movs	r6, #0
 800cb66:	4d0a      	ldr	r5, [pc, #40]	@ (800cb90 <__libc_init_array+0x40>)
 800cb68:	4c0a      	ldr	r4, [pc, #40]	@ (800cb94 <__libc_init_array+0x44>)
 800cb6a:	1b64      	subs	r4, r4, r5
 800cb6c:	10a4      	asrs	r4, r4, #2
 800cb6e:	42a6      	cmp	r6, r4
 800cb70:	d105      	bne.n	800cb7e <__libc_init_array+0x2e>
 800cb72:	bd70      	pop	{r4, r5, r6, pc}
 800cb74:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb78:	4798      	blx	r3
 800cb7a:	3601      	adds	r6, #1
 800cb7c:	e7ee      	b.n	800cb5c <__libc_init_array+0xc>
 800cb7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb82:	4798      	blx	r3
 800cb84:	3601      	adds	r6, #1
 800cb86:	e7f2      	b.n	800cb6e <__libc_init_array+0x1e>
 800cb88:	0800d75c 	.word	0x0800d75c
 800cb8c:	0800d75c 	.word	0x0800d75c
 800cb90:	0800d75c 	.word	0x0800d75c
 800cb94:	0800d760 	.word	0x0800d760

0800cb98 <__retarget_lock_init_recursive>:
 800cb98:	4770      	bx	lr

0800cb9a <__retarget_lock_acquire_recursive>:
 800cb9a:	4770      	bx	lr

0800cb9c <__retarget_lock_release_recursive>:
 800cb9c:	4770      	bx	lr

0800cb9e <memcpy>:
 800cb9e:	440a      	add	r2, r1
 800cba0:	4291      	cmp	r1, r2
 800cba2:	f100 33ff 	add.w	r3, r0, #4294967295
 800cba6:	d100      	bne.n	800cbaa <memcpy+0xc>
 800cba8:	4770      	bx	lr
 800cbaa:	b510      	push	{r4, lr}
 800cbac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbb0:	4291      	cmp	r1, r2
 800cbb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbb6:	d1f9      	bne.n	800cbac <memcpy+0xe>
 800cbb8:	bd10      	pop	{r4, pc}
	...

0800cbbc <_free_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	2900      	cmp	r1, #0
 800cbc2:	d040      	beq.n	800cc46 <_free_r+0x8a>
 800cbc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbc8:	1f0c      	subs	r4, r1, #4
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	bfb8      	it	lt
 800cbce:	18e4      	addlt	r4, r4, r3
 800cbd0:	f000 f8de 	bl	800cd90 <__malloc_lock>
 800cbd4:	4a1c      	ldr	r2, [pc, #112]	@ (800cc48 <_free_r+0x8c>)
 800cbd6:	6813      	ldr	r3, [r2, #0]
 800cbd8:	b933      	cbnz	r3, 800cbe8 <_free_r+0x2c>
 800cbda:	6063      	str	r3, [r4, #4]
 800cbdc:	6014      	str	r4, [r2, #0]
 800cbde:	4628      	mov	r0, r5
 800cbe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbe4:	f000 b8da 	b.w	800cd9c <__malloc_unlock>
 800cbe8:	42a3      	cmp	r3, r4
 800cbea:	d908      	bls.n	800cbfe <_free_r+0x42>
 800cbec:	6820      	ldr	r0, [r4, #0]
 800cbee:	1821      	adds	r1, r4, r0
 800cbf0:	428b      	cmp	r3, r1
 800cbf2:	bf01      	itttt	eq
 800cbf4:	6819      	ldreq	r1, [r3, #0]
 800cbf6:	685b      	ldreq	r3, [r3, #4]
 800cbf8:	1809      	addeq	r1, r1, r0
 800cbfa:	6021      	streq	r1, [r4, #0]
 800cbfc:	e7ed      	b.n	800cbda <_free_r+0x1e>
 800cbfe:	461a      	mov	r2, r3
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	b10b      	cbz	r3, 800cc08 <_free_r+0x4c>
 800cc04:	42a3      	cmp	r3, r4
 800cc06:	d9fa      	bls.n	800cbfe <_free_r+0x42>
 800cc08:	6811      	ldr	r1, [r2, #0]
 800cc0a:	1850      	adds	r0, r2, r1
 800cc0c:	42a0      	cmp	r0, r4
 800cc0e:	d10b      	bne.n	800cc28 <_free_r+0x6c>
 800cc10:	6820      	ldr	r0, [r4, #0]
 800cc12:	4401      	add	r1, r0
 800cc14:	1850      	adds	r0, r2, r1
 800cc16:	4283      	cmp	r3, r0
 800cc18:	6011      	str	r1, [r2, #0]
 800cc1a:	d1e0      	bne.n	800cbde <_free_r+0x22>
 800cc1c:	6818      	ldr	r0, [r3, #0]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	4408      	add	r0, r1
 800cc22:	6010      	str	r0, [r2, #0]
 800cc24:	6053      	str	r3, [r2, #4]
 800cc26:	e7da      	b.n	800cbde <_free_r+0x22>
 800cc28:	d902      	bls.n	800cc30 <_free_r+0x74>
 800cc2a:	230c      	movs	r3, #12
 800cc2c:	602b      	str	r3, [r5, #0]
 800cc2e:	e7d6      	b.n	800cbde <_free_r+0x22>
 800cc30:	6820      	ldr	r0, [r4, #0]
 800cc32:	1821      	adds	r1, r4, r0
 800cc34:	428b      	cmp	r3, r1
 800cc36:	bf01      	itttt	eq
 800cc38:	6819      	ldreq	r1, [r3, #0]
 800cc3a:	685b      	ldreq	r3, [r3, #4]
 800cc3c:	1809      	addeq	r1, r1, r0
 800cc3e:	6021      	streq	r1, [r4, #0]
 800cc40:	6063      	str	r3, [r4, #4]
 800cc42:	6054      	str	r4, [r2, #4]
 800cc44:	e7cb      	b.n	800cbde <_free_r+0x22>
 800cc46:	bd38      	pop	{r3, r4, r5, pc}
 800cc48:	20002fac 	.word	0x20002fac

0800cc4c <sbrk_aligned>:
 800cc4c:	b570      	push	{r4, r5, r6, lr}
 800cc4e:	4e0f      	ldr	r6, [pc, #60]	@ (800cc8c <sbrk_aligned+0x40>)
 800cc50:	460c      	mov	r4, r1
 800cc52:	6831      	ldr	r1, [r6, #0]
 800cc54:	4605      	mov	r5, r0
 800cc56:	b911      	cbnz	r1, 800cc5e <sbrk_aligned+0x12>
 800cc58:	f000 fca4 	bl	800d5a4 <_sbrk_r>
 800cc5c:	6030      	str	r0, [r6, #0]
 800cc5e:	4621      	mov	r1, r4
 800cc60:	4628      	mov	r0, r5
 800cc62:	f000 fc9f 	bl	800d5a4 <_sbrk_r>
 800cc66:	1c43      	adds	r3, r0, #1
 800cc68:	d103      	bne.n	800cc72 <sbrk_aligned+0x26>
 800cc6a:	f04f 34ff 	mov.w	r4, #4294967295
 800cc6e:	4620      	mov	r0, r4
 800cc70:	bd70      	pop	{r4, r5, r6, pc}
 800cc72:	1cc4      	adds	r4, r0, #3
 800cc74:	f024 0403 	bic.w	r4, r4, #3
 800cc78:	42a0      	cmp	r0, r4
 800cc7a:	d0f8      	beq.n	800cc6e <sbrk_aligned+0x22>
 800cc7c:	1a21      	subs	r1, r4, r0
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f000 fc90 	bl	800d5a4 <_sbrk_r>
 800cc84:	3001      	adds	r0, #1
 800cc86:	d1f2      	bne.n	800cc6e <sbrk_aligned+0x22>
 800cc88:	e7ef      	b.n	800cc6a <sbrk_aligned+0x1e>
 800cc8a:	bf00      	nop
 800cc8c:	20002fa8 	.word	0x20002fa8

0800cc90 <_malloc_r>:
 800cc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc94:	1ccd      	adds	r5, r1, #3
 800cc96:	f025 0503 	bic.w	r5, r5, #3
 800cc9a:	3508      	adds	r5, #8
 800cc9c:	2d0c      	cmp	r5, #12
 800cc9e:	bf38      	it	cc
 800cca0:	250c      	movcc	r5, #12
 800cca2:	2d00      	cmp	r5, #0
 800cca4:	4606      	mov	r6, r0
 800cca6:	db01      	blt.n	800ccac <_malloc_r+0x1c>
 800cca8:	42a9      	cmp	r1, r5
 800ccaa:	d904      	bls.n	800ccb6 <_malloc_r+0x26>
 800ccac:	230c      	movs	r3, #12
 800ccae:	6033      	str	r3, [r6, #0]
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd8c <_malloc_r+0xfc>
 800ccba:	f000 f869 	bl	800cd90 <__malloc_lock>
 800ccbe:	f8d8 3000 	ldr.w	r3, [r8]
 800ccc2:	461c      	mov	r4, r3
 800ccc4:	bb44      	cbnz	r4, 800cd18 <_malloc_r+0x88>
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	4630      	mov	r0, r6
 800ccca:	f7ff ffbf 	bl	800cc4c <sbrk_aligned>
 800ccce:	1c43      	adds	r3, r0, #1
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	d158      	bne.n	800cd86 <_malloc_r+0xf6>
 800ccd4:	f8d8 4000 	ldr.w	r4, [r8]
 800ccd8:	4627      	mov	r7, r4
 800ccda:	2f00      	cmp	r7, #0
 800ccdc:	d143      	bne.n	800cd66 <_malloc_r+0xd6>
 800ccde:	2c00      	cmp	r4, #0
 800cce0:	d04b      	beq.n	800cd7a <_malloc_r+0xea>
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	4639      	mov	r1, r7
 800cce6:	4630      	mov	r0, r6
 800cce8:	eb04 0903 	add.w	r9, r4, r3
 800ccec:	f000 fc5a 	bl	800d5a4 <_sbrk_r>
 800ccf0:	4581      	cmp	r9, r0
 800ccf2:	d142      	bne.n	800cd7a <_malloc_r+0xea>
 800ccf4:	6821      	ldr	r1, [r4, #0]
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	1a6d      	subs	r5, r5, r1
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	f7ff ffa6 	bl	800cc4c <sbrk_aligned>
 800cd00:	3001      	adds	r0, #1
 800cd02:	d03a      	beq.n	800cd7a <_malloc_r+0xea>
 800cd04:	6823      	ldr	r3, [r4, #0]
 800cd06:	442b      	add	r3, r5
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd0e:	685a      	ldr	r2, [r3, #4]
 800cd10:	bb62      	cbnz	r2, 800cd6c <_malloc_r+0xdc>
 800cd12:	f8c8 7000 	str.w	r7, [r8]
 800cd16:	e00f      	b.n	800cd38 <_malloc_r+0xa8>
 800cd18:	6822      	ldr	r2, [r4, #0]
 800cd1a:	1b52      	subs	r2, r2, r5
 800cd1c:	d420      	bmi.n	800cd60 <_malloc_r+0xd0>
 800cd1e:	2a0b      	cmp	r2, #11
 800cd20:	d917      	bls.n	800cd52 <_malloc_r+0xc2>
 800cd22:	1961      	adds	r1, r4, r5
 800cd24:	42a3      	cmp	r3, r4
 800cd26:	6025      	str	r5, [r4, #0]
 800cd28:	bf18      	it	ne
 800cd2a:	6059      	strne	r1, [r3, #4]
 800cd2c:	6863      	ldr	r3, [r4, #4]
 800cd2e:	bf08      	it	eq
 800cd30:	f8c8 1000 	streq.w	r1, [r8]
 800cd34:	5162      	str	r2, [r4, r5]
 800cd36:	604b      	str	r3, [r1, #4]
 800cd38:	4630      	mov	r0, r6
 800cd3a:	f000 f82f 	bl	800cd9c <__malloc_unlock>
 800cd3e:	f104 000b 	add.w	r0, r4, #11
 800cd42:	1d23      	adds	r3, r4, #4
 800cd44:	f020 0007 	bic.w	r0, r0, #7
 800cd48:	1ac2      	subs	r2, r0, r3
 800cd4a:	bf1c      	itt	ne
 800cd4c:	1a1b      	subne	r3, r3, r0
 800cd4e:	50a3      	strne	r3, [r4, r2]
 800cd50:	e7af      	b.n	800ccb2 <_malloc_r+0x22>
 800cd52:	6862      	ldr	r2, [r4, #4]
 800cd54:	42a3      	cmp	r3, r4
 800cd56:	bf0c      	ite	eq
 800cd58:	f8c8 2000 	streq.w	r2, [r8]
 800cd5c:	605a      	strne	r2, [r3, #4]
 800cd5e:	e7eb      	b.n	800cd38 <_malloc_r+0xa8>
 800cd60:	4623      	mov	r3, r4
 800cd62:	6864      	ldr	r4, [r4, #4]
 800cd64:	e7ae      	b.n	800ccc4 <_malloc_r+0x34>
 800cd66:	463c      	mov	r4, r7
 800cd68:	687f      	ldr	r7, [r7, #4]
 800cd6a:	e7b6      	b.n	800ccda <_malloc_r+0x4a>
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	42a3      	cmp	r3, r4
 800cd72:	d1fb      	bne.n	800cd6c <_malloc_r+0xdc>
 800cd74:	2300      	movs	r3, #0
 800cd76:	6053      	str	r3, [r2, #4]
 800cd78:	e7de      	b.n	800cd38 <_malloc_r+0xa8>
 800cd7a:	230c      	movs	r3, #12
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	6033      	str	r3, [r6, #0]
 800cd80:	f000 f80c 	bl	800cd9c <__malloc_unlock>
 800cd84:	e794      	b.n	800ccb0 <_malloc_r+0x20>
 800cd86:	6005      	str	r5, [r0, #0]
 800cd88:	e7d6      	b.n	800cd38 <_malloc_r+0xa8>
 800cd8a:	bf00      	nop
 800cd8c:	20002fac 	.word	0x20002fac

0800cd90 <__malloc_lock>:
 800cd90:	4801      	ldr	r0, [pc, #4]	@ (800cd98 <__malloc_lock+0x8>)
 800cd92:	f7ff bf02 	b.w	800cb9a <__retarget_lock_acquire_recursive>
 800cd96:	bf00      	nop
 800cd98:	20002fa4 	.word	0x20002fa4

0800cd9c <__malloc_unlock>:
 800cd9c:	4801      	ldr	r0, [pc, #4]	@ (800cda4 <__malloc_unlock+0x8>)
 800cd9e:	f7ff befd 	b.w	800cb9c <__retarget_lock_release_recursive>
 800cda2:	bf00      	nop
 800cda4:	20002fa4 	.word	0x20002fa4

0800cda8 <__sfputc_r>:
 800cda8:	6893      	ldr	r3, [r2, #8]
 800cdaa:	b410      	push	{r4}
 800cdac:	3b01      	subs	r3, #1
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	6093      	str	r3, [r2, #8]
 800cdb2:	da07      	bge.n	800cdc4 <__sfputc_r+0x1c>
 800cdb4:	6994      	ldr	r4, [r2, #24]
 800cdb6:	42a3      	cmp	r3, r4
 800cdb8:	db01      	blt.n	800cdbe <__sfputc_r+0x16>
 800cdba:	290a      	cmp	r1, #10
 800cdbc:	d102      	bne.n	800cdc4 <__sfputc_r+0x1c>
 800cdbe:	bc10      	pop	{r4}
 800cdc0:	f7ff bd87 	b.w	800c8d2 <__swbuf_r>
 800cdc4:	6813      	ldr	r3, [r2, #0]
 800cdc6:	1c58      	adds	r0, r3, #1
 800cdc8:	6010      	str	r0, [r2, #0]
 800cdca:	7019      	strb	r1, [r3, #0]
 800cdcc:	4608      	mov	r0, r1
 800cdce:	bc10      	pop	{r4}
 800cdd0:	4770      	bx	lr

0800cdd2 <__sfputs_r>:
 800cdd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	460f      	mov	r7, r1
 800cdd8:	4614      	mov	r4, r2
 800cdda:	18d5      	adds	r5, r2, r3
 800cddc:	42ac      	cmp	r4, r5
 800cdde:	d101      	bne.n	800cde4 <__sfputs_r+0x12>
 800cde0:	2000      	movs	r0, #0
 800cde2:	e007      	b.n	800cdf4 <__sfputs_r+0x22>
 800cde4:	463a      	mov	r2, r7
 800cde6:	4630      	mov	r0, r6
 800cde8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdec:	f7ff ffdc 	bl	800cda8 <__sfputc_r>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d1f3      	bne.n	800cddc <__sfputs_r+0xa>
 800cdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cdf8 <_vfiprintf_r>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	460d      	mov	r5, r1
 800cdfe:	4614      	mov	r4, r2
 800ce00:	4698      	mov	r8, r3
 800ce02:	4606      	mov	r6, r0
 800ce04:	b09d      	sub	sp, #116	@ 0x74
 800ce06:	b118      	cbz	r0, 800ce10 <_vfiprintf_r+0x18>
 800ce08:	6a03      	ldr	r3, [r0, #32]
 800ce0a:	b90b      	cbnz	r3, 800ce10 <_vfiprintf_r+0x18>
 800ce0c:	f7ff fc78 	bl	800c700 <__sinit>
 800ce10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce12:	07d9      	lsls	r1, r3, #31
 800ce14:	d405      	bmi.n	800ce22 <_vfiprintf_r+0x2a>
 800ce16:	89ab      	ldrh	r3, [r5, #12]
 800ce18:	059a      	lsls	r2, r3, #22
 800ce1a:	d402      	bmi.n	800ce22 <_vfiprintf_r+0x2a>
 800ce1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce1e:	f7ff febc 	bl	800cb9a <__retarget_lock_acquire_recursive>
 800ce22:	89ab      	ldrh	r3, [r5, #12]
 800ce24:	071b      	lsls	r3, r3, #28
 800ce26:	d501      	bpl.n	800ce2c <_vfiprintf_r+0x34>
 800ce28:	692b      	ldr	r3, [r5, #16]
 800ce2a:	b99b      	cbnz	r3, 800ce54 <_vfiprintf_r+0x5c>
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f7ff fd8e 	bl	800c950 <__swsetup_r>
 800ce34:	b170      	cbz	r0, 800ce54 <_vfiprintf_r+0x5c>
 800ce36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce38:	07dc      	lsls	r4, r3, #31
 800ce3a:	d504      	bpl.n	800ce46 <_vfiprintf_r+0x4e>
 800ce3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce40:	b01d      	add	sp, #116	@ 0x74
 800ce42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce46:	89ab      	ldrh	r3, [r5, #12]
 800ce48:	0598      	lsls	r0, r3, #22
 800ce4a:	d4f7      	bmi.n	800ce3c <_vfiprintf_r+0x44>
 800ce4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce4e:	f7ff fea5 	bl	800cb9c <__retarget_lock_release_recursive>
 800ce52:	e7f3      	b.n	800ce3c <_vfiprintf_r+0x44>
 800ce54:	2300      	movs	r3, #0
 800ce56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce58:	2320      	movs	r3, #32
 800ce5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce5e:	2330      	movs	r3, #48	@ 0x30
 800ce60:	f04f 0901 	mov.w	r9, #1
 800ce64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce68:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d014 <_vfiprintf_r+0x21c>
 800ce6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce70:	4623      	mov	r3, r4
 800ce72:	469a      	mov	sl, r3
 800ce74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce78:	b10a      	cbz	r2, 800ce7e <_vfiprintf_r+0x86>
 800ce7a:	2a25      	cmp	r2, #37	@ 0x25
 800ce7c:	d1f9      	bne.n	800ce72 <_vfiprintf_r+0x7a>
 800ce7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ce82:	d00b      	beq.n	800ce9c <_vfiprintf_r+0xa4>
 800ce84:	465b      	mov	r3, fp
 800ce86:	4622      	mov	r2, r4
 800ce88:	4629      	mov	r1, r5
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	f7ff ffa1 	bl	800cdd2 <__sfputs_r>
 800ce90:	3001      	adds	r0, #1
 800ce92:	f000 80a7 	beq.w	800cfe4 <_vfiprintf_r+0x1ec>
 800ce96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce98:	445a      	add	r2, fp
 800ce9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 809f 	beq.w	800cfe4 <_vfiprintf_r+0x1ec>
 800cea6:	2300      	movs	r3, #0
 800cea8:	f04f 32ff 	mov.w	r2, #4294967295
 800ceac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceb0:	f10a 0a01 	add.w	sl, sl, #1
 800ceb4:	9304      	str	r3, [sp, #16]
 800ceb6:	9307      	str	r3, [sp, #28]
 800ceb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cebc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cebe:	4654      	mov	r4, sl
 800cec0:	2205      	movs	r2, #5
 800cec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec6:	4853      	ldr	r0, [pc, #332]	@ (800d014 <_vfiprintf_r+0x21c>)
 800cec8:	f000 fb7c 	bl	800d5c4 <memchr>
 800cecc:	9a04      	ldr	r2, [sp, #16]
 800cece:	b9d8      	cbnz	r0, 800cf08 <_vfiprintf_r+0x110>
 800ced0:	06d1      	lsls	r1, r2, #27
 800ced2:	bf44      	itt	mi
 800ced4:	2320      	movmi	r3, #32
 800ced6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ceda:	0713      	lsls	r3, r2, #28
 800cedc:	bf44      	itt	mi
 800cede:	232b      	movmi	r3, #43	@ 0x2b
 800cee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cee4:	f89a 3000 	ldrb.w	r3, [sl]
 800cee8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ceea:	d015      	beq.n	800cf18 <_vfiprintf_r+0x120>
 800ceec:	4654      	mov	r4, sl
 800ceee:	2000      	movs	r0, #0
 800cef0:	f04f 0c0a 	mov.w	ip, #10
 800cef4:	9a07      	ldr	r2, [sp, #28]
 800cef6:	4621      	mov	r1, r4
 800cef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cefc:	3b30      	subs	r3, #48	@ 0x30
 800cefe:	2b09      	cmp	r3, #9
 800cf00:	d94b      	bls.n	800cf9a <_vfiprintf_r+0x1a2>
 800cf02:	b1b0      	cbz	r0, 800cf32 <_vfiprintf_r+0x13a>
 800cf04:	9207      	str	r2, [sp, #28]
 800cf06:	e014      	b.n	800cf32 <_vfiprintf_r+0x13a>
 800cf08:	eba0 0308 	sub.w	r3, r0, r8
 800cf0c:	fa09 f303 	lsl.w	r3, r9, r3
 800cf10:	4313      	orrs	r3, r2
 800cf12:	46a2      	mov	sl, r4
 800cf14:	9304      	str	r3, [sp, #16]
 800cf16:	e7d2      	b.n	800cebe <_vfiprintf_r+0xc6>
 800cf18:	9b03      	ldr	r3, [sp, #12]
 800cf1a:	1d19      	adds	r1, r3, #4
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	9103      	str	r1, [sp, #12]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	bfbb      	ittet	lt
 800cf24:	425b      	neglt	r3, r3
 800cf26:	f042 0202 	orrlt.w	r2, r2, #2
 800cf2a:	9307      	strge	r3, [sp, #28]
 800cf2c:	9307      	strlt	r3, [sp, #28]
 800cf2e:	bfb8      	it	lt
 800cf30:	9204      	strlt	r2, [sp, #16]
 800cf32:	7823      	ldrb	r3, [r4, #0]
 800cf34:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf36:	d10a      	bne.n	800cf4e <_vfiprintf_r+0x156>
 800cf38:	7863      	ldrb	r3, [r4, #1]
 800cf3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf3c:	d132      	bne.n	800cfa4 <_vfiprintf_r+0x1ac>
 800cf3e:	9b03      	ldr	r3, [sp, #12]
 800cf40:	3402      	adds	r4, #2
 800cf42:	1d1a      	adds	r2, r3, #4
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	9203      	str	r2, [sp, #12]
 800cf48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf4c:	9305      	str	r3, [sp, #20]
 800cf4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d018 <_vfiprintf_r+0x220>
 800cf52:	2203      	movs	r2, #3
 800cf54:	4650      	mov	r0, sl
 800cf56:	7821      	ldrb	r1, [r4, #0]
 800cf58:	f000 fb34 	bl	800d5c4 <memchr>
 800cf5c:	b138      	cbz	r0, 800cf6e <_vfiprintf_r+0x176>
 800cf5e:	2240      	movs	r2, #64	@ 0x40
 800cf60:	9b04      	ldr	r3, [sp, #16]
 800cf62:	eba0 000a 	sub.w	r0, r0, sl
 800cf66:	4082      	lsls	r2, r0
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	3401      	adds	r4, #1
 800cf6c:	9304      	str	r3, [sp, #16]
 800cf6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf72:	2206      	movs	r2, #6
 800cf74:	4829      	ldr	r0, [pc, #164]	@ (800d01c <_vfiprintf_r+0x224>)
 800cf76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf7a:	f000 fb23 	bl	800d5c4 <memchr>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d03f      	beq.n	800d002 <_vfiprintf_r+0x20a>
 800cf82:	4b27      	ldr	r3, [pc, #156]	@ (800d020 <_vfiprintf_r+0x228>)
 800cf84:	bb1b      	cbnz	r3, 800cfce <_vfiprintf_r+0x1d6>
 800cf86:	9b03      	ldr	r3, [sp, #12]
 800cf88:	3307      	adds	r3, #7
 800cf8a:	f023 0307 	bic.w	r3, r3, #7
 800cf8e:	3308      	adds	r3, #8
 800cf90:	9303      	str	r3, [sp, #12]
 800cf92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf94:	443b      	add	r3, r7
 800cf96:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf98:	e76a      	b.n	800ce70 <_vfiprintf_r+0x78>
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	2001      	movs	r0, #1
 800cf9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfa2:	e7a8      	b.n	800cef6 <_vfiprintf_r+0xfe>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f04f 0c0a 	mov.w	ip, #10
 800cfaa:	4619      	mov	r1, r3
 800cfac:	3401      	adds	r4, #1
 800cfae:	9305      	str	r3, [sp, #20]
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfb6:	3a30      	subs	r2, #48	@ 0x30
 800cfb8:	2a09      	cmp	r2, #9
 800cfba:	d903      	bls.n	800cfc4 <_vfiprintf_r+0x1cc>
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0c6      	beq.n	800cf4e <_vfiprintf_r+0x156>
 800cfc0:	9105      	str	r1, [sp, #20]
 800cfc2:	e7c4      	b.n	800cf4e <_vfiprintf_r+0x156>
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfcc:	e7f0      	b.n	800cfb0 <_vfiprintf_r+0x1b8>
 800cfce:	ab03      	add	r3, sp, #12
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	462a      	mov	r2, r5
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	4b13      	ldr	r3, [pc, #76]	@ (800d024 <_vfiprintf_r+0x22c>)
 800cfd8:	a904      	add	r1, sp, #16
 800cfda:	f3af 8000 	nop.w
 800cfde:	4607      	mov	r7, r0
 800cfe0:	1c78      	adds	r0, r7, #1
 800cfe2:	d1d6      	bne.n	800cf92 <_vfiprintf_r+0x19a>
 800cfe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfe6:	07d9      	lsls	r1, r3, #31
 800cfe8:	d405      	bmi.n	800cff6 <_vfiprintf_r+0x1fe>
 800cfea:	89ab      	ldrh	r3, [r5, #12]
 800cfec:	059a      	lsls	r2, r3, #22
 800cfee:	d402      	bmi.n	800cff6 <_vfiprintf_r+0x1fe>
 800cff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cff2:	f7ff fdd3 	bl	800cb9c <__retarget_lock_release_recursive>
 800cff6:	89ab      	ldrh	r3, [r5, #12]
 800cff8:	065b      	lsls	r3, r3, #25
 800cffa:	f53f af1f 	bmi.w	800ce3c <_vfiprintf_r+0x44>
 800cffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d000:	e71e      	b.n	800ce40 <_vfiprintf_r+0x48>
 800d002:	ab03      	add	r3, sp, #12
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	462a      	mov	r2, r5
 800d008:	4630      	mov	r0, r6
 800d00a:	4b06      	ldr	r3, [pc, #24]	@ (800d024 <_vfiprintf_r+0x22c>)
 800d00c:	a904      	add	r1, sp, #16
 800d00e:	f000 f87d 	bl	800d10c <_printf_i>
 800d012:	e7e4      	b.n	800cfde <_vfiprintf_r+0x1e6>
 800d014:	0800d726 	.word	0x0800d726
 800d018:	0800d72c 	.word	0x0800d72c
 800d01c:	0800d730 	.word	0x0800d730
 800d020:	00000000 	.word	0x00000000
 800d024:	0800cdd3 	.word	0x0800cdd3

0800d028 <_printf_common>:
 800d028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d02c:	4616      	mov	r6, r2
 800d02e:	4698      	mov	r8, r3
 800d030:	688a      	ldr	r2, [r1, #8]
 800d032:	690b      	ldr	r3, [r1, #16]
 800d034:	4607      	mov	r7, r0
 800d036:	4293      	cmp	r3, r2
 800d038:	bfb8      	it	lt
 800d03a:	4613      	movlt	r3, r2
 800d03c:	6033      	str	r3, [r6, #0]
 800d03e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d042:	460c      	mov	r4, r1
 800d044:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d048:	b10a      	cbz	r2, 800d04e <_printf_common+0x26>
 800d04a:	3301      	adds	r3, #1
 800d04c:	6033      	str	r3, [r6, #0]
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	0699      	lsls	r1, r3, #26
 800d052:	bf42      	ittt	mi
 800d054:	6833      	ldrmi	r3, [r6, #0]
 800d056:	3302      	addmi	r3, #2
 800d058:	6033      	strmi	r3, [r6, #0]
 800d05a:	6825      	ldr	r5, [r4, #0]
 800d05c:	f015 0506 	ands.w	r5, r5, #6
 800d060:	d106      	bne.n	800d070 <_printf_common+0x48>
 800d062:	f104 0a19 	add.w	sl, r4, #25
 800d066:	68e3      	ldr	r3, [r4, #12]
 800d068:	6832      	ldr	r2, [r6, #0]
 800d06a:	1a9b      	subs	r3, r3, r2
 800d06c:	42ab      	cmp	r3, r5
 800d06e:	dc2b      	bgt.n	800d0c8 <_printf_common+0xa0>
 800d070:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d074:	6822      	ldr	r2, [r4, #0]
 800d076:	3b00      	subs	r3, #0
 800d078:	bf18      	it	ne
 800d07a:	2301      	movne	r3, #1
 800d07c:	0692      	lsls	r2, r2, #26
 800d07e:	d430      	bmi.n	800d0e2 <_printf_common+0xba>
 800d080:	4641      	mov	r1, r8
 800d082:	4638      	mov	r0, r7
 800d084:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d088:	47c8      	blx	r9
 800d08a:	3001      	adds	r0, #1
 800d08c:	d023      	beq.n	800d0d6 <_printf_common+0xae>
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	6922      	ldr	r2, [r4, #16]
 800d092:	f003 0306 	and.w	r3, r3, #6
 800d096:	2b04      	cmp	r3, #4
 800d098:	bf14      	ite	ne
 800d09a:	2500      	movne	r5, #0
 800d09c:	6833      	ldreq	r3, [r6, #0]
 800d09e:	f04f 0600 	mov.w	r6, #0
 800d0a2:	bf08      	it	eq
 800d0a4:	68e5      	ldreq	r5, [r4, #12]
 800d0a6:	f104 041a 	add.w	r4, r4, #26
 800d0aa:	bf08      	it	eq
 800d0ac:	1aed      	subeq	r5, r5, r3
 800d0ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d0b2:	bf08      	it	eq
 800d0b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	bfc4      	itt	gt
 800d0bc:	1a9b      	subgt	r3, r3, r2
 800d0be:	18ed      	addgt	r5, r5, r3
 800d0c0:	42b5      	cmp	r5, r6
 800d0c2:	d11a      	bne.n	800d0fa <_printf_common+0xd2>
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	e008      	b.n	800d0da <_printf_common+0xb2>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	4652      	mov	r2, sl
 800d0cc:	4641      	mov	r1, r8
 800d0ce:	4638      	mov	r0, r7
 800d0d0:	47c8      	blx	r9
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	d103      	bne.n	800d0de <_printf_common+0xb6>
 800d0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0de:	3501      	adds	r5, #1
 800d0e0:	e7c1      	b.n	800d066 <_printf_common+0x3e>
 800d0e2:	2030      	movs	r0, #48	@ 0x30
 800d0e4:	18e1      	adds	r1, r4, r3
 800d0e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d0ea:	1c5a      	adds	r2, r3, #1
 800d0ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d0f0:	4422      	add	r2, r4
 800d0f2:	3302      	adds	r3, #2
 800d0f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d0f8:	e7c2      	b.n	800d080 <_printf_common+0x58>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	4622      	mov	r2, r4
 800d0fe:	4641      	mov	r1, r8
 800d100:	4638      	mov	r0, r7
 800d102:	47c8      	blx	r9
 800d104:	3001      	adds	r0, #1
 800d106:	d0e6      	beq.n	800d0d6 <_printf_common+0xae>
 800d108:	3601      	adds	r6, #1
 800d10a:	e7d9      	b.n	800d0c0 <_printf_common+0x98>

0800d10c <_printf_i>:
 800d10c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d110:	7e0f      	ldrb	r7, [r1, #24]
 800d112:	4691      	mov	r9, r2
 800d114:	2f78      	cmp	r7, #120	@ 0x78
 800d116:	4680      	mov	r8, r0
 800d118:	460c      	mov	r4, r1
 800d11a:	469a      	mov	sl, r3
 800d11c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d11e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d122:	d807      	bhi.n	800d134 <_printf_i+0x28>
 800d124:	2f62      	cmp	r7, #98	@ 0x62
 800d126:	d80a      	bhi.n	800d13e <_printf_i+0x32>
 800d128:	2f00      	cmp	r7, #0
 800d12a:	f000 80d3 	beq.w	800d2d4 <_printf_i+0x1c8>
 800d12e:	2f58      	cmp	r7, #88	@ 0x58
 800d130:	f000 80ba 	beq.w	800d2a8 <_printf_i+0x19c>
 800d134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d138:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d13c:	e03a      	b.n	800d1b4 <_printf_i+0xa8>
 800d13e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d142:	2b15      	cmp	r3, #21
 800d144:	d8f6      	bhi.n	800d134 <_printf_i+0x28>
 800d146:	a101      	add	r1, pc, #4	@ (adr r1, 800d14c <_printf_i+0x40>)
 800d148:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d14c:	0800d1a5 	.word	0x0800d1a5
 800d150:	0800d1b9 	.word	0x0800d1b9
 800d154:	0800d135 	.word	0x0800d135
 800d158:	0800d135 	.word	0x0800d135
 800d15c:	0800d135 	.word	0x0800d135
 800d160:	0800d135 	.word	0x0800d135
 800d164:	0800d1b9 	.word	0x0800d1b9
 800d168:	0800d135 	.word	0x0800d135
 800d16c:	0800d135 	.word	0x0800d135
 800d170:	0800d135 	.word	0x0800d135
 800d174:	0800d135 	.word	0x0800d135
 800d178:	0800d2bb 	.word	0x0800d2bb
 800d17c:	0800d1e3 	.word	0x0800d1e3
 800d180:	0800d275 	.word	0x0800d275
 800d184:	0800d135 	.word	0x0800d135
 800d188:	0800d135 	.word	0x0800d135
 800d18c:	0800d2dd 	.word	0x0800d2dd
 800d190:	0800d135 	.word	0x0800d135
 800d194:	0800d1e3 	.word	0x0800d1e3
 800d198:	0800d135 	.word	0x0800d135
 800d19c:	0800d135 	.word	0x0800d135
 800d1a0:	0800d27d 	.word	0x0800d27d
 800d1a4:	6833      	ldr	r3, [r6, #0]
 800d1a6:	1d1a      	adds	r2, r3, #4
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	6032      	str	r2, [r6, #0]
 800d1ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d1b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e09e      	b.n	800d2f6 <_printf_i+0x1ea>
 800d1b8:	6833      	ldr	r3, [r6, #0]
 800d1ba:	6820      	ldr	r0, [r4, #0]
 800d1bc:	1d19      	adds	r1, r3, #4
 800d1be:	6031      	str	r1, [r6, #0]
 800d1c0:	0606      	lsls	r6, r0, #24
 800d1c2:	d501      	bpl.n	800d1c8 <_printf_i+0xbc>
 800d1c4:	681d      	ldr	r5, [r3, #0]
 800d1c6:	e003      	b.n	800d1d0 <_printf_i+0xc4>
 800d1c8:	0645      	lsls	r5, r0, #25
 800d1ca:	d5fb      	bpl.n	800d1c4 <_printf_i+0xb8>
 800d1cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d1d0:	2d00      	cmp	r5, #0
 800d1d2:	da03      	bge.n	800d1dc <_printf_i+0xd0>
 800d1d4:	232d      	movs	r3, #45	@ 0x2d
 800d1d6:	426d      	negs	r5, r5
 800d1d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1dc:	230a      	movs	r3, #10
 800d1de:	4859      	ldr	r0, [pc, #356]	@ (800d344 <_printf_i+0x238>)
 800d1e0:	e011      	b.n	800d206 <_printf_i+0xfa>
 800d1e2:	6821      	ldr	r1, [r4, #0]
 800d1e4:	6833      	ldr	r3, [r6, #0]
 800d1e6:	0608      	lsls	r0, r1, #24
 800d1e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d1ec:	d402      	bmi.n	800d1f4 <_printf_i+0xe8>
 800d1ee:	0649      	lsls	r1, r1, #25
 800d1f0:	bf48      	it	mi
 800d1f2:	b2ad      	uxthmi	r5, r5
 800d1f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d1f6:	6033      	str	r3, [r6, #0]
 800d1f8:	bf14      	ite	ne
 800d1fa:	230a      	movne	r3, #10
 800d1fc:	2308      	moveq	r3, #8
 800d1fe:	4851      	ldr	r0, [pc, #324]	@ (800d344 <_printf_i+0x238>)
 800d200:	2100      	movs	r1, #0
 800d202:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d206:	6866      	ldr	r6, [r4, #4]
 800d208:	2e00      	cmp	r6, #0
 800d20a:	bfa8      	it	ge
 800d20c:	6821      	ldrge	r1, [r4, #0]
 800d20e:	60a6      	str	r6, [r4, #8]
 800d210:	bfa4      	itt	ge
 800d212:	f021 0104 	bicge.w	r1, r1, #4
 800d216:	6021      	strge	r1, [r4, #0]
 800d218:	b90d      	cbnz	r5, 800d21e <_printf_i+0x112>
 800d21a:	2e00      	cmp	r6, #0
 800d21c:	d04b      	beq.n	800d2b6 <_printf_i+0x1aa>
 800d21e:	4616      	mov	r6, r2
 800d220:	fbb5 f1f3 	udiv	r1, r5, r3
 800d224:	fb03 5711 	mls	r7, r3, r1, r5
 800d228:	5dc7      	ldrb	r7, [r0, r7]
 800d22a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d22e:	462f      	mov	r7, r5
 800d230:	42bb      	cmp	r3, r7
 800d232:	460d      	mov	r5, r1
 800d234:	d9f4      	bls.n	800d220 <_printf_i+0x114>
 800d236:	2b08      	cmp	r3, #8
 800d238:	d10b      	bne.n	800d252 <_printf_i+0x146>
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	07df      	lsls	r7, r3, #31
 800d23e:	d508      	bpl.n	800d252 <_printf_i+0x146>
 800d240:	6923      	ldr	r3, [r4, #16]
 800d242:	6861      	ldr	r1, [r4, #4]
 800d244:	4299      	cmp	r1, r3
 800d246:	bfde      	ittt	le
 800d248:	2330      	movle	r3, #48	@ 0x30
 800d24a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d24e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d252:	1b92      	subs	r2, r2, r6
 800d254:	6122      	str	r2, [r4, #16]
 800d256:	464b      	mov	r3, r9
 800d258:	4621      	mov	r1, r4
 800d25a:	4640      	mov	r0, r8
 800d25c:	f8cd a000 	str.w	sl, [sp]
 800d260:	aa03      	add	r2, sp, #12
 800d262:	f7ff fee1 	bl	800d028 <_printf_common>
 800d266:	3001      	adds	r0, #1
 800d268:	d14a      	bne.n	800d300 <_printf_i+0x1f4>
 800d26a:	f04f 30ff 	mov.w	r0, #4294967295
 800d26e:	b004      	add	sp, #16
 800d270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	f043 0320 	orr.w	r3, r3, #32
 800d27a:	6023      	str	r3, [r4, #0]
 800d27c:	2778      	movs	r7, #120	@ 0x78
 800d27e:	4832      	ldr	r0, [pc, #200]	@ (800d348 <_printf_i+0x23c>)
 800d280:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d284:	6823      	ldr	r3, [r4, #0]
 800d286:	6831      	ldr	r1, [r6, #0]
 800d288:	061f      	lsls	r7, r3, #24
 800d28a:	f851 5b04 	ldr.w	r5, [r1], #4
 800d28e:	d402      	bmi.n	800d296 <_printf_i+0x18a>
 800d290:	065f      	lsls	r7, r3, #25
 800d292:	bf48      	it	mi
 800d294:	b2ad      	uxthmi	r5, r5
 800d296:	6031      	str	r1, [r6, #0]
 800d298:	07d9      	lsls	r1, r3, #31
 800d29a:	bf44      	itt	mi
 800d29c:	f043 0320 	orrmi.w	r3, r3, #32
 800d2a0:	6023      	strmi	r3, [r4, #0]
 800d2a2:	b11d      	cbz	r5, 800d2ac <_printf_i+0x1a0>
 800d2a4:	2310      	movs	r3, #16
 800d2a6:	e7ab      	b.n	800d200 <_printf_i+0xf4>
 800d2a8:	4826      	ldr	r0, [pc, #152]	@ (800d344 <_printf_i+0x238>)
 800d2aa:	e7e9      	b.n	800d280 <_printf_i+0x174>
 800d2ac:	6823      	ldr	r3, [r4, #0]
 800d2ae:	f023 0320 	bic.w	r3, r3, #32
 800d2b2:	6023      	str	r3, [r4, #0]
 800d2b4:	e7f6      	b.n	800d2a4 <_printf_i+0x198>
 800d2b6:	4616      	mov	r6, r2
 800d2b8:	e7bd      	b.n	800d236 <_printf_i+0x12a>
 800d2ba:	6833      	ldr	r3, [r6, #0]
 800d2bc:	6825      	ldr	r5, [r4, #0]
 800d2be:	1d18      	adds	r0, r3, #4
 800d2c0:	6961      	ldr	r1, [r4, #20]
 800d2c2:	6030      	str	r0, [r6, #0]
 800d2c4:	062e      	lsls	r6, r5, #24
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	d501      	bpl.n	800d2ce <_printf_i+0x1c2>
 800d2ca:	6019      	str	r1, [r3, #0]
 800d2cc:	e002      	b.n	800d2d4 <_printf_i+0x1c8>
 800d2ce:	0668      	lsls	r0, r5, #25
 800d2d0:	d5fb      	bpl.n	800d2ca <_printf_i+0x1be>
 800d2d2:	8019      	strh	r1, [r3, #0]
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	4616      	mov	r6, r2
 800d2d8:	6123      	str	r3, [r4, #16]
 800d2da:	e7bc      	b.n	800d256 <_printf_i+0x14a>
 800d2dc:	6833      	ldr	r3, [r6, #0]
 800d2de:	2100      	movs	r1, #0
 800d2e0:	1d1a      	adds	r2, r3, #4
 800d2e2:	6032      	str	r2, [r6, #0]
 800d2e4:	681e      	ldr	r6, [r3, #0]
 800d2e6:	6862      	ldr	r2, [r4, #4]
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	f000 f96b 	bl	800d5c4 <memchr>
 800d2ee:	b108      	cbz	r0, 800d2f4 <_printf_i+0x1e8>
 800d2f0:	1b80      	subs	r0, r0, r6
 800d2f2:	6060      	str	r0, [r4, #4]
 800d2f4:	6863      	ldr	r3, [r4, #4]
 800d2f6:	6123      	str	r3, [r4, #16]
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2fe:	e7aa      	b.n	800d256 <_printf_i+0x14a>
 800d300:	4632      	mov	r2, r6
 800d302:	4649      	mov	r1, r9
 800d304:	4640      	mov	r0, r8
 800d306:	6923      	ldr	r3, [r4, #16]
 800d308:	47d0      	blx	sl
 800d30a:	3001      	adds	r0, #1
 800d30c:	d0ad      	beq.n	800d26a <_printf_i+0x15e>
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	079b      	lsls	r3, r3, #30
 800d312:	d413      	bmi.n	800d33c <_printf_i+0x230>
 800d314:	68e0      	ldr	r0, [r4, #12]
 800d316:	9b03      	ldr	r3, [sp, #12]
 800d318:	4298      	cmp	r0, r3
 800d31a:	bfb8      	it	lt
 800d31c:	4618      	movlt	r0, r3
 800d31e:	e7a6      	b.n	800d26e <_printf_i+0x162>
 800d320:	2301      	movs	r3, #1
 800d322:	4632      	mov	r2, r6
 800d324:	4649      	mov	r1, r9
 800d326:	4640      	mov	r0, r8
 800d328:	47d0      	blx	sl
 800d32a:	3001      	adds	r0, #1
 800d32c:	d09d      	beq.n	800d26a <_printf_i+0x15e>
 800d32e:	3501      	adds	r5, #1
 800d330:	68e3      	ldr	r3, [r4, #12]
 800d332:	9903      	ldr	r1, [sp, #12]
 800d334:	1a5b      	subs	r3, r3, r1
 800d336:	42ab      	cmp	r3, r5
 800d338:	dcf2      	bgt.n	800d320 <_printf_i+0x214>
 800d33a:	e7eb      	b.n	800d314 <_printf_i+0x208>
 800d33c:	2500      	movs	r5, #0
 800d33e:	f104 0619 	add.w	r6, r4, #25
 800d342:	e7f5      	b.n	800d330 <_printf_i+0x224>
 800d344:	0800d737 	.word	0x0800d737
 800d348:	0800d748 	.word	0x0800d748

0800d34c <__sflush_r>:
 800d34c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	0716      	lsls	r6, r2, #28
 800d354:	4605      	mov	r5, r0
 800d356:	460c      	mov	r4, r1
 800d358:	d454      	bmi.n	800d404 <__sflush_r+0xb8>
 800d35a:	684b      	ldr	r3, [r1, #4]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	dc02      	bgt.n	800d366 <__sflush_r+0x1a>
 800d360:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d362:	2b00      	cmp	r3, #0
 800d364:	dd48      	ble.n	800d3f8 <__sflush_r+0xac>
 800d366:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d368:	2e00      	cmp	r6, #0
 800d36a:	d045      	beq.n	800d3f8 <__sflush_r+0xac>
 800d36c:	2300      	movs	r3, #0
 800d36e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d372:	682f      	ldr	r7, [r5, #0]
 800d374:	6a21      	ldr	r1, [r4, #32]
 800d376:	602b      	str	r3, [r5, #0]
 800d378:	d030      	beq.n	800d3dc <__sflush_r+0x90>
 800d37a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d37c:	89a3      	ldrh	r3, [r4, #12]
 800d37e:	0759      	lsls	r1, r3, #29
 800d380:	d505      	bpl.n	800d38e <__sflush_r+0x42>
 800d382:	6863      	ldr	r3, [r4, #4]
 800d384:	1ad2      	subs	r2, r2, r3
 800d386:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d388:	b10b      	cbz	r3, 800d38e <__sflush_r+0x42>
 800d38a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d38c:	1ad2      	subs	r2, r2, r3
 800d38e:	2300      	movs	r3, #0
 800d390:	4628      	mov	r0, r5
 800d392:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d394:	6a21      	ldr	r1, [r4, #32]
 800d396:	47b0      	blx	r6
 800d398:	1c43      	adds	r3, r0, #1
 800d39a:	89a3      	ldrh	r3, [r4, #12]
 800d39c:	d106      	bne.n	800d3ac <__sflush_r+0x60>
 800d39e:	6829      	ldr	r1, [r5, #0]
 800d3a0:	291d      	cmp	r1, #29
 800d3a2:	d82b      	bhi.n	800d3fc <__sflush_r+0xb0>
 800d3a4:	4a28      	ldr	r2, [pc, #160]	@ (800d448 <__sflush_r+0xfc>)
 800d3a6:	410a      	asrs	r2, r1
 800d3a8:	07d6      	lsls	r6, r2, #31
 800d3aa:	d427      	bmi.n	800d3fc <__sflush_r+0xb0>
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	6062      	str	r2, [r4, #4]
 800d3b0:	6922      	ldr	r2, [r4, #16]
 800d3b2:	04d9      	lsls	r1, r3, #19
 800d3b4:	6022      	str	r2, [r4, #0]
 800d3b6:	d504      	bpl.n	800d3c2 <__sflush_r+0x76>
 800d3b8:	1c42      	adds	r2, r0, #1
 800d3ba:	d101      	bne.n	800d3c0 <__sflush_r+0x74>
 800d3bc:	682b      	ldr	r3, [r5, #0]
 800d3be:	b903      	cbnz	r3, 800d3c2 <__sflush_r+0x76>
 800d3c0:	6560      	str	r0, [r4, #84]	@ 0x54
 800d3c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d3c4:	602f      	str	r7, [r5, #0]
 800d3c6:	b1b9      	cbz	r1, 800d3f8 <__sflush_r+0xac>
 800d3c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d3cc:	4299      	cmp	r1, r3
 800d3ce:	d002      	beq.n	800d3d6 <__sflush_r+0x8a>
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	f7ff fbf3 	bl	800cbbc <_free_r>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3da:	e00d      	b.n	800d3f8 <__sflush_r+0xac>
 800d3dc:	2301      	movs	r3, #1
 800d3de:	4628      	mov	r0, r5
 800d3e0:	47b0      	blx	r6
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	1c50      	adds	r0, r2, #1
 800d3e6:	d1c9      	bne.n	800d37c <__sflush_r+0x30>
 800d3e8:	682b      	ldr	r3, [r5, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d0c6      	beq.n	800d37c <__sflush_r+0x30>
 800d3ee:	2b1d      	cmp	r3, #29
 800d3f0:	d001      	beq.n	800d3f6 <__sflush_r+0xaa>
 800d3f2:	2b16      	cmp	r3, #22
 800d3f4:	d11d      	bne.n	800d432 <__sflush_r+0xe6>
 800d3f6:	602f      	str	r7, [r5, #0]
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	e021      	b.n	800d440 <__sflush_r+0xf4>
 800d3fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d400:	b21b      	sxth	r3, r3
 800d402:	e01a      	b.n	800d43a <__sflush_r+0xee>
 800d404:	690f      	ldr	r7, [r1, #16]
 800d406:	2f00      	cmp	r7, #0
 800d408:	d0f6      	beq.n	800d3f8 <__sflush_r+0xac>
 800d40a:	0793      	lsls	r3, r2, #30
 800d40c:	bf18      	it	ne
 800d40e:	2300      	movne	r3, #0
 800d410:	680e      	ldr	r6, [r1, #0]
 800d412:	bf08      	it	eq
 800d414:	694b      	ldreq	r3, [r1, #20]
 800d416:	1bf6      	subs	r6, r6, r7
 800d418:	600f      	str	r7, [r1, #0]
 800d41a:	608b      	str	r3, [r1, #8]
 800d41c:	2e00      	cmp	r6, #0
 800d41e:	ddeb      	ble.n	800d3f8 <__sflush_r+0xac>
 800d420:	4633      	mov	r3, r6
 800d422:	463a      	mov	r2, r7
 800d424:	4628      	mov	r0, r5
 800d426:	6a21      	ldr	r1, [r4, #32]
 800d428:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d42c:	47e0      	blx	ip
 800d42e:	2800      	cmp	r0, #0
 800d430:	dc07      	bgt.n	800d442 <__sflush_r+0xf6>
 800d432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d43a:	f04f 30ff 	mov.w	r0, #4294967295
 800d43e:	81a3      	strh	r3, [r4, #12]
 800d440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d442:	4407      	add	r7, r0
 800d444:	1a36      	subs	r6, r6, r0
 800d446:	e7e9      	b.n	800d41c <__sflush_r+0xd0>
 800d448:	dfbffffe 	.word	0xdfbffffe

0800d44c <_fflush_r>:
 800d44c:	b538      	push	{r3, r4, r5, lr}
 800d44e:	690b      	ldr	r3, [r1, #16]
 800d450:	4605      	mov	r5, r0
 800d452:	460c      	mov	r4, r1
 800d454:	b913      	cbnz	r3, 800d45c <_fflush_r+0x10>
 800d456:	2500      	movs	r5, #0
 800d458:	4628      	mov	r0, r5
 800d45a:	bd38      	pop	{r3, r4, r5, pc}
 800d45c:	b118      	cbz	r0, 800d466 <_fflush_r+0x1a>
 800d45e:	6a03      	ldr	r3, [r0, #32]
 800d460:	b90b      	cbnz	r3, 800d466 <_fflush_r+0x1a>
 800d462:	f7ff f94d 	bl	800c700 <__sinit>
 800d466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d0f3      	beq.n	800d456 <_fflush_r+0xa>
 800d46e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d470:	07d0      	lsls	r0, r2, #31
 800d472:	d404      	bmi.n	800d47e <_fflush_r+0x32>
 800d474:	0599      	lsls	r1, r3, #22
 800d476:	d402      	bmi.n	800d47e <_fflush_r+0x32>
 800d478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d47a:	f7ff fb8e 	bl	800cb9a <__retarget_lock_acquire_recursive>
 800d47e:	4628      	mov	r0, r5
 800d480:	4621      	mov	r1, r4
 800d482:	f7ff ff63 	bl	800d34c <__sflush_r>
 800d486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d488:	4605      	mov	r5, r0
 800d48a:	07da      	lsls	r2, r3, #31
 800d48c:	d4e4      	bmi.n	800d458 <_fflush_r+0xc>
 800d48e:	89a3      	ldrh	r3, [r4, #12]
 800d490:	059b      	lsls	r3, r3, #22
 800d492:	d4e1      	bmi.n	800d458 <_fflush_r+0xc>
 800d494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d496:	f7ff fb81 	bl	800cb9c <__retarget_lock_release_recursive>
 800d49a:	e7dd      	b.n	800d458 <_fflush_r+0xc>

0800d49c <__swhatbuf_r>:
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	460c      	mov	r4, r1
 800d4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4a4:	4615      	mov	r5, r2
 800d4a6:	2900      	cmp	r1, #0
 800d4a8:	461e      	mov	r6, r3
 800d4aa:	b096      	sub	sp, #88	@ 0x58
 800d4ac:	da0c      	bge.n	800d4c8 <__swhatbuf_r+0x2c>
 800d4ae:	89a3      	ldrh	r3, [r4, #12]
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d4b6:	bf14      	ite	ne
 800d4b8:	2340      	movne	r3, #64	@ 0x40
 800d4ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d4be:	2000      	movs	r0, #0
 800d4c0:	6031      	str	r1, [r6, #0]
 800d4c2:	602b      	str	r3, [r5, #0]
 800d4c4:	b016      	add	sp, #88	@ 0x58
 800d4c6:	bd70      	pop	{r4, r5, r6, pc}
 800d4c8:	466a      	mov	r2, sp
 800d4ca:	f000 f849 	bl	800d560 <_fstat_r>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	dbed      	blt.n	800d4ae <__swhatbuf_r+0x12>
 800d4d2:	9901      	ldr	r1, [sp, #4]
 800d4d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d4d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d4dc:	4259      	negs	r1, r3
 800d4de:	4159      	adcs	r1, r3
 800d4e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4e4:	e7eb      	b.n	800d4be <__swhatbuf_r+0x22>

0800d4e6 <__smakebuf_r>:
 800d4e6:	898b      	ldrh	r3, [r1, #12]
 800d4e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4ea:	079d      	lsls	r5, r3, #30
 800d4ec:	4606      	mov	r6, r0
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	d507      	bpl.n	800d502 <__smakebuf_r+0x1c>
 800d4f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d4f6:	6023      	str	r3, [r4, #0]
 800d4f8:	6123      	str	r3, [r4, #16]
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	6163      	str	r3, [r4, #20]
 800d4fe:	b003      	add	sp, #12
 800d500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d502:	466a      	mov	r2, sp
 800d504:	ab01      	add	r3, sp, #4
 800d506:	f7ff ffc9 	bl	800d49c <__swhatbuf_r>
 800d50a:	9f00      	ldr	r7, [sp, #0]
 800d50c:	4605      	mov	r5, r0
 800d50e:	4639      	mov	r1, r7
 800d510:	4630      	mov	r0, r6
 800d512:	f7ff fbbd 	bl	800cc90 <_malloc_r>
 800d516:	b948      	cbnz	r0, 800d52c <__smakebuf_r+0x46>
 800d518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d51c:	059a      	lsls	r2, r3, #22
 800d51e:	d4ee      	bmi.n	800d4fe <__smakebuf_r+0x18>
 800d520:	f023 0303 	bic.w	r3, r3, #3
 800d524:	f043 0302 	orr.w	r3, r3, #2
 800d528:	81a3      	strh	r3, [r4, #12]
 800d52a:	e7e2      	b.n	800d4f2 <__smakebuf_r+0xc>
 800d52c:	89a3      	ldrh	r3, [r4, #12]
 800d52e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d536:	81a3      	strh	r3, [r4, #12]
 800d538:	9b01      	ldr	r3, [sp, #4]
 800d53a:	6020      	str	r0, [r4, #0]
 800d53c:	b15b      	cbz	r3, 800d556 <__smakebuf_r+0x70>
 800d53e:	4630      	mov	r0, r6
 800d540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d544:	f000 f81e 	bl	800d584 <_isatty_r>
 800d548:	b128      	cbz	r0, 800d556 <__smakebuf_r+0x70>
 800d54a:	89a3      	ldrh	r3, [r4, #12]
 800d54c:	f023 0303 	bic.w	r3, r3, #3
 800d550:	f043 0301 	orr.w	r3, r3, #1
 800d554:	81a3      	strh	r3, [r4, #12]
 800d556:	89a3      	ldrh	r3, [r4, #12]
 800d558:	431d      	orrs	r5, r3
 800d55a:	81a5      	strh	r5, [r4, #12]
 800d55c:	e7cf      	b.n	800d4fe <__smakebuf_r+0x18>
	...

0800d560 <_fstat_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	2300      	movs	r3, #0
 800d564:	4d06      	ldr	r5, [pc, #24]	@ (800d580 <_fstat_r+0x20>)
 800d566:	4604      	mov	r4, r0
 800d568:	4608      	mov	r0, r1
 800d56a:	4611      	mov	r1, r2
 800d56c:	602b      	str	r3, [r5, #0]
 800d56e:	f7f3 fddf 	bl	8001130 <_fstat>
 800d572:	1c43      	adds	r3, r0, #1
 800d574:	d102      	bne.n	800d57c <_fstat_r+0x1c>
 800d576:	682b      	ldr	r3, [r5, #0]
 800d578:	b103      	cbz	r3, 800d57c <_fstat_r+0x1c>
 800d57a:	6023      	str	r3, [r4, #0]
 800d57c:	bd38      	pop	{r3, r4, r5, pc}
 800d57e:	bf00      	nop
 800d580:	20002fa0 	.word	0x20002fa0

0800d584 <_isatty_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	2300      	movs	r3, #0
 800d588:	4d05      	ldr	r5, [pc, #20]	@ (800d5a0 <_isatty_r+0x1c>)
 800d58a:	4604      	mov	r4, r0
 800d58c:	4608      	mov	r0, r1
 800d58e:	602b      	str	r3, [r5, #0]
 800d590:	f7f3 fddd 	bl	800114e <_isatty>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d102      	bne.n	800d59e <_isatty_r+0x1a>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	b103      	cbz	r3, 800d59e <_isatty_r+0x1a>
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
 800d5a0:	20002fa0 	.word	0x20002fa0

0800d5a4 <_sbrk_r>:
 800d5a4:	b538      	push	{r3, r4, r5, lr}
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	4d05      	ldr	r5, [pc, #20]	@ (800d5c0 <_sbrk_r+0x1c>)
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	4608      	mov	r0, r1
 800d5ae:	602b      	str	r3, [r5, #0]
 800d5b0:	f7f3 fde4 	bl	800117c <_sbrk>
 800d5b4:	1c43      	adds	r3, r0, #1
 800d5b6:	d102      	bne.n	800d5be <_sbrk_r+0x1a>
 800d5b8:	682b      	ldr	r3, [r5, #0]
 800d5ba:	b103      	cbz	r3, 800d5be <_sbrk_r+0x1a>
 800d5bc:	6023      	str	r3, [r4, #0]
 800d5be:	bd38      	pop	{r3, r4, r5, pc}
 800d5c0:	20002fa0 	.word	0x20002fa0

0800d5c4 <memchr>:
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	b510      	push	{r4, lr}
 800d5c8:	b2c9      	uxtb	r1, r1
 800d5ca:	4402      	add	r2, r0
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	d101      	bne.n	800d5d6 <memchr+0x12>
 800d5d2:	2000      	movs	r0, #0
 800d5d4:	e003      	b.n	800d5de <memchr+0x1a>
 800d5d6:	7804      	ldrb	r4, [r0, #0]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	428c      	cmp	r4, r1
 800d5dc:	d1f6      	bne.n	800d5cc <memchr+0x8>
 800d5de:	bd10      	pop	{r4, pc}

0800d5e0 <_init>:
 800d5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e2:	bf00      	nop
 800d5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5e6:	bc08      	pop	{r3}
 800d5e8:	469e      	mov	lr, r3
 800d5ea:	4770      	bx	lr

0800d5ec <_fini>:
 800d5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ee:	bf00      	nop
 800d5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5f2:	bc08      	pop	{r3}
 800d5f4:	469e      	mov	lr, r3
 800d5f6:	4770      	bx	lr
