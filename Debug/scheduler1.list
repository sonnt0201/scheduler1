
scheduler1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d814  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800d924  0800d924  0000e924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da38  0800da38  0000f1dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800da38  0800da38  0000f1dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da38  0800da38  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da38  0800da38  0000ea38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da3c  0800da3c  0000ea3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800da40  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033d0  200001dc  0800dc1c  0000f1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035ac  0800dc1c  0000f5ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fbf6  00000000  00000000  0000f205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f16  00000000  00000000  0002edfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  00033d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001544  00000000  00000000  000358d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd2c  00000000  00000000  00036e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021777  00000000  00000000  00053b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c5ab  00000000  00000000  000752bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011186a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dd0  00000000  00000000  001118b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00119680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d90c 	.word	0x0800d90c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800d90c 	.word	0x0800d90c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_frsub>:
 80004c8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	e002      	b.n	80004d4 <__addsf3>
 80004ce:	bf00      	nop

080004d0 <__aeabi_fsub>:
 80004d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004d4 <__addsf3>:
 80004d4:	0042      	lsls	r2, r0, #1
 80004d6:	bf1f      	itttt	ne
 80004d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004dc:	ea92 0f03 	teqne	r2, r3
 80004e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e8:	d06a      	beq.n	80005c0 <__addsf3+0xec>
 80004ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004f2:	bfc1      	itttt	gt
 80004f4:	18d2      	addgt	r2, r2, r3
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	4048      	eorgt	r0, r1
 80004fa:	4041      	eorgt	r1, r0
 80004fc:	bfb8      	it	lt
 80004fe:	425b      	neglt	r3, r3
 8000500:	2b19      	cmp	r3, #25
 8000502:	bf88      	it	hi
 8000504:	4770      	bxhi	lr
 8000506:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800050a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800050e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000512:	bf18      	it	ne
 8000514:	4240      	negne	r0, r0
 8000516:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800051a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800051e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000522:	bf18      	it	ne
 8000524:	4249      	negne	r1, r1
 8000526:	ea92 0f03 	teq	r2, r3
 800052a:	d03f      	beq.n	80005ac <__addsf3+0xd8>
 800052c:	f1a2 0201 	sub.w	r2, r2, #1
 8000530:	fa41 fc03 	asr.w	ip, r1, r3
 8000534:	eb10 000c 	adds.w	r0, r0, ip
 8000538:	f1c3 0320 	rsb	r3, r3, #32
 800053c:	fa01 f103 	lsl.w	r1, r1, r3
 8000540:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000544:	d502      	bpl.n	800054c <__addsf3+0x78>
 8000546:	4249      	negs	r1, r1
 8000548:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800054c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000550:	d313      	bcc.n	800057a <__addsf3+0xa6>
 8000552:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000556:	d306      	bcc.n	8000566 <__addsf3+0x92>
 8000558:	0840      	lsrs	r0, r0, #1
 800055a:	ea4f 0131 	mov.w	r1, r1, rrx
 800055e:	f102 0201 	add.w	r2, r2, #1
 8000562:	2afe      	cmp	r2, #254	@ 0xfe
 8000564:	d251      	bcs.n	800060a <__addsf3+0x136>
 8000566:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800056a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056e:	bf08      	it	eq
 8000570:	f020 0001 	biceq.w	r0, r0, #1
 8000574:	ea40 0003 	orr.w	r0, r0, r3
 8000578:	4770      	bx	lr
 800057a:	0049      	lsls	r1, r1, #1
 800057c:	eb40 0000 	adc.w	r0, r0, r0
 8000580:	3a01      	subs	r2, #1
 8000582:	bf28      	it	cs
 8000584:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000588:	d2ed      	bcs.n	8000566 <__addsf3+0x92>
 800058a:	fab0 fc80 	clz	ip, r0
 800058e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000592:	ebb2 020c 	subs.w	r2, r2, ip
 8000596:	fa00 f00c 	lsl.w	r0, r0, ip
 800059a:	bfaa      	itet	ge
 800059c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005a0:	4252      	neglt	r2, r2
 80005a2:	4318      	orrge	r0, r3
 80005a4:	bfbc      	itt	lt
 80005a6:	40d0      	lsrlt	r0, r2
 80005a8:	4318      	orrlt	r0, r3
 80005aa:	4770      	bx	lr
 80005ac:	f092 0f00 	teq	r2, #0
 80005b0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005b4:	bf06      	itte	eq
 80005b6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005ba:	3201      	addeq	r2, #1
 80005bc:	3b01      	subne	r3, #1
 80005be:	e7b5      	b.n	800052c <__addsf3+0x58>
 80005c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c8:	bf18      	it	ne
 80005ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ce:	d021      	beq.n	8000614 <__addsf3+0x140>
 80005d0:	ea92 0f03 	teq	r2, r3
 80005d4:	d004      	beq.n	80005e0 <__addsf3+0x10c>
 80005d6:	f092 0f00 	teq	r2, #0
 80005da:	bf08      	it	eq
 80005dc:	4608      	moveq	r0, r1
 80005de:	4770      	bx	lr
 80005e0:	ea90 0f01 	teq	r0, r1
 80005e4:	bf1c      	itt	ne
 80005e6:	2000      	movne	r0, #0
 80005e8:	4770      	bxne	lr
 80005ea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80005ee:	d104      	bne.n	80005fa <__addsf3+0x126>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	bf28      	it	cs
 80005f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80005f8:	4770      	bx	lr
 80005fa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80005fe:	bf3c      	itt	cc
 8000600:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000604:	4770      	bxcc	lr
 8000606:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800060a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800060e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000612:	4770      	bx	lr
 8000614:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000618:	bf16      	itet	ne
 800061a:	4608      	movne	r0, r1
 800061c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000620:	4601      	movne	r1, r0
 8000622:	0242      	lsls	r2, r0, #9
 8000624:	bf06      	itte	eq
 8000626:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800062a:	ea90 0f01 	teqeq	r0, r1
 800062e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000632:	4770      	bx	lr

08000634 <__aeabi_ui2f>:
 8000634:	f04f 0300 	mov.w	r3, #0
 8000638:	e004      	b.n	8000644 <__aeabi_i2f+0x8>
 800063a:	bf00      	nop

0800063c <__aeabi_i2f>:
 800063c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000640:	bf48      	it	mi
 8000642:	4240      	negmi	r0, r0
 8000644:	ea5f 0c00 	movs.w	ip, r0
 8000648:	bf08      	it	eq
 800064a:	4770      	bxeq	lr
 800064c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000650:	4601      	mov	r1, r0
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	e01c      	b.n	8000692 <__aeabi_l2f+0x2a>

08000658 <__aeabi_ul2f>:
 8000658:	ea50 0201 	orrs.w	r2, r0, r1
 800065c:	bf08      	it	eq
 800065e:	4770      	bxeq	lr
 8000660:	f04f 0300 	mov.w	r3, #0
 8000664:	e00a      	b.n	800067c <__aeabi_l2f+0x14>
 8000666:	bf00      	nop

08000668 <__aeabi_l2f>:
 8000668:	ea50 0201 	orrs.w	r2, r0, r1
 800066c:	bf08      	it	eq
 800066e:	4770      	bxeq	lr
 8000670:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000674:	d502      	bpl.n	800067c <__aeabi_l2f+0x14>
 8000676:	4240      	negs	r0, r0
 8000678:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800067c:	ea5f 0c01 	movs.w	ip, r1
 8000680:	bf02      	ittt	eq
 8000682:	4684      	moveq	ip, r0
 8000684:	4601      	moveq	r1, r0
 8000686:	2000      	moveq	r0, #0
 8000688:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800068c:	bf08      	it	eq
 800068e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000692:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000696:	fabc f28c 	clz	r2, ip
 800069a:	3a08      	subs	r2, #8
 800069c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006a0:	db10      	blt.n	80006c4 <__aeabi_l2f+0x5c>
 80006a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a6:	4463      	add	r3, ip
 80006a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80006ac:	f1c2 0220 	rsb	r2, r2, #32
 80006b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006b4:	fa20 f202 	lsr.w	r2, r0, r2
 80006b8:	eb43 0002 	adc.w	r0, r3, r2
 80006bc:	bf08      	it	eq
 80006be:	f020 0001 	biceq.w	r0, r0, #1
 80006c2:	4770      	bx	lr
 80006c4:	f102 0220 	add.w	r2, r2, #32
 80006c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80006cc:	f1c2 0220 	rsb	r2, r2, #32
 80006d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d4:	fa21 f202 	lsr.w	r2, r1, r2
 80006d8:	eb43 0002 	adc.w	r0, r3, r2
 80006dc:	bf08      	it	eq
 80006de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006e2:	4770      	bx	lr

080006e4 <__aeabi_fmul>:
 80006e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006ec:	bf1e      	ittt	ne
 80006ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006f2:	ea92 0f0c 	teqne	r2, ip
 80006f6:	ea93 0f0c 	teqne	r3, ip
 80006fa:	d06f      	beq.n	80007dc <__aeabi_fmul+0xf8>
 80006fc:	441a      	add	r2, r3
 80006fe:	ea80 0c01 	eor.w	ip, r0, r1
 8000702:	0240      	lsls	r0, r0, #9
 8000704:	bf18      	it	ne
 8000706:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800070a:	d01e      	beq.n	800074a <__aeabi_fmul+0x66>
 800070c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000710:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000714:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000718:	fba0 3101 	umull	r3, r1, r0, r1
 800071c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000720:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000724:	bf3e      	ittt	cc
 8000726:	0049      	lslcc	r1, r1, #1
 8000728:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800072c:	005b      	lslcc	r3, r3, #1
 800072e:	ea40 0001 	orr.w	r0, r0, r1
 8000732:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000736:	2afd      	cmp	r2, #253	@ 0xfd
 8000738:	d81d      	bhi.n	8000776 <__aeabi_fmul+0x92>
 800073a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800073e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000742:	bf08      	it	eq
 8000744:	f020 0001 	biceq.w	r0, r0, #1
 8000748:	4770      	bx	lr
 800074a:	f090 0f00 	teq	r0, #0
 800074e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000752:	bf08      	it	eq
 8000754:	0249      	lsleq	r1, r1, #9
 8000756:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800075a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075e:	3a7f      	subs	r2, #127	@ 0x7f
 8000760:	bfc2      	ittt	gt
 8000762:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000766:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800076a:	4770      	bxgt	lr
 800076c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	3a01      	subs	r2, #1
 8000776:	dc5d      	bgt.n	8000834 <__aeabi_fmul+0x150>
 8000778:	f112 0f19 	cmn.w	r2, #25
 800077c:	bfdc      	itt	le
 800077e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000782:	4770      	bxle	lr
 8000784:	f1c2 0200 	rsb	r2, r2, #0
 8000788:	0041      	lsls	r1, r0, #1
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	f1c2 0220 	rsb	r2, r2, #32
 8000792:	fa00 fc02 	lsl.w	ip, r0, r2
 8000796:	ea5f 0031 	movs.w	r0, r1, rrx
 800079a:	f140 0000 	adc.w	r0, r0, #0
 800079e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007a2:	bf08      	it	eq
 80007a4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a8:	4770      	bx	lr
 80007aa:	f092 0f00 	teq	r2, #0
 80007ae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007b2:	bf02      	ittt	eq
 80007b4:	0040      	lsleq	r0, r0, #1
 80007b6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007ba:	3a01      	subeq	r2, #1
 80007bc:	d0f9      	beq.n	80007b2 <__aeabi_fmul+0xce>
 80007be:	ea40 000c 	orr.w	r0, r0, ip
 80007c2:	f093 0f00 	teq	r3, #0
 80007c6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ca:	bf02      	ittt	eq
 80007cc:	0049      	lsleq	r1, r1, #1
 80007ce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007d2:	3b01      	subeq	r3, #1
 80007d4:	d0f9      	beq.n	80007ca <__aeabi_fmul+0xe6>
 80007d6:	ea41 010c 	orr.w	r1, r1, ip
 80007da:	e78f      	b.n	80006fc <__aeabi_fmul+0x18>
 80007dc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007e0:	ea92 0f0c 	teq	r2, ip
 80007e4:	bf18      	it	ne
 80007e6:	ea93 0f0c 	teqne	r3, ip
 80007ea:	d00a      	beq.n	8000802 <__aeabi_fmul+0x11e>
 80007ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80007f0:	bf18      	it	ne
 80007f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80007f6:	d1d8      	bne.n	80007aa <__aeabi_fmul+0xc6>
 80007f8:	ea80 0001 	eor.w	r0, r0, r1
 80007fc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000800:	4770      	bx	lr
 8000802:	f090 0f00 	teq	r0, #0
 8000806:	bf17      	itett	ne
 8000808:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800080c:	4608      	moveq	r0, r1
 800080e:	f091 0f00 	teqne	r1, #0
 8000812:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000816:	d014      	beq.n	8000842 <__aeabi_fmul+0x15e>
 8000818:	ea92 0f0c 	teq	r2, ip
 800081c:	d101      	bne.n	8000822 <__aeabi_fmul+0x13e>
 800081e:	0242      	lsls	r2, r0, #9
 8000820:	d10f      	bne.n	8000842 <__aeabi_fmul+0x15e>
 8000822:	ea93 0f0c 	teq	r3, ip
 8000826:	d103      	bne.n	8000830 <__aeabi_fmul+0x14c>
 8000828:	024b      	lsls	r3, r1, #9
 800082a:	bf18      	it	ne
 800082c:	4608      	movne	r0, r1
 800082e:	d108      	bne.n	8000842 <__aeabi_fmul+0x15e>
 8000830:	ea80 0001 	eor.w	r0, r0, r1
 8000834:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000840:	4770      	bx	lr
 8000842:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000846:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800084a:	4770      	bx	lr

0800084c <__aeabi_fdiv>:
 800084c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000850:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000854:	bf1e      	ittt	ne
 8000856:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800085a:	ea92 0f0c 	teqne	r2, ip
 800085e:	ea93 0f0c 	teqne	r3, ip
 8000862:	d069      	beq.n	8000938 <__aeabi_fdiv+0xec>
 8000864:	eba2 0203 	sub.w	r2, r2, r3
 8000868:	ea80 0c01 	eor.w	ip, r0, r1
 800086c:	0249      	lsls	r1, r1, #9
 800086e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000872:	d037      	beq.n	80008e4 <__aeabi_fdiv+0x98>
 8000874:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000878:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800087c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000880:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000884:	428b      	cmp	r3, r1
 8000886:	bf38      	it	cc
 8000888:	005b      	lslcc	r3, r3, #1
 800088a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800088e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000892:	428b      	cmp	r3, r1
 8000894:	bf24      	itt	cs
 8000896:	1a5b      	subcs	r3, r3, r1
 8000898:	ea40 000c 	orrcs.w	r0, r0, ip
 800089c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008a0:	bf24      	itt	cs
 80008a2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008aa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008ae:	bf24      	itt	cs
 80008b0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008bc:	bf24      	itt	cs
 80008be:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008c2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c6:	011b      	lsls	r3, r3, #4
 80008c8:	bf18      	it	ne
 80008ca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ce:	d1e0      	bne.n	8000892 <__aeabi_fdiv+0x46>
 80008d0:	2afd      	cmp	r2, #253	@ 0xfd
 80008d2:	f63f af50 	bhi.w	8000776 <__aeabi_fmul+0x92>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008dc:	bf08      	it	eq
 80008de:	f020 0001 	biceq.w	r0, r0, #1
 80008e2:	4770      	bx	lr
 80008e4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008e8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ec:	327f      	adds	r2, #127	@ 0x7f
 80008ee:	bfc2      	ittt	gt
 80008f0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008f4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f8:	4770      	bxgt	lr
 80008fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008fe:	f04f 0300 	mov.w	r3, #0
 8000902:	3a01      	subs	r2, #1
 8000904:	e737      	b.n	8000776 <__aeabi_fmul+0x92>
 8000906:	f092 0f00 	teq	r2, #0
 800090a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800090e:	bf02      	ittt	eq
 8000910:	0040      	lsleq	r0, r0, #1
 8000912:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000916:	3a01      	subeq	r2, #1
 8000918:	d0f9      	beq.n	800090e <__aeabi_fdiv+0xc2>
 800091a:	ea40 000c 	orr.w	r0, r0, ip
 800091e:	f093 0f00 	teq	r3, #0
 8000922:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000926:	bf02      	ittt	eq
 8000928:	0049      	lsleq	r1, r1, #1
 800092a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800092e:	3b01      	subeq	r3, #1
 8000930:	d0f9      	beq.n	8000926 <__aeabi_fdiv+0xda>
 8000932:	ea41 010c 	orr.w	r1, r1, ip
 8000936:	e795      	b.n	8000864 <__aeabi_fdiv+0x18>
 8000938:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800093c:	ea92 0f0c 	teq	r2, ip
 8000940:	d108      	bne.n	8000954 <__aeabi_fdiv+0x108>
 8000942:	0242      	lsls	r2, r0, #9
 8000944:	f47f af7d 	bne.w	8000842 <__aeabi_fmul+0x15e>
 8000948:	ea93 0f0c 	teq	r3, ip
 800094c:	f47f af70 	bne.w	8000830 <__aeabi_fmul+0x14c>
 8000950:	4608      	mov	r0, r1
 8000952:	e776      	b.n	8000842 <__aeabi_fmul+0x15e>
 8000954:	ea93 0f0c 	teq	r3, ip
 8000958:	d104      	bne.n	8000964 <__aeabi_fdiv+0x118>
 800095a:	024b      	lsls	r3, r1, #9
 800095c:	f43f af4c 	beq.w	80007f8 <__aeabi_fmul+0x114>
 8000960:	4608      	mov	r0, r1
 8000962:	e76e      	b.n	8000842 <__aeabi_fmul+0x15e>
 8000964:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000968:	bf18      	it	ne
 800096a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800096e:	d1ca      	bne.n	8000906 <__aeabi_fdiv+0xba>
 8000970:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000974:	f47f af5c 	bne.w	8000830 <__aeabi_fmul+0x14c>
 8000978:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800097c:	f47f af3c 	bne.w	80007f8 <__aeabi_fmul+0x114>
 8000980:	e75f      	b.n	8000842 <__aeabi_fmul+0x15e>
 8000982:	bf00      	nop

08000984 <__gesf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpsf2+0x4>
 800098a:	bf00      	nop

0800098c <__lesf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpsf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpsf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ae:	d011      	beq.n	80009d4 <__cmpsf2+0x40>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009b6:	bf18      	it	ne
 80009b8:	ea90 0f01 	teqne	r0, r1
 80009bc:	bf58      	it	pl
 80009be:	ebb2 0003 	subspl.w	r0, r2, r3
 80009c2:	bf88      	it	hi
 80009c4:	17c8      	asrhi	r0, r1, #31
 80009c6:	bf38      	it	cc
 80009c8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009cc:	bf18      	it	ne
 80009ce:	f040 0001 	orrne.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009d8:	d102      	bne.n	80009e0 <__cmpsf2+0x4c>
 80009da:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009de:	d105      	bne.n	80009ec <__cmpsf2+0x58>
 80009e0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009e4:	d1e4      	bne.n	80009b0 <__cmpsf2+0x1c>
 80009e6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009ea:	d0e1      	beq.n	80009b0 <__cmpsf2+0x1c>
 80009ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_cfrcmple>:
 80009f4:	4684      	mov	ip, r0
 80009f6:	4608      	mov	r0, r1
 80009f8:	4661      	mov	r1, ip
 80009fa:	e7ff      	b.n	80009fc <__aeabi_cfcmpeq>

080009fc <__aeabi_cfcmpeq>:
 80009fc:	b50f      	push	{r0, r1, r2, r3, lr}
 80009fe:	f7ff ffc9 	bl	8000994 <__cmpsf2>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	bf48      	it	mi
 8000a06:	f110 0f00 	cmnmi.w	r0, #0
 8000a0a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a0c <__aeabi_fcmpeq>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff fff4 	bl	80009fc <__aeabi_cfcmpeq>
 8000a14:	bf0c      	ite	eq
 8000a16:	2001      	moveq	r0, #1
 8000a18:	2000      	movne	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_fcmplt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffea 	bl	80009fc <__aeabi_cfcmpeq>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_fcmple>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffe0 	bl	80009fc <__aeabi_cfcmpeq>
 8000a3c:	bf94      	ite	ls
 8000a3e:	2001      	movls	r0, #1
 8000a40:	2000      	movhi	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_fcmpge>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffd2 	bl	80009f4 <__aeabi_cfrcmple>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_fcmpgt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffc8 	bl	80009f4 <__aeabi_cfrcmple>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_f2iz>:
 8000a70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a74:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a78:	d30f      	bcc.n	8000a9a <__aeabi_f2iz+0x2a>
 8000a7a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000a7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a82:	d90d      	bls.n	8000aa0 <__aeabi_f2iz+0x30>
 8000a84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a90:	fa23 f002 	lsr.w	r0, r3, r2
 8000a94:	bf18      	it	ne
 8000a96:	4240      	negne	r0, r0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0000 	mov.w	r0, #0
 8000a9e:	4770      	bx	lr
 8000aa0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000aa4:	d101      	bne.n	8000aaa <__aeabi_f2iz+0x3a>
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	d105      	bne.n	8000ab6 <__aeabi_f2iz+0x46>
 8000aaa:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000aae:	bf08      	it	eq
 8000ab0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <DelayMicro>:
#include "dht22.h"
//--------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <DelayMicro+0x34>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <DelayMicro+0x38>)
 8000aca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ace:	0ddb      	lsrs	r3, r3, #23
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	fb02 f303 	mul.w	r3, r2, r3
 8000ad6:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8000ad8:	bf00      	nop
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	1e5a      	subs	r2, r3, #1
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1fa      	bne.n	8000ada <DelayMicro+0x1e>
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000000 	.word	0x20000000
 8000af4:	ee9bfab5 	.word	0xee9bfab5

08000af8 <dht22_init>:

//--------------------------------------------------
void dht22_init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};	
 8000afe:	463b      	mov	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_DeInit(data_port, data_pin);
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <dht22_init+0x50>)
 8000b0e:	f000 ffb9 	bl	8001a84 <HAL_GPIO_DeInit>
  GPIO_InitStruct.Pin = data_pin;
 8000b12:	2304      	movs	r3, #4
 8000b14:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b16:	2311      	movs	r3, #17
 8000b18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(data_port, &GPIO_InitStruct);
 8000b22:	463b      	mov	r3, r7
 8000b24:	4619      	mov	r1, r3
 8000b26:	4808      	ldr	r0, [pc, #32]	@ (8000b48 <dht22_init+0x50>)
 8000b28:	f000 fe28 	bl	800177c <HAL_GPIO_Init>
	///////////////////////////////////////////////////////
  HAL_Delay(1000);
 8000b2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b30:	f000 fd20 	bl	8001574 <HAL_Delay>
  HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2104      	movs	r1, #4
 8000b38:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <dht22_init+0x50>)
 8000b3a:	f001 f876 	bl	8001c2a <HAL_GPIO_WritePin>

}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010800 	.word	0x40010800

08000b4c <DHT22_GetTemp_Humidity>:

uint8_t DHT22_GetTemp_Humidity(float *Temp, float *Humidity)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
	uint8_t dataArray[6], myChecksum;
	uint16_t Temp16, Humid16;
	uint8_t i, j = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	485e      	ldr	r0, [pc, #376]	@ (8000cd8 <DHT22_GetTemp_Humidity+0x18c>)
 8000b60:	f001 f863 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2104      	movs	r1, #4
 8000b68:	485b      	ldr	r0, [pc, #364]	@ (8000cd8 <DHT22_GetTemp_Humidity+0x18c>)
 8000b6a:	f001 f85e 	bl	8001c2a <HAL_GPIO_WritePin>
	DelayMicro(100000);
 8000b6e:	485b      	ldr	r0, [pc, #364]	@ (8000cdc <DHT22_GetTemp_Humidity+0x190>)
 8000b70:	f7ff ffa4 	bl	8000abc <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2104      	movs	r1, #4
 8000b78:	4857      	ldr	r0, [pc, #348]	@ (8000cd8 <DHT22_GetTemp_Humidity+0x18c>)
 8000b7a:	f001 f856 	bl	8001c2a <HAL_GPIO_WritePin>
	DelayMicro(18000);
 8000b7e:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000b82:	f7ff ff9b 	bl	8000abc <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);	
 8000b86:	2201      	movs	r2, #1
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4853      	ldr	r0, [pc, #332]	@ (8000cd8 <DHT22_GetTemp_Humidity+0x18c>)
 8000b8c:	f001 f84d 	bl	8001c2a <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40 	
 8000b90:	2027      	movs	r0, #39	@ 0x27
 8000b92:	f7ff ff93 	bl	8000abc <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 8000b96:	2104      	movs	r1, #4
 8000b98:	484f      	ldr	r0, [pc, #316]	@ (8000cd8 <DHT22_GetTemp_Humidity+0x18c>)
 8000b9a:	f001 f82f 	bl	8001bfc <HAL_GPIO_ReadPin>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d101      	bne.n	8000ba8 <DHT22_GetTemp_Humidity+0x5c>
	{
		return 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e093      	b.n	8000cd0 <DHT22_GetTemp_Humidity+0x184>
	}
	DelayMicro(80);
 8000ba8:	2050      	movs	r0, #80	@ 0x50
 8000baa:	f7ff ff87 	bl	8000abc <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4849      	ldr	r0, [pc, #292]	@ (8000cd8 <DHT22_GetTemp_Humidity+0x18c>)
 8000bb2:	f001 f823 	bl	8001bfc <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d101      	bne.n	8000bc0 <DHT22_GetTemp_Humidity+0x74>
	{
		return 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e087      	b.n	8000cd0 <DHT22_GetTemp_Humidity+0x184>
	}
	DelayMicro(80);
 8000bc0:	2050      	movs	r0, #80	@ 0x50
 8000bc2:	f7ff ff7b 	bl	8000abc <DelayMicro>

	for (j=0; j<5; j++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	757b      	strb	r3, [r7, #21]
 8000bca:	e040      	b.n	8000c4e <DHT22_GetTemp_Humidity+0x102>
	{
		dataArray[j]=0;
 8000bcc:	7d7b      	ldrb	r3, [r7, #21]
 8000bce:	3318      	adds	r3, #24
 8000bd0:	443b      	add	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(i=0; i<8; i++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	75bb      	strb	r3, [r7, #22]
 8000bdc:	e031      	b.n	8000c42 <DHT22_GetTemp_Humidity+0xf6>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);	
 8000bde:	bf00      	nop
 8000be0:	2104      	movs	r1, #4
 8000be2:	483d      	ldr	r0, [pc, #244]	@ (8000cd8 <DHT22_GetTemp_Humidity+0x18c>)
 8000be4:	f001 f80a 	bl	8001bfc <HAL_GPIO_ReadPin>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f8      	beq.n	8000be0 <DHT22_GetTemp_Humidity+0x94>
			DelayMicro(30);
 8000bee:	201e      	movs	r0, #30
 8000bf0:	f7ff ff64 	bl	8000abc <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	4838      	ldr	r0, [pc, #224]	@ (8000cd8 <DHT22_GetTemp_Humidity+0x18c>)
 8000bf8:	f001 f800 	bl	8001bfc <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d014      	beq.n	8000c2c <DHT22_GetTemp_Humidity+0xe0>
				dataArray[j] |= (1<<(7-i));
 8000c02:	7d7b      	ldrb	r3, [r7, #21]
 8000c04:	3318      	adds	r3, #24
 8000c06:	443b      	add	r3, r7
 8000c08:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000c0c:	b25a      	sxtb	r2, r3
 8000c0e:	7dbb      	ldrb	r3, [r7, #22]
 8000c10:	f1c3 0307 	rsb	r3, r3, #7
 8000c14:	2101      	movs	r1, #1
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b25a      	sxtb	r2, r3
 8000c20:	7d7b      	ldrb	r3, [r7, #21]
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	3318      	adds	r3, #24
 8000c26:	443b      	add	r3, r7
 8000c28:	f803 2c10 	strb.w	r2, [r3, #-16]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);				
 8000c2c:	bf00      	nop
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4829      	ldr	r0, [pc, #164]	@ (8000cd8 <DHT22_GetTemp_Humidity+0x18c>)
 8000c32:	f000 ffe3 	bl	8001bfc <HAL_GPIO_ReadPin>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d0f8      	beq.n	8000c2e <DHT22_GetTemp_Humidity+0xe2>
		for(i=0; i<8; i++)
 8000c3c:	7dbb      	ldrb	r3, [r7, #22]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	75bb      	strb	r3, [r7, #22]
 8000c42:	7dbb      	ldrb	r3, [r7, #22]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d9ca      	bls.n	8000bde <DHT22_GetTemp_Humidity+0x92>
	for (j=0; j<5; j++)
 8000c48:	7d7b      	ldrb	r3, [r7, #21]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	757b      	strb	r3, [r7, #21]
 8000c4e:	7d7b      	ldrb	r3, [r7, #21]
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d9bb      	bls.n	8000bcc <DHT22_GetTemp_Humidity+0x80>
		}
	}
	myChecksum = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++) 
 8000c58:	2300      	movs	r3, #0
 8000c5a:	753b      	strb	r3, [r7, #20]
 8000c5c:	e00a      	b.n	8000c74 <DHT22_GetTemp_Humidity+0x128>
	{
		myChecksum += dataArray[k];
 8000c5e:	7d3b      	ldrb	r3, [r7, #20]
 8000c60:	3318      	adds	r3, #24
 8000c62:	443b      	add	r3, r7
 8000c64:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000c68:	7dfb      	ldrb	r3, [r7, #23]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++) 
 8000c6e:	7d3b      	ldrb	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	753b      	strb	r3, [r7, #20]
 8000c74:	7d3b      	ldrb	r3, [r7, #20]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d9f1      	bls.n	8000c5e <DHT22_GetTemp_Humidity+0x112>
	}

		Temp16 = (dataArray[2] <<8) | dataArray[3];
 8000c7a:	7abb      	ldrb	r3, [r7, #10]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	b21a      	sxth	r2, r3
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	827b      	strh	r3, [r7, #18]
		Humid16 = (dataArray[0] <<8) | dataArray[1];
 8000c8a:	7a3b      	ldrb	r3, [r7, #8]
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	7a7b      	ldrb	r3, [r7, #9]
 8000c92:	b21b      	sxth	r3, r3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	823b      	strh	r3, [r7, #16]
		
		*Temp = Temp16/10.0f;
 8000c9a:	8a7b      	ldrh	r3, [r7, #18]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fccd 	bl	800063c <__aeabi_i2f>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	490e      	ldr	r1, [pc, #56]	@ (8000ce0 <DHT22_GetTemp_Humidity+0x194>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fdd0 	bl	800084c <__aeabi_fdiv>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	601a      	str	r2, [r3, #0]
		*Humidity = Humid16/10.0f;
 8000cb4:	8a3b      	ldrh	r3, [r7, #16]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fcc0 	bl	800063c <__aeabi_i2f>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4908      	ldr	r1, [pc, #32]	@ (8000ce0 <DHT22_GetTemp_Humidity+0x194>)
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fdc3 	bl	800084c <__aeabi_fdiv>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	601a      	str	r2, [r3, #0]
		return 1;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	000186a0 	.word	0x000186a0
 8000ce0:	41200000 	.word	0x41200000

08000ce4 <__io_putchar>:
// ************** DEFINE ****************

/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
    while (CDC_Transmit_FS((uint8_t *)&ch, 1) == USBD_BUSY);
 8000cec:	bf00      	nop
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f00b f9ee 	bl	800c0d4 <CDC_Transmit_FS>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d0f7      	beq.n	8000cee <__io_putchar+0xa>
    return ch;
 8000cfe:	687b      	ldr	r3, [r7, #4]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <MPU6050_Init>:
 *
 * */
I2C_HandleTypeDef * _hi2c1Ref;

inline void MPU6050_Init ( I2C_HandleTypeDef* p_hi2c1 )
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af04      	add	r7, sp, #16
 8000d0e:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	_hi2c1Ref = p_hi2c1;
 8000d10:	4a2e      	ldr	r2, [pc, #184]	@ (8000dcc <MPU6050_Init+0xc4>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]

	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read (_hi2c1Ref, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8000d16:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <MPU6050_Init+0xc4>)
 8000d18:	6818      	ldr	r0, [r3, #0]
 8000d1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1e:	9302      	str	r3, [sp, #8]
 8000d20:	2301      	movs	r3, #1
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	f107 030f 	add.w	r3, r7, #15
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	2275      	movs	r2, #117	@ 0x75
 8000d2e:	21d0      	movs	r1, #208	@ 0xd0
 8000d30:	f001 f9d2 	bl	80020d8 <HAL_I2C_Mem_Read>
	if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	2b68      	cmp	r3, #104	@ 0x68
 8000d38:	d143      	bne.n	8000dc2 <MPU6050_Init+0xba>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(_hi2c1Ref, MPU6050_ADDR, 0x6B, 1,&Data, 1, 1000);
 8000d3e:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <MPU6050_Init+0xc4>)
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d46:	9302      	str	r3, [sp, #8]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	f107 030e 	add.w	r3, r7, #14
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2301      	movs	r3, #1
 8000d54:	226b      	movs	r2, #107	@ 0x6b
 8000d56:	21d0      	movs	r1, #208	@ 0xd0
 8000d58:	f001 f8c4 	bl	8001ee4 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(_hi2c1Ref, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 8000d60:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <MPU6050_Init+0xc4>)
 8000d62:	6818      	ldr	r0, [r3, #0]
 8000d64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d68:	9302      	str	r3, [sp, #8]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	f107 030e 	add.w	r3, r7, #14
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2301      	movs	r3, #1
 8000d76:	2219      	movs	r2, #25
 8000d78:	21d0      	movs	r1, #208	@ 0xd0
 8000d7a:	f001 f8b3 	bl	8001ee4 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		Data = 0x00;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 ̐/s
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(_hi2c1Ref, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000);
 8000d82:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <MPU6050_Init+0xc4>)
 8000d84:	6818      	ldr	r0, [r3, #0]
 8000d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	f107 030e 	add.w	r3, r7, #14
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	221b      	movs	r2, #27
 8000d9a:	21d0      	movs	r1, #208	@ 0xd0
 8000d9c:	f001 f8a2 	bl	8001ee4 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		Data = 0x00;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 8000da0:	2300      	movs	r3, #0
 8000da2:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(_hi2c1Ref, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000);
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MPU6050_Init+0xc4>)
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	2301      	movs	r3, #1
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	f107 030e 	add.w	r3, r7, #14
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	221c      	movs	r2, #28
 8000dbc:	21d0      	movs	r1, #208	@ 0xd0
 8000dbe:	f001 f891 	bl	8001ee4 <HAL_I2C_Mem_Write>
	}

}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000020c 	.word	0x2000020c

08000dd0 <MPU6050_Read_Accel>:


inline void MPU6050_Read_Accel ( void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (_hi2c1Ref, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e90 <MPU6050_Read_Accel+0xc0>)
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2306      	movs	r3, #6
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	463b      	mov	r3, r7
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2301      	movs	r3, #1
 8000dea:	223b      	movs	r2, #59	@ 0x3b
 8000dec:	21d0      	movs	r1, #208	@ 0xd0
 8000dee:	f001 f973 	bl	80020d8 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000df2:	783b      	ldrb	r3, [r7, #0]
 8000df4:	021b      	lsls	r3, r3, #8
 8000df6:	b21a      	sxth	r2, r3
 8000df8:	787b      	ldrb	r3, [r7, #1]
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b21a      	sxth	r2, r3
 8000e00:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <MPU6050_Read_Accel+0xc4>)
 8000e02:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000e04:	78bb      	ldrb	r3, [r7, #2]
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	b21b      	sxth	r3, r3
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <MPU6050_Read_Accel+0xc8>)
 8000e14:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000e16:	793b      	ldrb	r3, [r7, #4]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	797b      	ldrb	r3, [r7, #5]
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <MPU6050_Read_Accel+0xcc>)
 8000e26:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = (float)Accel_X_RAW/16384.0;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MPU6050_Read_Accel+0xc4>)
 8000e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fc04 	bl	800063c <__aeabi_i2f>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fd06 	bl	800084c <__aeabi_fdiv>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <MPU6050_Read_Accel+0xd0>)
 8000e46:	601a      	str	r2, [r3, #0]
	Ay = (float)Accel_Y_RAW/16384.0;
 8000e48:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <MPU6050_Read_Accel+0xc8>)
 8000e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fbf4 	bl	800063c <__aeabi_i2f>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fcf6 	bl	800084c <__aeabi_fdiv>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <MPU6050_Read_Accel+0xd4>)
 8000e66:	601a      	str	r2, [r3, #0]
	Az = (float)Accel_Z_RAW/16384.0;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <MPU6050_Read_Accel+0xcc>)
 8000e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fbe4 	bl	800063c <__aeabi_i2f>
 8000e74:	4603      	mov	r3, r0
 8000e76:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fce6 	bl	800084c <__aeabi_fdiv>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <MPU6050_Read_Accel+0xd8>)
 8000e86:	601a      	str	r2, [r3, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000020c 	.word	0x2000020c
 8000e94:	200001f8 	.word	0x200001f8
 8000e98:	200001fa 	.word	0x200001fa
 8000e9c:	200001fc 	.word	0x200001fc
 8000ea0:	20000200 	.word	0x20000200
 8000ea4:	20000204 	.word	0x20000204
 8000ea8:	20000208 	.word	0x20000208

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f000 fb2e 	bl	8001510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 f822 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f000 f8aa 	bl	8001010 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ebc:	f000 f87a 	bl	8000fb4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000ec0:	f00b f84a 	bl	800bf58 <MX_USB_DEVICE_Init>

  MPU6050_Init(&hi2c1);
 8000ec4:	4809      	ldr	r0, [pc, #36]	@ (8000eec <main+0x40>)
 8000ec6:	f7ff ff1f 	bl	8000d08 <MPU6050_Init>
  dht22_init();
 8000eca:	f7ff fe15 	bl	8000af8 <dht22_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ece:	f008 fb03 	bl	80094d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ed2:	4a07      	ldr	r2, [pc, #28]	@ (8000ef0 <main+0x44>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4807      	ldr	r0, [pc, #28]	@ (8000ef4 <main+0x48>)
 8000ed8:	f008 fb46 	bl	8009568 <osThreadNew>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a06      	ldr	r2, [pc, #24]	@ (8000ef8 <main+0x4c>)
 8000ee0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ee2:	f008 fb1b 	bl	800951c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee6:	bf00      	nop
 8000ee8:	e7fd      	b.n	8000ee6 <main+0x3a>
 8000eea:	bf00      	nop
 8000eec:	20000210 	.word	0x20000210
 8000ef0:	0800d9b4 	.word	0x0800d9b4
 8000ef4:	08001099 	.word	0x08001099
 8000ef8:	20000264 	.word	0x20000264

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	@ 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f06:	2228      	movs	r2, #40	@ 0x28
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f00b feca 	bl	800cca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f48:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fc48 	bl	80047e8 <HAL_RCC_OscConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f5e:	f000 f8ef 	bl	8001140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f62:	230f      	movs	r3, #15
 8000f64:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f72:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f003 feb4 	bl	8004cec <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f8a:	f000 f8d9 	bl	8001140 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f8e:	2310      	movs	r3, #16
 8000f90:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f96:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 f864 	bl	8005068 <HAL_RCCEx_PeriphCLKConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fa6:	f000 f8cb 	bl	8001140 <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3750      	adds	r7, #80	@ 0x50
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_I2C1_Init+0x50>)
 8000fba:	4a13      	ldr	r2, [pc, #76]	@ (8001008 <MX_I2C1_Init+0x54>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_I2C1_Init+0x50>)
 8000fc0:	4a12      	ldr	r2, [pc, #72]	@ (800100c <MX_I2C1_Init+0x58>)
 8000fc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_I2C1_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <MX_I2C1_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_I2C1_Init+0x50>)
 8000fd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <MX_I2C1_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_I2C1_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <MX_I2C1_Init+0x50>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <MX_I2C1_Init+0x50>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff0:	4804      	ldr	r0, [pc, #16]	@ (8001004 <MX_I2C1_Init+0x50>)
 8000ff2:	f000 fe33 	bl	8001c5c <HAL_I2C_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ffc:	f000 f8a0 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000210 	.word	0x20000210
 8001008:	40005400 	.word	0x40005400
 800100c:	000186a0 	.word	0x000186a0

08001010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_GPIO_Init+0x7c>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a18      	ldr	r2, [pc, #96]	@ (800108c <MX_GPIO_Init+0x7c>)
 800102a:	f043 0320 	orr.w	r3, r3, #32
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_GPIO_Init+0x7c>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0320 	and.w	r3, r3, #32
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_GPIO_Init+0x7c>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a12      	ldr	r2, [pc, #72]	@ (800108c <MX_GPIO_Init+0x7c>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_GPIO_Init+0x7c>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <MX_GPIO_Init+0x7c>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a0c      	ldr	r2, [pc, #48]	@ (800108c <MX_GPIO_Init+0x7c>)
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <MX_GPIO_Init+0x7c>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : data_Pin */
  GPIO_InitStruct.Pin = data_Pin;
 800106c:	2304      	movs	r3, #4
 800106e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001070:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <MX_GPIO_Init+0x80>)
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001074:	2301      	movs	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(data_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <MX_GPIO_Init+0x84>)
 8001080:	f000 fb7c 	bl	800177c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	10110000 	.word	0x10110000
 8001094:	40010800 	.word	0x40010800

08001098 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  float temp = 0, humid = 0;
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]

    /* Infinite loop */
    for(;;)
    {

  	  printf("Hello from rtos \n");
 80010ac:	4817      	ldr	r0, [pc, #92]	@ (800110c <StartDefaultTask+0x74>)
 80010ae:	f00b fd19 	bl	800cae4 <puts>

  	  DHT22_GetTemp_Humidity(&temp, &humid);
 80010b2:	f107 020c 	add.w	r2, r7, #12
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fd45 	bl	8000b4c <DHT22_GetTemp_Humidity>

  	  int intPart = (int)floorf(temp);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00c fbdf 	bl	800d888 <floorf>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fccf 	bl	8000a70 <__aeabi_f2iz>
 80010d2:	4603      	mov	r3, r0
 80010d4:	617b      	str	r3, [r7, #20]
  //
  	  printf("t=%d\n", temp);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f99d 	bl	8000418 <__aeabi_f2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	480b      	ldr	r0, [pc, #44]	@ (8001110 <StartDefaultTask+0x78>)
 80010e4:	f00b fc96 	bl	800ca14 <iprintf>
  //
  	  MPU6050_Read_Accel();
 80010e8:	f7ff fe72 	bl	8000dd0 <MPU6050_Read_Accel>
  //
  //	  intPart = (int)floorf(Ax * 100);
  	  printf("Ax=%d\n", Ax);
 80010ec:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <StartDefaultTask+0x7c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f991 	bl	8000418 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4807      	ldr	r0, [pc, #28]	@ (8001118 <StartDefaultTask+0x80>)
 80010fc:	f00b fc8a 	bl	800ca14 <iprintf>

      osDelay(500);
 8001100:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001104:	f008 fac3 	bl	800968e <osDelay>
    {
 8001108:	bf00      	nop
 800110a:	e7cf      	b.n	80010ac <StartDefaultTask+0x14>
 800110c:	0800d930 	.word	0x0800d930
 8001110:	0800d944 	.word	0x0800d944
 8001114:	20000200 	.word	0x20000200
 8001118:	0800d94c 	.word	0x0800d94c

0800111c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800112e:	f000 fa05 	bl	800153c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40012c00 	.word	0x40012c00

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <Error_Handler+0x8>

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <HAL_MspInit+0x68>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a17      	ldr	r2, [pc, #92]	@ (80011b4 <HAL_MspInit+0x68>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6193      	str	r3, [r2, #24]
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_MspInit+0x68>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <HAL_MspInit+0x68>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a11      	ldr	r2, [pc, #68]	@ (80011b4 <HAL_MspInit+0x68>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <HAL_MspInit+0x68>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	210f      	movs	r1, #15
 8001186:	f06f 0001 	mvn.w	r0, #1
 800118a:	f000 facc 	bl	8001726 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_MspInit+0x6c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <HAL_MspInit+0x6c>)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40010000 	.word	0x40010000

080011bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a15      	ldr	r2, [pc, #84]	@ (800122c <HAL_I2C_MspInit+0x70>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d123      	bne.n	8001224 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <HAL_I2C_MspInit+0x74>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a13      	ldr	r2, [pc, #76]	@ (8001230 <HAL_I2C_MspInit+0x74>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_I2C_MspInit+0x74>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f4:	23c0      	movs	r3, #192	@ 0xc0
 80011f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f8:	2312      	movs	r3, #18
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4619      	mov	r1, r3
 8001206:	480b      	ldr	r0, [pc, #44]	@ (8001234 <HAL_I2C_MspInit+0x78>)
 8001208:	f000 fab8 	bl	800177c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_I2C_MspInit+0x74>)
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <HAL_I2C_MspInit+0x74>)
 8001212:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001216:	61d3      	str	r3, [r2, #28]
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_I2C_MspInit+0x74>)
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001224:	bf00      	nop
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40005400 	.word	0x40005400
 8001230:	40021000 	.word	0x40021000
 8001234:	40010c00 	.word	0x40010c00

08001238 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	@ 0x30
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800124e:	4b2e      	ldr	r3, [pc, #184]	@ (8001308 <HAL_InitTick+0xd0>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a2d      	ldr	r2, [pc, #180]	@ (8001308 <HAL_InitTick+0xd0>)
 8001254:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <HAL_InitTick+0xd0>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001266:	f107 020c 	add.w	r2, r7, #12
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f003 feab 	bl	8004fcc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001276:	f003 fe95 	bl	8004fa4 <HAL_RCC_GetPCLK2Freq>
 800127a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800127c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127e:	4a23      	ldr	r2, [pc, #140]	@ (800130c <HAL_InitTick+0xd4>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0c9b      	lsrs	r3, r3, #18
 8001286:	3b01      	subs	r3, #1
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <HAL_InitTick+0xd8>)
 800128c:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <HAL_InitTick+0xdc>)
 800128e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <HAL_InitTick+0xd8>)
 8001292:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001296:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001298:	4a1d      	ldr	r2, [pc, #116]	@ (8001310 <HAL_InitTick+0xd8>)
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <HAL_InitTick+0xd8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <HAL_InitTick+0xd8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <HAL_InitTick+0xd8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80012b0:	4817      	ldr	r0, [pc, #92]	@ (8001310 <HAL_InitTick+0xd8>)
 80012b2:	f003 ff8f 	bl	80051d4 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80012bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d11b      	bne.n	80012fc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80012c4:	4812      	ldr	r0, [pc, #72]	@ (8001310 <HAL_InitTick+0xd8>)
 80012c6:	f003 ffdd 	bl	8005284 <HAL_TIM_Base_Start_IT>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80012d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d111      	bne.n	80012fc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012d8:	2019      	movs	r0, #25
 80012da:	f000 fa40 	bl	800175e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d808      	bhi.n	80012f6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	2019      	movs	r0, #25
 80012ea:	f000 fa1c 	bl	8001726 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <HAL_InitTick+0xe0>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e002      	b.n	80012fc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001300:	4618      	mov	r0, r3
 8001302:	3730      	adds	r7, #48	@ 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000
 800130c:	431bde83 	.word	0x431bde83
 8001310:	20000268 	.word	0x20000268
 8001314:	40012c00 	.word	0x40012c00
 8001318:	20000004 	.word	0x20000004

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <NMI_Handler+0x4>

08001324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <MemManage_Handler+0x4>

08001334 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <UsageFault_Handler+0x4>

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001354:	4802      	ldr	r0, [pc, #8]	@ (8001360 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001356:	f001 fe02 	bl	8002f5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20002f68 	.word	0x20002f68

08001364 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <TIM1_UP_IRQHandler+0x10>)
 800136a:	f003 ffdd 	bl	8005328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000268 	.word	0x20000268

08001378 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	e00a      	b.n	80013a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800138a:	f3af 8000 	nop.w
 800138e:	4601      	mov	r1, r0
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	60ba      	str	r2, [r7, #8]
 8001396:	b2ca      	uxtb	r2, r1
 8001398:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dbf0      	blt.n	800138a <_read+0x12>
  }

  return len;
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e009      	b.n	80013d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	60ba      	str	r2, [r7, #8]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fc89 	bl	8000ce4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbf1      	blt.n	80013c4 <_write+0x12>
  }
  return len;
 80013e0:	687b      	ldr	r3, [r7, #4]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_close>:

int _close(int file)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001410:	605a      	str	r2, [r3, #4]
  return 0;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <_isatty>:

int _isatty(int file)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001432:	b480      	push	{r7}
 8001434:	b085      	sub	sp, #20
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
	...

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	@ (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f00b fcb6 	bl	800cdec <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20005000 	.word	0x20005000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	200002b0 	.word	0x200002b0
 80014b4:	200035b0 	.word	0x200035b0

080014b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014c4:	f7ff fff8 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c8:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014ca:	490c      	ldr	r1, [pc, #48]	@ (80014fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001500 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a09      	ldr	r2, [pc, #36]	@ (8001504 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014e0:	4c09      	ldr	r4, [pc, #36]	@ (8001508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ee:	f00b fc83 	bl	800cdf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014f2:	f7ff fcdb 	bl	8000eac <main>
  bx lr
 80014f6:	4770      	bx	lr
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001500:	0800da40 	.word	0x0800da40
  ldr r2, =_sbss
 8001504:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001508:	200035ac 	.word	0x200035ac

0800150c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC1_2_IRQHandler>
	...

08001510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001514:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <HAL_Init+0x28>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a07      	ldr	r2, [pc, #28]	@ (8001538 <HAL_Init+0x28>)
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001520:	2003      	movs	r0, #3
 8001522:	f000 f8f5 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001526:	200f      	movs	r0, #15
 8001528:	f7ff fe86 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800152c:	f7ff fe0e 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40022000 	.word	0x40022000

0800153c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <HAL_IncTick+0x1c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b05      	ldr	r3, [pc, #20]	@ (800155c <HAL_IncTick+0x20>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a03      	ldr	r2, [pc, #12]	@ (800155c <HAL_IncTick+0x20>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	20000008 	.word	0x20000008
 800155c:	200002b4 	.word	0x200002b4

08001560 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b02      	ldr	r3, [pc, #8]	@ (8001570 <HAL_GetTick+0x10>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	200002b4 	.word	0x200002b4

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff fff0 	bl	8001560 <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffe0 	bl	8001560 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4906      	ldr	r1, [pc, #24]	@ (8001654 <__NVIC_EnableIRQ+0x34>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	@ (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	@ (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	@ 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	@ 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff4f 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001738:	f7ff ff64 	bl	8001604 <__NVIC_GetPriorityGrouping>
 800173c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f7ff ffb2 	bl	80016ac <NVIC_EncodePriority>
 8001748:	4602      	mov	r2, r0
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff81 	bl	8001658 <__NVIC_SetPriority>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff57 	bl	8001620 <__NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b08b      	sub	sp, #44	@ 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	e169      	b.n	8001a64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001790:	2201      	movs	r2, #1
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8158 	bne.w	8001a5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a9a      	ldr	r2, [pc, #616]	@ (8001a1c <HAL_GPIO_Init+0x2a0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d05e      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017b8:	4a98      	ldr	r2, [pc, #608]	@ (8001a1c <HAL_GPIO_Init+0x2a0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d875      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017be:	4a98      	ldr	r2, [pc, #608]	@ (8001a20 <HAL_GPIO_Init+0x2a4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d058      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017c4:	4a96      	ldr	r2, [pc, #600]	@ (8001a20 <HAL_GPIO_Init+0x2a4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d86f      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017ca:	4a96      	ldr	r2, [pc, #600]	@ (8001a24 <HAL_GPIO_Init+0x2a8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d052      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017d0:	4a94      	ldr	r2, [pc, #592]	@ (8001a24 <HAL_GPIO_Init+0x2a8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d869      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017d6:	4a94      	ldr	r2, [pc, #592]	@ (8001a28 <HAL_GPIO_Init+0x2ac>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d04c      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017dc:	4a92      	ldr	r2, [pc, #584]	@ (8001a28 <HAL_GPIO_Init+0x2ac>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d863      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017e2:	4a92      	ldr	r2, [pc, #584]	@ (8001a2c <HAL_GPIO_Init+0x2b0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d046      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017e8:	4a90      	ldr	r2, [pc, #576]	@ (8001a2c <HAL_GPIO_Init+0x2b0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d85d      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017ee:	2b12      	cmp	r3, #18
 80017f0:	d82a      	bhi.n	8001848 <HAL_GPIO_Init+0xcc>
 80017f2:	2b12      	cmp	r3, #18
 80017f4:	d859      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017f6:	a201      	add	r2, pc, #4	@ (adr r2, 80017fc <HAL_GPIO_Init+0x80>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	08001877 	.word	0x08001877
 8001800:	08001851 	.word	0x08001851
 8001804:	08001863 	.word	0x08001863
 8001808:	080018a5 	.word	0x080018a5
 800180c:	080018ab 	.word	0x080018ab
 8001810:	080018ab 	.word	0x080018ab
 8001814:	080018ab 	.word	0x080018ab
 8001818:	080018ab 	.word	0x080018ab
 800181c:	080018ab 	.word	0x080018ab
 8001820:	080018ab 	.word	0x080018ab
 8001824:	080018ab 	.word	0x080018ab
 8001828:	080018ab 	.word	0x080018ab
 800182c:	080018ab 	.word	0x080018ab
 8001830:	080018ab 	.word	0x080018ab
 8001834:	080018ab 	.word	0x080018ab
 8001838:	080018ab 	.word	0x080018ab
 800183c:	080018ab 	.word	0x080018ab
 8001840:	08001859 	.word	0x08001859
 8001844:	0800186d 	.word	0x0800186d
 8001848:	4a79      	ldr	r2, [pc, #484]	@ (8001a30 <HAL_GPIO_Init+0x2b4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184e:	e02c      	b.n	80018aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e029      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	3304      	adds	r3, #4
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e024      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	3308      	adds	r3, #8
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e01f      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	330c      	adds	r3, #12
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e01a      	b.n	80018ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800187e:	2304      	movs	r3, #4
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e013      	b.n	80018ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800188c:	2308      	movs	r3, #8
 800188e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	611a      	str	r2, [r3, #16]
          break;
 8001896:	e009      	b.n	80018ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	615a      	str	r2, [r3, #20]
          break;
 80018a2:	e003      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x130>
          break;
 80018aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2bff      	cmp	r3, #255	@ 0xff
 80018b0:	d801      	bhi.n	80018b6 <HAL_GPIO_Init+0x13a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	e001      	b.n	80018ba <HAL_GPIO_Init+0x13e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3304      	adds	r3, #4
 80018ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2bff      	cmp	r3, #255	@ 0xff
 80018c0:	d802      	bhi.n	80018c8 <HAL_GPIO_Init+0x14c>
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x152>
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	3b08      	subs	r3, #8
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	210f      	movs	r1, #15
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	6a39      	ldr	r1, [r7, #32]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	431a      	orrs	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80b1 	beq.w	8001a5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001a34 <HAL_GPIO_Init+0x2b8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a4c      	ldr	r2, [pc, #304]	@ (8001a34 <HAL_GPIO_Init+0x2b8>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b4a      	ldr	r3, [pc, #296]	@ (8001a34 <HAL_GPIO_Init+0x2b8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001914:	4a48      	ldr	r2, [pc, #288]	@ (8001a38 <HAL_GPIO_Init+0x2bc>)
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a40      	ldr	r2, [pc, #256]	@ (8001a3c <HAL_GPIO_Init+0x2c0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d013      	beq.n	8001968 <HAL_GPIO_Init+0x1ec>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3f      	ldr	r2, [pc, #252]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00d      	beq.n	8001964 <HAL_GPIO_Init+0x1e8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a44 <HAL_GPIO_Init+0x2c8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d007      	beq.n	8001960 <HAL_GPIO_Init+0x1e4>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a3d      	ldr	r2, [pc, #244]	@ (8001a48 <HAL_GPIO_Init+0x2cc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d101      	bne.n	800195c <HAL_GPIO_Init+0x1e0>
 8001958:	2303      	movs	r3, #3
 800195a:	e006      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 800195c:	2304      	movs	r3, #4
 800195e:	e004      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 8001960:	2302      	movs	r3, #2
 8001962:	e002      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 8001968:	2300      	movs	r3, #0
 800196a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800196c:	f002 0203 	and.w	r2, r2, #3
 8001970:	0092      	lsls	r2, r2, #2
 8001972:	4093      	lsls	r3, r2
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800197a:	492f      	ldr	r1, [pc, #188]	@ (8001a38 <HAL_GPIO_Init+0x2bc>)
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001994:	4b2d      	ldr	r3, [pc, #180]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	492c      	ldr	r1, [pc, #176]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4928      	ldr	r1, [pc, #160]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019bc:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4922      	ldr	r1, [pc, #136]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ca:	4b20      	ldr	r3, [pc, #128]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	491e      	ldr	r1, [pc, #120]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e4:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4918      	ldr	r1, [pc, #96]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019f2:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4914      	ldr	r1, [pc, #80]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d021      	beq.n	8001a50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	490e      	ldr	r1, [pc, #56]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e021      	b.n	8001a5e <HAL_GPIO_Init+0x2e2>
 8001a1a:	bf00      	nop
 8001a1c:	10320000 	.word	0x10320000
 8001a20:	10310000 	.word	0x10310000
 8001a24:	10220000 	.word	0x10220000
 8001a28:	10210000 	.word	0x10210000
 8001a2c:	10120000 	.word	0x10120000
 8001a30:	10110000 	.word	0x10110000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	40010c00 	.word	0x40010c00
 8001a44:	40011000 	.word	0x40011000
 8001a48:	40011400 	.word	0x40011400
 8001a4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_GPIO_Init+0x304>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	4909      	ldr	r1, [pc, #36]	@ (8001a80 <HAL_GPIO_Init+0x304>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	3301      	adds	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f47f ae8e 	bne.w	8001790 <HAL_GPIO_Init+0x14>
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	372c      	adds	r7, #44	@ 0x2c
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40010400 	.word	0x40010400

08001a84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	@ 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001a92:	e09a      	b.n	8001bca <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 808d 	beq.w	8001bc4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001aaa:	4a4e      	ldr	r2, [pc, #312]	@ (8001be4 <HAL_GPIO_DeInit+0x160>)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a46      	ldr	r2, [pc, #280]	@ (8001be8 <HAL_GPIO_DeInit+0x164>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d013      	beq.n	8001afc <HAL_GPIO_DeInit+0x78>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a45      	ldr	r2, [pc, #276]	@ (8001bec <HAL_GPIO_DeInit+0x168>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d00d      	beq.n	8001af8 <HAL_GPIO_DeInit+0x74>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a44      	ldr	r2, [pc, #272]	@ (8001bf0 <HAL_GPIO_DeInit+0x16c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d007      	beq.n	8001af4 <HAL_GPIO_DeInit+0x70>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a43      	ldr	r2, [pc, #268]	@ (8001bf4 <HAL_GPIO_DeInit+0x170>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_GPIO_DeInit+0x6c>
 8001aec:	2303      	movs	r3, #3
 8001aee:	e006      	b.n	8001afe <HAL_GPIO_DeInit+0x7a>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e004      	b.n	8001afe <HAL_GPIO_DeInit+0x7a>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e002      	b.n	8001afe <HAL_GPIO_DeInit+0x7a>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_GPIO_DeInit+0x7a>
 8001afc:	2300      	movs	r3, #0
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	f002 0203 	and.w	r2, r2, #3
 8001b04:	0092      	lsls	r2, r2, #2
 8001b06:	4093      	lsls	r3, r2
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d132      	bne.n	8001b74 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf8 <HAL_GPIO_DeInit+0x174>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4938      	ldr	r1, [pc, #224]	@ (8001bf8 <HAL_GPIO_DeInit+0x174>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001b1c:	4b36      	ldr	r3, [pc, #216]	@ (8001bf8 <HAL_GPIO_DeInit+0x174>)
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	4934      	ldr	r1, [pc, #208]	@ (8001bf8 <HAL_GPIO_DeInit+0x174>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001b2a:	4b33      	ldr	r3, [pc, #204]	@ (8001bf8 <HAL_GPIO_DeInit+0x174>)
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	4931      	ldr	r1, [pc, #196]	@ (8001bf8 <HAL_GPIO_DeInit+0x174>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001b38:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf8 <HAL_GPIO_DeInit+0x174>)
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	492d      	ldr	r1, [pc, #180]	@ (8001bf8 <HAL_GPIO_DeInit+0x174>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001b56:	4a23      	ldr	r2, [pc, #140]	@ (8001be4 <HAL_GPIO_DeInit+0x160>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	43da      	mvns	r2, r3
 8001b66:	481f      	ldr	r0, [pc, #124]	@ (8001be4 <HAL_GPIO_DeInit+0x160>)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	3302      	adds	r3, #2
 8001b70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2bff      	cmp	r3, #255	@ 0xff
 8001b78:	d801      	bhi.n	8001b7e <HAL_GPIO_DeInit+0xfa>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	e001      	b.n	8001b82 <HAL_GPIO_DeInit+0xfe>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3304      	adds	r3, #4
 8001b82:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2bff      	cmp	r3, #255	@ 0xff
 8001b88:	d802      	bhi.n	8001b90 <HAL_GPIO_DeInit+0x10c>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	e002      	b.n	8001b96 <HAL_GPIO_DeInit+0x112>
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	3b08      	subs	r3, #8
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	210f      	movs	r1, #15
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	2104      	movs	r1, #4
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f47f af5e 	bne.w	8001a94 <HAL_GPIO_DeInit+0x10>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3724      	adds	r7, #36	@ 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40010800 	.word	0x40010800
 8001bec:	40010c00 	.word	0x40010c00
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40011400 	.word	0x40011400
 8001bf8:	40010400 	.word	0x40010400

08001bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e001      	b.n	8001c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	807b      	strh	r3, [r7, #2]
 8001c36:	4613      	mov	r3, r2
 8001c38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3a:	787b      	ldrb	r3, [r7, #1]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c40:	887a      	ldrh	r2, [r7, #2]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c46:	e003      	b.n	8001c50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	041a      	lsls	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
	...

08001c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e12b      	b.n	8001ec6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff fa9a 	bl	80011bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2224      	movs	r2, #36	@ 0x24
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cc0:	f003 f95c 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8001cc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4a81      	ldr	r2, [pc, #516]	@ (8001ed0 <HAL_I2C_Init+0x274>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d807      	bhi.n	8001ce0 <HAL_I2C_Init+0x84>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4a80      	ldr	r2, [pc, #512]	@ (8001ed4 <HAL_I2C_Init+0x278>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	bf94      	ite	ls
 8001cd8:	2301      	movls	r3, #1
 8001cda:	2300      	movhi	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	e006      	b.n	8001cee <HAL_I2C_Init+0x92>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ed8 <HAL_I2C_Init+0x27c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	bf94      	ite	ls
 8001ce8:	2301      	movls	r3, #1
 8001cea:	2300      	movhi	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0e7      	b.n	8001ec6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4a78      	ldr	r2, [pc, #480]	@ (8001edc <HAL_I2C_Init+0x280>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0c9b      	lsrs	r3, r3, #18
 8001d00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4a6a      	ldr	r2, [pc, #424]	@ (8001ed0 <HAL_I2C_Init+0x274>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d802      	bhi.n	8001d30 <HAL_I2C_Init+0xd4>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	e009      	b.n	8001d44 <HAL_I2C_Init+0xe8>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	4a69      	ldr	r2, [pc, #420]	@ (8001ee0 <HAL_I2C_Init+0x284>)
 8001d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	3301      	adds	r3, #1
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	495c      	ldr	r1, [pc, #368]	@ (8001ed0 <HAL_I2C_Init+0x274>)
 8001d60:	428b      	cmp	r3, r1
 8001d62:	d819      	bhi.n	8001d98 <HAL_I2C_Init+0x13c>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1e59      	subs	r1, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d72:	1c59      	adds	r1, r3, #1
 8001d74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d78:	400b      	ands	r3, r1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <HAL_I2C_Init+0x138>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1e59      	subs	r1, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d92:	e051      	b.n	8001e38 <HAL_I2C_Init+0x1dc>
 8001d94:	2304      	movs	r3, #4
 8001d96:	e04f      	b.n	8001e38 <HAL_I2C_Init+0x1dc>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d111      	bne.n	8001dc4 <HAL_I2C_Init+0x168>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1e58      	subs	r0, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	440b      	add	r3, r1
 8001dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e012      	b.n	8001dea <HAL_I2C_Init+0x18e>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1e58      	subs	r0, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	0099      	lsls	r1, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Init+0x196>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e022      	b.n	8001e38 <HAL_I2C_Init+0x1dc>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10e      	bne.n	8001e18 <HAL_I2C_Init+0x1bc>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1e58      	subs	r0, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6859      	ldr	r1, [r3, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	440b      	add	r3, r1
 8001e08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e16:	e00f      	b.n	8001e38 <HAL_I2C_Init+0x1dc>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e58      	subs	r0, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	0099      	lsls	r1, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	6809      	ldr	r1, [r1, #0]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69da      	ldr	r2, [r3, #28]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6911      	ldr	r1, [r2, #16]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68d2      	ldr	r2, [r2, #12]
 8001e72:	4311      	orrs	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	000186a0 	.word	0x000186a0
 8001ed4:	001e847f 	.word	0x001e847f
 8001ed8:	003d08ff 	.word	0x003d08ff
 8001edc:	431bde83 	.word	0x431bde83
 8001ee0:	10624dd3 	.word	0x10624dd3

08001ee4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	4608      	mov	r0, r1
 8001eee:	4611      	mov	r1, r2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	817b      	strh	r3, [r7, #10]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	813b      	strh	r3, [r7, #8]
 8001efa:	4613      	mov	r3, r2
 8001efc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001efe:	f7ff fb2f 	bl	8001560 <HAL_GetTick>
 8001f02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	f040 80d9 	bne.w	80020c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2319      	movs	r3, #25
 8001f18:	2201      	movs	r2, #1
 8001f1a:	496d      	ldr	r1, [pc, #436]	@ (80020d0 <HAL_I2C_Mem_Write+0x1ec>)
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 fccd 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e0cc      	b.n	80020c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_I2C_Mem_Write+0x56>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e0c5      	b.n	80020c6 <HAL_I2C_Mem_Write+0x1e2>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d007      	beq.n	8001f60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2221      	movs	r2, #33	@ 0x21
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2240      	movs	r2, #64	@ 0x40
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a3a      	ldr	r2, [r7, #32]
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4a4d      	ldr	r2, [pc, #308]	@ (80020d4 <HAL_I2C_Mem_Write+0x1f0>)
 8001fa0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fa2:	88f8      	ldrh	r0, [r7, #6]
 8001fa4:	893a      	ldrh	r2, [r7, #8]
 8001fa6:	8979      	ldrh	r1, [r7, #10]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fb04 	bl	80025c0 <I2C_RequestMemoryWrite>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d052      	beq.n	8002064 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e081      	b.n	80020c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 fd92 	bl	8002af0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00d      	beq.n	8001fee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d107      	bne.n	8001fea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e06b      	b.n	80020c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b04      	cmp	r3, #4
 800202a:	d11b      	bne.n	8002064 <HAL_I2C_Mem_Write+0x180>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002030:	2b00      	cmp	r3, #0
 8002032:	d017      	beq.n	8002064 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	781a      	ldrb	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1aa      	bne.n	8001fc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fd85 	bl	8002b80 <I2C_WaitOnBTFFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00d      	beq.n	8002098 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	2b04      	cmp	r3, #4
 8002082:	d107      	bne.n	8002094 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002092:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e016      	b.n	80020c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e000      	b.n	80020c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020c4:	2302      	movs	r3, #2
  }
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	00100002 	.word	0x00100002
 80020d4:	ffff0000 	.word	0xffff0000

080020d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08c      	sub	sp, #48	@ 0x30
 80020dc:	af02      	add	r7, sp, #8
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	4608      	mov	r0, r1
 80020e2:	4611      	mov	r1, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	817b      	strh	r3, [r7, #10]
 80020ea:	460b      	mov	r3, r1
 80020ec:	813b      	strh	r3, [r7, #8]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020f6:	f7ff fa33 	bl	8001560 <HAL_GetTick>
 80020fa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b20      	cmp	r3, #32
 8002106:	f040 8250 	bne.w	80025aa <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2319      	movs	r3, #25
 8002110:	2201      	movs	r2, #1
 8002112:	4982      	ldr	r1, [pc, #520]	@ (800231c <HAL_I2C_Mem_Read+0x244>)
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fbd1 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002120:	2302      	movs	r3, #2
 8002122:	e243      	b.n	80025ac <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Mem_Read+0x5a>
 800212e:	2302      	movs	r3, #2
 8002130:	e23c      	b.n	80025ac <HAL_I2C_Mem_Read+0x4d4>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d007      	beq.n	8002158 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002166:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2222      	movs	r2, #34	@ 0x22
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2240      	movs	r2, #64	@ 0x40
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002182:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a62      	ldr	r2, [pc, #392]	@ (8002320 <HAL_I2C_Mem_Read+0x248>)
 8002198:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800219a:	88f8      	ldrh	r0, [r7, #6]
 800219c:	893a      	ldrh	r2, [r7, #8]
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	4603      	mov	r3, r0
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 fa9e 	bl	80026ec <I2C_RequestMemoryRead>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e1f8      	b.n	80025ac <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d113      	bne.n	80021ea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e1cc      	b.n	8002584 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d11e      	bne.n	8002230 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002200:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002202:	b672      	cpsid	i
}
 8002204:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800222a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800222c:	b662      	cpsie	i
}
 800222e:	e035      	b.n	800229c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002234:	2b02      	cmp	r3, #2
 8002236:	d11e      	bne.n	8002276 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002246:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
}
 800224a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002270:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002272:	b662      	cpsie	i
}
 8002274:	e012      	b.n	800229c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002284:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800229c:	e172      	b.n	8002584 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	f200 811f 	bhi.w	80024e6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d123      	bne.n	80022f8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 fcab 	bl	8002c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e173      	b.n	80025ac <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022f6:	e145      	b.n	8002584 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d152      	bne.n	80023a6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002306:	2200      	movs	r2, #0
 8002308:	4906      	ldr	r1, [pc, #24]	@ (8002324 <HAL_I2C_Mem_Read+0x24c>)
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fad6 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e148      	b.n	80025ac <HAL_I2C_Mem_Read+0x4d4>
 800231a:	bf00      	nop
 800231c:	00100002 	.word	0x00100002
 8002320:	ffff0000 	.word	0xffff0000
 8002324:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002328:	b672      	cpsid	i
}
 800232a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800236e:	b662      	cpsie	i
}
 8002370:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023a4:	e0ee      	b.n	8002584 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ac:	2200      	movs	r2, #0
 80023ae:	4981      	ldr	r1, [pc, #516]	@ (80025b4 <HAL_I2C_Mem_Read+0x4dc>)
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fa83 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0f5      	b.n	80025ac <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023d0:	b672      	cpsid	i
}
 80023d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002406:	4b6c      	ldr	r3, [pc, #432]	@ (80025b8 <HAL_I2C_Mem_Read+0x4e0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	08db      	lsrs	r3, r3, #3
 800240c:	4a6b      	ldr	r2, [pc, #428]	@ (80025bc <HAL_I2C_Mem_Read+0x4e4>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0a1a      	lsrs	r2, r3, #8
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00da      	lsls	r2, r3, #3
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	3b01      	subs	r3, #1
 8002424:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d118      	bne.n	800245e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f043 0220 	orr.w	r2, r3, #32
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800244e:	b662      	cpsie	i
}
 8002450:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0a6      	b.n	80025ac <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b04      	cmp	r3, #4
 800246a:	d1d9      	bne.n	8002420 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800247a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024ae:	b662      	cpsie	i
}
 80024b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024e4:	e04e      	b.n	8002584 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fb90 	bl	8002c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e058      	b.n	80025ac <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d124      	bne.n	8002584 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253e:	2b03      	cmp	r3, #3
 8002540:	d107      	bne.n	8002552 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002550:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	f47f ae88 	bne.w	800229e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e000      	b.n	80025ac <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
  }
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3728      	adds	r7, #40	@ 0x28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	00010004 	.word	0x00010004
 80025b8:	20000000 	.word	0x20000000
 80025bc:	14f8b589 	.word	0x14f8b589

080025c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	817b      	strh	r3, [r7, #10]
 80025d2:	460b      	mov	r3, r1
 80025d4:	813b      	strh	r3, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f960 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00d      	beq.n	800261e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002610:	d103      	bne.n	800261a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e05f      	b.n	80026de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800261e:	897b      	ldrh	r3, [r7, #10]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800262c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	6a3a      	ldr	r2, [r7, #32]
 8002632:	492d      	ldr	r1, [pc, #180]	@ (80026e8 <I2C_RequestMemoryWrite+0x128>)
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f9bb 	bl	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e04c      	b.n	80026de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800265a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800265c:	6a39      	ldr	r1, [r7, #32]
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fa46 	bl	8002af0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	2b04      	cmp	r3, #4
 8002670:	d107      	bne.n	8002682 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002680:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e02b      	b.n	80026de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800268c:	893b      	ldrh	r3, [r7, #8]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	611a      	str	r2, [r3, #16]
 8002696:	e021      	b.n	80026dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002698:	893b      	ldrh	r3, [r7, #8]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	b29b      	uxth	r3, r3
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a8:	6a39      	ldr	r1, [r7, #32]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fa20 	bl	8002af0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00d      	beq.n	80026d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d107      	bne.n	80026ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e005      	b.n	80026de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026d2:	893b      	ldrh	r3, [r7, #8]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	00010002 	.word	0x00010002

080026ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	4608      	mov	r0, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	461a      	mov	r2, r3
 80026fa:	4603      	mov	r3, r0
 80026fc:	817b      	strh	r3, [r7, #10]
 80026fe:	460b      	mov	r3, r1
 8002700:	813b      	strh	r3, [r7, #8]
 8002702:	4613      	mov	r3, r2
 8002704:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002714:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002724:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	2200      	movs	r2, #0
 800272e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f8c2 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00d      	beq.n	800275a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800274c:	d103      	bne.n	8002756 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002754:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0aa      	b.n	80028b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800275a:	897b      	ldrh	r3, [r7, #10]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002768:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	6a3a      	ldr	r2, [r7, #32]
 800276e:	4952      	ldr	r1, [pc, #328]	@ (80028b8 <I2C_RequestMemoryRead+0x1cc>)
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f91d 	bl	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e097      	b.n	80028b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002798:	6a39      	ldr	r1, [r7, #32]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f9a8 	bl	8002af0 <I2C_WaitOnTXEFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00d      	beq.n	80027c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d107      	bne.n	80027be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e076      	b.n	80028b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027c8:	893b      	ldrh	r3, [r7, #8]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	611a      	str	r2, [r3, #16]
 80027d2:	e021      	b.n	8002818 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027d4:	893b      	ldrh	r3, [r7, #8]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	b29b      	uxth	r3, r3
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e4:	6a39      	ldr	r1, [r7, #32]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f982 	bl	8002af0 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00d      	beq.n	800280e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d107      	bne.n	800280a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002808:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e050      	b.n	80028b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800280e:	893b      	ldrh	r3, [r7, #8]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281a:	6a39      	ldr	r1, [r7, #32]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f967 	bl	8002af0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00d      	beq.n	8002844 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	2b04      	cmp	r3, #4
 800282e:	d107      	bne.n	8002840 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800283e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e035      	b.n	80028b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002852:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2200      	movs	r2, #0
 800285c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f82b 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00d      	beq.n	8002888 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800287a:	d103      	bne.n	8002884 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002882:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e013      	b.n	80028b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002888:	897b      	ldrh	r3, [r7, #10]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	b2da      	uxtb	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	6a3a      	ldr	r2, [r7, #32]
 800289c:	4906      	ldr	r1, [pc, #24]	@ (80028b8 <I2C_RequestMemoryRead+0x1cc>)
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f886 	bl	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	00010002 	.word	0x00010002

080028bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	4613      	mov	r3, r2
 80028ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028cc:	e048      	b.n	8002960 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d044      	beq.n	8002960 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d6:	f7fe fe43 	bl	8001560 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d139      	bne.n	8002960 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	0c1b      	lsrs	r3, r3, #16
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10d      	bne.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x56>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	43da      	mvns	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	e00c      	b.n	800292c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	43da      	mvns	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4013      	ands	r3, r2
 800291e:	b29b      	uxth	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	429a      	cmp	r2, r3
 8002930:	d116      	bne.n	8002960 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e023      	b.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d10d      	bne.n	8002986 <I2C_WaitOnFlagUntilTimeout+0xca>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	43da      	mvns	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4013      	ands	r3, r2
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	e00c      	b.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	43da      	mvns	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4013      	ands	r3, r2
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d093      	beq.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029be:	e071      	b.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ce:	d123      	bne.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e067      	b.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1e:	d041      	beq.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a20:	f7fe fd9e 	bl	8001560 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d302      	bcc.n	8002a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d136      	bne.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d10c      	bne.n	8002a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf14      	ite	ne
 8002a52:	2301      	movne	r3, #1
 8002a54:	2300      	moveq	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	e00b      	b.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	43da      	mvns	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf14      	ite	ne
 8002a6c:	2301      	movne	r3, #1
 8002a6e:	2300      	moveq	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d016      	beq.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e021      	b.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	0c1b      	lsrs	r3, r3, #16
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10c      	bne.n	8002ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e00b      	b.n	8002ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f47f af6d 	bne.w	80029c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002afc:	e034      	b.n	8002b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f8e3 	bl	8002cca <I2C_IsAcknowledgeFailed>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e034      	b.n	8002b78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d028      	beq.n	8002b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7fe fd23 	bl	8001560 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11d      	bne.n	8002b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b36:	2b80      	cmp	r3, #128	@ 0x80
 8002b38:	d016      	beq.n	8002b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e007      	b.n	8002b78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b72:	2b80      	cmp	r3, #128	@ 0x80
 8002b74:	d1c3      	bne.n	8002afe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b8c:	e034      	b.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f89b 	bl	8002cca <I2C_IsAcknowledgeFailed>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e034      	b.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d028      	beq.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba6:	f7fe fcdb 	bl	8001560 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d302      	bcc.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d11d      	bne.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d016      	beq.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e007      	b.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d1c3      	bne.n	8002b8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c1c:	e049      	b.n	8002cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d119      	bne.n	8002c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0210 	mvn.w	r2, #16
 8002c34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e030      	b.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c60:	f7fe fc7e 	bl	8001560 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d302      	bcc.n	8002c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d11d      	bne.n	8002cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c80:	2b40      	cmp	r3, #64	@ 0x40
 8002c82:	d016      	beq.n	8002cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	f043 0220 	orr.w	r2, r3, #32
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e007      	b.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbc:	2b40      	cmp	r3, #64	@ 0x40
 8002cbe:	d1ae      	bne.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce0:	d11b      	bne.n	8002d1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	f043 0204 	orr.w	r2, r3, #4
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0e8      	b.n	8002f0a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f009 faf5 	bl	800c33c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2203      	movs	r2, #3
 8002d56:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 fc96 	bl	8005696 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3304      	adds	r3, #4
 8002d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d74:	f002 fc6c 	bl	8005650 <USB_CoreInit>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0bf      	b.n	8002f0a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f002 fc9a 	bl	80056ca <USB_SetCurrentMode>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0b0      	b.n	8002f0a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e03e      	b.n	8002e2c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	3311      	adds	r3, #17
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	3310      	adds	r3, #16
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	440b      	add	r3, r1
 8002de4:	3313      	adds	r3, #19
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	440b      	add	r3, r1
 8002df8:	3320      	adds	r3, #32
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3324      	adds	r3, #36	@ 0x24
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	791b      	ldrb	r3, [r3, #4]
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d3bb      	bcc.n	8002dae <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	e044      	b.n	8002ec6 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	440b      	add	r3, r1
 8002e76:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	791b      	ldrb	r3, [r3, #4]
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d3b5      	bcc.n	8002e3c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eda:	f002 fc02 	bl	80056e2 <USB_DevInit>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e00c      	b.n	8002f0a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f004 fe81 	bl	8007c0a <USB_DevDisconnect>

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_PCD_Start+0x16>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e016      	b.n	8002f56 <HAL_PCD_Start+0x44>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 fb98 	bl	800566a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f009 fc70 	bl	800c822 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f004 fe55 	bl	8007bf6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b088      	sub	sp, #32
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f004 fe57 	bl	8007c1e <USB_ReadInterrupts>
 8002f70:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fb1a 	bl	80035b6 <PCD_EP_ISR_Handler>

    return;
 8002f82:	e119      	b.n	80031b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d013      	beq.n	8002fb6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f009 fa43 	bl	800c432 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002fac:	2100      	movs	r1, #0
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f905 	bl	80031be <HAL_PCD_SetAddress>

    return;
 8002fb4:	e100      	b.n	80031b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00c      	beq.n	8002fda <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002fd2:	b292      	uxth	r2, r2
 8002fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002fd8:	e0ee      	b.n	80031b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00c      	beq.n	8002ffe <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ff6:	b292      	uxth	r2, r2
 8002ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ffc:	e0dc      	b.n	80031b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d027      	beq.n	8003058 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003010:	b29a      	uxth	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0204 	bic.w	r2, r2, #4
 800301a:	b292      	uxth	r2, r2
 800301c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003028:	b29a      	uxth	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0208 	bic.w	r2, r2, #8
 8003032:	b292      	uxth	r2, r2
 8003034:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f009 fa33 	bl	800c4a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003046:	b29a      	uxth	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003050:	b292      	uxth	r2, r2
 8003052:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003056:	e0af      	b.n	80031b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8083 	beq.w	800316a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003064:	2300      	movs	r3, #0
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e010      	b.n	800308c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	7ffb      	ldrb	r3, [r7, #31]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	441a      	add	r2, r3
 8003076:	7ffb      	ldrb	r3, [r7, #31]
 8003078:	8812      	ldrh	r2, [r2, #0]
 800307a:	b292      	uxth	r2, r2
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	3320      	adds	r3, #32
 8003080:	443b      	add	r3, r7
 8003082:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003086:	7ffb      	ldrb	r3, [r7, #31]
 8003088:	3301      	adds	r3, #1
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	7ffb      	ldrb	r3, [r7, #31]
 800308e:	2b07      	cmp	r3, #7
 8003090:	d9eb      	bls.n	800306a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800309a:	b29a      	uxth	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	b292      	uxth	r2, r2
 80030a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	b292      	uxth	r2, r2
 80030be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80030c2:	bf00      	nop
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f6      	beq.n	80030c4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030de:	b29a      	uxth	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030e8:	b292      	uxth	r2, r2
 80030ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	77fb      	strb	r3, [r7, #31]
 80030f2:	e00f      	b.n	8003114 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80030f4:	7ffb      	ldrb	r3, [r7, #31]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	4611      	mov	r1, r2
 80030fc:	7ffa      	ldrb	r2, [r7, #31]
 80030fe:	0092      	lsls	r2, r2, #2
 8003100:	440a      	add	r2, r1
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	3320      	adds	r3, #32
 8003106:	443b      	add	r3, r7
 8003108:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800310c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800310e:	7ffb      	ldrb	r3, [r7, #31]
 8003110:	3301      	adds	r3, #1
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	7ffb      	ldrb	r3, [r7, #31]
 8003116:	2b07      	cmp	r3, #7
 8003118:	d9ec      	bls.n	80030f4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003122:	b29a      	uxth	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0208 	orr.w	r2, r2, #8
 800312c:	b292      	uxth	r2, r2
 800312e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003144:	b292      	uxth	r2, r2
 8003146:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0204 	orr.w	r2, r2, #4
 800315c:	b292      	uxth	r2, r2
 800315e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f009 f984 	bl	800c470 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003168:	e026      	b.n	80031b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00f      	beq.n	8003194 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800317c:	b29a      	uxth	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003186:	b292      	uxth	r2, r2
 8003188:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f009 f942 	bl	800c416 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003192:	e011      	b.n	80031b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031b0:	b292      	uxth	r2, r2
 80031b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80031b6:	bf00      	nop
  }
}
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_PCD_SetAddress+0x1a>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e012      	b.n	80031fe <HAL_PCD_SetAddress+0x40>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 fcee 	bl	8007bd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	4608      	mov	r0, r1
 8003210:	4611      	mov	r1, r2
 8003212:	461a      	mov	r2, r3
 8003214:	4603      	mov	r3, r0
 8003216:	70fb      	strb	r3, [r7, #3]
 8003218:	460b      	mov	r3, r1
 800321a:	803b      	strh	r3, [r7, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003228:	2b00      	cmp	r3, #0
 800322a:	da0e      	bge.n	800324a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	f003 0207 	and.w	r2, r3, #7
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	3310      	adds	r3, #16
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	705a      	strb	r2, [r3, #1]
 8003248:	e00e      	b.n	8003268 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 0207 	and.w	r2, r3, #7
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003274:	883a      	ldrh	r2, [r7, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	78ba      	ldrb	r2, [r7, #2]
 800327e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003280:	78bb      	ldrb	r3, [r7, #2]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d102      	bne.n	800328c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_PCD_EP_Open+0x94>
 8003296:	2302      	movs	r3, #2
 8003298:	e00e      	b.n	80032b8 <HAL_PCD_EP_Open+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 fa37 	bl	800571c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80032b6:	7afb      	ldrb	r3, [r7, #11]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	da0e      	bge.n	80032f2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	f003 0207 	and.w	r2, r3, #7
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	3310      	adds	r3, #16
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	705a      	strb	r2, [r3, #1]
 80032f0:	e00e      	b.n	8003310 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	f003 0207 	and.w	r2, r3, #7
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	b2da      	uxtb	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_PCD_EP_Close+0x6a>
 8003326:	2302      	movs	r3, #2
 8003328:	e00e      	b.n	8003348 <HAL_PCD_EP_Close+0x88>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68f9      	ldr	r1, [r7, #12]
 8003338:	4618      	mov	r0, r3
 800333a:	f002 fdaf 	bl	8005e9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	460b      	mov	r3, r1
 800335e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003360:	7afb      	ldrb	r3, [r7, #11]
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2200      	movs	r2, #0
 8003388:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2200      	movs	r2, #0
 800338e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003390:	7afb      	ldrb	r3, [r7, #11]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	b2da      	uxtb	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6979      	ldr	r1, [r7, #20]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f002 ff66 	bl	8006274 <USB_EPStartXfer>

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	460b      	mov	r3, r1
 80033bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	f003 0207 	and.w	r2, r3, #7
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	440b      	add	r3, r1
 80033d0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80033d4:	681b      	ldr	r3, [r3, #0]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	460b      	mov	r3, r1
 80033ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f0:	7afb      	ldrb	r3, [r7, #11]
 80033f2:	f003 0207 	and.w	r2, r3, #7
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	3310      	adds	r3, #16
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2200      	movs	r2, #0
 8003424:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2201      	movs	r2, #1
 800342a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800342c:	7afb      	ldrb	r3, [r7, #11]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	b2da      	uxtb	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6979      	ldr	r1, [r7, #20]
 800343e:	4618      	mov	r0, r3
 8003440:	f002 ff18 	bl	8006274 <USB_EPStartXfer>

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	7912      	ldrb	r2, [r2, #4]
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e04c      	b.n	8003506 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800346c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003470:	2b00      	cmp	r3, #0
 8003472:	da0e      	bge.n	8003492 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 0207 	and.w	r2, r3, #7
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	3310      	adds	r3, #16
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	705a      	strb	r2, [r3, #1]
 8003490:	e00c      	b.n	80034ac <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_PCD_EP_SetStall+0x7e>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e01c      	b.n	8003506 <HAL_PCD_EP_SetStall+0xb8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68f9      	ldr	r1, [r7, #12]
 80034da:	4618      	mov	r0, r3
 80034dc:	f004 fa7b 	bl	80079d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d108      	bne.n	80034fc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80034f4:	4619      	mov	r1, r3
 80034f6:	4610      	mov	r0, r2
 80034f8:	f004 fba0 	bl	8007c3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	7912      	ldrb	r2, [r2, #4]
 8003524:	4293      	cmp	r3, r2
 8003526:	d901      	bls.n	800352c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e040      	b.n	80035ae <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800352c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003530:	2b00      	cmp	r3, #0
 8003532:	da0e      	bge.n	8003552 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	f003 0207 	and.w	r2, r3, #7
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	3310      	adds	r3, #16
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4413      	add	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	705a      	strb	r2, [r3, #1]
 8003550:	e00e      	b.n	8003570 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 0207 	and.w	r2, r3, #7
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_PCD_EP_ClrStall+0x82>
 800358c:	2302      	movs	r3, #2
 800358e:	e00e      	b.n	80035ae <HAL_PCD_EP_ClrStall+0xa0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68f9      	ldr	r1, [r7, #12]
 800359e:	4618      	mov	r0, r3
 80035a0:	f004 fa69 	bl	8007a76 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b096      	sub	sp, #88	@ 0x58
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035be:	e3bb      	b.n	8003d38 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80035cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80035da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 8175 	bne.w	80038ce <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80035e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d14e      	bne.n	800368e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80035fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003600:	81fb      	strh	r3, [r7, #14]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	89fb      	ldrh	r3, [r7, #14]
 8003608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800360c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003610:	b29b      	uxth	r3, r3
 8003612:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3310      	adds	r3, #16
 8003618:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003622:	b29b      	uxth	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	3302      	adds	r3, #2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003644:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	441a      	add	r2, r3
 8003650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003652:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003654:	2100      	movs	r1, #0
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f008 fec3 	bl	800c3e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7b5b      	ldrb	r3, [r3, #13]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8368 	beq.w	8003d38 <PCD_EP_ISR_Handler+0x782>
 8003668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b00      	cmp	r3, #0
 800366e:	f040 8363 	bne.w	8003d38 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	7b5b      	ldrb	r3, [r3, #13]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800367c:	b2da      	uxtb	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	735a      	strb	r2, [r3, #13]
 800368c:	e354      	b.n	8003d38 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003694:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80036a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80036a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d034      	beq.n	8003716 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	3306      	adds	r3, #6
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80036e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80036e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f004 faf6 	bl	8007cdc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80036fc:	4013      	ands	r3, r2
 80036fe:	823b      	strh	r3, [r7, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	8a3a      	ldrh	r2, [r7, #16]
 8003706:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800370a:	b292      	uxth	r2, r2
 800370c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f008 fe3a 	bl	800c388 <HAL_PCD_SetupStageCallback>
 8003714:	e310      	b.n	8003d38 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003716:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800371a:	2b00      	cmp	r3, #0
 800371c:	f280 830c 	bge.w	8003d38 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	b29a      	uxth	r2, r3
 8003728:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800372c:	4013      	ands	r3, r2
 800372e:	83fb      	strh	r3, [r7, #30]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	8bfa      	ldrh	r2, [r7, #30]
 8003736:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800373a:	b292      	uxth	r2, r2
 800373c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003746:	b29b      	uxth	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	3306      	adds	r3, #6
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003768:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800376a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d019      	beq.n	80037a6 <PCD_EP_ISR_Handler+0x1f0>
 8003772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d015      	beq.n	80037a6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003780:	6959      	ldr	r1, [r3, #20]
 8003782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003784:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003788:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800378a:	b29b      	uxth	r3, r3
 800378c:	f004 faa6 	bl	8007cdc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	441a      	add	r2, r3
 800379a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800379e:	2100      	movs	r1, #0
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f008 fe03 	bl	800c3ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80037b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f040 82bd 	bne.w	8003d38 <PCD_EP_ISR_Handler+0x782>
 80037be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80037c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037ca:	f000 82b5 	beq.w	8003d38 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037dc:	b29b      	uxth	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4413      	add	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	801a      	strh	r2, [r3, #0]
 80037fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b3e      	cmp	r3, #62	@ 0x3e
 8003804:	d91d      	bls.n	8003842 <PCD_EP_ISR_Handler+0x28c>
 8003806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	647b      	str	r3, [r7, #68]	@ 0x44
 800380e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	2b00      	cmp	r3, #0
 8003818:	d102      	bne.n	8003820 <PCD_EP_ISR_Handler+0x26a>
 800381a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800381c:	3b01      	subs	r3, #1
 800381e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29a      	uxth	r2, r3
 8003826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003828:	b29b      	uxth	r3, r3
 800382a:	029b      	lsls	r3, r3, #10
 800382c:	b29b      	uxth	r3, r3
 800382e:	4313      	orrs	r3, r2
 8003830:	b29b      	uxth	r3, r3
 8003832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383a:	b29a      	uxth	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	e026      	b.n	8003890 <PCD_EP_ISR_Handler+0x2da>
 8003842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <PCD_EP_ISR_Handler+0x2aa>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003858:	b29a      	uxth	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	e017      	b.n	8003890 <PCD_EP_ISR_Handler+0x2da>
 8003860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	647b      	str	r3, [r7, #68]	@ 0x44
 8003868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <PCD_EP_ISR_Handler+0x2c4>
 8003874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003876:	3301      	adds	r3, #1
 8003878:	647b      	str	r3, [r7, #68]	@ 0x44
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29a      	uxth	r2, r3
 8003880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003882:	b29b      	uxth	r3, r3
 8003884:	029b      	lsls	r3, r3, #10
 8003886:	b29b      	uxth	r3, r3
 8003888:	4313      	orrs	r3, r2
 800388a:	b29a      	uxth	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800389c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a0:	827b      	strh	r3, [r7, #18]
 80038a2:	8a7b      	ldrh	r3, [r7, #18]
 80038a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80038a8:	827b      	strh	r3, [r7, #18]
 80038aa:	8a7b      	ldrh	r3, [r7, #18]
 80038ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038b0:	827b      	strh	r3, [r7, #18]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	8a7b      	ldrh	r3, [r7, #18]
 80038b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	8013      	strh	r3, [r2, #0]
 80038cc:	e234      	b.n	8003d38 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038e2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f280 80fc 	bge.w	8003ae4 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003902:	4013      	ands	r3, r2
 8003904:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800391a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800391e:	b292      	uxth	r2, r2
 8003920:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003922:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393a:	7b1b      	ldrb	r3, [r3, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d125      	bne.n	800398c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003948:	b29b      	uxth	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	3306      	adds	r3, #6
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003968:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800396c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 8092 	beq.w	8003a9a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397c:	6959      	ldr	r1, [r3, #20]
 800397e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003980:	88da      	ldrh	r2, [r3, #6]
 8003982:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003986:	f004 f9a9 	bl	8007cdc <USB_ReadPMA>
 800398a:	e086      	b.n	8003a9a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800398c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398e:	78db      	ldrb	r3, [r3, #3]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d10a      	bne.n	80039aa <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003994:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003998:	461a      	mov	r2, r3
 800399a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f9d9 	bl	8003d54 <HAL_PCD_EP_DB_Receive>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80039a8:	e077      	b.n	8003a9a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	441a      	add	r2, r3
 80039d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80039da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d024      	beq.n	8003a52 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a30:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003a34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d02e      	beq.n	8003a9a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a42:	6959      	ldr	r1, [r3, #20]
 8003a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a46:	891a      	ldrh	r2, [r3, #8]
 8003a48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a4c:	f004 f946 	bl	8007cdc <USB_ReadPMA>
 8003a50:	e023      	b.n	8003a9a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4413      	add	r3, r2
 8003a66:	3306      	adds	r3, #6
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a7a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003a7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a8c:	6959      	ldr	r1, [r3, #20]
 8003a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a90:	895a      	ldrh	r2, [r3, #10]
 8003a92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a96:	f004 f921 	bl	8007cdc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a9c:	69da      	ldr	r2, [r3, #28]
 8003a9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003aa2:	441a      	add	r2, r3
 8003aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ab0:	441a      	add	r2, r3
 8003ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <PCD_EP_ISR_Handler+0x514>
 8003abe:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d206      	bcs.n	8003ad8 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f008 fc6b 	bl	800c3ac <HAL_PCD_DataOutStageCallback>
 8003ad6:	e005      	b.n	8003ae4 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f002 fbc8 	bl	8006274 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ae4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8123 	beq.w	8003d38 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003af2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	3310      	adds	r3, #16
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b20:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	441a      	add	r2, r3
 8003b32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b44:	78db      	ldrb	r3, [r3, #3]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	f040 80a2 	bne.w	8003c90 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b4e:	2200      	movs	r2, #0
 8003b50:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b54:	7b1b      	ldrb	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8093 	beq.w	8003c82 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d046      	beq.n	8003bf6 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d126      	bne.n	8003bbe <PCD_EP_ISR_Handler+0x608>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	4413      	add	r3, r2
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	011a      	lsls	r2, r3, #4
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	4413      	add	r3, r2
 8003b92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b96:	623b      	str	r3, [r7, #32]
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	801a      	strh	r2, [r3, #0]
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	801a      	strh	r2, [r3, #0]
 8003bbc:	e061      	b.n	8003c82 <PCD_EP_ISR_Handler+0x6cc>
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d15d      	bne.n	8003c82 <PCD_EP_ISR_Handler+0x6cc>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bda:	4413      	add	r3, r2
 8003bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	011a      	lsls	r2, r3, #4
 8003be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be6:	4413      	add	r3, r2
 8003be8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	801a      	strh	r2, [r3, #0]
 8003bf4:	e045      	b.n	8003c82 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d126      	bne.n	8003c52 <PCD_EP_ISR_Handler+0x69c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c18:	4413      	add	r3, r2
 8003c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	011a      	lsls	r2, r3, #4
 8003c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c24:	4413      	add	r3, r2
 8003c26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	801a      	strh	r2, [r3, #0]
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4e:	801a      	strh	r2, [r3, #0]
 8003c50:	e017      	b.n	8003c82 <PCD_EP_ISR_Handler+0x6cc>
 8003c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c54:	785b      	ldrb	r3, [r3, #1]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d113      	bne.n	8003c82 <PCD_EP_ISR_Handler+0x6cc>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c68:	4413      	add	r3, r2
 8003c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	011a      	lsls	r2, r3, #4
 8003c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c74:	4413      	add	r3, r2
 8003c76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7e:	2200      	movs	r2, #0
 8003c80:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	4619      	mov	r1, r3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f008 fbaa 	bl	800c3e2 <HAL_PCD_DataInStageCallback>
 8003c8e:	e053      	b.n	8003d38 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003c90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d146      	bne.n	8003d2a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cc4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cca:	699a      	ldr	r2, [r3, #24]
 8003ccc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d907      	bls.n	8003ce4 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd6:	699a      	ldr	r2, [r3, #24]
 8003cd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003cdc:	1ad2      	subs	r2, r2, r3
 8003cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce0:	619a      	str	r2, [r3, #24]
 8003ce2:	e002      	b.n	8003cea <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f008 fb72 	bl	800c3e2 <HAL_PCD_DataInStageCallback>
 8003cfe:	e01b      	b.n	8003d38 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003d08:	441a      	add	r2, r3
 8003d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d0c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d10:	69da      	ldr	r2, [r3, #28]
 8003d12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003d16:	441a      	add	r2, r3
 8003d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d1a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d22:	4618      	mov	r0, r3
 8003d24:	f002 faa6 	bl	8006274 <USB_EPStartXfer>
 8003d28:	e006      	b.n	8003d38 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003d2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d2e:	461a      	mov	r2, r3
 8003d30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f91b 	bl	8003f6e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	b21b      	sxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f6ff ac3b 	blt.w	80035c0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3758      	adds	r7, #88	@ 0x58
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d07e      	beq.n	8003e6a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	3302      	adds	r3, #2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	8b7b      	ldrh	r3, [r7, #26]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d306      	bcc.n	8003dae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	699a      	ldr	r2, [r3, #24]
 8003da4:	8b7b      	ldrh	r3, [r7, #26]
 8003da6:	1ad2      	subs	r2, r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	619a      	str	r2, [r3, #24]
 8003dac:	e002      	b.n	8003db4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2200      	movs	r2, #0
 8003db2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d123      	bne.n	8003e04 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd6:	833b      	strh	r3, [r7, #24]
 8003dd8:	8b3b      	ldrh	r3, [r7, #24]
 8003dda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003dde:	833b      	strh	r3, [r7, #24]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	441a      	add	r2, r3
 8003dee:	8b3b      	ldrh	r3, [r7, #24]
 8003df0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003df4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01f      	beq.n	8003e4e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e28:	82fb      	strh	r3, [r7, #22]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	441a      	add	r2, r3
 8003e38:	8afb      	ldrh	r3, [r7, #22]
 8003e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e4e:	8b7b      	ldrh	r3, [r7, #26]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8087 	beq.w	8003f64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6959      	ldr	r1, [r3, #20]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	891a      	ldrh	r2, [r3, #8]
 8003e62:	8b7b      	ldrh	r3, [r7, #26]
 8003e64:	f003 ff3a 	bl	8007cdc <USB_ReadPMA>
 8003e68:	e07c      	b.n	8003f64 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3306      	adds	r3, #6
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	699a      	ldr	r2, [r3, #24]
 8003e98:	8b7b      	ldrh	r3, [r7, #26]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d306      	bcc.n	8003eac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	8b7b      	ldrh	r3, [r7, #26]
 8003ea4:	1ad2      	subs	r2, r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	619a      	str	r2, [r3, #24]
 8003eaa:	e002      	b.n	8003eb2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d123      	bne.n	8003f02 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ed4:	83fb      	strh	r3, [r7, #30]
 8003ed6:	8bfb      	ldrh	r3, [r7, #30]
 8003ed8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003edc:	83fb      	strh	r3, [r7, #30]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	8bfb      	ldrh	r3, [r7, #30]
 8003eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11f      	bne.n	8003f4c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f26:	83bb      	strh	r3, [r7, #28]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	8bbb      	ldrh	r3, [r7, #28]
 8003f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f4c:	8b7b      	ldrh	r3, [r7, #26]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6959      	ldr	r1, [r3, #20]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	895a      	ldrh	r2, [r3, #10]
 8003f5e:	8b7b      	ldrh	r3, [r7, #26]
 8003f60:	f003 febc 	bl	8007cdc <USB_ReadPMA>
    }
  }

  return count;
 8003f64:	8b7b      	ldrh	r3, [r7, #26]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b0a4      	sub	sp, #144	@ 0x90
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 81dd 	beq.w	8004342 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fb0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d907      	bls.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fc8:	1ad2      	subs	r2, r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	619a      	str	r2, [r3, #24]
 8003fce:	e002      	b.n	8003fd6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f040 80b9 	bne.w	8004152 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	785b      	ldrb	r3, [r3, #1]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d126      	bne.n	8004036 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffc:	4413      	add	r3, r2
 8003ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	011a      	lsls	r2, r3, #4
 8004006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004008:	4413      	add	r3, r2
 800400a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800400e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800401a:	b29a      	uxth	r2, r3
 800401c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401e:	801a      	strh	r2, [r3, #0]
 8004020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29b      	uxth	r3, r3
 8004026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800402a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800402e:	b29a      	uxth	r2, r3
 8004030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004032:	801a      	strh	r2, [r3, #0]
 8004034:	e01a      	b.n	800406c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	785b      	ldrb	r3, [r3, #1]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d116      	bne.n	800406c <HAL_PCD_EP_DB_Transmit+0xfe>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800404c:	b29b      	uxth	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004052:	4413      	add	r3, r2
 8004054:	637b      	str	r3, [r7, #52]	@ 0x34
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	011a      	lsls	r2, r3, #4
 800405c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405e:	4413      	add	r3, r2
 8004060:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004064:	633b      	str	r3, [r7, #48]	@ 0x30
 8004066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004068:	2200      	movs	r2, #0
 800406a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d126      	bne.n	80040c8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004088:	b29b      	uxth	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	011a      	lsls	r2, r3, #4
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	801a      	strh	r2, [r3, #0]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	e017      	b.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	785b      	ldrb	r3, [r3, #1]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d113      	bne.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040d8:	b29b      	uxth	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	4413      	add	r3, r2
 80040e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	011a      	lsls	r2, r3, #4
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	4413      	add	r3, r2
 80040ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040f0:	623b      	str	r3, [r7, #32]
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	2200      	movs	r2, #0
 80040f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4619      	mov	r1, r3
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f008 f96f 	bl	800c3e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 82fc 	beq.w	8004708 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	b29b      	uxth	r3, r3
 8004122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412a:	82fb      	strh	r3, [r7, #22]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	441a      	add	r2, r3
 800413a:	8afb      	ldrh	r3, [r7, #22]
 800413c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004144:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800414c:	b29b      	uxth	r3, r3
 800414e:	8013      	strh	r3, [r2, #0]
 8004150:	e2da      	b.n	8004708 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d021      	beq.n	80041a0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004176:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	441a      	add	r2, r3
 8004188:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800418c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004190:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004194:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800419c:	b29b      	uxth	r3, r3
 800419e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	f040 82ae 	bne.w	8004708 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041b4:	441a      	add	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041c2:	441a      	add	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	6a1a      	ldr	r2, [r3, #32]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d30b      	bcc.n	80041ec <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	6a1a      	ldr	r2, [r3, #32]
 80041e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041e4:	1ad2      	subs	r2, r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	621a      	str	r2, [r3, #32]
 80041ea:	e017      	b.n	800421c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d108      	bne.n	8004206 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80041f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004204:	e00a      	b.n	800421c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2200      	movs	r2, #0
 800421a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	785b      	ldrb	r3, [r3, #1]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d165      	bne.n	80042f0 <HAL_PCD_EP_DB_Transmit+0x382>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004232:	b29b      	uxth	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004238:	4413      	add	r3, r2
 800423a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	011a      	lsls	r2, r3, #4
 8004242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004244:	4413      	add	r3, r2
 8004246:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800424a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004256:	b29a      	uxth	r2, r3
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	801a      	strh	r2, [r3, #0]
 800425c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004260:	2b3e      	cmp	r3, #62	@ 0x3e
 8004262:	d91d      	bls.n	80042a0 <HAL_PCD_EP_DB_Transmit+0x332>
 8004264:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800426c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <HAL_PCD_EP_DB_Transmit+0x310>
 8004278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800427a:	3b01      	subs	r3, #1
 800427c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800427e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29a      	uxth	r2, r3
 8004284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004286:	b29b      	uxth	r3, r3
 8004288:	029b      	lsls	r3, r3, #10
 800428a:	b29b      	uxth	r3, r3
 800428c:	4313      	orrs	r3, r2
 800428e:	b29b      	uxth	r3, r3
 8004290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004298:	b29a      	uxth	r2, r3
 800429a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	e044      	b.n	800432a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80042a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10a      	bne.n	80042be <HAL_PCD_EP_DB_Transmit+0x350>
 80042a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	e035      	b.n	800432a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80042be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80042d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042d4:	3301      	adds	r3, #1
 80042d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	b29a      	uxth	r2, r3
 80042de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	029b      	lsls	r3, r3, #10
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	4313      	orrs	r3, r2
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ec:	801a      	strh	r2, [r3, #0]
 80042ee:	e01c      	b.n	800432a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	785b      	ldrb	r3, [r3, #1]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d118      	bne.n	800432a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004306:	b29b      	uxth	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800430c:	4413      	add	r3, r2
 800430e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	011a      	lsls	r2, r3, #4
 8004316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004318:	4413      	add	r3, r2
 800431a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800431e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004324:	b29a      	uxth	r2, r3
 8004326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004328:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6959      	ldr	r1, [r3, #20]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	891a      	ldrh	r2, [r3, #8]
 8004336:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800433a:	b29b      	uxth	r3, r3
 800433c:	f003 fc89 	bl	8007c52 <USB_WritePMA>
 8004340:	e1e2      	b.n	8004708 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800434a:	b29b      	uxth	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4413      	add	r3, r2
 8004356:	3306      	adds	r3, #6
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800436a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004376:	429a      	cmp	r2, r3
 8004378:	d307      	bcc.n	800438a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004382:	1ad2      	subs	r2, r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	619a      	str	r2, [r3, #24]
 8004388:	e002      	b.n	8004390 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2200      	movs	r2, #0
 800438e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f040 80c0 	bne.w	800451a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	785b      	ldrb	r3, [r3, #1]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d126      	bne.n	80043f0 <HAL_PCD_EP_DB_Transmit+0x482>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043b6:	4413      	add	r3, r2
 80043b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	011a      	lsls	r2, r3, #4
 80043c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043c2:	4413      	add	r3, r2
 80043c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043d8:	801a      	strh	r2, [r3, #0]
 80043da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	e01a      	b.n	8004426 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	785b      	ldrb	r3, [r3, #1]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d116      	bne.n	8004426 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004406:	b29b      	uxth	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800440c:	4413      	add	r3, r2
 800440e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	011a      	lsls	r2, r3, #4
 8004416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004418:	4413      	add	r3, r2
 800441a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800441e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004420:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004422:	2200      	movs	r2, #0
 8004424:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	677b      	str	r3, [r7, #116]	@ 0x74
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d12b      	bne.n	800448c <HAL_PCD_EP_DB_Transmit+0x51e>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004442:	b29b      	uxth	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004448:	4413      	add	r3, r2
 800444a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	011a      	lsls	r2, r3, #4
 8004452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004454:	4413      	add	r3, r2
 8004456:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800445a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800445e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800446a:	b29a      	uxth	r2, r3
 800446c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800447e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004482:	b29a      	uxth	r2, r3
 8004484:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004488:	801a      	strh	r2, [r3, #0]
 800448a:	e017      	b.n	80044bc <HAL_PCD_EP_DB_Transmit+0x54e>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d113      	bne.n	80044bc <HAL_PCD_EP_DB_Transmit+0x54e>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800449c:	b29b      	uxth	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044a2:	4413      	add	r3, r2
 80044a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	011a      	lsls	r2, r3, #4
 80044ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044ae:	4413      	add	r3, r2
 80044b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80044b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044b8:	2200      	movs	r2, #0
 80044ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	4619      	mov	r1, r3
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f007 ff8d 	bl	800c3e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f040 811a 	bne.w	8004708 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ee:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800450c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]
 8004518:	e0f6      	b.n	8004708 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d121      	bne.n	8004568 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800453a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800455c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004564:	b29b      	uxth	r3, r3
 8004566:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800456e:	2b01      	cmp	r3, #1
 8004570:	f040 80ca 	bne.w	8004708 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800457c:	441a      	add	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	69da      	ldr	r2, [r3, #28]
 8004586:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800458a:	441a      	add	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	6a1a      	ldr	r2, [r3, #32]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	429a      	cmp	r2, r3
 800459a:	d30b      	bcc.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ac:	1ad2      	subs	r2, r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	621a      	str	r2, [r3, #32]
 80045b2:	e017      	b.n	80045e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d108      	bne.n	80045ce <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80045bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80045c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80045cc:	e00a      	b.n	80045e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2200      	movs	r2, #0
 80045da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d165      	bne.n	80046be <HAL_PCD_EP_DB_Transmit+0x750>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004600:	b29b      	uxth	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004606:	4413      	add	r3, r2
 8004608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	011a      	lsls	r2, r3, #4
 8004610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004612:	4413      	add	r3, r2
 8004614:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004618:	65bb      	str	r3, [r7, #88]	@ 0x58
 800461a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004624:	b29a      	uxth	r2, r3
 8004626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800462e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004630:	d91d      	bls.n	800466e <HAL_PCD_EP_DB_Transmit+0x700>
 8004632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	66bb      	str	r3, [r7, #104]	@ 0x68
 800463a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2b00      	cmp	r3, #0
 8004644:	d102      	bne.n	800464c <HAL_PCD_EP_DB_Transmit+0x6de>
 8004646:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004648:	3b01      	subs	r3, #1
 800464a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800464c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	b29a      	uxth	r2, r3
 8004652:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004654:	b29b      	uxth	r3, r3
 8004656:	029b      	lsls	r3, r3, #10
 8004658:	b29b      	uxth	r3, r3
 800465a:	4313      	orrs	r3, r2
 800465c:	b29b      	uxth	r3, r3
 800465e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004666:	b29a      	uxth	r2, r3
 8004668:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800466a:	801a      	strh	r2, [r3, #0]
 800466c:	e041      	b.n	80046f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800466e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10a      	bne.n	800468c <HAL_PCD_EP_DB_Transmit+0x71e>
 8004676:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004684:	b29a      	uxth	r2, r3
 8004686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	e032      	b.n	80046f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800468c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <HAL_PCD_EP_DB_Transmit+0x738>
 80046a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046a2:	3301      	adds	r3, #1
 80046a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	029b      	lsls	r3, r3, #10
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	4313      	orrs	r3, r2
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	e019      	b.n	80046f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	785b      	ldrb	r3, [r3, #1]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d115      	bne.n	80046f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d4:	4413      	add	r3, r2
 80046d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	011a      	lsls	r2, r3, #4
 80046de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e0:	4413      	add	r3, r2
 80046e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	6959      	ldr	r1, [r3, #20]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	895a      	ldrh	r2, [r3, #10]
 80046fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004702:	b29b      	uxth	r3, r3
 8004704:	f003 faa5 	bl	8007c52 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800471e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004722:	82bb      	strh	r3, [r7, #20]
 8004724:	8abb      	ldrh	r3, [r7, #20]
 8004726:	f083 0310 	eor.w	r3, r3, #16
 800472a:	82bb      	strh	r3, [r7, #20]
 800472c:	8abb      	ldrh	r3, [r7, #20]
 800472e:	f083 0320 	eor.w	r3, r3, #32
 8004732:	82bb      	strh	r3, [r7, #20]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	8abb      	ldrh	r3, [r7, #20]
 8004744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800474c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004754:	b29b      	uxth	r3, r3
 8004756:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3790      	adds	r7, #144	@ 0x90
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004762:	b480      	push	{r7}
 8004764:	b087      	sub	sp, #28
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	817b      	strh	r3, [r7, #10]
 8004770:	4613      	mov	r3, r2
 8004772:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004774:	897b      	ldrh	r3, [r7, #10]
 8004776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004780:	897b      	ldrh	r3, [r7, #10]
 8004782:	f003 0207 	and.w	r2, r3, #7
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	3310      	adds	r3, #16
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e009      	b.n	80047ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004798:	897a      	ldrh	r2, [r7, #10]
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80047ac:	893b      	ldrh	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d107      	bne.n	80047c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	80da      	strh	r2, [r3, #6]
 80047c0:	e00b      	b.n	80047da <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2201      	movs	r2, #1
 80047c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	0c1b      	lsrs	r3, r3, #16
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr
	...

080047e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e272      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8087 	beq.w	8004916 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004808:	4b92      	ldr	r3, [pc, #584]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	2b04      	cmp	r3, #4
 8004812:	d00c      	beq.n	800482e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004814:	4b8f      	ldr	r3, [pc, #572]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	2b08      	cmp	r3, #8
 800481e:	d112      	bne.n	8004846 <HAL_RCC_OscConfig+0x5e>
 8004820:	4b8c      	ldr	r3, [pc, #560]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800482c:	d10b      	bne.n	8004846 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800482e:	4b89      	ldr	r3, [pc, #548]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d06c      	beq.n	8004914 <HAL_RCC_OscConfig+0x12c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d168      	bne.n	8004914 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e24c      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800484e:	d106      	bne.n	800485e <HAL_RCC_OscConfig+0x76>
 8004850:	4b80      	ldr	r3, [pc, #512]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a7f      	ldr	r2, [pc, #508]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	e02e      	b.n	80048bc <HAL_RCC_OscConfig+0xd4>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10c      	bne.n	8004880 <HAL_RCC_OscConfig+0x98>
 8004866:	4b7b      	ldr	r3, [pc, #492]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a7a      	ldr	r2, [pc, #488]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800486c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	4b78      	ldr	r3, [pc, #480]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a77      	ldr	r2, [pc, #476]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004878:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e01d      	b.n	80048bc <HAL_RCC_OscConfig+0xd4>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0xbc>
 800488a:	4b72      	ldr	r3, [pc, #456]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a71      	ldr	r2, [pc, #452]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b6f      	ldr	r3, [pc, #444]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a6e      	ldr	r2, [pc, #440]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0xd4>
 80048a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a6a      	ldr	r2, [pc, #424]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80048aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4b68      	ldr	r3, [pc, #416]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a67      	ldr	r2, [pc, #412]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80048b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d013      	beq.n	80048ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fc fe4c 	bl	8001560 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048cc:	f7fc fe48 	bl	8001560 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	@ 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e200      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	4b5d      	ldr	r3, [pc, #372]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0xe4>
 80048ea:	e014      	b.n	8004916 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ec:	f7fc fe38 	bl	8001560 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f4:	f7fc fe34 	bl	8001560 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	@ 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e1ec      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004906:	4b53      	ldr	r3, [pc, #332]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x10c>
 8004912:	e000      	b.n	8004916 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d063      	beq.n	80049ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004922:	4b4c      	ldr	r3, [pc, #304]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800492e:	4b49      	ldr	r3, [pc, #292]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b08      	cmp	r3, #8
 8004938:	d11c      	bne.n	8004974 <HAL_RCC_OscConfig+0x18c>
 800493a:	4b46      	ldr	r3, [pc, #280]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d116      	bne.n	8004974 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004946:	4b43      	ldr	r3, [pc, #268]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_RCC_OscConfig+0x176>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d001      	beq.n	800495e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e1c0      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4939      	ldr	r1, [pc, #228]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004972:	e03a      	b.n	80049ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d020      	beq.n	80049be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800497c:	4b36      	ldr	r3, [pc, #216]	@ (8004a58 <HAL_RCC_OscConfig+0x270>)
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004982:	f7fc fded 	bl	8001560 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800498a:	f7fc fde9 	bl	8001560 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e1a1      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4927      	ldr	r1, [pc, #156]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	600b      	str	r3, [r1, #0]
 80049bc:	e015      	b.n	80049ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049be:	4b26      	ldr	r3, [pc, #152]	@ (8004a58 <HAL_RCC_OscConfig+0x270>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fc fdcc 	bl	8001560 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049cc:	f7fc fdc8 	bl	8001560 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e180      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049de:	4b1d      	ldr	r3, [pc, #116]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d03a      	beq.n	8004a6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d019      	beq.n	8004a32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fe:	4b17      	ldr	r3, [pc, #92]	@ (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a04:	f7fc fdac 	bl	8001560 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a0c:	f7fc fda8 	bl	8001560 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e160      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	f000 fafe 	bl	800502c <RCC_Delay>
 8004a30:	e01c      	b.n	8004a6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a32:	4b0a      	ldr	r3, [pc, #40]	@ (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a38:	f7fc fd92 	bl	8001560 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a3e:	e00f      	b.n	8004a60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a40:	f7fc fd8e 	bl	8001560 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d908      	bls.n	8004a60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e146      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000
 8004a58:	42420000 	.word	0x42420000
 8004a5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a60:	4b92      	ldr	r3, [pc, #584]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e9      	bne.n	8004a40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80a6 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a7e:	4b8b      	ldr	r3, [pc, #556]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10d      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a8a:	4b88      	ldr	r3, [pc, #544]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	4a87      	ldr	r2, [pc, #540]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a94:	61d3      	str	r3, [r2, #28]
 8004a96:	4b85      	ldr	r3, [pc, #532]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a9e:	60bb      	str	r3, [r7, #8]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa6:	4b82      	ldr	r3, [pc, #520]	@ (8004cb0 <HAL_RCC_OscConfig+0x4c8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d118      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8004cb0 <HAL_RCC_OscConfig+0x4c8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a7e      	ldr	r2, [pc, #504]	@ (8004cb0 <HAL_RCC_OscConfig+0x4c8>)
 8004ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004abe:	f7fc fd4f 	bl	8001560 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac6:	f7fc fd4b 	bl	8001560 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b64      	cmp	r3, #100	@ 0x64
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e103      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad8:	4b75      	ldr	r3, [pc, #468]	@ (8004cb0 <HAL_RCC_OscConfig+0x4c8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d106      	bne.n	8004afa <HAL_RCC_OscConfig+0x312>
 8004aec:	4b6f      	ldr	r3, [pc, #444]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	4a6e      	ldr	r2, [pc, #440]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	6213      	str	r3, [r2, #32]
 8004af8:	e02d      	b.n	8004b56 <HAL_RCC_OscConfig+0x36e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x334>
 8004b02:	4b6a      	ldr	r3, [pc, #424]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	4a69      	ldr	r2, [pc, #420]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	6213      	str	r3, [r2, #32]
 8004b0e:	4b67      	ldr	r3, [pc, #412]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	4a66      	ldr	r2, [pc, #408]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b14:	f023 0304 	bic.w	r3, r3, #4
 8004b18:	6213      	str	r3, [r2, #32]
 8004b1a:	e01c      	b.n	8004b56 <HAL_RCC_OscConfig+0x36e>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b05      	cmp	r3, #5
 8004b22:	d10c      	bne.n	8004b3e <HAL_RCC_OscConfig+0x356>
 8004b24:	4b61      	ldr	r3, [pc, #388]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	4a60      	ldr	r2, [pc, #384]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b2a:	f043 0304 	orr.w	r3, r3, #4
 8004b2e:	6213      	str	r3, [r2, #32]
 8004b30:	4b5e      	ldr	r3, [pc, #376]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	4a5d      	ldr	r2, [pc, #372]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6213      	str	r3, [r2, #32]
 8004b3c:	e00b      	b.n	8004b56 <HAL_RCC_OscConfig+0x36e>
 8004b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	4a5a      	ldr	r2, [pc, #360]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	6213      	str	r3, [r2, #32]
 8004b4a:	4b58      	ldr	r3, [pc, #352]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	4a57      	ldr	r2, [pc, #348]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b50:	f023 0304 	bic.w	r3, r3, #4
 8004b54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d015      	beq.n	8004b8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5e:	f7fc fcff 	bl	8001560 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b64:	e00a      	b.n	8004b7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fc fcfb 	bl	8001560 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e0b1      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ee      	beq.n	8004b66 <HAL_RCC_OscConfig+0x37e>
 8004b88:	e014      	b.n	8004bb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b8a:	f7fc fce9 	bl	8001560 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fc fce5 	bl	8001560 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e09b      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba8:	4b40      	ldr	r3, [pc, #256]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1ee      	bne.n	8004b92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d105      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bba:	4b3c      	ldr	r3, [pc, #240]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	4a3b      	ldr	r2, [pc, #236]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 8087 	beq.w	8004cde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd0:	4b36      	ldr	r3, [pc, #216]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 030c 	and.w	r3, r3, #12
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d061      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d146      	bne.n	8004c72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be4:	4b33      	ldr	r3, [pc, #204]	@ (8004cb4 <HAL_RCC_OscConfig+0x4cc>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bea:	f7fc fcb9 	bl	8001560 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf2:	f7fc fcb5 	bl	8001560 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e06d      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c04:	4b29      	ldr	r3, [pc, #164]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f0      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c18:	d108      	bne.n	8004c2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c1a:	4b24      	ldr	r3, [pc, #144]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	4921      	ldr	r1, [pc, #132]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a19      	ldr	r1, [r3, #32]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	491b      	ldr	r1, [pc, #108]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <HAL_RCC_OscConfig+0x4cc>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4a:	f7fc fc89 	bl	8001560 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fc fc85 	bl	8001560 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e03d      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c64:	4b11      	ldr	r3, [pc, #68]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x46a>
 8004c70:	e035      	b.n	8004cde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	4b10      	ldr	r3, [pc, #64]	@ (8004cb4 <HAL_RCC_OscConfig+0x4cc>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fc fc72 	bl	8001560 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fc fc6e 	bl	8001560 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e026      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c92:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x498>
 8004c9e:	e01e      	b.n	8004cde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e019      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40007000 	.word	0x40007000
 8004cb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <HAL_RCC_OscConfig+0x500>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d001      	beq.n	8004cde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40021000 	.word	0x40021000

08004cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0d0      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d00:	4b6a      	ldr	r3, [pc, #424]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d910      	bls.n	8004d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0e:	4b67      	ldr	r3, [pc, #412]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f023 0207 	bic.w	r2, r3, #7
 8004d16:	4965      	ldr	r1, [pc, #404]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1e:	4b63      	ldr	r3, [pc, #396]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d001      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0b8      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d020      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d48:	4b59      	ldr	r3, [pc, #356]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4a58      	ldr	r2, [pc, #352]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d60:	4b53      	ldr	r3, [pc, #332]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4a52      	ldr	r2, [pc, #328]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004d6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d6c:	4b50      	ldr	r3, [pc, #320]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	494d      	ldr	r1, [pc, #308]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d040      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d107      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d92:	4b47      	ldr	r3, [pc, #284]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d115      	bne.n	8004dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e07f      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d107      	bne.n	8004dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004daa:	4b41      	ldr	r3, [pc, #260]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e073      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dba:	4b3d      	ldr	r3, [pc, #244]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e06b      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dca:	4b39      	ldr	r3, [pc, #228]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f023 0203 	bic.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4936      	ldr	r1, [pc, #216]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ddc:	f7fc fbc0 	bl	8001560 <HAL_GetTick>
 8004de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de4:	f7fc fbbc 	bl	8001560 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e053      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 020c 	and.w	r2, r3, #12
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d1eb      	bne.n	8004de4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b27      	ldr	r3, [pc, #156]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d210      	bcs.n	8004e3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b24      	ldr	r3, [pc, #144]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f023 0207 	bic.w	r2, r3, #7
 8004e22:	4922      	ldr	r1, [pc, #136]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2a:	4b20      	ldr	r3, [pc, #128]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e032      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e48:	4b19      	ldr	r3, [pc, #100]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4916      	ldr	r1, [pc, #88]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e66:	4b12      	ldr	r3, [pc, #72]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	490e      	ldr	r1, [pc, #56]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e7a:	f000 f821 	bl	8004ec0 <HAL_RCC_GetSysClockFreq>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	490a      	ldr	r1, [pc, #40]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e8c:	5ccb      	ldrb	r3, [r1, r3]
 8004e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e92:	4a09      	ldr	r2, [pc, #36]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8004e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e96:	4b09      	ldr	r3, [pc, #36]	@ (8004ebc <HAL_RCC_ClockConfig+0x1d0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fc f9cc 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40022000 	.word	0x40022000
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	0800d9d8 	.word	0x0800d9d8
 8004eb8:	20000000 	.word	0x20000000
 8004ebc:	20000004 	.word	0x20000004

08004ec0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004eda:	4b1e      	ldr	r3, [pc, #120]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d002      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x30>
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d003      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x36>
 8004eee:	e027      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ef0:	4b19      	ldr	r3, [pc, #100]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ef2:	613b      	str	r3, [r7, #16]
      break;
 8004ef4:	e027      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	0c9b      	lsrs	r3, r3, #18
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	4a17      	ldr	r2, [pc, #92]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f00:	5cd3      	ldrb	r3, [r2, r3]
 8004f02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d010      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f0e:	4b11      	ldr	r3, [pc, #68]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	0c5b      	lsrs	r3, r3, #17
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	4a11      	ldr	r2, [pc, #68]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f1a:	5cd3      	ldrb	r3, [r2, r3]
 8004f1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a0d      	ldr	r2, [pc, #52]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f22:	fb03 f202 	mul.w	r2, r3, r2
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e004      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a0c      	ldr	r2, [pc, #48]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	613b      	str	r3, [r7, #16]
      break;
 8004f3e:	e002      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f42:	613b      	str	r3, [r7, #16]
      break;
 8004f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f46:	693b      	ldr	r3, [r7, #16]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
 8004f58:	007a1200 	.word	0x007a1200
 8004f5c:	0800d9f0 	.word	0x0800d9f0
 8004f60:	0800da00 	.word	0x0800da00
 8004f64:	003d0900 	.word	0x003d0900

08004f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f6c:	4b02      	ldr	r3, [pc, #8]	@ (8004f78 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr
 8004f78:	20000000 	.word	0x20000000

08004f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f80:	f7ff fff2 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b05      	ldr	r3, [pc, #20]	@ (8004f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	4903      	ldr	r1, [pc, #12]	@ (8004fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f92:	5ccb      	ldrb	r3, [r1, r3]
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	0800d9e8 	.word	0x0800d9e8

08004fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fa8:	f7ff ffde 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	0adb      	lsrs	r3, r3, #11
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4903      	ldr	r1, [pc, #12]	@ (8004fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	0800d9e8 	.word	0x0800d9e8

08004fcc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	220f      	movs	r2, #15
 8004fda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fdc:	4b11      	ldr	r3, [pc, #68]	@ (8005024 <HAL_RCC_GetClockConfig+0x58>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f003 0203 	and.w	r2, r3, #3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8005024 <HAL_RCC_GetClockConfig+0x58>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8005024 <HAL_RCC_GetClockConfig+0x58>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005000:	4b08      	ldr	r3, [pc, #32]	@ (8005024 <HAL_RCC_GetClockConfig+0x58>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	08db      	lsrs	r3, r3, #3
 8005006:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800500e:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <HAL_RCC_GetClockConfig+0x5c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0207 	and.w	r2, r3, #7
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	40021000 	.word	0x40021000
 8005028:	40022000 	.word	0x40022000

0800502c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005034:	4b0a      	ldr	r3, [pc, #40]	@ (8005060 <RCC_Delay+0x34>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a0a      	ldr	r2, [pc, #40]	@ (8005064 <RCC_Delay+0x38>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	0a5b      	lsrs	r3, r3, #9
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005048:	bf00      	nop
  }
  while (Delay --);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1e5a      	subs	r2, r3, #1
 800504e:	60fa      	str	r2, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f9      	bne.n	8005048 <RCC_Delay+0x1c>
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	20000000 	.word	0x20000000
 8005064:	10624dd3 	.word	0x10624dd3

08005068 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d07d      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005084:	2300      	movs	r3, #0
 8005086:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005088:	4b4f      	ldr	r3, [pc, #316]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10d      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005094:	4b4c      	ldr	r3, [pc, #304]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	4a4b      	ldr	r2, [pc, #300]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800509a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800509e:	61d3      	str	r3, [r2, #28]
 80050a0:	4b49      	ldr	r3, [pc, #292]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ac:	2301      	movs	r3, #1
 80050ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b0:	4b46      	ldr	r3, [pc, #280]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d118      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050bc:	4b43      	ldr	r3, [pc, #268]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a42      	ldr	r2, [pc, #264]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c8:	f7fc fa4a 	bl	8001560 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ce:	e008      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d0:	f7fc fa46 	bl	8001560 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	@ 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e06d      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e2:	4b3a      	ldr	r3, [pc, #232]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ee:	4b36      	ldr	r3, [pc, #216]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d02e      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	429a      	cmp	r2, r3
 800510a:	d027      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800510c:	4b2e      	ldr	r3, [pc, #184]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005114:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005116:	4b2e      	ldr	r3, [pc, #184]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005118:	2201      	movs	r2, #1
 800511a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800511c:	4b2c      	ldr	r3, [pc, #176]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005122:	4a29      	ldr	r2, [pc, #164]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d014      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005132:	f7fc fa15 	bl	8001560 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005138:	e00a      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f7fc fa11 	bl	8001560 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	d901      	bls.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e036      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005150:	4b1d      	ldr	r3, [pc, #116]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ee      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800515c:	4b1a      	ldr	r3, [pc, #104]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	4917      	ldr	r1, [pc, #92]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800516a:	4313      	orrs	r3, r2
 800516c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d105      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005174:	4b14      	ldr	r3, [pc, #80]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	4a13      	ldr	r2, [pc, #76]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800517a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800517e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800518c:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	490b      	ldr	r1, [pc, #44]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519a:	4313      	orrs	r3, r2
 800519c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051aa:	4b07      	ldr	r3, [pc, #28]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	4904      	ldr	r1, [pc, #16]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40021000 	.word	0x40021000
 80051cc:	40007000 	.word	0x40007000
 80051d0:	42420440 	.word	0x42420440

080051d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e041      	b.n	800526a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f839 	bl	8005272 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f000 f99c 	bl	8005550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr

08005284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d001      	beq.n	800529c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e03a      	b.n	8005312 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a18      	ldr	r2, [pc, #96]	@ (800531c <HAL_TIM_Base_Start_IT+0x98>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00e      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x58>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c6:	d009      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x58>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a14      	ldr	r2, [pc, #80]	@ (8005320 <HAL_TIM_Base_Start_IT+0x9c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x58>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a13      	ldr	r2, [pc, #76]	@ (8005324 <HAL_TIM_Base_Start_IT+0xa0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d111      	bne.n	8005300 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b06      	cmp	r3, #6
 80052ec:	d010      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fe:	e007      	b.n	8005310 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	40012c00 	.word	0x40012c00
 8005320:	40000400 	.word	0x40000400
 8005324:	40000800 	.word	0x40000800

08005328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d020      	beq.n	800538c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01b      	beq.n	800538c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0202 	mvn.w	r2, #2
 800535c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f8d1 	bl	800551a <HAL_TIM_IC_CaptureCallback>
 8005378:	e005      	b.n	8005386 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f8c4 	bl	8005508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f8d3 	bl	800552c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d020      	beq.n	80053d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01b      	beq.n	80053d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0204 	mvn.w	r2, #4
 80053a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f8ab 	bl	800551a <HAL_TIM_IC_CaptureCallback>
 80053c4:	e005      	b.n	80053d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f89e 	bl	8005508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f8ad 	bl	800552c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d020      	beq.n	8005424 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01b      	beq.n	8005424 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0208 	mvn.w	r2, #8
 80053f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2204      	movs	r2, #4
 80053fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f885 	bl	800551a <HAL_TIM_IC_CaptureCallback>
 8005410:	e005      	b.n	800541e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f878 	bl	8005508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f887 	bl	800552c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2b00      	cmp	r3, #0
 800542c:	d020      	beq.n	8005470 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01b      	beq.n	8005470 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0210 	mvn.w	r2, #16
 8005440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2208      	movs	r2, #8
 8005446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f85f 	bl	800551a <HAL_TIM_IC_CaptureCallback>
 800545c:	e005      	b.n	800546a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f852 	bl	8005508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f861 	bl	800552c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00c      	beq.n	8005494 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0201 	mvn.w	r2, #1
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fb fe44 	bl	800111c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00c      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f8c3 	bl	800563e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00c      	beq.n	80054dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f831 	bl	800553e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00c      	beq.n	8005500 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0220 	mvn.w	r2, #32
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f896 	bl	800562c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr

0800553e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr

08005550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a2f      	ldr	r2, [pc, #188]	@ (8005620 <TIM_Base_SetConfig+0xd0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00b      	beq.n	8005580 <TIM_Base_SetConfig+0x30>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556e:	d007      	beq.n	8005580 <TIM_Base_SetConfig+0x30>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a2c      	ldr	r2, [pc, #176]	@ (8005624 <TIM_Base_SetConfig+0xd4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d003      	beq.n	8005580 <TIM_Base_SetConfig+0x30>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a2b      	ldr	r2, [pc, #172]	@ (8005628 <TIM_Base_SetConfig+0xd8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d108      	bne.n	8005592 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a22      	ldr	r2, [pc, #136]	@ (8005620 <TIM_Base_SetConfig+0xd0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00b      	beq.n	80055b2 <TIM_Base_SetConfig+0x62>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a0:	d007      	beq.n	80055b2 <TIM_Base_SetConfig+0x62>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005624 <TIM_Base_SetConfig+0xd4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_Base_SetConfig+0x62>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005628 <TIM_Base_SetConfig+0xd8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d108      	bne.n	80055c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005620 <TIM_Base_SetConfig+0xd0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d103      	bne.n	80055f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f023 0201 	bic.w	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	611a      	str	r2, [r3, #16]
  }
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800

0800562c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr

08005650 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	4638      	mov	r0, r7
 800565a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800567a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800567e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800569e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80056a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	43db      	mvns	r3, r3
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	4013      	ands	r3, r2
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	460b      	mov	r3, r1
 80056d4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	4638      	mov	r0, r7
 80056ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800571c:	b480      	push	{r7}
 800571e:	b09d      	sub	sp, #116	@ 0x74
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800573e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005742:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	78db      	ldrb	r3, [r3, #3]
 800574a:	2b03      	cmp	r3, #3
 800574c:	d81f      	bhi.n	800578e <USB_ActivateEndpoint+0x72>
 800574e:	a201      	add	r2, pc, #4	@ (adr r2, 8005754 <USB_ActivateEndpoint+0x38>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005765 	.word	0x08005765
 8005758:	08005781 	.word	0x08005781
 800575c:	08005797 	.word	0x08005797
 8005760:	08005773 	.word	0x08005773
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005764:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005768:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800576c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005770:	e012      	b.n	8005798 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005772:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005776:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800577a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800577e:	e00b      	b.n	8005798 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005780:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005784:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005788:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800578c:	e004      	b.n	8005798 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005794:	e000      	b.n	8005798 <USB_ActivateEndpoint+0x7c>
      break;
 8005796:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	7812      	ldrb	r2, [r2, #0]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80057ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	7b1b      	ldrb	r3, [r3, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f040 8178 	bne.w	8005af8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 8084 	beq.w	800591a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800581c:	b29b      	uxth	r3, r3
 800581e:	461a      	mov	r2, r3
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	4413      	add	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	011a      	lsls	r2, r3, #4
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	88db      	ldrh	r3, [r3, #6]
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	b29b      	uxth	r3, r3
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	827b      	strh	r3, [r7, #18]
 8005854:	8a7b      	ldrh	r3, [r7, #18]
 8005856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01b      	beq.n	8005896 <USB_ActivateEndpoint+0x17a>
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b29b      	uxth	r3, r3
 800586c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005874:	823b      	strh	r3, [r7, #16]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	441a      	add	r2, r3
 8005880:	8a3b      	ldrh	r3, [r7, #16]
 8005882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800588a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800588e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005892:	b29b      	uxth	r3, r3
 8005894:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	78db      	ldrb	r3, [r3, #3]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d020      	beq.n	80058e0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b4:	81bb      	strh	r3, [r7, #12]
 80058b6:	89bb      	ldrh	r3, [r7, #12]
 80058b8:	f083 0320 	eor.w	r3, r3, #32
 80058bc:	81bb      	strh	r3, [r7, #12]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	441a      	add	r2, r3
 80058c8:	89bb      	ldrh	r3, [r7, #12]
 80058ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058da:	b29b      	uxth	r3, r3
 80058dc:	8013      	strh	r3, [r2, #0]
 80058de:	e2d5      	b.n	8005e8c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058f6:	81fb      	strh	r3, [r7, #14]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	441a      	add	r2, r3
 8005902:	89fb      	ldrh	r3, [r7, #14]
 8005904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800590c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005914:	b29b      	uxth	r3, r3
 8005916:	8013      	strh	r3, [r2, #0]
 8005918:	e2b8      	b.n	8005e8c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	633b      	str	r3, [r7, #48]	@ 0x30
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005924:	b29b      	uxth	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592a:	4413      	add	r3, r2
 800592c:	633b      	str	r3, [r7, #48]	@ 0x30
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	011a      	lsls	r2, r3, #4
 8005934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005936:	4413      	add	r3, r2
 8005938:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800593c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	88db      	ldrh	r3, [r3, #6]
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	b29b      	uxth	r3, r3
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595e:	4413      	add	r3, r2
 8005960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	011a      	lsls	r2, r3, #4
 8005968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596a:	4413      	add	r3, r2
 800596c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800597c:	b29a      	uxth	r2, r3
 800597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b3e      	cmp	r3, #62	@ 0x3e
 8005988:	d91d      	bls.n	80059c6 <USB_ActivateEndpoint+0x2aa>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <USB_ActivateEndpoint+0x288>
 800599e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059a0:	3b01      	subs	r3, #1
 80059a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	029b      	lsls	r3, r3, #10
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	4313      	orrs	r3, r2
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059be:	b29a      	uxth	r2, r3
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e026      	b.n	8005a14 <USB_ActivateEndpoint+0x2f8>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <USB_ActivateEndpoint+0x2c8>
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059dc:	b29a      	uxth	r2, r3
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	e017      	b.n	8005a14 <USB_ActivateEndpoint+0x2f8>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <USB_ActivateEndpoint+0x2e2>
 80059f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059fa:	3301      	adds	r3, #1
 80059fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	029b      	lsls	r3, r3, #10
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005a22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01b      	beq.n	8005a64 <USB_ActivateEndpoint+0x348>
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a42:	843b      	strh	r3, [r7, #32]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	441a      	add	r2, r3
 8005a4e:	8c3b      	ldrh	r3, [r7, #32]
 8005a50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d124      	bne.n	8005ab6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a82:	83bb      	strh	r3, [r7, #28]
 8005a84:	8bbb      	ldrh	r3, [r7, #28]
 8005a86:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005a8a:	83bb      	strh	r3, [r7, #28]
 8005a8c:	8bbb      	ldrh	r3, [r7, #28]
 8005a8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a92:	83bb      	strh	r3, [r7, #28]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	441a      	add	r2, r3
 8005a9e:	8bbb      	ldrh	r3, [r7, #28]
 8005aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	8013      	strh	r3, [r2, #0]
 8005ab4:	e1ea      	b.n	8005e8c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005acc:	83fb      	strh	r3, [r7, #30]
 8005ace:	8bfb      	ldrh	r3, [r7, #30]
 8005ad0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ad4:	83fb      	strh	r3, [r7, #30]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	441a      	add	r2, r3
 8005ae0:	8bfb      	ldrh	r3, [r7, #30]
 8005ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	8013      	strh	r3, [r2, #0]
 8005af6:	e1c9      	b.n	8005e8c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	78db      	ldrb	r3, [r3, #3]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d11e      	bne.n	8005b3e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b16:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	441a      	add	r2, r3
 8005b24:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005b28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b30:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	8013      	strh	r3, [r2, #0]
 8005b3c:	e01d      	b.n	8005b7a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b54:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	441a      	add	r2, r3
 8005b62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b8a:	4413      	add	r3, r2
 8005b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	011a      	lsls	r2, r3, #4
 8005b94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	891b      	ldrh	r3, [r3, #8]
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bbe:	4413      	add	r3, r2
 8005bc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	011a      	lsls	r2, r3, #4
 8005bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005bd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	895b      	ldrh	r3, [r3, #10]
 8005bd6:	085b      	lsrs	r3, r3, #1
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005be0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f040 8093 	bne.w	8005d12 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005bfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <USB_ActivateEndpoint+0x524>
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c1e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	441a      	add	r2, r3
 8005c2a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005c2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005c4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01b      	beq.n	8005c90 <USB_ActivateEndpoint+0x574>
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c6e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	441a      	add	r2, r3
 8005c7a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005c7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005ca8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005caa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005cae:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005cb0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005cb2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005cb6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	441a      	add	r2, r3
 8005cc2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005cc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ccc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cee:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	8013      	strh	r3, [r2, #0]
 8005d10:	e0bc      	b.n	8005e8c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005d22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01d      	beq.n	8005d6a <USB_ActivateEndpoint+0x64e>
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d44:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	441a      	add	r2, r3
 8005d52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005d56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005d7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d01d      	beq.n	8005dc2 <USB_ActivateEndpoint+0x6a6>
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d9c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005dae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005db2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	78db      	ldrb	r3, [r3, #3]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d024      	beq.n	8005e14 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005de0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005de4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005de8:	f083 0320 	eor.w	r3, r3, #32
 8005dec:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]
 8005e12:	e01d      	b.n	8005e50 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e2a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	441a      	add	r2, r3
 8005e38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e66:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005e8c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3774      	adds	r7, #116	@ 0x74
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bc80      	pop	{r7}
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop

08005e9c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b08d      	sub	sp, #52	@ 0x34
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	7b1b      	ldrb	r3, [r3, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f040 808e 	bne.w	8005fcc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d044      	beq.n	8005f42 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	81bb      	strh	r3, [r7, #12]
 8005ec6:	89bb      	ldrh	r3, [r7, #12]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01b      	beq.n	8005f08 <USB_DeactivateEndpoint+0x6c>
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee6:	817b      	strh	r3, [r7, #10]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	441a      	add	r2, r3
 8005ef2:	897b      	ldrh	r3, [r7, #10]
 8005ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f1e:	813b      	strh	r3, [r7, #8]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	441a      	add	r2, r3
 8005f2a:	893b      	ldrh	r3, [r7, #8]
 8005f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	8013      	strh	r3, [r2, #0]
 8005f40:	e192      	b.n	8006268 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	827b      	strh	r3, [r7, #18]
 8005f50:	8a7b      	ldrh	r3, [r7, #18]
 8005f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01b      	beq.n	8005f92 <USB_DeactivateEndpoint+0xf6>
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f70:	823b      	strh	r3, [r7, #16]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	441a      	add	r2, r3
 8005f7c:	8a3b      	ldrh	r3, [r7, #16]
 8005f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa8:	81fb      	strh	r3, [r7, #14]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	441a      	add	r2, r3
 8005fb4:	89fb      	ldrh	r3, [r7, #14]
 8005fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	8013      	strh	r3, [r2, #0]
 8005fca:	e14d      	b.n	8006268 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	785b      	ldrb	r3, [r3, #1]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f040 80a5 	bne.w	8006120 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	843b      	strh	r3, [r7, #32]
 8005fe4:	8c3b      	ldrh	r3, [r7, #32]
 8005fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01b      	beq.n	8006026 <USB_DeactivateEndpoint+0x18a>
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006004:	83fb      	strh	r3, [r7, #30]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	441a      	add	r2, r3
 8006010:	8bfb      	ldrh	r3, [r7, #30]
 8006012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800601a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800601e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006022:	b29b      	uxth	r3, r3
 8006024:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	83bb      	strh	r3, [r7, #28]
 8006034:	8bbb      	ldrh	r3, [r7, #28]
 8006036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01b      	beq.n	8006076 <USB_DeactivateEndpoint+0x1da>
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006054:	837b      	strh	r3, [r7, #26]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	441a      	add	r2, r3
 8006060:	8b7b      	ldrh	r3, [r7, #26]
 8006062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800606a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800606e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006072:	b29b      	uxth	r3, r3
 8006074:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608c:	833b      	strh	r3, [r7, #24]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	441a      	add	r2, r3
 8006098:	8b3b      	ldrh	r3, [r7, #24]
 800609a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800609e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c4:	82fb      	strh	r3, [r7, #22]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	441a      	add	r2, r3
 80060d0:	8afb      	ldrh	r3, [r7, #22]
 80060d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060fc:	82bb      	strh	r3, [r7, #20]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	441a      	add	r2, r3
 8006108:	8abb      	ldrh	r3, [r7, #20]
 800610a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800610e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800611a:	b29b      	uxth	r3, r3
 800611c:	8013      	strh	r3, [r2, #0]
 800611e:	e0a3      	b.n	8006268 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800612e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01b      	beq.n	8006170 <USB_DeactivateEndpoint+0x2d4>
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800614a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800614e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	441a      	add	r2, r3
 800615a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800615c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800616c:	b29b      	uxth	r3, r3
 800616e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800617e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01b      	beq.n	80061c0 <USB_DeactivateEndpoint+0x324>
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800619a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	441a      	add	r2, r3
 80061aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80061ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061bc:	b29b      	uxth	r3, r3
 80061be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	441a      	add	r2, r3
 80061e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800620a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800620e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	441a      	add	r2, r3
 800621a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800621c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006220:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006224:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800622c:	b29b      	uxth	r3, r3
 800622e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006246:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	441a      	add	r2, r3
 8006252:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800625c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006264:	b29b      	uxth	r3, r3
 8006266:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3734      	adds	r7, #52	@ 0x34
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b0c2      	sub	sp, #264	@ 0x108
 8006278:	af00      	add	r7, sp, #0
 800627a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006282:	6018      	str	r0, [r3, #0]
 8006284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800628e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	785b      	ldrb	r3, [r3, #1]
 800629a:	2b01      	cmp	r3, #1
 800629c:	f040 86b7 	bne.w	800700e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699a      	ldr	r2, [r3, #24]
 80062ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d908      	bls.n	80062ce <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80062bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80062cc:	e007      	b.n	80062de <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80062ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	7b1b      	ldrb	r3, [r3, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d13a      	bne.n	8006364 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80062ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6959      	ldr	r1, [r3, #20]
 80062fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	88da      	ldrh	r2, [r3, #6]
 8006306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630a:	b29b      	uxth	r3, r3
 800630c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006310:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006314:	6800      	ldr	r0, [r0, #0]
 8006316:	f001 fc9c 	bl	8007c52 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800631a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006334:	b29b      	uxth	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	4413      	add	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	011a      	lsls	r2, r3, #4
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	4413      	add	r3, r2
 8006350:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	801a      	strh	r2, [r3, #0]
 8006360:	f000 be1f 	b.w	8006fa2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	78db      	ldrb	r3, [r3, #3]
 8006370:	2b02      	cmp	r3, #2
 8006372:	f040 8462 	bne.w	8006c3a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6a1a      	ldr	r2, [r3, #32]
 8006382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	429a      	cmp	r2, r3
 8006390:	f240 83df 	bls.w	8006b52 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ba:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80063be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	441a      	add	r2, r3
 80063d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80063dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063e4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80063e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80063f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6a1a      	ldr	r2, [r3, #32]
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006400:	1ad2      	subs	r2, r2, r3
 8006402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800640e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 81c7 	beq.w	80067c4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	633b      	str	r3, [r7, #48]	@ 0x30
 8006442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	785b      	ldrb	r3, [r3, #1]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d177      	bne.n	8006542 <USB_EPStartXfer+0x2ce>
 8006452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006456:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800645e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800646c:	b29b      	uxth	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	4413      	add	r3, r2
 8006474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	011a      	lsls	r2, r3, #4
 8006484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006486:	4413      	add	r3, r2
 8006488:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800648c:	627b      	str	r3, [r7, #36]	@ 0x24
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006498:	b29a      	uxth	r2, r3
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	801a      	strh	r2, [r3, #0]
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80064a4:	d921      	bls.n	80064ea <USB_EPStartXfer+0x276>
 80064a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b4:	f003 031f 	and.w	r3, r3, #31
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d104      	bne.n	80064c6 <USB_EPStartXfer+0x252>
 80064bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80064c0:	3b01      	subs	r3, #1
 80064c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	029b      	lsls	r3, r3, #10
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	4313      	orrs	r3, r2
 80064d8:	b29b      	uxth	r3, r3
 80064da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	801a      	strh	r2, [r3, #0]
 80064e8:	e050      	b.n	800658c <USB_EPStartXfer+0x318>
 80064ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <USB_EPStartXfer+0x294>
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006500:	b29a      	uxth	r2, r3
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	801a      	strh	r2, [r3, #0]
 8006506:	e041      	b.n	800658c <USB_EPStartXfer+0x318>
 8006508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650c:	085b      	lsrs	r3, r3, #1
 800650e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d004      	beq.n	8006528 <USB_EPStartXfer+0x2b4>
 800651e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006522:	3301      	adds	r3, #1
 8006524:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29a      	uxth	r2, r3
 800652e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006532:	b29b      	uxth	r3, r3
 8006534:	029b      	lsls	r3, r3, #10
 8006536:	b29b      	uxth	r3, r3
 8006538:	4313      	orrs	r3, r2
 800653a:	b29a      	uxth	r2, r3
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	e024      	b.n	800658c <USB_EPStartXfer+0x318>
 8006542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d11c      	bne.n	800658c <USB_EPStartXfer+0x318>
 8006552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006556:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006560:	b29b      	uxth	r3, r3
 8006562:	461a      	mov	r2, r3
 8006564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006566:	4413      	add	r3, r2
 8006568:	633b      	str	r3, [r7, #48]	@ 0x30
 800656a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	011a      	lsls	r2, r3, #4
 8006578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657a:	4413      	add	r3, r2
 800657c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006586:	b29a      	uxth	r2, r3
 8006588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800658c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	895b      	ldrh	r3, [r3, #10]
 8006598:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800659c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6959      	ldr	r1, [r3, #20]
 80065a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065b2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065b6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065ba:	6800      	ldr	r0, [r0, #0]
 80065bc:	f001 fb49 	bl	8007c52 <USB_WritePMA>
            ep->xfer_buff += len;
 80065c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695a      	ldr	r2, [r3, #20]
 80065cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d0:	441a      	add	r2, r3
 80065d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6a1a      	ldr	r2, [r3, #32]
 80065ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d90f      	bls.n	800661a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80065fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6a1a      	ldr	r2, [r3, #32]
 8006606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800660a:	1ad2      	subs	r2, r2, r3
 800660c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	621a      	str	r2, [r3, #32]
 8006618:	e00e      	b.n	8006638 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800661a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800662a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2200      	movs	r2, #0
 8006636:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d177      	bne.n	8006738 <USB_EPStartXfer+0x4c4>
 8006648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	61bb      	str	r3, [r7, #24]
 8006654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006658:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006662:	b29b      	uxth	r3, r3
 8006664:	461a      	mov	r2, r3
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	4413      	add	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
 800666c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	011a      	lsls	r2, r3, #4
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	4413      	add	r3, r2
 800667e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800668e:	b29a      	uxth	r2, r3
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	801a      	strh	r2, [r3, #0]
 8006694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006698:	2b3e      	cmp	r3, #62	@ 0x3e
 800669a:	d921      	bls.n	80066e0 <USB_EPStartXfer+0x46c>
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a0:	095b      	lsrs	r3, r3, #5
 80066a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d104      	bne.n	80066bc <USB_EPStartXfer+0x448>
 80066b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066b6:	3b01      	subs	r3, #1
 80066b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	029b      	lsls	r3, r3, #10
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	4313      	orrs	r3, r2
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d8:	b29a      	uxth	r2, r3
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	801a      	strh	r2, [r3, #0]
 80066de:	e056      	b.n	800678e <USB_EPStartXfer+0x51a>
 80066e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <USB_EPStartXfer+0x48a>
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	801a      	strh	r2, [r3, #0]
 80066fc:	e047      	b.n	800678e <USB_EPStartXfer+0x51a>
 80066fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <USB_EPStartXfer+0x4aa>
 8006714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006718:	3301      	adds	r3, #1
 800671a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29a      	uxth	r2, r3
 8006724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006728:	b29b      	uxth	r3, r3
 800672a:	029b      	lsls	r3, r3, #10
 800672c:	b29b      	uxth	r3, r3
 800672e:	4313      	orrs	r3, r2
 8006730:	b29a      	uxth	r2, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	e02a      	b.n	800678e <USB_EPStartXfer+0x51a>
 8006738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d122      	bne.n	800678e <USB_EPStartXfer+0x51a>
 8006748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	623b      	str	r3, [r7, #32]
 8006754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006762:	b29b      	uxth	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	4413      	add	r3, r2
 800676a:	623b      	str	r3, [r7, #32]
 800676c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	011a      	lsls	r2, r3, #4
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	4413      	add	r3, r2
 800677e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006788:	b29a      	uxth	r2, r3
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800678e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	891b      	ldrh	r3, [r3, #8]
 800679a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800679e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6959      	ldr	r1, [r3, #20]
 80067aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80067b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80067b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80067bc:	6800      	ldr	r0, [r0, #0]
 80067be:	f001 fa48 	bl	8007c52 <USB_WritePMA>
 80067c2:	e3ee      	b.n	8006fa2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d177      	bne.n	80068c4 <USB_EPStartXfer+0x650>
 80067d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067f4:	4413      	add	r3, r2
 80067f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	011a      	lsls	r2, r3, #4
 8006806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006808:	4413      	add	r3, r2
 800680a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800680e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800681a:	b29a      	uxth	r2, r3
 800681c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006824:	2b3e      	cmp	r3, #62	@ 0x3e
 8006826:	d921      	bls.n	800686c <USB_EPStartXfer+0x5f8>
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006836:	f003 031f 	and.w	r3, r3, #31
 800683a:	2b00      	cmp	r3, #0
 800683c:	d104      	bne.n	8006848 <USB_EPStartXfer+0x5d4>
 800683e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006842:	3b01      	subs	r3, #1
 8006844:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29a      	uxth	r2, r3
 800684e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006852:	b29b      	uxth	r3, r3
 8006854:	029b      	lsls	r3, r3, #10
 8006856:	b29b      	uxth	r3, r3
 8006858:	4313      	orrs	r3, r2
 800685a:	b29b      	uxth	r3, r3
 800685c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006864:	b29a      	uxth	r2, r3
 8006866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006868:	801a      	strh	r2, [r3, #0]
 800686a:	e056      	b.n	800691a <USB_EPStartXfer+0x6a6>
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <USB_EPStartXfer+0x616>
 8006874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800687e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006882:	b29a      	uxth	r2, r3
 8006884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006886:	801a      	strh	r2, [r3, #0]
 8006888:	e047      	b.n	800691a <USB_EPStartXfer+0x6a6>
 800688a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <USB_EPStartXfer+0x636>
 80068a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068a4:	3301      	adds	r3, #1
 80068a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	029b      	lsls	r3, r3, #10
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	4313      	orrs	r3, r2
 80068bc:	b29a      	uxth	r2, r3
 80068be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	e02a      	b.n	800691a <USB_EPStartXfer+0x6a6>
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	785b      	ldrb	r3, [r3, #1]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d122      	bne.n	800691a <USB_EPStartXfer+0x6a6>
 80068d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	653b      	str	r3, [r7, #80]	@ 0x50
 80068e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068f4:	4413      	add	r3, r2
 80068f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	011a      	lsls	r2, r3, #4
 8006906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006908:	4413      	add	r3, r2
 800690a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800690e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006914:	b29a      	uxth	r2, r3
 8006916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006918:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800691a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	891b      	ldrh	r3, [r3, #8]
 8006926:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800692a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6959      	ldr	r1, [r3, #20]
 8006936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693a:	b29b      	uxth	r3, r3
 800693c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006940:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006944:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006948:	6800      	ldr	r0, [r0, #0]
 800694a:	f001 f982 	bl	8007c52 <USB_WritePMA>
            ep->xfer_buff += len;
 800694e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695a      	ldr	r2, [r3, #20]
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695e:	441a      	add	r2, r3
 8006960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800696c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6a1a      	ldr	r2, [r3, #32]
 8006978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	429a      	cmp	r2, r3
 8006986:	d90f      	bls.n	80069a8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6a1a      	ldr	r2, [r3, #32]
 8006994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006998:	1ad2      	subs	r2, r2, r3
 800699a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	621a      	str	r2, [r3, #32]
 80069a6:	e00e      	b.n	80069c6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80069a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80069b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2200      	movs	r2, #0
 80069c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	785b      	ldrb	r3, [r3, #1]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d177      	bne.n	8006ad2 <USB_EPStartXfer+0x85e>
 80069e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a02:	4413      	add	r3, r2
 8006a04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	011a      	lsls	r2, r3, #4
 8006a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a16:	4413      	add	r3, r2
 8006a18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2c:	801a      	strh	r2, [r3, #0]
 8006a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a32:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a34:	d921      	bls.n	8006a7a <USB_EPStartXfer+0x806>
 8006a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a44:	f003 031f 	and.w	r3, r3, #31
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <USB_EPStartXfer+0x7e2>
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a50:	3b01      	subs	r3, #1
 8006a52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	029b      	lsls	r3, r3, #10
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	4313      	orrs	r3, r2
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a76:	801a      	strh	r2, [r3, #0]
 8006a78:	e050      	b.n	8006b1c <USB_EPStartXfer+0x8a8>
 8006a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <USB_EPStartXfer+0x824>
 8006a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	e041      	b.n	8006b1c <USB_EPStartXfer+0x8a8>
 8006a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9c:	085b      	lsrs	r3, r3, #1
 8006a9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d004      	beq.n	8006ab8 <USB_EPStartXfer+0x844>
 8006aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	029b      	lsls	r3, r3, #10
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ace:	801a      	strh	r2, [r3, #0]
 8006ad0:	e024      	b.n	8006b1c <USB_EPStartXfer+0x8a8>
 8006ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	785b      	ldrb	r3, [r3, #1]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d11c      	bne.n	8006b1c <USB_EPStartXfer+0x8a8>
 8006ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af6:	4413      	add	r3, r2
 8006af8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	011a      	lsls	r2, r3, #4
 8006b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	895b      	ldrh	r3, [r3, #10]
 8006b28:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6959      	ldr	r1, [r3, #20]
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b42:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b46:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	f001 f881 	bl	8007c52 <USB_WritePMA>
 8006b50:	e227      	b.n	8006fa2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b88:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	441a      	add	r2, r3
 8006ba6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006baa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bde:	4413      	add	r3, r2
 8006be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	011a      	lsls	r2, r3, #4
 8006bf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006bf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	891b      	ldrh	r3, [r3, #8]
 8006c10:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6959      	ldr	r1, [r3, #20]
 8006c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c2a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c2e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c32:	6800      	ldr	r0, [r0, #0]
 8006c34:	f001 f80d 	bl	8007c52 <USB_WritePMA>
 8006c38:	e1b3      	b.n	8006fa2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6a1a      	ldr	r2, [r3, #32]
 8006c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4a:	1ad2      	subs	r2, r2, r3
 8006c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 80c6 	beq.w	8006e0c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	785b      	ldrb	r3, [r3, #1]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d177      	bne.n	8006d8c <USB_EPStartXfer+0xb18>
 8006c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cbc:	4413      	add	r3, r2
 8006cbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	011a      	lsls	r2, r3, #4
 8006cce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006cd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cec:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cee:	d921      	bls.n	8006d34 <USB_EPStartXfer+0xac0>
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf4:	095b      	lsrs	r3, r3, #5
 8006cf6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfe:	f003 031f 	and.w	r3, r3, #31
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d104      	bne.n	8006d10 <USB_EPStartXfer+0xa9c>
 8006d06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	029b      	lsls	r3, r3, #10
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	4313      	orrs	r3, r2
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d30:	801a      	strh	r2, [r3, #0]
 8006d32:	e050      	b.n	8006dd6 <USB_EPStartXfer+0xb62>
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <USB_EPStartXfer+0xade>
 8006d3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d4e:	801a      	strh	r2, [r3, #0]
 8006d50:	e041      	b.n	8006dd6 <USB_EPStartXfer+0xb62>
 8006d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <USB_EPStartXfer+0xafe>
 8006d68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	029b      	lsls	r3, r3, #10
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	4313      	orrs	r3, r2
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d88:	801a      	strh	r2, [r3, #0]
 8006d8a:	e024      	b.n	8006dd6 <USB_EPStartXfer+0xb62>
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d11c      	bne.n	8006dd6 <USB_EPStartXfer+0xb62>
 8006d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006db0:	4413      	add	r3, r2
 8006db2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	011a      	lsls	r2, r3, #4
 8006dc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	895b      	ldrh	r3, [r3, #10]
 8006de2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6959      	ldr	r1, [r3, #20]
 8006df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006dfc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e00:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e04:	6800      	ldr	r0, [r0, #0]
 8006e06:	f000 ff24 	bl	8007c52 <USB_WritePMA>
 8006e0a:	e0ca      	b.n	8006fa2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d177      	bne.n	8006f0c <USB_EPStartXfer+0xc98>
 8006e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	461a      	mov	r2, r3
 8006e3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e3c:	4413      	add	r3, r2
 8006e3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	011a      	lsls	r2, r3, #4
 8006e4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e50:	4413      	add	r3, r2
 8006e52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e66:	801a      	strh	r2, [r3, #0]
 8006e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e6e:	d921      	bls.n	8006eb4 <USB_EPStartXfer+0xc40>
 8006e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d104      	bne.n	8006e90 <USB_EPStartXfer+0xc1c>
 8006e86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	029b      	lsls	r3, r3, #10
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	e05c      	b.n	8006f6e <USB_EPStartXfer+0xcfa>
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <USB_EPStartXfer+0xc5e>
 8006ebc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ece:	801a      	strh	r2, [r3, #0]
 8006ed0:	e04d      	b.n	8006f6e <USB_EPStartXfer+0xcfa>
 8006ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed6:	085b      	lsrs	r3, r3, #1
 8006ed8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <USB_EPStartXfer+0xc7e>
 8006ee8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006eec:	3301      	adds	r3, #1
 8006eee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ef2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	029b      	lsls	r3, r3, #10
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	4313      	orrs	r3, r2
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f08:	801a      	strh	r2, [r3, #0]
 8006f0a:	e030      	b.n	8006f6e <USB_EPStartXfer+0xcfa>
 8006f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	785b      	ldrb	r3, [r3, #1]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d128      	bne.n	8006f6e <USB_EPStartXfer+0xcfa>
 8006f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f40:	4413      	add	r3, r2
 8006f42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	011a      	lsls	r2, r3, #4
 8006f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f58:	4413      	add	r3, r2
 8006f5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	891b      	ldrh	r3, [r3, #8]
 8006f7a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6959      	ldr	r1, [r3, #20]
 8006f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f94:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f98:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f9c:	6800      	ldr	r0, [r0, #0]
 8006f9e:	f000 fe58 	bl	8007c52 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fc8:	817b      	strh	r3, [r7, #10]
 8006fca:	897b      	ldrh	r3, [r7, #10]
 8006fcc:	f083 0310 	eor.w	r3, r3, #16
 8006fd0:	817b      	strh	r3, [r7, #10]
 8006fd2:	897b      	ldrh	r3, [r7, #10]
 8006fd4:	f083 0320 	eor.w	r3, r3, #32
 8006fd8:	817b      	strh	r3, [r7, #10]
 8006fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	441a      	add	r2, r3
 8006ff4:	897b      	ldrh	r3, [r7, #10]
 8006ff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007006:	b29b      	uxth	r3, r3
 8007008:	8013      	strh	r3, [r2, #0]
 800700a:	f000 bcde 	b.w	80079ca <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800700e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	7b1b      	ldrb	r3, [r3, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f040 80bb 	bne.w	8007196 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	429a      	cmp	r2, r3
 800703a:	d917      	bls.n	800706c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800703c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800704c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	699a      	ldr	r2, [r3, #24]
 8007058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705c:	1ad2      	subs	r2, r2, r3
 800705e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	619a      	str	r2, [r3, #24]
 800706a:	e00e      	b.n	800708a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800706c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800707c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2200      	movs	r2, #0
 8007088:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800708a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070ae:	4413      	add	r3, r2
 80070b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	011a      	lsls	r2, r3, #4
 80070c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070c6:	4413      	add	r3, r2
 80070c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070dc:	b29a      	uxth	r2, r3
 80070de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070e2:	801a      	strh	r2, [r3, #0]
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80070ea:	d924      	bls.n	8007136 <USB_EPStartXfer+0xec2>
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f0:	095b      	lsrs	r3, r3, #5
 80070f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fa:	f003 031f 	and.w	r3, r3, #31
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d104      	bne.n	800710c <USB_EPStartXfer+0xe98>
 8007102:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007106:	3b01      	subs	r3, #1
 8007108:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800710c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	b29a      	uxth	r2, r3
 8007114:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007118:	b29b      	uxth	r3, r3
 800711a:	029b      	lsls	r3, r3, #10
 800711c:	b29b      	uxth	r3, r3
 800711e:	4313      	orrs	r3, r2
 8007120:	b29b      	uxth	r3, r3
 8007122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712a:	b29a      	uxth	r2, r3
 800712c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007130:	801a      	strh	r2, [r3, #0]
 8007132:	f000 bc10 	b.w	8007956 <USB_EPStartXfer+0x16e2>
 8007136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10c      	bne.n	8007158 <USB_EPStartXfer+0xee4>
 800713e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714e:	b29a      	uxth	r2, r3
 8007150:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007154:	801a      	strh	r2, [r3, #0]
 8007156:	e3fe      	b.n	8007956 <USB_EPStartXfer+0x16e2>
 8007158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d004      	beq.n	8007178 <USB_EPStartXfer+0xf04>
 800716e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007172:	3301      	adds	r3, #1
 8007174:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007178:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b29a      	uxth	r2, r3
 8007180:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007184:	b29b      	uxth	r3, r3
 8007186:	029b      	lsls	r3, r3, #10
 8007188:	b29b      	uxth	r3, r3
 800718a:	4313      	orrs	r3, r2
 800718c:	b29a      	uxth	r2, r3
 800718e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	e3df      	b.n	8007956 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	78db      	ldrb	r3, [r3, #3]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	f040 8218 	bne.w	80075d8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80071a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	785b      	ldrb	r3, [r3, #1]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f040 809d 	bne.w	80072f4 <USB_EPStartXfer+0x1080>
 80071ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071de:	4413      	add	r3, r2
 80071e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	011a      	lsls	r2, r3, #4
 80071f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071f6:	4413      	add	r3, r2
 80071f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	b29b      	uxth	r3, r3
 8007208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800720c:	b29a      	uxth	r2, r3
 800720e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007212:	801a      	strh	r2, [r3, #0]
 8007214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b3e      	cmp	r3, #62	@ 0x3e
 8007222:	d92b      	bls.n	800727c <USB_EPStartXfer+0x1008>
 8007224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	095b      	lsrs	r3, r3, #5
 8007232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	2b00      	cmp	r3, #0
 8007248:	d104      	bne.n	8007254 <USB_EPStartXfer+0xfe0>
 800724a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800724e:	3b01      	subs	r3, #1
 8007250:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007254:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29a      	uxth	r2, r3
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007260:	b29b      	uxth	r3, r3
 8007262:	029b      	lsls	r3, r3, #10
 8007264:	b29b      	uxth	r3, r3
 8007266:	4313      	orrs	r3, r2
 8007268:	b29b      	uxth	r3, r3
 800726a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007272:	b29a      	uxth	r2, r3
 8007274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007278:	801a      	strh	r2, [r3, #0]
 800727a:	e070      	b.n	800735e <USB_EPStartXfer+0x10ea>
 800727c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10c      	bne.n	80072a6 <USB_EPStartXfer+0x1032>
 800728c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800729c:	b29a      	uxth	r2, r3
 800729e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	e05b      	b.n	800735e <USB_EPStartXfer+0x10ea>
 80072a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	085b      	lsrs	r3, r3, #1
 80072b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d004      	beq.n	80072d6 <USB_EPStartXfer+0x1062>
 80072cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072d0:	3301      	adds	r3, #1
 80072d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29a      	uxth	r2, r3
 80072de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	029b      	lsls	r3, r3, #10
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	4313      	orrs	r3, r2
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072f0:	801a      	strh	r2, [r3, #0]
 80072f2:	e034      	b.n	800735e <USB_EPStartXfer+0x10ea>
 80072f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d12c      	bne.n	800735e <USB_EPStartXfer+0x10ea>
 8007304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007308:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007316:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007320:	b29b      	uxth	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007328:	4413      	add	r3, r2
 800732a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800732e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	011a      	lsls	r2, r3, #4
 800733c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007340:	4413      	add	r3, r2
 8007342:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800734a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	b29a      	uxth	r2, r3
 8007358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007362:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800736c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f040 809d 	bne.w	80074b8 <USB_EPStartXfer+0x1244>
 800737e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800738c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007390:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800739a:	b29b      	uxth	r3, r3
 800739c:	461a      	mov	r2, r3
 800739e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073a2:	4413      	add	r3, r2
 80073a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	011a      	lsls	r2, r3, #4
 80073b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073ba:	4413      	add	r3, r2
 80073bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80073e6:	d92b      	bls.n	8007440 <USB_EPStartXfer+0x11cc>
 80073e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	095b      	lsrs	r3, r3, #5
 80073f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 031f 	and.w	r3, r3, #31
 800740a:	2b00      	cmp	r3, #0
 800740c:	d104      	bne.n	8007418 <USB_EPStartXfer+0x11a4>
 800740e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007412:	3b01      	subs	r3, #1
 8007414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007418:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29a      	uxth	r2, r3
 8007420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007424:	b29b      	uxth	r3, r3
 8007426:	029b      	lsls	r3, r3, #10
 8007428:	b29b      	uxth	r3, r3
 800742a:	4313      	orrs	r3, r2
 800742c:	b29b      	uxth	r3, r3
 800742e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007436:	b29a      	uxth	r2, r3
 8007438:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	e069      	b.n	8007514 <USB_EPStartXfer+0x12a0>
 8007440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10c      	bne.n	800746a <USB_EPStartXfer+0x11f6>
 8007450:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007460:	b29a      	uxth	r2, r3
 8007462:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007466:	801a      	strh	r2, [r3, #0]
 8007468:	e054      	b.n	8007514 <USB_EPStartXfer+0x12a0>
 800746a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800747c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	d004      	beq.n	800749a <USB_EPStartXfer+0x1226>
 8007490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007494:	3301      	adds	r3, #1
 8007496:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800749a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	029b      	lsls	r3, r3, #10
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	4313      	orrs	r3, r2
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074b4:	801a      	strh	r2, [r3, #0]
 80074b6:	e02d      	b.n	8007514 <USB_EPStartXfer+0x12a0>
 80074b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	785b      	ldrb	r3, [r3, #1]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d125      	bne.n	8007514 <USB_EPStartXfer+0x12a0>
 80074c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80074de:	4413      	add	r3, r2
 80074e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80074e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	011a      	lsls	r2, r3, #4
 80074f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80074f6:	4413      	add	r3, r2
 80074f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	b29a      	uxth	r2, r3
 800750e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007512:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8218 	beq.w	8007956 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007546:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800754a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <USB_EPStartXfer+0x12ea>
 8007552:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10d      	bne.n	800757a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800755e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007566:	2b00      	cmp	r3, #0
 8007568:	f040 81f5 	bne.w	8007956 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800756c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007574:	2b00      	cmp	r3, #0
 8007576:	f040 81ee 	bne.w	8007956 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800757a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800759c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075a0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80075a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	441a      	add	r2, r3
 80075be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80075c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	8013      	strh	r3, [r2, #0]
 80075d6:	e1be      	b.n	8007956 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80075d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	78db      	ldrb	r3, [r3, #3]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	f040 81b4 	bne.w	8007952 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80075ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	429a      	cmp	r2, r3
 8007604:	d917      	bls.n	8007636 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007626:	1ad2      	subs	r2, r2, r3
 8007628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	619a      	str	r2, [r3, #24]
 8007634:	e00e      	b.n	8007654 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2200      	movs	r2, #0
 8007652:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f040 8085 	bne.w	8007770 <USB_EPStartXfer+0x14fc>
 8007666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007682:	b29b      	uxth	r3, r3
 8007684:	461a      	mov	r2, r3
 8007686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800768a:	4413      	add	r3, r2
 800768c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	011a      	lsls	r2, r3, #4
 800769e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076a2:	4413      	add	r3, r2
 80076a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80076c6:	d923      	bls.n	8007710 <USB_EPStartXfer+0x149c>
 80076c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d6:	f003 031f 	and.w	r3, r3, #31
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d104      	bne.n	80076e8 <USB_EPStartXfer+0x1474>
 80076de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076e2:	3b01      	subs	r3, #1
 80076e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80076e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	029b      	lsls	r3, r3, #10
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	4313      	orrs	r3, r2
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007706:	b29a      	uxth	r2, r3
 8007708:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800770c:	801a      	strh	r2, [r3, #0]
 800770e:	e060      	b.n	80077d2 <USB_EPStartXfer+0x155e>
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10c      	bne.n	8007732 <USB_EPStartXfer+0x14be>
 8007718:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007728:	b29a      	uxth	r2, r3
 800772a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800772e:	801a      	strh	r2, [r3, #0]
 8007730:	e04f      	b.n	80077d2 <USB_EPStartXfer+0x155e>
 8007732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007736:	085b      	lsrs	r3, r3, #1
 8007738:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800773c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d004      	beq.n	8007752 <USB_EPStartXfer+0x14de>
 8007748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800774c:	3301      	adds	r3, #1
 800774e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	b29a      	uxth	r2, r3
 800775a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800775e:	b29b      	uxth	r3, r3
 8007760:	029b      	lsls	r3, r3, #10
 8007762:	b29b      	uxth	r3, r3
 8007764:	4313      	orrs	r3, r2
 8007766:	b29a      	uxth	r2, r3
 8007768:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	e030      	b.n	80077d2 <USB_EPStartXfer+0x155e>
 8007770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d128      	bne.n	80077d2 <USB_EPStartXfer+0x155e>
 8007780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007784:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800778e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800779c:	b29b      	uxth	r3, r3
 800779e:	461a      	mov	r2, r3
 80077a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077a4:	4413      	add	r3, r2
 80077a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	011a      	lsls	r2, r3, #4
 80077b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077bc:	4413      	add	r3, r2
 80077be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80077d0:	801a      	strh	r2, [r3, #0]
 80077d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f040 8085 	bne.w	80078fc <USB_EPStartXfer+0x1688>
 80077f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007804:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800780e:	b29b      	uxth	r3, r3
 8007810:	461a      	mov	r2, r3
 8007812:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007816:	4413      	add	r3, r2
 8007818:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800781c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	011a      	lsls	r2, r3, #4
 800782a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800782e:	4413      	add	r3, r2
 8007830:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007834:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007838:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	b29b      	uxth	r3, r3
 8007840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007844:	b29a      	uxth	r2, r3
 8007846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800784a:	801a      	strh	r2, [r3, #0]
 800784c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007850:	2b3e      	cmp	r3, #62	@ 0x3e
 8007852:	d923      	bls.n	800789c <USB_EPStartXfer+0x1628>
 8007854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007862:	f003 031f 	and.w	r3, r3, #31
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <USB_EPStartXfer+0x1600>
 800786a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800786e:	3b01      	subs	r3, #1
 8007870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29a      	uxth	r2, r3
 800787c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007880:	b29b      	uxth	r3, r3
 8007882:	029b      	lsls	r3, r3, #10
 8007884:	b29b      	uxth	r3, r3
 8007886:	4313      	orrs	r3, r2
 8007888:	b29b      	uxth	r3, r3
 800788a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800788e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007892:	b29a      	uxth	r2, r3
 8007894:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	e05c      	b.n	8007956 <USB_EPStartXfer+0x16e2>
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10c      	bne.n	80078be <USB_EPStartXfer+0x164a>
 80078a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078ba:	801a      	strh	r2, [r3, #0]
 80078bc:	e04b      	b.n	8007956 <USB_EPStartXfer+0x16e2>
 80078be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c2:	085b      	lsrs	r3, r3, #1
 80078c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d004      	beq.n	80078de <USB_EPStartXfer+0x166a>
 80078d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078d8:	3301      	adds	r3, #1
 80078da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	029b      	lsls	r3, r3, #10
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	4313      	orrs	r3, r2
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078f8:	801a      	strh	r2, [r3, #0]
 80078fa:	e02c      	b.n	8007956 <USB_EPStartXfer+0x16e2>
 80078fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	785b      	ldrb	r3, [r3, #1]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d124      	bne.n	8007956 <USB_EPStartXfer+0x16e2>
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800791a:	b29b      	uxth	r3, r3
 800791c:	461a      	mov	r2, r3
 800791e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007922:	4413      	add	r3, r2
 8007924:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	011a      	lsls	r2, r3, #4
 8007936:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800793a:	4413      	add	r3, r2
 800793c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007940:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007948:	b29a      	uxth	r2, r3
 800794a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800794e:	801a      	strh	r2, [r3, #0]
 8007950:	e001      	b.n	8007956 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e03a      	b.n	80079cc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800797c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007980:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007984:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007988:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800798c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007990:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007994:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	441a      	add	r2, r3
 80079b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80079b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b085      	sub	sp, #20
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d020      	beq.n	8007a2a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079fe:	81bb      	strh	r3, [r7, #12]
 8007a00:	89bb      	ldrh	r3, [r7, #12]
 8007a02:	f083 0310 	eor.w	r3, r3, #16
 8007a06:	81bb      	strh	r3, [r7, #12]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	441a      	add	r2, r3
 8007a12:	89bb      	ldrh	r3, [r7, #12]
 8007a14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	8013      	strh	r3, [r2, #0]
 8007a28:	e01f      	b.n	8007a6a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a40:	81fb      	strh	r3, [r7, #14]
 8007a42:	89fb      	ldrh	r3, [r7, #14]
 8007a44:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a48:	81fb      	strh	r3, [r7, #14]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	441a      	add	r2, r3
 8007a54:	89fb      	ldrh	r3, [r7, #14]
 8007a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr

08007a76 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b087      	sub	sp, #28
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	7b1b      	ldrb	r3, [r3, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 809d 	bne.w	8007bc4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	785b      	ldrb	r3, [r3, #1]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d04c      	beq.n	8007b2c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	823b      	strh	r3, [r7, #16]
 8007aa0:	8a3b      	ldrh	r3, [r7, #16]
 8007aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d01b      	beq.n	8007ae2 <USB_EPClearStall+0x6c>
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ac0:	81fb      	strh	r3, [r7, #14]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	441a      	add	r2, r3
 8007acc:	89fb      	ldrh	r3, [r7, #14]
 8007ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ada:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	78db      	ldrb	r3, [r3, #3]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d06c      	beq.n	8007bc4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b00:	81bb      	strh	r3, [r7, #12]
 8007b02:	89bb      	ldrh	r3, [r7, #12]
 8007b04:	f083 0320 	eor.w	r3, r3, #32
 8007b08:	81bb      	strh	r3, [r7, #12]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	441a      	add	r2, r3
 8007b14:	89bb      	ldrh	r3, [r7, #12]
 8007b16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	8013      	strh	r3, [r2, #0]
 8007b2a:	e04b      	b.n	8007bc4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	82fb      	strh	r3, [r7, #22]
 8007b3a:	8afb      	ldrh	r3, [r7, #22]
 8007b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01b      	beq.n	8007b7c <USB_EPClearStall+0x106>
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b5a:	82bb      	strh	r3, [r7, #20]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	441a      	add	r2, r3
 8007b66:	8abb      	ldrh	r3, [r7, #20]
 8007b68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b92:	827b      	strh	r3, [r7, #18]
 8007b94:	8a7b      	ldrh	r3, [r7, #18]
 8007b96:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b9a:	827b      	strh	r3, [r7, #18]
 8007b9c:	8a7b      	ldrh	r3, [r7, #18]
 8007b9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ba2:	827b      	strh	r3, [r7, #18]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	441a      	add	r2, r3
 8007bae:	8a7b      	ldrh	r3, [r7, #18]
 8007bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	371c      	adds	r7, #28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr

08007bd0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007bdc:	78fb      	ldrb	r3, [r7, #3]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d103      	bne.n	8007bea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2280      	movs	r2, #128	@ 0x80
 8007be6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr

08007bf6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr

08007c0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bc80      	pop	{r7}
 8007c1c:	4770      	bx	lr

08007c1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c30:	68fb      	ldr	r3, [r7, #12]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr

08007c3c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bc80      	pop	{r7}
 8007c50:	4770      	bx	lr

08007c52 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b08b      	sub	sp, #44	@ 0x2c
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	461a      	mov	r2, r3
 8007c60:	460b      	mov	r3, r1
 8007c62:	80fb      	strh	r3, [r7, #6]
 8007c64:	4613      	mov	r3, r2
 8007c66:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c68:	88bb      	ldrh	r3, [r7, #4]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	085b      	lsrs	r3, r3, #1
 8007c6e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c78:	88fb      	ldrh	r3, [r7, #6]
 8007c7a:	005a      	lsls	r2, r3, #1
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c84:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c8a:	e01e      	b.n	8007cca <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	3301      	adds	r3, #1
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	021b      	lsls	r3, r3, #8
 8007c9a:	b21a      	sxth	r2, r3
 8007c9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	b21b      	sxth	r3, r3
 8007ca4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	8a7a      	ldrh	r2, [r7, #18]
 8007caa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	3302      	adds	r3, #2
 8007cb0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	3302      	adds	r3, #2
 8007cb6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1dd      	bne.n	8007c8c <USB_WritePMA+0x3a>
  }
}
 8007cd0:	bf00      	nop
 8007cd2:	bf00      	nop
 8007cd4:	372c      	adds	r7, #44	@ 0x2c
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bc80      	pop	{r7}
 8007cda:	4770      	bx	lr

08007cdc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b08b      	sub	sp, #44	@ 0x2c
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	461a      	mov	r2, r3
 8007cea:	460b      	mov	r3, r1
 8007cec:	80fb      	strh	r3, [r7, #6]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007cf2:	88bb      	ldrh	r3, [r7, #4]
 8007cf4:	085b      	lsrs	r3, r3, #1
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d02:	88fb      	ldrh	r3, [r7, #6]
 8007d04:	005a      	lsls	r2, r3, #1
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d0e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d14:	e01b      	b.n	8007d4e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	3302      	adds	r3, #2
 8007d22:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	0a1b      	lsrs	r3, r3, #8
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	3302      	adds	r3, #2
 8007d46:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e0      	bne.n	8007d16 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007d54:	88bb      	ldrh	r3, [r7, #4]
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	701a      	strb	r2, [r3, #0]
  }
}
 8007d70:	bf00      	nop
 8007d72:	372c      	adds	r7, #44	@ 0x2c
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr

08007d7a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	460b      	mov	r3, r1
 8007d84:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7c1b      	ldrb	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d115      	bne.n	8007dbe <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d96:	2202      	movs	r2, #2
 8007d98:	2181      	movs	r1, #129	@ 0x81
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f004 fc05 	bl	800c5aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007da6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007daa:	2202      	movs	r2, #2
 8007dac:	2101      	movs	r1, #1
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f004 fbfb 	bl	800c5aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007dbc:	e012      	b.n	8007de4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007dbe:	2340      	movs	r3, #64	@ 0x40
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	2181      	movs	r1, #129	@ 0x81
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f004 fbf0 	bl	800c5aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007dd0:	2340      	movs	r3, #64	@ 0x40
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f004 fbe7 	bl	800c5aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007de4:	2308      	movs	r3, #8
 8007de6:	2203      	movs	r2, #3
 8007de8:	2182      	movs	r1, #130	@ 0x82
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f004 fbdd 	bl	800c5aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007df6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007dfa:	f004 fcfd 	bl	800c7f8 <USBD_static_malloc>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007e10:	2301      	movs	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
 8007e14:	e026      	b.n	8007e64 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e1c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7c1b      	ldrb	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d109      	bne.n	8007e54 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f004 fc9c 	bl	800c78a <USBD_LL_PrepareReceive>
 8007e52:	e007      	b.n	8007e64 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e5a:	2340      	movs	r3, #64	@ 0x40
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f004 fc93 	bl	800c78a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e7e:	2181      	movs	r1, #129	@ 0x81
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f004 fbb8 	bl	800c5f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f004 fbb1 	bl	800c5f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e9c:	2182      	movs	r1, #130	@ 0x82
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f004 fba9 	bl	800c5f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00e      	beq.n	8007ed2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f004 fca3 	bl	800c810 <USBD_static_free>
    pdev->pClassData = NULL;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d039      	beq.n	8007f7a <USBD_CDC_Setup+0x9e>
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	d17f      	bne.n	800800a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	88db      	ldrh	r3, [r3, #6]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d029      	beq.n	8007f66 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	b25b      	sxtb	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	da11      	bge.n	8007f40 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007f28:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	88d2      	ldrh	r2, [r2, #6]
 8007f2e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f30:	6939      	ldr	r1, [r7, #16]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	88db      	ldrh	r3, [r3, #6]
 8007f36:	461a      	mov	r2, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 fa05 	bl	8009348 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007f3e:	e06b      	b.n	8008018 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	785a      	ldrb	r2, [r3, #1]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	88db      	ldrh	r3, [r3, #6]
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f56:	6939      	ldr	r1, [r7, #16]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	88db      	ldrh	r3, [r3, #6]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fa20 	bl	80093a4 <USBD_CtlPrepareRx>
      break;
 8007f64:	e058      	b.n	8008018 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	7850      	ldrb	r0, [r2, #1]
 8007f72:	2200      	movs	r2, #0
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	4798      	blx	r3
      break;
 8007f78:	e04e      	b.n	8008018 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	2b0b      	cmp	r3, #11
 8007f80:	d02e      	beq.n	8007fe0 <USBD_CDC_Setup+0x104>
 8007f82:	2b0b      	cmp	r3, #11
 8007f84:	dc38      	bgt.n	8007ff8 <USBD_CDC_Setup+0x11c>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <USBD_CDC_Setup+0xb4>
 8007f8a:	2b0a      	cmp	r3, #10
 8007f8c:	d014      	beq.n	8007fb8 <USBD_CDC_Setup+0xdc>
 8007f8e:	e033      	b.n	8007ff8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d107      	bne.n	8007faa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007f9a:	f107 030c 	add.w	r3, r7, #12
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 f9d0 	bl	8009348 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fa8:	e02e      	b.n	8008008 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 f961 	bl	8009274 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8007fb6:	e027      	b.n	8008008 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d107      	bne.n	8007fd2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007fc2:	f107 030f 	add.w	r3, r7, #15
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 f9bc 	bl	8009348 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fd0:	e01a      	b.n	8008008 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 f94d 	bl	8009274 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fda:	2302      	movs	r3, #2
 8007fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8007fde:	e013      	b.n	8008008 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d00d      	beq.n	8008006 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 f941 	bl	8009274 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ff6:	e006      	b.n	8008006 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 f93a 	bl	8009274 <USBD_CtlError>
          ret = USBD_FAIL;
 8008000:	2302      	movs	r3, #2
 8008002:	75fb      	strb	r3, [r7, #23]
          break;
 8008004:	e000      	b.n	8008008 <USBD_CDC_Setup+0x12c>
          break;
 8008006:	bf00      	nop
      }
      break;
 8008008:	e006      	b.n	8008018 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 f931 	bl	8009274 <USBD_CtlError>
      ret = USBD_FAIL;
 8008012:	2302      	movs	r3, #2
 8008014:	75fb      	strb	r3, [r7, #23]
      break;
 8008016:	bf00      	nop
  }

  return ret;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	460b      	mov	r3, r1
 800802c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008034:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800803c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008044:	2b00      	cmp	r3, #0
 8008046:	d03a      	beq.n	80080be <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008048:	78fa      	ldrb	r2, [r7, #3]
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	4613      	mov	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	440b      	add	r3, r1
 8008056:	331c      	adds	r3, #28
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d029      	beq.n	80080b2 <USBD_CDC_DataIn+0x90>
 800805e:	78fa      	ldrb	r2, [r7, #3]
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	440b      	add	r3, r1
 800806c:	331c      	adds	r3, #28
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	78f9      	ldrb	r1, [r7, #3]
 8008072:	68b8      	ldr	r0, [r7, #8]
 8008074:	460b      	mov	r3, r1
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	440b      	add	r3, r1
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	4403      	add	r3, r0
 800807e:	3320      	adds	r3, #32
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	fbb2 f1f3 	udiv	r1, r2, r3
 8008086:	fb01 f303 	mul.w	r3, r1, r3
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d110      	bne.n	80080b2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008090:	78fa      	ldrb	r2, [r7, #3]
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	331c      	adds	r3, #28
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080a4:	78f9      	ldrb	r1, [r7, #3]
 80080a6:	2300      	movs	r3, #0
 80080a8:	2200      	movs	r2, #0
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f004 fb4a 	bl	800c744 <USBD_LL_Transmit>
 80080b0:	e003      	b.n	80080ba <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	e000      	b.n	80080c0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80080be:	2302      	movs	r3, #2
  }
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080da:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f004 fb75 	bl	800c7d0 <USBD_LL_GetRxDataSize>
 80080e6:	4602      	mov	r2, r0
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00d      	beq.n	8008114 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800810c:	4611      	mov	r1, r2
 800810e:	4798      	blx	r3

    return USBD_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	e000      	b.n	8008116 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008114:	2302      	movs	r3, #2
  }
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800812c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008134:	2b00      	cmp	r3, #0
 8008136:	d014      	beq.n	8008162 <USBD_CDC_EP0_RxReady+0x44>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800813e:	2bff      	cmp	r3, #255	@ 0xff
 8008140:	d00f      	beq.n	8008162 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008150:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008158:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	22ff      	movs	r2, #255	@ 0xff
 800815e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2243      	movs	r2, #67	@ 0x43
 8008178:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800817a:	4b03      	ldr	r3, [pc, #12]	@ (8008188 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	bc80      	pop	{r7}
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	20000094 	.word	0x20000094

0800818c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2243      	movs	r2, #67	@ 0x43
 8008198:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800819a:	4b03      	ldr	r3, [pc, #12]	@ (80081a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	20000050 	.word	0x20000050

080081ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2243      	movs	r2, #67	@ 0x43
 80081b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80081ba:	4b03      	ldr	r3, [pc, #12]	@ (80081c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	200000d8 	.word	0x200000d8

080081cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	220a      	movs	r2, #10
 80081d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80081da:	4b03      	ldr	r3, [pc, #12]	@ (80081e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081dc:	4618      	mov	r0, r3
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bc80      	pop	{r7}
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	2000000c 	.word	0x2000000c

080081ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80081f6:	2302      	movs	r3, #2
 80081f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d005      	beq.n	800820c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800820c:	7bfb      	ldrb	r3, [r7, #15]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	bc80      	pop	{r7}
 8008216:	4770      	bx	lr

08008218 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	4613      	mov	r3, r2
 8008224:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800822c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008236:	88fa      	ldrh	r2, [r7, #6]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	371c      	adds	r7, #28
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr

0800824a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800824a:	b480      	push	{r7}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800825a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr

08008270 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800827e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01c      	beq.n	80082c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008290:	2b00      	cmp	r3, #0
 8008292:	d115      	bne.n	80082c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	2181      	movs	r1, #129	@ 0x81
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f004 fa44 	bl	800c744 <USBD_LL_Transmit>

      return USBD_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	e002      	b.n	80082c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80082c4:	2302      	movs	r3, #2
  }
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d017      	beq.n	8008318 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	7c1b      	ldrb	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d109      	bne.n	8008304 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082fa:	2101      	movs	r1, #1
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f004 fa44 	bl	800c78a <USBD_LL_PrepareReceive>
 8008302:	e007      	b.n	8008314 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800830a:	2340      	movs	r3, #64	@ 0x40
 800830c:	2101      	movs	r1, #1
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f004 fa3b 	bl	800c78a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	e000      	b.n	800831a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008318:	2302      	movs	r3, #2
  }
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	60f8      	str	r0, [r7, #12]
 800832a:	60b9      	str	r1, [r7, #8]
 800832c:	4613      	mov	r3, r2
 800832e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008336:	2302      	movs	r3, #2
 8008338:	e01a      	b.n	8008370 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	79fa      	ldrb	r2, [r7, #7]
 8008366:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f004 f8a9 	bl	800c4c0 <USBD_LL_Init>

  return USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d006      	beq.n	800839a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]
 8008398:	e001      	b.n	800839e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800839a:	2302      	movs	r3, #2
 800839c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr

080083aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f004 f8de 	bl	800c574 <USBD_LL_Start>

  return USBD_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bc80      	pop	{r7}
 80083d4:	4770      	bx	lr

080083d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80083e2:	2302      	movs	r3, #2
 80083e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00c      	beq.n	800840a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	78fa      	ldrb	r2, [r7, #3]
 80083fa:	4611      	mov	r1, r2
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	4798      	blx	r3
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800840a:	7bfb      	ldrb	r3, [r7, #15]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	78fa      	ldrb	r2, [r7, #3]
 800842a:	4611      	mov	r1, r2
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	4798      	blx	r3

  return USBD_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fed8 	bl	8009202 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008460:	461a      	mov	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800846e:	f003 031f 	and.w	r3, r3, #31
 8008472:	2b02      	cmp	r3, #2
 8008474:	d016      	beq.n	80084a4 <USBD_LL_SetupStage+0x6a>
 8008476:	2b02      	cmp	r3, #2
 8008478:	d81c      	bhi.n	80084b4 <USBD_LL_SetupStage+0x7a>
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <USBD_LL_SetupStage+0x4a>
 800847e:	2b01      	cmp	r3, #1
 8008480:	d008      	beq.n	8008494 <USBD_LL_SetupStage+0x5a>
 8008482:	e017      	b.n	80084b4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f9cb 	bl	8008828 <USBD_StdDevReq>
      break;
 8008492:	e01a      	b.n	80084ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fa2d 	bl	80088fc <USBD_StdItfReq>
      break;
 80084a2:	e012      	b.n	80084ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fa6d 	bl	800898c <USBD_StdEPReq>
      break;
 80084b2:	e00a      	b.n	80084ca <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80084ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f004 f8b6 	bl	800c634 <USBD_LL_StallEP>
      break;
 80084c8:	bf00      	nop
  }

  return USBD_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	460b      	mov	r3, r1
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084e2:	7afb      	ldrb	r3, [r7, #11]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d14b      	bne.n	8008580 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80084ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d134      	bne.n	8008564 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	68da      	ldr	r2, [r3, #12]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	429a      	cmp	r2, r3
 8008504:	d919      	bls.n	800853a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	1ad2      	subs	r2, r2, r3
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800851c:	429a      	cmp	r2, r3
 800851e:	d203      	bcs.n	8008528 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008524:	b29b      	uxth	r3, r3
 8008526:	e002      	b.n	800852e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800852c:	b29b      	uxth	r3, r3
 800852e:	461a      	mov	r2, r3
 8008530:	6879      	ldr	r1, [r7, #4]
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 ff54 	bl	80093e0 <USBD_CtlContinueRx>
 8008538:	e038      	b.n	80085ac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800854c:	2b03      	cmp	r3, #3
 800854e:	d105      	bne.n	800855c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 ff51 	bl	8009404 <USBD_CtlSendStatus>
 8008562:	e023      	b.n	80085ac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800856a:	2b05      	cmp	r3, #5
 800856c:	d11e      	bne.n	80085ac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008576:	2100      	movs	r1, #0
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f004 f85b 	bl	800c634 <USBD_LL_StallEP>
 800857e:	e015      	b.n	80085ac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00d      	beq.n	80085a8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008592:	2b03      	cmp	r3, #3
 8008594:	d108      	bne.n	80085a8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	7afa      	ldrb	r2, [r7, #11]
 80085a0:	4611      	mov	r1, r2
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	4798      	blx	r3
 80085a6:	e001      	b.n	80085ac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085a8:	2302      	movs	r3, #2
 80085aa:	e000      	b.n	80085ae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b086      	sub	sp, #24
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	460b      	mov	r3, r1
 80085c0:	607a      	str	r2, [r7, #4]
 80085c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085c4:	7afb      	ldrb	r3, [r7, #11]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d17f      	bne.n	80086ca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3314      	adds	r3, #20
 80085ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d15c      	bne.n	8008694 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d915      	bls.n	8008612 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	68da      	ldr	r2, [r3, #12]
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	1ad2      	subs	r2, r2, r3
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	461a      	mov	r2, r3
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f000 febe 	bl	8009380 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008604:	2300      	movs	r3, #0
 8008606:	2200      	movs	r2, #0
 8008608:	2100      	movs	r1, #0
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f004 f8bd 	bl	800c78a <USBD_LL_PrepareReceive>
 8008610:	e04e      	b.n	80086b0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	6912      	ldr	r2, [r2, #16]
 800861a:	fbb3 f1f2 	udiv	r1, r3, r2
 800861e:	fb01 f202 	mul.w	r2, r1, r2
 8008622:	1a9b      	subs	r3, r3, r2
 8008624:	2b00      	cmp	r3, #0
 8008626:	d11c      	bne.n	8008662 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008630:	429a      	cmp	r2, r3
 8008632:	d316      	bcc.n	8008662 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800863e:	429a      	cmp	r2, r3
 8008640:	d20f      	bcs.n	8008662 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008642:	2200      	movs	r2, #0
 8008644:	2100      	movs	r1, #0
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 fe9a 	bl	8009380 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008654:	2300      	movs	r3, #0
 8008656:	2200      	movs	r2, #0
 8008658:	2100      	movs	r1, #0
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f004 f895 	bl	800c78a <USBD_LL_PrepareReceive>
 8008660:	e026      	b.n	80086b0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00a      	beq.n	8008684 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008674:	2b03      	cmp	r3, #3
 8008676:	d105      	bne.n	8008684 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008684:	2180      	movs	r1, #128	@ 0x80
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f003 ffd4 	bl	800c634 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 fecc 	bl	800942a <USBD_CtlReceiveStatus>
 8008692:	e00d      	b.n	80086b0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800869a:	2b04      	cmp	r3, #4
 800869c:	d004      	beq.n	80086a8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d103      	bne.n	80086b0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80086a8:	2180      	movs	r1, #128	@ 0x80
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f003 ffc2 	bl	800c634 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d11d      	bne.n	80086f6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f7ff fe81 	bl	80083c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80086c8:	e015      	b.n	80086f6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00d      	beq.n	80086f2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d108      	bne.n	80086f2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	7afa      	ldrb	r2, [r7, #11]
 80086ea:	4611      	mov	r1, r2
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	4798      	blx	r3
 80086f0:	e001      	b.n	80086f6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086f2:	2302      	movs	r3, #2
 80086f4:	e000      	b.n	80086f8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008708:	2340      	movs	r3, #64	@ 0x40
 800870a:	2200      	movs	r2, #0
 800870c:	2100      	movs	r1, #0
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f003 ff4b 	bl	800c5aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2240      	movs	r2, #64	@ 0x40
 8008720:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008724:	2340      	movs	r3, #64	@ 0x40
 8008726:	2200      	movs	r2, #0
 8008728:	2180      	movs	r1, #128	@ 0x80
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f003 ff3d 	bl	800c5aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2240      	movs	r2, #64	@ 0x40
 800873a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008760:	2b00      	cmp	r3, #0
 8008762:	d009      	beq.n	8008778 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	6852      	ldr	r2, [r2, #4]
 8008770:	b2d2      	uxtb	r2, r2
 8008772:	4611      	mov	r1, r2
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	4798      	blx	r3
  }

  return USBD_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	460b      	mov	r3, r1
 800878c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	bc80      	pop	{r7}
 800879e:	4770      	bx	lr

080087a0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2204      	movs	r2, #4
 80087b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bc80      	pop	{r7}
 80087c6:	4770      	bx	lr

080087c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d105      	bne.n	80087e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bc80      	pop	{r7}
 80087f0:	4770      	bx	lr

080087f2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008800:	2b03      	cmp	r3, #3
 8008802:	d10b      	bne.n	800881c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d005      	beq.n	800881c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800883e:	2b40      	cmp	r3, #64	@ 0x40
 8008840:	d005      	beq.n	800884e <USBD_StdDevReq+0x26>
 8008842:	2b40      	cmp	r3, #64	@ 0x40
 8008844:	d84f      	bhi.n	80088e6 <USBD_StdDevReq+0xbe>
 8008846:	2b00      	cmp	r3, #0
 8008848:	d009      	beq.n	800885e <USBD_StdDevReq+0x36>
 800884a:	2b20      	cmp	r3, #32
 800884c:	d14b      	bne.n	80088e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	4798      	blx	r3
      break;
 800885c:	e048      	b.n	80088f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	785b      	ldrb	r3, [r3, #1]
 8008862:	2b09      	cmp	r3, #9
 8008864:	d839      	bhi.n	80088da <USBD_StdDevReq+0xb2>
 8008866:	a201      	add	r2, pc, #4	@ (adr r2, 800886c <USBD_StdDevReq+0x44>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	080088bd 	.word	0x080088bd
 8008870:	080088d1 	.word	0x080088d1
 8008874:	080088db 	.word	0x080088db
 8008878:	080088c7 	.word	0x080088c7
 800887c:	080088db 	.word	0x080088db
 8008880:	0800889f 	.word	0x0800889f
 8008884:	08008895 	.word	0x08008895
 8008888:	080088db 	.word	0x080088db
 800888c:	080088b3 	.word	0x080088b3
 8008890:	080088a9 	.word	0x080088a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f9dc 	bl	8008c54 <USBD_GetDescriptor>
          break;
 800889c:	e022      	b.n	80088e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800889e:	6839      	ldr	r1, [r7, #0]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fb3f 	bl	8008f24 <USBD_SetAddress>
          break;
 80088a6:	e01d      	b.n	80088e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fb7e 	bl	8008fac <USBD_SetConfig>
          break;
 80088b0:	e018      	b.n	80088e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fc07 	bl	80090c8 <USBD_GetConfig>
          break;
 80088ba:	e013      	b.n	80088e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fc37 	bl	8009132 <USBD_GetStatus>
          break;
 80088c4:	e00e      	b.n	80088e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fc65 	bl	8009198 <USBD_SetFeature>
          break;
 80088ce:	e009      	b.n	80088e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fc74 	bl	80091c0 <USBD_ClrFeature>
          break;
 80088d8:	e004      	b.n	80088e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fcc9 	bl	8009274 <USBD_CtlError>
          break;
 80088e2:	bf00      	nop
      }
      break;
 80088e4:	e004      	b.n	80088f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fcc3 	bl	8009274 <USBD_CtlError>
      break;
 80088ee:	bf00      	nop
  }

  return ret;
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop

080088fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008912:	2b40      	cmp	r3, #64	@ 0x40
 8008914:	d005      	beq.n	8008922 <USBD_StdItfReq+0x26>
 8008916:	2b40      	cmp	r3, #64	@ 0x40
 8008918:	d82e      	bhi.n	8008978 <USBD_StdItfReq+0x7c>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <USBD_StdItfReq+0x26>
 800891e:	2b20      	cmp	r3, #32
 8008920:	d12a      	bne.n	8008978 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008928:	3b01      	subs	r3, #1
 800892a:	2b02      	cmp	r3, #2
 800892c:	d81d      	bhi.n	800896a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	889b      	ldrh	r3, [r3, #4]
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b01      	cmp	r3, #1
 8008936:	d813      	bhi.n	8008960 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
 8008946:	4603      	mov	r3, r0
 8008948:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	88db      	ldrh	r3, [r3, #6]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d110      	bne.n	8008974 <USBD_StdItfReq+0x78>
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10d      	bne.n	8008974 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fd53 	bl	8009404 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800895e:	e009      	b.n	8008974 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fc86 	bl	8009274 <USBD_CtlError>
          break;
 8008968:	e004      	b.n	8008974 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fc81 	bl	8009274 <USBD_CtlError>
          break;
 8008972:	e000      	b.n	8008976 <USBD_StdItfReq+0x7a>
          break;
 8008974:	bf00      	nop
      }
      break;
 8008976:	e004      	b.n	8008982 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fc7a 	bl	8009274 <USBD_CtlError>
      break;
 8008980:	bf00      	nop
  }

  return USBD_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	889b      	ldrh	r3, [r3, #4]
 800899e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089a8:	2b40      	cmp	r3, #64	@ 0x40
 80089aa:	d007      	beq.n	80089bc <USBD_StdEPReq+0x30>
 80089ac:	2b40      	cmp	r3, #64	@ 0x40
 80089ae:	f200 8146 	bhi.w	8008c3e <USBD_StdEPReq+0x2b2>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <USBD_StdEPReq+0x40>
 80089b6:	2b20      	cmp	r3, #32
 80089b8:	f040 8141 	bne.w	8008c3e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	4798      	blx	r3
      break;
 80089ca:	e13d      	b.n	8008c48 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089d4:	2b20      	cmp	r3, #32
 80089d6:	d10a      	bne.n	80089ee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
 80089e6:	4603      	mov	r3, r0
 80089e8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	e12d      	b.n	8008c4a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	785b      	ldrb	r3, [r3, #1]
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d007      	beq.n	8008a06 <USBD_StdEPReq+0x7a>
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	f300 811b 	bgt.w	8008c32 <USBD_StdEPReq+0x2a6>
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d072      	beq.n	8008ae6 <USBD_StdEPReq+0x15a>
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d03a      	beq.n	8008a7a <USBD_StdEPReq+0xee>
 8008a04:	e115      	b.n	8008c32 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d002      	beq.n	8008a16 <USBD_StdEPReq+0x8a>
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d015      	beq.n	8008a40 <USBD_StdEPReq+0xb4>
 8008a14:	e02b      	b.n	8008a6e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00c      	beq.n	8008a36 <USBD_StdEPReq+0xaa>
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b80      	cmp	r3, #128	@ 0x80
 8008a20:	d009      	beq.n	8008a36 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f003 fe04 	bl	800c634 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a2c:	2180      	movs	r1, #128	@ 0x80
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f003 fe00 	bl	800c634 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a34:	e020      	b.n	8008a78 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fc1b 	bl	8009274 <USBD_CtlError>
              break;
 8008a3e:	e01b      	b.n	8008a78 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	885b      	ldrh	r3, [r3, #2]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10e      	bne.n	8008a66 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00b      	beq.n	8008a66 <USBD_StdEPReq+0xda>
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	2b80      	cmp	r3, #128	@ 0x80
 8008a52:	d008      	beq.n	8008a66 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	88db      	ldrh	r3, [r3, #6]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d104      	bne.n	8008a66 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f003 fde7 	bl	800c634 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fccc 	bl	8009404 <USBD_CtlSendStatus>

              break;
 8008a6c:	e004      	b.n	8008a78 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fbff 	bl	8009274 <USBD_CtlError>
              break;
 8008a76:	bf00      	nop
          }
          break;
 8008a78:	e0e0      	b.n	8008c3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d002      	beq.n	8008a8a <USBD_StdEPReq+0xfe>
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d015      	beq.n	8008ab4 <USBD_StdEPReq+0x128>
 8008a88:	e026      	b.n	8008ad8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00c      	beq.n	8008aaa <USBD_StdEPReq+0x11e>
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	2b80      	cmp	r3, #128	@ 0x80
 8008a94:	d009      	beq.n	8008aaa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f003 fdca 	bl	800c634 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008aa0:	2180      	movs	r1, #128	@ 0x80
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f003 fdc6 	bl	800c634 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008aa8:	e01c      	b.n	8008ae4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fbe1 	bl	8009274 <USBD_CtlError>
              break;
 8008ab2:	e017      	b.n	8008ae4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	885b      	ldrh	r3, [r3, #2]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d112      	bne.n	8008ae2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
 8008abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d004      	beq.n	8008ad0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f003 fdd1 	bl	800c672 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fc97 	bl	8009404 <USBD_CtlSendStatus>
              }
              break;
 8008ad6:	e004      	b.n	8008ae2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fbca 	bl	8009274 <USBD_CtlError>
              break;
 8008ae0:	e000      	b.n	8008ae4 <USBD_StdEPReq+0x158>
              break;
 8008ae2:	bf00      	nop
          }
          break;
 8008ae4:	e0aa      	b.n	8008c3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d002      	beq.n	8008af6 <USBD_StdEPReq+0x16a>
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d032      	beq.n	8008b5a <USBD_StdEPReq+0x1ce>
 8008af4:	e097      	b.n	8008c26 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d007      	beq.n	8008b0c <USBD_StdEPReq+0x180>
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	2b80      	cmp	r3, #128	@ 0x80
 8008b00:	d004      	beq.n	8008b0c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fbb5 	bl	8009274 <USBD_CtlError>
                break;
 8008b0a:	e091      	b.n	8008c30 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	da0b      	bge.n	8008b2c <USBD_StdEPReq+0x1a0>
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	3310      	adds	r3, #16
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	4413      	add	r3, r2
 8008b28:	3304      	adds	r3, #4
 8008b2a:	e00b      	b.n	8008b44 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	4413      	add	r3, r2
 8008b42:	3304      	adds	r3, #4
 8008b44:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fbf8 	bl	8009348 <USBD_CtlSendData>
              break;
 8008b58:	e06a      	b.n	8008c30 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	da11      	bge.n	8008b86 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
 8008b64:	f003 020f 	and.w	r2, r3, #15
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	440b      	add	r3, r1
 8008b74:	3318      	adds	r3, #24
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d117      	bne.n	8008bac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fb78 	bl	8009274 <USBD_CtlError>
                  break;
 8008b84:	e054      	b.n	8008c30 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	f003 020f 	and.w	r2, r3, #15
 8008b8c:	6879      	ldr	r1, [r7, #4]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	440b      	add	r3, r1
 8008b98:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d104      	bne.n	8008bac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fb65 	bl	8009274 <USBD_CtlError>
                  break;
 8008baa:	e041      	b.n	8008c30 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	da0b      	bge.n	8008bcc <USBD_StdEPReq+0x240>
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
 8008bb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bba:	4613      	mov	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	3310      	adds	r3, #16
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	3304      	adds	r3, #4
 8008bca:	e00b      	b.n	8008be4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	4413      	add	r3, r2
 8008be2:	3304      	adds	r3, #4
 8008be4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <USBD_StdEPReq+0x266>
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	2b80      	cmp	r3, #128	@ 0x80
 8008bf0:	d103      	bne.n	8008bfa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	e00e      	b.n	8008c18 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f003 fd56 	bl	800c6b0 <USBD_LL_IsStallEP>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	e002      	b.n	8008c18 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fb92 	bl	8009348 <USBD_CtlSendData>
              break;
 8008c24:	e004      	b.n	8008c30 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fb23 	bl	8009274 <USBD_CtlError>
              break;
 8008c2e:	bf00      	nop
          }
          break;
 8008c30:	e004      	b.n	8008c3c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fb1d 	bl	8009274 <USBD_CtlError>
          break;
 8008c3a:	bf00      	nop
      }
      break;
 8008c3c:	e004      	b.n	8008c48 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fb17 	bl	8009274 <USBD_CtlError>
      break;
 8008c46:	bf00      	nop
  }

  return ret;
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	885b      	ldrh	r3, [r3, #2]
 8008c6e:	0a1b      	lsrs	r3, r3, #8
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	3b01      	subs	r3, #1
 8008c74:	2b06      	cmp	r3, #6
 8008c76:	f200 8128 	bhi.w	8008eca <USBD_GetDescriptor+0x276>
 8008c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <USBD_GetDescriptor+0x2c>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008c9d 	.word	0x08008c9d
 8008c84:	08008cb5 	.word	0x08008cb5
 8008c88:	08008cf5 	.word	0x08008cf5
 8008c8c:	08008ecb 	.word	0x08008ecb
 8008c90:	08008ecb 	.word	0x08008ecb
 8008c94:	08008e6b 	.word	0x08008e6b
 8008c98:	08008e97 	.word	0x08008e97
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	7c12      	ldrb	r2, [r2, #16]
 8008ca8:	f107 0108 	add.w	r1, r7, #8
 8008cac:	4610      	mov	r0, r2
 8008cae:	4798      	blx	r3
 8008cb0:	60f8      	str	r0, [r7, #12]
      break;
 8008cb2:	e112      	b.n	8008eda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	7c1b      	ldrb	r3, [r3, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10d      	bne.n	8008cd8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc4:	f107 0208 	add.w	r2, r7, #8
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4798      	blx	r3
 8008ccc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cd6:	e100      	b.n	8008eda <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce0:	f107 0208 	add.w	r2, r7, #8
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4798      	blx	r3
 8008ce8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3301      	adds	r3, #1
 8008cee:	2202      	movs	r2, #2
 8008cf0:	701a      	strb	r2, [r3, #0]
      break;
 8008cf2:	e0f2      	b.n	8008eda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	885b      	ldrh	r3, [r3, #2]
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b05      	cmp	r3, #5
 8008cfc:	f200 80ac 	bhi.w	8008e58 <USBD_GetDescriptor+0x204>
 8008d00:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <USBD_GetDescriptor+0xb4>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d21 	.word	0x08008d21
 8008d0c:	08008d55 	.word	0x08008d55
 8008d10:	08008d89 	.word	0x08008d89
 8008d14:	08008dbd 	.word	0x08008dbd
 8008d18:	08008df1 	.word	0x08008df1
 8008d1c:	08008e25 	.word	0x08008e25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00b      	beq.n	8008d44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	7c12      	ldrb	r2, [r2, #16]
 8008d38:	f107 0108 	add.w	r1, r7, #8
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4798      	blx	r3
 8008d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d42:	e091      	b.n	8008e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa94 	bl	8009274 <USBD_CtlError>
            err++;
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	72fb      	strb	r3, [r7, #11]
          break;
 8008d52:	e089      	b.n	8008e68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00b      	beq.n	8008d78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	7c12      	ldrb	r2, [r2, #16]
 8008d6c:	f107 0108 	add.w	r1, r7, #8
 8008d70:	4610      	mov	r0, r2
 8008d72:	4798      	blx	r3
 8008d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d76:	e077      	b.n	8008e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fa7a 	bl	8009274 <USBD_CtlError>
            err++;
 8008d80:	7afb      	ldrb	r3, [r7, #11]
 8008d82:	3301      	adds	r3, #1
 8008d84:	72fb      	strb	r3, [r7, #11]
          break;
 8008d86:	e06f      	b.n	8008e68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00b      	beq.n	8008dac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	7c12      	ldrb	r2, [r2, #16]
 8008da0:	f107 0108 	add.w	r1, r7, #8
 8008da4:	4610      	mov	r0, r2
 8008da6:	4798      	blx	r3
 8008da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008daa:	e05d      	b.n	8008e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fa60 	bl	8009274 <USBD_CtlError>
            err++;
 8008db4:	7afb      	ldrb	r3, [r7, #11]
 8008db6:	3301      	adds	r3, #1
 8008db8:	72fb      	strb	r3, [r7, #11]
          break;
 8008dba:	e055      	b.n	8008e68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	7c12      	ldrb	r2, [r2, #16]
 8008dd4:	f107 0108 	add.w	r1, r7, #8
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4798      	blx	r3
 8008ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dde:	e043      	b.n	8008e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fa46 	bl	8009274 <USBD_CtlError>
            err++;
 8008de8:	7afb      	ldrb	r3, [r7, #11]
 8008dea:	3301      	adds	r3, #1
 8008dec:	72fb      	strb	r3, [r7, #11]
          break;
 8008dee:	e03b      	b.n	8008e68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00b      	beq.n	8008e14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	7c12      	ldrb	r2, [r2, #16]
 8008e08:	f107 0108 	add.w	r1, r7, #8
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	4798      	blx	r3
 8008e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e12:	e029      	b.n	8008e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa2c 	bl	8009274 <USBD_CtlError>
            err++;
 8008e1c:	7afb      	ldrb	r3, [r7, #11]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	72fb      	strb	r3, [r7, #11]
          break;
 8008e22:	e021      	b.n	8008e68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00b      	beq.n	8008e48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	7c12      	ldrb	r2, [r2, #16]
 8008e3c:	f107 0108 	add.w	r1, r7, #8
 8008e40:	4610      	mov	r0, r2
 8008e42:	4798      	blx	r3
 8008e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e46:	e00f      	b.n	8008e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa12 	bl	8009274 <USBD_CtlError>
            err++;
 8008e50:	7afb      	ldrb	r3, [r7, #11]
 8008e52:	3301      	adds	r3, #1
 8008e54:	72fb      	strb	r3, [r7, #11]
          break;
 8008e56:	e007      	b.n	8008e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fa0a 	bl	8009274 <USBD_CtlError>
          err++;
 8008e60:	7afb      	ldrb	r3, [r7, #11]
 8008e62:	3301      	adds	r3, #1
 8008e64:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008e66:	e038      	b.n	8008eda <USBD_GetDescriptor+0x286>
 8008e68:	e037      	b.n	8008eda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	7c1b      	ldrb	r3, [r3, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d109      	bne.n	8008e86 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e7a:	f107 0208 	add.w	r2, r7, #8
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4798      	blx	r3
 8008e82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e84:	e029      	b.n	8008eda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f9f3 	bl	8009274 <USBD_CtlError>
        err++;
 8008e8e:	7afb      	ldrb	r3, [r7, #11]
 8008e90:	3301      	adds	r3, #1
 8008e92:	72fb      	strb	r3, [r7, #11]
      break;
 8008e94:	e021      	b.n	8008eda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	7c1b      	ldrb	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10d      	bne.n	8008eba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea6:	f107 0208 	add.w	r2, r7, #8
 8008eaa:	4610      	mov	r0, r2
 8008eac:	4798      	blx	r3
 8008eae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	2207      	movs	r2, #7
 8008eb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eb8:	e00f      	b.n	8008eda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f9d9 	bl	8009274 <USBD_CtlError>
        err++;
 8008ec2:	7afb      	ldrb	r3, [r7, #11]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ec8:	e007      	b.n	8008eda <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f9d1 	bl	8009274 <USBD_CtlError>
      err++;
 8008ed2:	7afb      	ldrb	r3, [r7, #11]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ed8:	bf00      	nop
  }

  if (err != 0U)
 8008eda:	7afb      	ldrb	r3, [r7, #11]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d11c      	bne.n	8008f1a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ee0:	893b      	ldrh	r3, [r7, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d011      	beq.n	8008f0a <USBD_GetDescriptor+0x2b6>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	88db      	ldrh	r3, [r3, #6]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00d      	beq.n	8008f0a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	88da      	ldrh	r2, [r3, #6]
 8008ef2:	893b      	ldrh	r3, [r7, #8]
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	bf28      	it	cs
 8008ef8:	4613      	movcs	r3, r2
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008efe:	893b      	ldrh	r3, [r7, #8]
 8008f00:	461a      	mov	r2, r3
 8008f02:	68f9      	ldr	r1, [r7, #12]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fa1f 	bl	8009348 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	88db      	ldrh	r3, [r3, #6]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d104      	bne.n	8008f1c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa76 	bl	8009404 <USBD_CtlSendStatus>
 8008f18:	e000      	b.n	8008f1c <USBD_GetDescriptor+0x2c8>
    return;
 8008f1a:	bf00      	nop
    }
  }
}
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop

08008f24 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	889b      	ldrh	r3, [r3, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d130      	bne.n	8008f98 <USBD_SetAddress+0x74>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	88db      	ldrh	r3, [r3, #6]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d12c      	bne.n	8008f98 <USBD_SetAddress+0x74>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	885b      	ldrh	r3, [r3, #2]
 8008f42:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f44:	d828      	bhi.n	8008f98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	885b      	ldrh	r3, [r3, #2]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d104      	bne.n	8008f66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f988 	bl	8009274 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f64:	e01d      	b.n	8008fa2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	7bfa      	ldrb	r2, [r7, #15]
 8008f6a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f003 fbc7 	bl	800c706 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fa43 	bl	8009404 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8c:	e009      	b.n	8008fa2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f96:	e004      	b.n	8008fa2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f96a 	bl	8009274 <USBD_CtlError>
  }
}
 8008fa0:	bf00      	nop
 8008fa2:	bf00      	nop
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	885b      	ldrh	r3, [r3, #2]
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	4b41      	ldr	r3, [pc, #260]	@ (80090c4 <USBD_SetConfig+0x118>)
 8008fbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fc0:	4b40      	ldr	r3, [pc, #256]	@ (80090c4 <USBD_SetConfig+0x118>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d904      	bls.n	8008fd2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f952 	bl	8009274 <USBD_CtlError>
 8008fd0:	e075      	b.n	80090be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d002      	beq.n	8008fe2 <USBD_SetConfig+0x36>
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d023      	beq.n	8009028 <USBD_SetConfig+0x7c>
 8008fe0:	e062      	b.n	80090a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008fe2:	4b38      	ldr	r3, [pc, #224]	@ (80090c4 <USBD_SetConfig+0x118>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d01a      	beq.n	8009020 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008fea:	4b36      	ldr	r3, [pc, #216]	@ (80090c4 <USBD_SetConfig+0x118>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2203      	movs	r2, #3
 8008ff8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ffc:	4b31      	ldr	r3, [pc, #196]	@ (80090c4 <USBD_SetConfig+0x118>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7ff f9e7 	bl	80083d6 <USBD_SetClassConfig>
 8009008:	4603      	mov	r3, r0
 800900a:	2b02      	cmp	r3, #2
 800900c:	d104      	bne.n	8009018 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f92f 	bl	8009274 <USBD_CtlError>
            return;
 8009016:	e052      	b.n	80090be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f9f3 	bl	8009404 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800901e:	e04e      	b.n	80090be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f9ef 	bl	8009404 <USBD_CtlSendStatus>
        break;
 8009026:	e04a      	b.n	80090be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009028:	4b26      	ldr	r3, [pc, #152]	@ (80090c4 <USBD_SetConfig+0x118>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d112      	bne.n	8009056 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009038:	4b22      	ldr	r3, [pc, #136]	@ (80090c4 <USBD_SetConfig+0x118>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	461a      	mov	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009042:	4b20      	ldr	r3, [pc, #128]	@ (80090c4 <USBD_SetConfig+0x118>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7ff f9e3 	bl	8008414 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f9d8 	bl	8009404 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009054:	e033      	b.n	80090be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009056:	4b1b      	ldr	r3, [pc, #108]	@ (80090c4 <USBD_SetConfig+0x118>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d01d      	beq.n	80090a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	b2db      	uxtb	r3, r3
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7ff f9d1 	bl	8008414 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009072:	4b14      	ldr	r3, [pc, #80]	@ (80090c4 <USBD_SetConfig+0x118>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800907c:	4b11      	ldr	r3, [pc, #68]	@ (80090c4 <USBD_SetConfig+0x118>)
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff f9a7 	bl	80083d6 <USBD_SetClassConfig>
 8009088:	4603      	mov	r3, r0
 800908a:	2b02      	cmp	r3, #2
 800908c:	d104      	bne.n	8009098 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f8ef 	bl	8009274 <USBD_CtlError>
            return;
 8009096:	e012      	b.n	80090be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f9b3 	bl	8009404 <USBD_CtlSendStatus>
        break;
 800909e:	e00e      	b.n	80090be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f9af 	bl	8009404 <USBD_CtlSendStatus>
        break;
 80090a6:	e00a      	b.n	80090be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f8e2 	bl	8009274 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80090b0:	4b04      	ldr	r3, [pc, #16]	@ (80090c4 <USBD_SetConfig+0x118>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff f9ac 	bl	8008414 <USBD_ClrClassConfig>
        break;
 80090bc:	bf00      	nop
    }
  }
}
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	200002b8 	.word	0x200002b8

080090c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	88db      	ldrh	r3, [r3, #6]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d004      	beq.n	80090e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f8c9 	bl	8009274 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80090e2:	e022      	b.n	800912a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	dc02      	bgt.n	80090f4 <USBD_GetConfig+0x2c>
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	dc03      	bgt.n	80090fa <USBD_GetConfig+0x32>
 80090f2:	e015      	b.n	8009120 <USBD_GetConfig+0x58>
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d00b      	beq.n	8009110 <USBD_GetConfig+0x48>
 80090f8:	e012      	b.n	8009120 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3308      	adds	r3, #8
 8009104:	2201      	movs	r2, #1
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f91d 	bl	8009348 <USBD_CtlSendData>
        break;
 800910e:	e00c      	b.n	800912a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3304      	adds	r3, #4
 8009114:	2201      	movs	r2, #1
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f915 	bl	8009348 <USBD_CtlSendData>
        break;
 800911e:	e004      	b.n	800912a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f8a6 	bl	8009274 <USBD_CtlError>
        break;
 8009128:	bf00      	nop
}
 800912a:	bf00      	nop
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b082      	sub	sp, #8
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009142:	3b01      	subs	r3, #1
 8009144:	2b02      	cmp	r3, #2
 8009146:	d81e      	bhi.n	8009186 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	88db      	ldrh	r3, [r3, #6]
 800914c:	2b02      	cmp	r3, #2
 800914e:	d004      	beq.n	800915a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f88e 	bl	8009274 <USBD_CtlError>
        break;
 8009158:	e01a      	b.n	8009190 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2201      	movs	r2, #1
 800915e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009166:	2b00      	cmp	r3, #0
 8009168:	d005      	beq.n	8009176 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f043 0202 	orr.w	r2, r3, #2
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	330c      	adds	r3, #12
 800917a:	2202      	movs	r2, #2
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f8e2 	bl	8009348 <USBD_CtlSendData>
      break;
 8009184:	e004      	b.n	8009190 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f873 	bl	8009274 <USBD_CtlError>
      break;
 800918e:	bf00      	nop
  }
}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	885b      	ldrh	r3, [r3, #2]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d106      	bne.n	80091b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f926 	bl	8009404 <USBD_CtlSendStatus>
  }
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d0:	3b01      	subs	r3, #1
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d80b      	bhi.n	80091ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	885b      	ldrh	r3, [r3, #2]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d10c      	bne.n	80091f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f90c 	bl	8009404 <USBD_CtlSendStatus>
      }
      break;
 80091ec:	e004      	b.n	80091f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f83f 	bl	8009274 <USBD_CtlError>
      break;
 80091f6:	e000      	b.n	80091fa <USBD_ClrFeature+0x3a>
      break;
 80091f8:	bf00      	nop
  }
}
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781a      	ldrb	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	785a      	ldrb	r2, [r3, #1]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	3302      	adds	r3, #2
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	3303      	adds	r3, #3
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	021b      	lsls	r3, r3, #8
 800922c:	b29b      	uxth	r3, r3
 800922e:	4413      	add	r3, r2
 8009230:	b29a      	uxth	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	3304      	adds	r3, #4
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	461a      	mov	r2, r3
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	3305      	adds	r3, #5
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	021b      	lsls	r3, r3, #8
 8009246:	b29b      	uxth	r3, r3
 8009248:	4413      	add	r3, r2
 800924a:	b29a      	uxth	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	3306      	adds	r3, #6
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	3307      	adds	r3, #7
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	b29b      	uxth	r3, r3
 8009262:	4413      	add	r3, r2
 8009264:	b29a      	uxth	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	80da      	strh	r2, [r3, #6]

}
 800926a:	bf00      	nop
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	bc80      	pop	{r7}
 8009272:	4770      	bx	lr

08009274 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800927e:	2180      	movs	r1, #128	@ 0x80
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f003 f9d7 	bl	800c634 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009286:	2100      	movs	r1, #0
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f003 f9d3 	bl	800c634 <USBD_LL_StallEP>
}
 800928e:	bf00      	nop
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b086      	sub	sp, #24
 800929a:	af00      	add	r7, sp, #0
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d032      	beq.n	8009312 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 f834 	bl	800931a <USBD_GetLen>
 80092b2:	4603      	mov	r3, r0
 80092b4:	3301      	adds	r3, #1
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	75fa      	strb	r2, [r7, #23]
 80092c6:	461a      	mov	r2, r3
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	4413      	add	r3, r2
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	7812      	ldrb	r2, [r2, #0]
 80092d0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	75fa      	strb	r2, [r7, #23]
 80092d8:	461a      	mov	r2, r3
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	4413      	add	r3, r2
 80092de:	2203      	movs	r2, #3
 80092e0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80092e2:	e012      	b.n	800930a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	60fa      	str	r2, [r7, #12]
 80092ea:	7dfa      	ldrb	r2, [r7, #23]
 80092ec:	1c51      	adds	r1, r2, #1
 80092ee:	75f9      	strb	r1, [r7, #23]
 80092f0:	4611      	mov	r1, r2
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	440a      	add	r2, r1
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
 80092fc:	1c5a      	adds	r2, r3, #1
 80092fe:	75fa      	strb	r2, [r7, #23]
 8009300:	461a      	mov	r2, r3
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	4413      	add	r3, r2
 8009306:	2200      	movs	r2, #0
 8009308:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1e8      	bne.n	80092e4 <USBD_GetString+0x4e>
    }
  }
}
 8009312:	bf00      	nop
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800931a:	b480      	push	{r7}
 800931c:	b085      	sub	sp, #20
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009326:	e005      	b.n	8009334 <USBD_GetLen+0x1a>
  {
    len++;
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	3301      	adds	r3, #1
 800932c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3301      	adds	r3, #1
 8009332:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1f5      	bne.n	8009328 <USBD_GetLen+0xe>
  }

  return len;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	bc80      	pop	{r7}
 8009346:	4770      	bx	lr

08009348 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	4613      	mov	r3, r2
 8009354:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2202      	movs	r2, #2
 800935a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800935e:	88fa      	ldrh	r2, [r7, #6]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009364:	88fa      	ldrh	r2, [r7, #6]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800936a:	88fb      	ldrh	r3, [r7, #6]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	2100      	movs	r1, #0
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f003 f9e7 	bl	800c744 <USBD_LL_Transmit>

  return USBD_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800938e:	88fb      	ldrh	r3, [r7, #6]
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	2100      	movs	r1, #0
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f003 f9d5 	bl	800c744 <USBD_LL_Transmit>

  return USBD_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	4613      	mov	r3, r2
 80093b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2203      	movs	r2, #3
 80093b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80093ba:	88fa      	ldrh	r2, [r7, #6]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80093c2:	88fa      	ldrh	r2, [r7, #6]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093ca:	88fb      	ldrh	r3, [r7, #6]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	2100      	movs	r1, #0
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f003 f9da 	bl	800c78a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	4613      	mov	r3, r2
 80093ec:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093ee:	88fb      	ldrh	r3, [r7, #6]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	2100      	movs	r1, #0
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f003 f9c8 	bl	800c78a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2204      	movs	r2, #4
 8009410:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009414:	2300      	movs	r3, #0
 8009416:	2200      	movs	r2, #0
 8009418:	2100      	movs	r1, #0
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f003 f992 	bl	800c744 <USBD_LL_Transmit>

  return USBD_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2205      	movs	r2, #5
 8009436:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800943a:	2300      	movs	r3, #0
 800943c:	2200      	movs	r2, #0
 800943e:	2100      	movs	r1, #0
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f003 f9a2 	bl	800c78a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <__NVIC_SetPriority>:
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	6039      	str	r1, [r7, #0]
 800945a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800945c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009460:	2b00      	cmp	r3, #0
 8009462:	db0a      	blt.n	800947a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	b2da      	uxtb	r2, r3
 8009468:	490c      	ldr	r1, [pc, #48]	@ (800949c <__NVIC_SetPriority+0x4c>)
 800946a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800946e:	0112      	lsls	r2, r2, #4
 8009470:	b2d2      	uxtb	r2, r2
 8009472:	440b      	add	r3, r1
 8009474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009478:	e00a      	b.n	8009490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	b2da      	uxtb	r2, r3
 800947e:	4908      	ldr	r1, [pc, #32]	@ (80094a0 <__NVIC_SetPriority+0x50>)
 8009480:	79fb      	ldrb	r3, [r7, #7]
 8009482:	f003 030f 	and.w	r3, r3, #15
 8009486:	3b04      	subs	r3, #4
 8009488:	0112      	lsls	r2, r2, #4
 800948a:	b2d2      	uxtb	r2, r2
 800948c:	440b      	add	r3, r1
 800948e:	761a      	strb	r2, [r3, #24]
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	bc80      	pop	{r7}
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	e000e100 	.word	0xe000e100
 80094a0:	e000ed00 	.word	0xe000ed00

080094a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80094a8:	4b05      	ldr	r3, [pc, #20]	@ (80094c0 <SysTick_Handler+0x1c>)
 80094aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80094ac:	f001 fd3a 	bl	800af24 <xTaskGetSchedulerState>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d001      	beq.n	80094ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80094b6:	f002 fadf 	bl	800ba78 <xPortSysTickHandler>
  }
}
 80094ba:	bf00      	nop
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	e000e010 	.word	0xe000e010

080094c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80094c4:	b580      	push	{r7, lr}
 80094c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80094c8:	2100      	movs	r1, #0
 80094ca:	f06f 0004 	mvn.w	r0, #4
 80094ce:	f7ff ffbf 	bl	8009450 <__NVIC_SetPriority>
#endif
}
 80094d2:	bf00      	nop
 80094d4:	bd80      	pop	{r7, pc}
	...

080094d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094de:	f3ef 8305 	mrs	r3, IPSR
 80094e2:	603b      	str	r3, [r7, #0]
  return(result);
 80094e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80094ea:	f06f 0305 	mvn.w	r3, #5
 80094ee:	607b      	str	r3, [r7, #4]
 80094f0:	e00c      	b.n	800950c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80094f2:	4b09      	ldr	r3, [pc, #36]	@ (8009518 <osKernelInitialize+0x40>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d105      	bne.n	8009506 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80094fa:	4b07      	ldr	r3, [pc, #28]	@ (8009518 <osKernelInitialize+0x40>)
 80094fc:	2201      	movs	r2, #1
 80094fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009500:	2300      	movs	r3, #0
 8009502:	607b      	str	r3, [r7, #4]
 8009504:	e002      	b.n	800950c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009506:	f04f 33ff 	mov.w	r3, #4294967295
 800950a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800950c:	687b      	ldr	r3, [r7, #4]
}
 800950e:	4618      	mov	r0, r3
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	bc80      	pop	{r7}
 8009516:	4770      	bx	lr
 8009518:	200002bc 	.word	0x200002bc

0800951c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009522:	f3ef 8305 	mrs	r3, IPSR
 8009526:	603b      	str	r3, [r7, #0]
  return(result);
 8009528:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <osKernelStart+0x1a>
    stat = osErrorISR;
 800952e:	f06f 0305 	mvn.w	r3, #5
 8009532:	607b      	str	r3, [r7, #4]
 8009534:	e010      	b.n	8009558 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009536:	4b0b      	ldr	r3, [pc, #44]	@ (8009564 <osKernelStart+0x48>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d109      	bne.n	8009552 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800953e:	f7ff ffc1 	bl	80094c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009542:	4b08      	ldr	r3, [pc, #32]	@ (8009564 <osKernelStart+0x48>)
 8009544:	2202      	movs	r2, #2
 8009546:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009548:	f001 f88c 	bl	800a664 <vTaskStartScheduler>
      stat = osOK;
 800954c:	2300      	movs	r3, #0
 800954e:	607b      	str	r3, [r7, #4]
 8009550:	e002      	b.n	8009558 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009552:	f04f 33ff 	mov.w	r3, #4294967295
 8009556:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009558:	687b      	ldr	r3, [r7, #4]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	200002bc 	.word	0x200002bc

08009568 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009568:	b580      	push	{r7, lr}
 800956a:	b08e      	sub	sp, #56	@ 0x38
 800956c:	af04      	add	r7, sp, #16
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009574:	2300      	movs	r3, #0
 8009576:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009578:	f3ef 8305 	mrs	r3, IPSR
 800957c:	617b      	str	r3, [r7, #20]
  return(result);
 800957e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009580:	2b00      	cmp	r3, #0
 8009582:	d17f      	bne.n	8009684 <osThreadNew+0x11c>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d07c      	beq.n	8009684 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800958a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800958e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009590:	2318      	movs	r3, #24
 8009592:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009594:	2300      	movs	r3, #0
 8009596:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009598:	f04f 33ff 	mov.w	r3, #4294967295
 800959c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d045      	beq.n	8009630 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <osThreadNew+0x4a>
        name = attr->name;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d002      	beq.n	80095c0 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d008      	beq.n	80095d8 <osThreadNew+0x70>
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	2b38      	cmp	r3, #56	@ 0x38
 80095ca:	d805      	bhi.n	80095d8 <osThreadNew+0x70>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <osThreadNew+0x74>
        return (NULL);
 80095d8:	2300      	movs	r3, #0
 80095da:	e054      	b.n	8009686 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d003      	beq.n	80095ec <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	089b      	lsrs	r3, r3, #2
 80095ea:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00e      	beq.n	8009612 <osThreadNew+0xaa>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	2ba7      	cmp	r3, #167	@ 0xa7
 80095fa:	d90a      	bls.n	8009612 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009600:	2b00      	cmp	r3, #0
 8009602:	d006      	beq.n	8009612 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	695b      	ldr	r3, [r3, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <osThreadNew+0xaa>
        mem = 1;
 800960c:	2301      	movs	r3, #1
 800960e:	61bb      	str	r3, [r7, #24]
 8009610:	e010      	b.n	8009634 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10c      	bne.n	8009634 <osThreadNew+0xcc>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d108      	bne.n	8009634 <osThreadNew+0xcc>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d104      	bne.n	8009634 <osThreadNew+0xcc>
          mem = 0;
 800962a:	2300      	movs	r3, #0
 800962c:	61bb      	str	r3, [r7, #24]
 800962e:	e001      	b.n	8009634 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d110      	bne.n	800965c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009642:	9202      	str	r2, [sp, #8]
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	6a3a      	ldr	r2, [r7, #32]
 800964e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 fe13 	bl	800a27c <xTaskCreateStatic>
 8009656:	4603      	mov	r3, r0
 8009658:	613b      	str	r3, [r7, #16]
 800965a:	e013      	b.n	8009684 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d110      	bne.n	8009684 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	b29a      	uxth	r2, r3
 8009666:	f107 0310 	add.w	r3, r7, #16
 800966a:	9301      	str	r3, [sp, #4]
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 fe61 	bl	800a33c <xTaskCreate>
 800967a:	4603      	mov	r3, r0
 800967c:	2b01      	cmp	r3, #1
 800967e:	d001      	beq.n	8009684 <osThreadNew+0x11c>
            hTask = NULL;
 8009680:	2300      	movs	r3, #0
 8009682:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009684:	693b      	ldr	r3, [r7, #16]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3728      	adds	r7, #40	@ 0x28
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009696:	f3ef 8305 	mrs	r3, IPSR
 800969a:	60bb      	str	r3, [r7, #8]
  return(result);
 800969c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <osDelay+0x1c>
    stat = osErrorISR;
 80096a2:	f06f 0305 	mvn.w	r3, #5
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	e007      	b.n	80096ba <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <osDelay+0x2c>
      vTaskDelay(ticks);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 ff9f 	bl	800a5f8 <vTaskDelay>
    }
  }

  return (stat);
 80096ba:	68fb      	ldr	r3, [r7, #12]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4a07      	ldr	r2, [pc, #28]	@ (80096f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80096d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	4a06      	ldr	r2, [pc, #24]	@ (80096f4 <vApplicationGetIdleTaskMemory+0x30>)
 80096da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80096e2:	601a      	str	r2, [r3, #0]
}
 80096e4:	bf00      	nop
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bc80      	pop	{r7}
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	200002c0 	.word	0x200002c0
 80096f4:	20000368 	.word	0x20000368

080096f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4a07      	ldr	r2, [pc, #28]	@ (8009724 <vApplicationGetTimerTaskMemory+0x2c>)
 8009708:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	4a06      	ldr	r2, [pc, #24]	@ (8009728 <vApplicationGetTimerTaskMemory+0x30>)
 800970e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009716:	601a      	str	r2, [r3, #0]
}
 8009718:	bf00      	nop
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	bc80      	pop	{r7}
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	20000768 	.word	0x20000768
 8009728:	20000810 	.word	0x20000810

0800972c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f103 0208 	add.w	r2, r3, #8
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f04f 32ff 	mov.w	r2, #4294967295
 8009744:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f103 0208 	add.w	r2, r3, #8
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f103 0208 	add.w	r2, r3, #8
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	bc80      	pop	{r7}
 8009768:	4770      	bx	lr

0800976a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800976a:	b480      	push	{r7}
 800976c:	b083      	sub	sp, #12
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	bc80      	pop	{r7}
 8009780:	4770      	bx	lr

08009782 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009782:	b480      	push	{r7}
 8009784:	b085      	sub	sp, #20
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	689a      	ldr	r2, [r3, #8]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	1c5a      	adds	r2, r3, #1
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	601a      	str	r2, [r3, #0]
}
 80097be:	bf00      	nop
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bc80      	pop	{r7}
 80097c6:	4770      	bx	lr

080097c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097de:	d103      	bne.n	80097e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	e00c      	b.n	8009802 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3308      	adds	r3, #8
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	e002      	b.n	80097f6 <vListInsert+0x2e>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d2f6      	bcs.n	80097f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	601a      	str	r2, [r3, #0]
}
 800982e:	bf00      	nop
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	bc80      	pop	{r7}
 8009836:	4770      	bx	lr

08009838 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	6892      	ldr	r2, [r2, #8]
 800984e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	6852      	ldr	r2, [r2, #4]
 8009858:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	429a      	cmp	r2, r3
 8009862:	d103      	bne.n	800986c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	1e5a      	subs	r2, r3, #1
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	bc80      	pop	{r7}
 8009888:	4770      	bx	lr
	...

0800988c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10b      	bne.n	80098b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80098b2:	bf00      	nop
 80098b4:	bf00      	nop
 80098b6:	e7fd      	b.n	80098b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80098b8:	f002 f860 	bl	800b97c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098c4:	68f9      	ldr	r1, [r7, #12]
 80098c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80098c8:	fb01 f303 	mul.w	r3, r1, r3
 80098cc:	441a      	add	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e8:	3b01      	subs	r3, #1
 80098ea:	68f9      	ldr	r1, [r7, #12]
 80098ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80098ee:	fb01 f303 	mul.w	r3, r1, r3
 80098f2:	441a      	add	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	22ff      	movs	r2, #255	@ 0xff
 80098fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	22ff      	movs	r2, #255	@ 0xff
 8009904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d114      	bne.n	8009938 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d01a      	beq.n	800994c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3310      	adds	r3, #16
 800991a:	4618      	mov	r0, r3
 800991c:	f001 f93c 	bl	800ab98 <xTaskRemoveFromEventList>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d012      	beq.n	800994c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009926:	4b0d      	ldr	r3, [pc, #52]	@ (800995c <xQueueGenericReset+0xd0>)
 8009928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	e009      	b.n	800994c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3310      	adds	r3, #16
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff fef5 	bl	800972c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3324      	adds	r3, #36	@ 0x24
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff fef0 	bl	800972c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800994c:	f002 f846 	bl	800b9dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009950:	2301      	movs	r3, #1
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	e000ed04 	.word	0xe000ed04

08009960 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08e      	sub	sp, #56	@ 0x38
 8009964:	af02      	add	r7, sp, #8
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
 800996c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10b      	bne.n	800998c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009986:	bf00      	nop
 8009988:	bf00      	nop
 800998a:	e7fd      	b.n	8009988 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10b      	bne.n	80099aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop
 80099a8:	e7fd      	b.n	80099a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <xQueueGenericCreateStatic+0x56>
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <xQueueGenericCreateStatic+0x5a>
 80099b6:	2301      	movs	r3, #1
 80099b8:	e000      	b.n	80099bc <xQueueGenericCreateStatic+0x5c>
 80099ba:	2300      	movs	r3, #0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10b      	bne.n	80099d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	623b      	str	r3, [r7, #32]
}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	e7fd      	b.n	80099d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d102      	bne.n	80099e4 <xQueueGenericCreateStatic+0x84>
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <xQueueGenericCreateStatic+0x88>
 80099e4:	2301      	movs	r3, #1
 80099e6:	e000      	b.n	80099ea <xQueueGenericCreateStatic+0x8a>
 80099e8:	2300      	movs	r3, #0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10b      	bne.n	8009a06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	61fb      	str	r3, [r7, #28]
}
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop
 8009a04:	e7fd      	b.n	8009a02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a06:	2350      	movs	r3, #80	@ 0x50
 8009a08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2b50      	cmp	r3, #80	@ 0x50
 8009a0e:	d00b      	beq.n	8009a28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	61bb      	str	r3, [r7, #24]
}
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	e7fd      	b.n	8009a24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00d      	beq.n	8009a50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	4613      	mov	r3, r2
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 f805 	bl	8009a5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3730      	adds	r7, #48	@ 0x30
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	60b9      	str	r1, [r7, #8]
 8009a64:	607a      	str	r2, [r7, #4]
 8009a66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d103      	bne.n	8009a76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	69ba      	ldr	r2, [r7, #24]
 8009a72:	601a      	str	r2, [r3, #0]
 8009a74:	e002      	b.n	8009a7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a88:	2101      	movs	r1, #1
 8009a8a:	69b8      	ldr	r0, [r7, #24]
 8009a8c:	f7ff fefe 	bl	800988c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	78fa      	ldrb	r2, [r7, #3]
 8009a94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009a98:	bf00      	nop
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08e      	sub	sp, #56	@ 0x38
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
 8009aac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10b      	bne.n	8009ad4 <xQueueGenericSend+0x34>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009ace:	bf00      	nop
 8009ad0:	bf00      	nop
 8009ad2:	e7fd      	b.n	8009ad0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d103      	bne.n	8009ae2 <xQueueGenericSend+0x42>
 8009ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <xQueueGenericSend+0x46>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e000      	b.n	8009ae8 <xQueueGenericSend+0x48>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10b      	bne.n	8009b04 <xQueueGenericSend+0x64>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009afe:	bf00      	nop
 8009b00:	bf00      	nop
 8009b02:	e7fd      	b.n	8009b00 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d103      	bne.n	8009b12 <xQueueGenericSend+0x72>
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <xQueueGenericSend+0x76>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e000      	b.n	8009b18 <xQueueGenericSend+0x78>
 8009b16:	2300      	movs	r3, #0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10b      	bne.n	8009b34 <xQueueGenericSend+0x94>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	623b      	str	r3, [r7, #32]
}
 8009b2e:	bf00      	nop
 8009b30:	bf00      	nop
 8009b32:	e7fd      	b.n	8009b30 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b34:	f001 f9f6 	bl	800af24 <xTaskGetSchedulerState>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d102      	bne.n	8009b44 <xQueueGenericSend+0xa4>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <xQueueGenericSend+0xa8>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e000      	b.n	8009b4a <xQueueGenericSend+0xaa>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10b      	bne.n	8009b66 <xQueueGenericSend+0xc6>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	61fb      	str	r3, [r7, #28]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b66:	f001 ff09 	bl	800b97c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d302      	bcc.n	8009b7c <xQueueGenericSend+0xdc>
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d129      	bne.n	8009bd0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b82:	f000 fa0f 	bl	8009fa4 <prvCopyDataToQueue>
 8009b86:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d010      	beq.n	8009bb2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b92:	3324      	adds	r3, #36	@ 0x24
 8009b94:	4618      	mov	r0, r3
 8009b96:	f000 ffff 	bl	800ab98 <xTaskRemoveFromEventList>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d013      	beq.n	8009bc8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8009ca0 <xQueueGenericSend+0x200>)
 8009ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	e00a      	b.n	8009bc8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d007      	beq.n	8009bc8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009bb8:	4b39      	ldr	r3, [pc, #228]	@ (8009ca0 <xQueueGenericSend+0x200>)
 8009bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bbe:	601a      	str	r2, [r3, #0]
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009bc8:	f001 ff08 	bl	800b9dc <vPortExitCritical>
				return pdPASS;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e063      	b.n	8009c98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d103      	bne.n	8009bde <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bd6:	f001 ff01 	bl	800b9dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e05c      	b.n	8009c98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d106      	bne.n	8009bf2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009be4:	f107 0314 	add.w	r3, r7, #20
 8009be8:	4618      	mov	r0, r3
 8009bea:	f001 f839 	bl	800ac60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bf2:	f001 fef3 	bl	800b9dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bf6:	f000 fda5 	bl	800a744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bfa:	f001 febf 	bl	800b97c <vPortEnterCritical>
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c04:	b25b      	sxtb	r3, r3
 8009c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0a:	d103      	bne.n	8009c14 <xQueueGenericSend+0x174>
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c1a:	b25b      	sxtb	r3, r3
 8009c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c20:	d103      	bne.n	8009c2a <xQueueGenericSend+0x18a>
 8009c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c2a:	f001 fed7 	bl	800b9dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c2e:	1d3a      	adds	r2, r7, #4
 8009c30:	f107 0314 	add.w	r3, r7, #20
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f001 f828 	bl	800ac8c <xTaskCheckForTimeOut>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d124      	bne.n	8009c8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c44:	f000 faa6 	bl	800a194 <prvIsQueueFull>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d018      	beq.n	8009c80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	3310      	adds	r3, #16
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	4611      	mov	r1, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 ff4c 	bl	800aaf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c5e:	f000 fa31 	bl	800a0c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c62:	f000 fd7d 	bl	800a760 <xTaskResumeAll>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f47f af7c 	bne.w	8009b66 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca0 <xQueueGenericSend+0x200>)
 8009c70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	e772      	b.n	8009b66 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c82:	f000 fa1f 	bl	800a0c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c86:	f000 fd6b 	bl	800a760 <xTaskResumeAll>
 8009c8a:	e76c      	b.n	8009b66 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009c8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c8e:	f000 fa19 	bl	800a0c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c92:	f000 fd65 	bl	800a760 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009c96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3738      	adds	r7, #56	@ 0x38
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b090      	sub	sp, #64	@ 0x40
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10b      	bne.n	8009cd4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009cce:	bf00      	nop
 8009cd0:	bf00      	nop
 8009cd2:	e7fd      	b.n	8009cd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d103      	bne.n	8009ce2 <xQueueGenericSendFromISR+0x3e>
 8009cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d101      	bne.n	8009ce6 <xQueueGenericSendFromISR+0x42>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e000      	b.n	8009ce8 <xQueueGenericSendFromISR+0x44>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10b      	bne.n	8009d04 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009cfe:	bf00      	nop
 8009d00:	bf00      	nop
 8009d02:	e7fd      	b.n	8009d00 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d103      	bne.n	8009d12 <xQueueGenericSendFromISR+0x6e>
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d101      	bne.n	8009d16 <xQueueGenericSendFromISR+0x72>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e000      	b.n	8009d18 <xQueueGenericSendFromISR+0x74>
 8009d16:	2300      	movs	r3, #0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10b      	bne.n	8009d34 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	623b      	str	r3, [r7, #32]
}
 8009d2e:	bf00      	nop
 8009d30:	bf00      	nop
 8009d32:	e7fd      	b.n	8009d30 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d34:	f001 fee4 	bl	800bb00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009d38:	f3ef 8211 	mrs	r2, BASEPRI
 8009d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	61fa      	str	r2, [r7, #28]
 8009d4e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009d50:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d52:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d302      	bcc.n	8009d66 <xQueueGenericSendFromISR+0xc2>
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d12f      	bne.n	8009dc6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	68b9      	ldr	r1, [r7, #8]
 8009d7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009d7c:	f000 f912 	bl	8009fa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d80:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d88:	d112      	bne.n	8009db0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d016      	beq.n	8009dc0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d94:	3324      	adds	r3, #36	@ 0x24
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 fefe 	bl	800ab98 <xTaskRemoveFromEventList>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00e      	beq.n	8009dc0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00b      	beq.n	8009dc0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	e007      	b.n	8009dc0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009db0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009db4:	3301      	adds	r3, #1
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	b25a      	sxtb	r2, r3
 8009dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009dc4:	e001      	b.n	8009dca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dcc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009dd4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3740      	adds	r7, #64	@ 0x40
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b08c      	sub	sp, #48	@ 0x30
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009dec:	2300      	movs	r3, #0
 8009dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10b      	bne.n	8009e12 <xQueueReceive+0x32>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	623b      	str	r3, [r7, #32]
}
 8009e0c:	bf00      	nop
 8009e0e:	bf00      	nop
 8009e10:	e7fd      	b.n	8009e0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d103      	bne.n	8009e20 <xQueueReceive+0x40>
 8009e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d101      	bne.n	8009e24 <xQueueReceive+0x44>
 8009e20:	2301      	movs	r3, #1
 8009e22:	e000      	b.n	8009e26 <xQueueReceive+0x46>
 8009e24:	2300      	movs	r3, #0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10b      	bne.n	8009e42 <xQueueReceive+0x62>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	61fb      	str	r3, [r7, #28]
}
 8009e3c:	bf00      	nop
 8009e3e:	bf00      	nop
 8009e40:	e7fd      	b.n	8009e3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e42:	f001 f86f 	bl	800af24 <xTaskGetSchedulerState>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d102      	bne.n	8009e52 <xQueueReceive+0x72>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <xQueueReceive+0x76>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <xQueueReceive+0x78>
 8009e56:	2300      	movs	r3, #0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10b      	bne.n	8009e74 <xQueueReceive+0x94>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	61bb      	str	r3, [r7, #24]
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	e7fd      	b.n	8009e70 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e74:	f001 fd82 	bl	800b97c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d01f      	beq.n	8009ec4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e88:	f000 f8f6 	bl	800a078 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8e:	1e5a      	subs	r2, r3, #1
 8009e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00f      	beq.n	8009ebc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9e:	3310      	adds	r3, #16
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 fe79 	bl	800ab98 <xTaskRemoveFromEventList>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d007      	beq.n	8009ebc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009eac:	4b3c      	ldr	r3, [pc, #240]	@ (8009fa0 <xQueueReceive+0x1c0>)
 8009eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ebc:	f001 fd8e 	bl	800b9dc <vPortExitCritical>
				return pdPASS;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e069      	b.n	8009f98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d103      	bne.n	8009ed2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009eca:	f001 fd87 	bl	800b9dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e062      	b.n	8009f98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d106      	bne.n	8009ee6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ed8:	f107 0310 	add.w	r3, r7, #16
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 febf 	bl	800ac60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ee6:	f001 fd79 	bl	800b9dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009eea:	f000 fc2b 	bl	800a744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009eee:	f001 fd45 	bl	800b97c <vPortEnterCritical>
 8009ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ef8:	b25b      	sxtb	r3, r3
 8009efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efe:	d103      	bne.n	8009f08 <xQueueReceive+0x128>
 8009f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f0e:	b25b      	sxtb	r3, r3
 8009f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f14:	d103      	bne.n	8009f1e <xQueueReceive+0x13e>
 8009f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f1e:	f001 fd5d 	bl	800b9dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f22:	1d3a      	adds	r2, r7, #4
 8009f24:	f107 0310 	add.w	r3, r7, #16
 8009f28:	4611      	mov	r1, r2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 feae 	bl	800ac8c <xTaskCheckForTimeOut>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d123      	bne.n	8009f7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f38:	f000 f916 	bl	800a168 <prvIsQueueEmpty>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d017      	beq.n	8009f72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f44:	3324      	adds	r3, #36	@ 0x24
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	4611      	mov	r1, r2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f000 fdd2 	bl	800aaf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f52:	f000 f8b7 	bl	800a0c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f56:	f000 fc03 	bl	800a760 <xTaskResumeAll>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d189      	bne.n	8009e74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009f60:	4b0f      	ldr	r3, [pc, #60]	@ (8009fa0 <xQueueReceive+0x1c0>)
 8009f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	e780      	b.n	8009e74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f74:	f000 f8a6 	bl	800a0c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f78:	f000 fbf2 	bl	800a760 <xTaskResumeAll>
 8009f7c:	e77a      	b.n	8009e74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009f7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f80:	f000 f8a0 	bl	800a0c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f84:	f000 fbec 	bl	800a760 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f8a:	f000 f8ed 	bl	800a168 <prvIsQueueEmpty>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f43f af6f 	beq.w	8009e74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3730      	adds	r7, #48	@ 0x30
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	e000ed04 	.word	0xe000ed04

08009fa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b086      	sub	sp, #24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10d      	bne.n	8009fde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d14d      	bne.n	800a066 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 ffc6 	bl	800af60 <xTaskPriorityDisinherit>
 8009fd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	609a      	str	r2, [r3, #8]
 8009fdc:	e043      	b.n	800a066 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d119      	bne.n	800a018 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6858      	ldr	r0, [r3, #4]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fec:	461a      	mov	r2, r3
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	f002 ff29 	bl	800ce46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffc:	441a      	add	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	685a      	ldr	r2, [r3, #4]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d32b      	bcc.n	800a066 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	605a      	str	r2, [r3, #4]
 800a016:	e026      	b.n	800a066 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	68d8      	ldr	r0, [r3, #12]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a020:	461a      	mov	r2, r3
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	f002 ff0f 	bl	800ce46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	68da      	ldr	r2, [r3, #12]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a030:	425b      	negs	r3, r3
 800a032:	441a      	add	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	68da      	ldr	r2, [r3, #12]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	429a      	cmp	r2, r3
 800a042:	d207      	bcs.n	800a054 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a04c:	425b      	negs	r3, r3
 800a04e:	441a      	add	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b02      	cmp	r3, #2
 800a058:	d105      	bne.n	800a066 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	3b01      	subs	r3, #1
 800a064:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	1c5a      	adds	r2, r3, #1
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a06e:	697b      	ldr	r3, [r7, #20]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3718      	adds	r7, #24
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a086:	2b00      	cmp	r3, #0
 800a088:	d018      	beq.n	800a0bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68da      	ldr	r2, [r3, #12]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a092:	441a      	add	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68da      	ldr	r2, [r3, #12]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d303      	bcc.n	800a0ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68d9      	ldr	r1, [r3, #12]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	6838      	ldr	r0, [r7, #0]
 800a0b8:	f002 fec5 	bl	800ce46 <memcpy>
	}
}
 800a0bc:	bf00      	nop
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a0cc:	f001 fc56 	bl	800b97c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0d8:	e011      	b.n	800a0fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d012      	beq.n	800a108 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	3324      	adds	r3, #36	@ 0x24
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 fd56 	bl	800ab98 <xTaskRemoveFromEventList>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a0f2:	f000 fe2f 	bl	800ad54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a102:	2b00      	cmp	r3, #0
 800a104:	dce9      	bgt.n	800a0da <prvUnlockQueue+0x16>
 800a106:	e000      	b.n	800a10a <prvUnlockQueue+0x46>
					break;
 800a108:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	22ff      	movs	r2, #255	@ 0xff
 800a10e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a112:	f001 fc63 	bl	800b9dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a116:	f001 fc31 	bl	800b97c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a120:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a122:	e011      	b.n	800a148 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d012      	beq.n	800a152 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	3310      	adds	r3, #16
 800a130:	4618      	mov	r0, r3
 800a132:	f000 fd31 	bl	800ab98 <xTaskRemoveFromEventList>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a13c:	f000 fe0a 	bl	800ad54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a140:	7bbb      	ldrb	r3, [r7, #14]
 800a142:	3b01      	subs	r3, #1
 800a144:	b2db      	uxtb	r3, r3
 800a146:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	dce9      	bgt.n	800a124 <prvUnlockQueue+0x60>
 800a150:	e000      	b.n	800a154 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a152:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	22ff      	movs	r2, #255	@ 0xff
 800a158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a15c:	f001 fc3e 	bl	800b9dc <vPortExitCritical>
}
 800a160:	bf00      	nop
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a170:	f001 fc04 	bl	800b97c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d102      	bne.n	800a182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a17c:	2301      	movs	r3, #1
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	e001      	b.n	800a186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a182:	2300      	movs	r3, #0
 800a184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a186:	f001 fc29 	bl	800b9dc <vPortExitCritical>

	return xReturn;
 800a18a:	68fb      	ldr	r3, [r7, #12]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a19c:	f001 fbee 	bl	800b97c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d102      	bne.n	800a1b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	e001      	b.n	800a1b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1b6:	f001 fc11 	bl	800b9dc <vPortExitCritical>

	return xReturn;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	60fb      	str	r3, [r7, #12]
 800a1d2:	e014      	b.n	800a1fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a1d4:	4a0e      	ldr	r2, [pc, #56]	@ (800a210 <vQueueAddToRegistry+0x4c>)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10b      	bne.n	800a1f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a1e0:	490b      	ldr	r1, [pc, #44]	@ (800a210 <vQueueAddToRegistry+0x4c>)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a1ea:	4a09      	ldr	r2, [pc, #36]	@ (800a210 <vQueueAddToRegistry+0x4c>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	4413      	add	r3, r2
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a1f6:	e006      	b.n	800a206 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	60fb      	str	r3, [r7, #12]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2b07      	cmp	r3, #7
 800a202:	d9e7      	bls.n	800a1d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a204:	bf00      	nop
 800a206:	bf00      	nop
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bc80      	pop	{r7}
 800a20e:	4770      	bx	lr
 800a210:	20001010 	.word	0x20001010

0800a214 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a224:	f001 fbaa 	bl	800b97c <vPortEnterCritical>
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a22e:	b25b      	sxtb	r3, r3
 800a230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a234:	d103      	bne.n	800a23e <vQueueWaitForMessageRestricted+0x2a>
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a244:	b25b      	sxtb	r3, r3
 800a246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24a:	d103      	bne.n	800a254 <vQueueWaitForMessageRestricted+0x40>
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a254:	f001 fbc2 	bl	800b9dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d106      	bne.n	800a26e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	3324      	adds	r3, #36	@ 0x24
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	68b9      	ldr	r1, [r7, #8]
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 fc69 	bl	800ab40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a26e:	6978      	ldr	r0, [r7, #20]
 800a270:	f7ff ff28 	bl	800a0c4 <prvUnlockQueue>
	}
 800a274:	bf00      	nop
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08e      	sub	sp, #56	@ 0x38
 800a280:	af04      	add	r7, sp, #16
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10b      	bne.n	800a2a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	623b      	str	r3, [r7, #32]
}
 800a2a2:	bf00      	nop
 800a2a4:	bf00      	nop
 800a2a6:	e7fd      	b.n	800a2a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10b      	bne.n	800a2c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	61fb      	str	r3, [r7, #28]
}
 800a2c0:	bf00      	nop
 800a2c2:	bf00      	nop
 800a2c4:	e7fd      	b.n	800a2c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a2c6:	23a8      	movs	r3, #168	@ 0xa8
 800a2c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	2ba8      	cmp	r3, #168	@ 0xa8
 800a2ce:	d00b      	beq.n	800a2e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	61bb      	str	r3, [r7, #24]
}
 800a2e2:	bf00      	nop
 800a2e4:	bf00      	nop
 800a2e6:	e7fd      	b.n	800a2e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a2e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01e      	beq.n	800a32e <xTaskCreateStatic+0xb2>
 800a2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d01b      	beq.n	800a32e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a302:	2202      	movs	r2, #2
 800a304:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a308:	2300      	movs	r3, #0
 800a30a:	9303      	str	r3, [sp, #12]
 800a30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30e:	9302      	str	r3, [sp, #8]
 800a310:	f107 0314 	add.w	r3, r7, #20
 800a314:	9301      	str	r3, [sp, #4]
 800a316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	68b9      	ldr	r1, [r7, #8]
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f000 f851 	bl	800a3c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a326:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a328:	f000 f8f6 	bl	800a518 <prvAddNewTaskToReadyList>
 800a32c:	e001      	b.n	800a332 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a32e:	2300      	movs	r3, #0
 800a330:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a332:	697b      	ldr	r3, [r7, #20]
	}
 800a334:	4618      	mov	r0, r3
 800a336:	3728      	adds	r7, #40	@ 0x28
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08c      	sub	sp, #48	@ 0x30
 800a340:	af04      	add	r7, sp, #16
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	603b      	str	r3, [r7, #0]
 800a348:	4613      	mov	r3, r2
 800a34a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a34c:	88fb      	ldrh	r3, [r7, #6]
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4618      	mov	r0, r3
 800a352:	f001 fc15 	bl	800bb80 <pvPortMalloc>
 800a356:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00e      	beq.n	800a37c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a35e:	20a8      	movs	r0, #168	@ 0xa8
 800a360:	f001 fc0e 	bl	800bb80 <pvPortMalloc>
 800a364:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	631a      	str	r2, [r3, #48]	@ 0x30
 800a372:	e005      	b.n	800a380 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a374:	6978      	ldr	r0, [r7, #20]
 800a376:	f001 fcd1 	bl	800bd1c <vPortFree>
 800a37a:	e001      	b.n	800a380 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a37c:	2300      	movs	r3, #0
 800a37e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d017      	beq.n	800a3b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a38e:	88fa      	ldrh	r2, [r7, #6]
 800a390:	2300      	movs	r3, #0
 800a392:	9303      	str	r3, [sp, #12]
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	9302      	str	r3, [sp, #8]
 800a398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	68b9      	ldr	r1, [r7, #8]
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f80f 	bl	800a3c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3aa:	69f8      	ldr	r0, [r7, #28]
 800a3ac:	f000 f8b4 	bl	800a518 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	61bb      	str	r3, [r7, #24]
 800a3b4:	e002      	b.n	800a3bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a3bc:	69bb      	ldr	r3, [r7, #24]
	}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3720      	adds	r7, #32
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b088      	sub	sp, #32
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
 800a3d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	461a      	mov	r2, r3
 800a3e0:	21a5      	movs	r1, #165	@ 0xa5
 800a3e2:	f002 fc5f 	bl	800cca4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	f023 0307 	bic.w	r3, r3, #7
 800a3fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	f003 0307 	and.w	r3, r3, #7
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00b      	beq.n	800a422 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	617b      	str	r3, [r7, #20]
}
 800a41c:	bf00      	nop
 800a41e:	bf00      	nop
 800a420:	e7fd      	b.n	800a41e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01f      	beq.n	800a468 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a428:	2300      	movs	r3, #0
 800a42a:	61fb      	str	r3, [r7, #28]
 800a42c:	e012      	b.n	800a454 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	4413      	add	r3, r2
 800a434:	7819      	ldrb	r1, [r3, #0]
 800a436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	4413      	add	r3, r2
 800a43c:	3334      	adds	r3, #52	@ 0x34
 800a43e:	460a      	mov	r2, r1
 800a440:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	4413      	add	r3, r2
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d006      	beq.n	800a45c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	3301      	adds	r3, #1
 800a452:	61fb      	str	r3, [r7, #28]
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	2b0f      	cmp	r3, #15
 800a458:	d9e9      	bls.n	800a42e <prvInitialiseNewTask+0x66>
 800a45a:	e000      	b.n	800a45e <prvInitialiseNewTask+0x96>
			{
				break;
 800a45c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a466:	e003      	b.n	800a470 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a472:	2b37      	cmp	r3, #55	@ 0x37
 800a474:	d901      	bls.n	800a47a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a476:	2337      	movs	r3, #55	@ 0x37
 800a478:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a47e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a484:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a488:	2200      	movs	r2, #0
 800a48a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48e:	3304      	adds	r3, #4
 800a490:	4618      	mov	r0, r3
 800a492:	f7ff f96a 	bl	800976a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a498:	3318      	adds	r3, #24
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff f965 	bl	800976a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c8:	3354      	adds	r3, #84	@ 0x54
 800a4ca:	224c      	movs	r2, #76	@ 0x4c
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f002 fbe8 	bl	800cca4 <memset>
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d6:	4a0d      	ldr	r2, [pc, #52]	@ (800a50c <prvInitialiseNewTask+0x144>)
 800a4d8:	659a      	str	r2, [r3, #88]	@ 0x58
 800a4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4dc:	4a0c      	ldr	r2, [pc, #48]	@ (800a510 <prvInitialiseNewTask+0x148>)
 800a4de:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e2:	4a0c      	ldr	r2, [pc, #48]	@ (800a514 <prvInitialiseNewTask+0x14c>)
 800a4e4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	68f9      	ldr	r1, [r7, #12]
 800a4ea:	69b8      	ldr	r0, [r7, #24]
 800a4ec:	f001 f954 	bl	800b798 <pxPortInitialiseStack>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a502:	bf00      	nop
 800a504:	3720      	adds	r7, #32
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20003460 	.word	0x20003460
 800a510:	200034c8 	.word	0x200034c8
 800a514:	20003530 	.word	0x20003530

0800a518 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a520:	f001 fa2c 	bl	800b97c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a524:	4b2d      	ldr	r3, [pc, #180]	@ (800a5dc <prvAddNewTaskToReadyList+0xc4>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3301      	adds	r3, #1
 800a52a:	4a2c      	ldr	r2, [pc, #176]	@ (800a5dc <prvAddNewTaskToReadyList+0xc4>)
 800a52c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a52e:	4b2c      	ldr	r3, [pc, #176]	@ (800a5e0 <prvAddNewTaskToReadyList+0xc8>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d109      	bne.n	800a54a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a536:	4a2a      	ldr	r2, [pc, #168]	@ (800a5e0 <prvAddNewTaskToReadyList+0xc8>)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a53c:	4b27      	ldr	r3, [pc, #156]	@ (800a5dc <prvAddNewTaskToReadyList+0xc4>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d110      	bne.n	800a566 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a544:	f000 fc2a 	bl	800ad9c <prvInitialiseTaskLists>
 800a548:	e00d      	b.n	800a566 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a54a:	4b26      	ldr	r3, [pc, #152]	@ (800a5e4 <prvAddNewTaskToReadyList+0xcc>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d109      	bne.n	800a566 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a552:	4b23      	ldr	r3, [pc, #140]	@ (800a5e0 <prvAddNewTaskToReadyList+0xc8>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d802      	bhi.n	800a566 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a560:	4a1f      	ldr	r2, [pc, #124]	@ (800a5e0 <prvAddNewTaskToReadyList+0xc8>)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a566:	4b20      	ldr	r3, [pc, #128]	@ (800a5e8 <prvAddNewTaskToReadyList+0xd0>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3301      	adds	r3, #1
 800a56c:	4a1e      	ldr	r2, [pc, #120]	@ (800a5e8 <prvAddNewTaskToReadyList+0xd0>)
 800a56e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a570:	4b1d      	ldr	r3, [pc, #116]	@ (800a5e8 <prvAddNewTaskToReadyList+0xd0>)
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a57c:	4b1b      	ldr	r3, [pc, #108]	@ (800a5ec <prvAddNewTaskToReadyList+0xd4>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d903      	bls.n	800a58c <prvAddNewTaskToReadyList+0x74>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a588:	4a18      	ldr	r2, [pc, #96]	@ (800a5ec <prvAddNewTaskToReadyList+0xd4>)
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a590:	4613      	mov	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4413      	add	r3, r2
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4a15      	ldr	r2, [pc, #84]	@ (800a5f0 <prvAddNewTaskToReadyList+0xd8>)
 800a59a:	441a      	add	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	f7ff f8ed 	bl	8009782 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a5a8:	f001 fa18 	bl	800b9dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a5ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e4 <prvAddNewTaskToReadyList+0xcc>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00e      	beq.n	800a5d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a5b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e0 <prvAddNewTaskToReadyList+0xc8>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d207      	bcs.n	800a5d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a5c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f4 <prvAddNewTaskToReadyList+0xdc>)
 800a5c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5d2:	bf00      	nop
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20001524 	.word	0x20001524
 800a5e0:	20001050 	.word	0x20001050
 800a5e4:	20001530 	.word	0x20001530
 800a5e8:	20001540 	.word	0x20001540
 800a5ec:	2000152c 	.word	0x2000152c
 800a5f0:	20001054 	.word	0x20001054
 800a5f4:	e000ed04 	.word	0xe000ed04

0800a5f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d018      	beq.n	800a63c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a60a:	4b14      	ldr	r3, [pc, #80]	@ (800a65c <vTaskDelay+0x64>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00b      	beq.n	800a62a <vTaskDelay+0x32>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	60bb      	str	r3, [r7, #8]
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop
 800a628:	e7fd      	b.n	800a626 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a62a:	f000 f88b 	bl	800a744 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a62e:	2100      	movs	r1, #0
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fd05 	bl	800b040 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a636:	f000 f893 	bl	800a760 <xTaskResumeAll>
 800a63a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d107      	bne.n	800a652 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a642:	4b07      	ldr	r3, [pc, #28]	@ (800a660 <vTaskDelay+0x68>)
 800a644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a652:	bf00      	nop
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	2000154c 	.word	0x2000154c
 800a660:	e000ed04 	.word	0xe000ed04

0800a664 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08a      	sub	sp, #40	@ 0x28
 800a668:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a66e:	2300      	movs	r3, #0
 800a670:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a672:	463a      	mov	r2, r7
 800a674:	1d39      	adds	r1, r7, #4
 800a676:	f107 0308 	add.w	r3, r7, #8
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff f822 	bl	80096c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	9202      	str	r2, [sp, #8]
 800a688:	9301      	str	r3, [sp, #4]
 800a68a:	2300      	movs	r3, #0
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	2300      	movs	r3, #0
 800a690:	460a      	mov	r2, r1
 800a692:	4924      	ldr	r1, [pc, #144]	@ (800a724 <vTaskStartScheduler+0xc0>)
 800a694:	4824      	ldr	r0, [pc, #144]	@ (800a728 <vTaskStartScheduler+0xc4>)
 800a696:	f7ff fdf1 	bl	800a27c <xTaskCreateStatic>
 800a69a:	4603      	mov	r3, r0
 800a69c:	4a23      	ldr	r2, [pc, #140]	@ (800a72c <vTaskStartScheduler+0xc8>)
 800a69e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a6a0:	4b22      	ldr	r3, [pc, #136]	@ (800a72c <vTaskStartScheduler+0xc8>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	617b      	str	r3, [r7, #20]
 800a6ac:	e001      	b.n	800a6b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d102      	bne.n	800a6be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a6b8:	f000 fd16 	bl	800b0e8 <xTimerCreateTimerTask>
 800a6bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d11b      	bne.n	800a6fc <vTaskStartScheduler+0x98>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	613b      	str	r3, [r7, #16]
}
 800a6d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6d8:	4b15      	ldr	r3, [pc, #84]	@ (800a730 <vTaskStartScheduler+0xcc>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3354      	adds	r3, #84	@ 0x54
 800a6de:	4a15      	ldr	r2, [pc, #84]	@ (800a734 <vTaskStartScheduler+0xd0>)
 800a6e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a6e2:	4b15      	ldr	r3, [pc, #84]	@ (800a738 <vTaskStartScheduler+0xd4>)
 800a6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6ea:	4b14      	ldr	r3, [pc, #80]	@ (800a73c <vTaskStartScheduler+0xd8>)
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6f0:	4b13      	ldr	r3, [pc, #76]	@ (800a740 <vTaskStartScheduler+0xdc>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a6f6:	f001 f8cf 	bl	800b898 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a6fa:	e00f      	b.n	800a71c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a702:	d10b      	bne.n	800a71c <vTaskStartScheduler+0xb8>
	__asm volatile
 800a704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a708:	f383 8811 	msr	BASEPRI, r3
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	60fb      	str	r3, [r7, #12]
}
 800a716:	bf00      	nop
 800a718:	bf00      	nop
 800a71a:	e7fd      	b.n	800a718 <vTaskStartScheduler+0xb4>
}
 800a71c:	bf00      	nop
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	0800d954 	.word	0x0800d954
 800a728:	0800ad6d 	.word	0x0800ad6d
 800a72c:	20001548 	.word	0x20001548
 800a730:	20001050 	.word	0x20001050
 800a734:	2000018c 	.word	0x2000018c
 800a738:	20001544 	.word	0x20001544
 800a73c:	20001530 	.word	0x20001530
 800a740:	20001528 	.word	0x20001528

0800a744 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a744:	b480      	push	{r7}
 800a746:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a748:	4b04      	ldr	r3, [pc, #16]	@ (800a75c <vTaskSuspendAll+0x18>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3301      	adds	r3, #1
 800a74e:	4a03      	ldr	r2, [pc, #12]	@ (800a75c <vTaskSuspendAll+0x18>)
 800a750:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a752:	bf00      	nop
 800a754:	46bd      	mov	sp, r7
 800a756:	bc80      	pop	{r7}
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	2000154c 	.word	0x2000154c

0800a760 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a766:	2300      	movs	r3, #0
 800a768:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a76a:	2300      	movs	r3, #0
 800a76c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a76e:	4b42      	ldr	r3, [pc, #264]	@ (800a878 <xTaskResumeAll+0x118>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10b      	bne.n	800a78e <xTaskResumeAll+0x2e>
	__asm volatile
 800a776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	603b      	str	r3, [r7, #0]
}
 800a788:	bf00      	nop
 800a78a:	bf00      	nop
 800a78c:	e7fd      	b.n	800a78a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a78e:	f001 f8f5 	bl	800b97c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a792:	4b39      	ldr	r3, [pc, #228]	@ (800a878 <xTaskResumeAll+0x118>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	3b01      	subs	r3, #1
 800a798:	4a37      	ldr	r2, [pc, #220]	@ (800a878 <xTaskResumeAll+0x118>)
 800a79a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a79c:	4b36      	ldr	r3, [pc, #216]	@ (800a878 <xTaskResumeAll+0x118>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d162      	bne.n	800a86a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a7a4:	4b35      	ldr	r3, [pc, #212]	@ (800a87c <xTaskResumeAll+0x11c>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d05e      	beq.n	800a86a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7ac:	e02f      	b.n	800a80e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ae:	4b34      	ldr	r3, [pc, #208]	@ (800a880 <xTaskResumeAll+0x120>)
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3318      	adds	r3, #24
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7ff f83c 	bl	8009838 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7ff f837 	bl	8009838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7ce:	4b2d      	ldr	r3, [pc, #180]	@ (800a884 <xTaskResumeAll+0x124>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d903      	bls.n	800a7de <xTaskResumeAll+0x7e>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7da:	4a2a      	ldr	r2, [pc, #168]	@ (800a884 <xTaskResumeAll+0x124>)
 800a7dc:	6013      	str	r3, [r2, #0]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4413      	add	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	4a27      	ldr	r2, [pc, #156]	@ (800a888 <xTaskResumeAll+0x128>)
 800a7ec:	441a      	add	r2, r3
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	f7fe ffc4 	bl	8009782 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7fe:	4b23      	ldr	r3, [pc, #140]	@ (800a88c <xTaskResumeAll+0x12c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a804:	429a      	cmp	r2, r3
 800a806:	d302      	bcc.n	800a80e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a808:	4b21      	ldr	r3, [pc, #132]	@ (800a890 <xTaskResumeAll+0x130>)
 800a80a:	2201      	movs	r2, #1
 800a80c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a80e:	4b1c      	ldr	r3, [pc, #112]	@ (800a880 <xTaskResumeAll+0x120>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1cb      	bne.n	800a7ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d001      	beq.n	800a820 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a81c:	f000 fb62 	bl	800aee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a820:	4b1c      	ldr	r3, [pc, #112]	@ (800a894 <xTaskResumeAll+0x134>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d010      	beq.n	800a84e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a82c:	f000 f844 	bl	800a8b8 <xTaskIncrementTick>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a836:	4b16      	ldr	r3, [pc, #88]	@ (800a890 <xTaskResumeAll+0x130>)
 800a838:	2201      	movs	r2, #1
 800a83a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	3b01      	subs	r3, #1
 800a840:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1f1      	bne.n	800a82c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a848:	4b12      	ldr	r3, [pc, #72]	@ (800a894 <xTaskResumeAll+0x134>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a84e:	4b10      	ldr	r3, [pc, #64]	@ (800a890 <xTaskResumeAll+0x130>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d009      	beq.n	800a86a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a856:	2301      	movs	r3, #1
 800a858:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a85a:	4b0f      	ldr	r3, [pc, #60]	@ (800a898 <xTaskResumeAll+0x138>)
 800a85c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a86a:	f001 f8b7 	bl	800b9dc <vPortExitCritical>

	return xAlreadyYielded;
 800a86e:	68bb      	ldr	r3, [r7, #8]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	2000154c 	.word	0x2000154c
 800a87c:	20001524 	.word	0x20001524
 800a880:	200014e4 	.word	0x200014e4
 800a884:	2000152c 	.word	0x2000152c
 800a888:	20001054 	.word	0x20001054
 800a88c:	20001050 	.word	0x20001050
 800a890:	20001538 	.word	0x20001538
 800a894:	20001534 	.word	0x20001534
 800a898:	e000ed04 	.word	0xe000ed04

0800a89c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a8a2:	4b04      	ldr	r3, [pc, #16]	@ (800a8b4 <xTaskGetTickCount+0x18>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a8a8:	687b      	ldr	r3, [r7, #4]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bc80      	pop	{r7}
 800a8b2:	4770      	bx	lr
 800a8b4:	20001528 	.word	0x20001528

0800a8b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8c2:	4b4f      	ldr	r3, [pc, #316]	@ (800aa00 <xTaskIncrementTick+0x148>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f040 8090 	bne.w	800a9ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8cc:	4b4d      	ldr	r3, [pc, #308]	@ (800aa04 <xTaskIncrementTick+0x14c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a8d4:	4a4b      	ldr	r2, [pc, #300]	@ (800aa04 <xTaskIncrementTick+0x14c>)
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d121      	bne.n	800a924 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8e0:	4b49      	ldr	r3, [pc, #292]	@ (800aa08 <xTaskIncrementTick+0x150>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00b      	beq.n	800a902 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ee:	f383 8811 	msr	BASEPRI, r3
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	603b      	str	r3, [r7, #0]
}
 800a8fc:	bf00      	nop
 800a8fe:	bf00      	nop
 800a900:	e7fd      	b.n	800a8fe <xTaskIncrementTick+0x46>
 800a902:	4b41      	ldr	r3, [pc, #260]	@ (800aa08 <xTaskIncrementTick+0x150>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	4b40      	ldr	r3, [pc, #256]	@ (800aa0c <xTaskIncrementTick+0x154>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a3e      	ldr	r2, [pc, #248]	@ (800aa08 <xTaskIncrementTick+0x150>)
 800a90e:	6013      	str	r3, [r2, #0]
 800a910:	4a3e      	ldr	r2, [pc, #248]	@ (800aa0c <xTaskIncrementTick+0x154>)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	4b3e      	ldr	r3, [pc, #248]	@ (800aa10 <xTaskIncrementTick+0x158>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3301      	adds	r3, #1
 800a91c:	4a3c      	ldr	r2, [pc, #240]	@ (800aa10 <xTaskIncrementTick+0x158>)
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	f000 fae0 	bl	800aee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a924:	4b3b      	ldr	r3, [pc, #236]	@ (800aa14 <xTaskIncrementTick+0x15c>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	693a      	ldr	r2, [r7, #16]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d349      	bcc.n	800a9c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a92e:	4b36      	ldr	r3, [pc, #216]	@ (800aa08 <xTaskIncrementTick+0x150>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d104      	bne.n	800a942 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a938:	4b36      	ldr	r3, [pc, #216]	@ (800aa14 <xTaskIncrementTick+0x15c>)
 800a93a:	f04f 32ff 	mov.w	r2, #4294967295
 800a93e:	601a      	str	r2, [r3, #0]
					break;
 800a940:	e03f      	b.n	800a9c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a942:	4b31      	ldr	r3, [pc, #196]	@ (800aa08 <xTaskIncrementTick+0x150>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	429a      	cmp	r2, r3
 800a958:	d203      	bcs.n	800a962 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a95a:	4a2e      	ldr	r2, [pc, #184]	@ (800aa14 <xTaskIncrementTick+0x15c>)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a960:	e02f      	b.n	800a9c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	3304      	adds	r3, #4
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe ff66 	bl	8009838 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a970:	2b00      	cmp	r3, #0
 800a972:	d004      	beq.n	800a97e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	3318      	adds	r3, #24
 800a978:	4618      	mov	r0, r3
 800a97a:	f7fe ff5d 	bl	8009838 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a982:	4b25      	ldr	r3, [pc, #148]	@ (800aa18 <xTaskIncrementTick+0x160>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	429a      	cmp	r2, r3
 800a988:	d903      	bls.n	800a992 <xTaskIncrementTick+0xda>
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a98e:	4a22      	ldr	r2, [pc, #136]	@ (800aa18 <xTaskIncrementTick+0x160>)
 800a990:	6013      	str	r3, [r2, #0]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a996:	4613      	mov	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4a1f      	ldr	r2, [pc, #124]	@ (800aa1c <xTaskIncrementTick+0x164>)
 800a9a0:	441a      	add	r2, r3
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	4610      	mov	r0, r2
 800a9aa:	f7fe feea 	bl	8009782 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9b2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa20 <xTaskIncrementTick+0x168>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d3b8      	bcc.n	800a92e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9c0:	e7b5      	b.n	800a92e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9c2:	4b17      	ldr	r3, [pc, #92]	@ (800aa20 <xTaskIncrementTick+0x168>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9c8:	4914      	ldr	r1, [pc, #80]	@ (800aa1c <xTaskIncrementTick+0x164>)
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	4413      	add	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	440b      	add	r3, r1
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d901      	bls.n	800a9de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a9de:	4b11      	ldr	r3, [pc, #68]	@ (800aa24 <xTaskIncrementTick+0x16c>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d007      	beq.n	800a9f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	617b      	str	r3, [r7, #20]
 800a9ea:	e004      	b.n	800a9f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a9ec:	4b0e      	ldr	r3, [pc, #56]	@ (800aa28 <xTaskIncrementTick+0x170>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	4a0d      	ldr	r2, [pc, #52]	@ (800aa28 <xTaskIncrementTick+0x170>)
 800a9f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a9f6:	697b      	ldr	r3, [r7, #20]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3718      	adds	r7, #24
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	2000154c 	.word	0x2000154c
 800aa04:	20001528 	.word	0x20001528
 800aa08:	200014dc 	.word	0x200014dc
 800aa0c:	200014e0 	.word	0x200014e0
 800aa10:	2000153c 	.word	0x2000153c
 800aa14:	20001544 	.word	0x20001544
 800aa18:	2000152c 	.word	0x2000152c
 800aa1c:	20001054 	.word	0x20001054
 800aa20:	20001050 	.word	0x20001050
 800aa24:	20001538 	.word	0x20001538
 800aa28:	20001534 	.word	0x20001534

0800aa2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa32:	4b2a      	ldr	r3, [pc, #168]	@ (800aadc <vTaskSwitchContext+0xb0>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d003      	beq.n	800aa42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa3a:	4b29      	ldr	r3, [pc, #164]	@ (800aae0 <vTaskSwitchContext+0xb4>)
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa40:	e047      	b.n	800aad2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800aa42:	4b27      	ldr	r3, [pc, #156]	@ (800aae0 <vTaskSwitchContext+0xb4>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa48:	4b26      	ldr	r3, [pc, #152]	@ (800aae4 <vTaskSwitchContext+0xb8>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	60fb      	str	r3, [r7, #12]
 800aa4e:	e011      	b.n	800aa74 <vTaskSwitchContext+0x48>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10b      	bne.n	800aa6e <vTaskSwitchContext+0x42>
	__asm volatile
 800aa56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa5a:	f383 8811 	msr	BASEPRI, r3
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	607b      	str	r3, [r7, #4]
}
 800aa68:	bf00      	nop
 800aa6a:	bf00      	nop
 800aa6c:	e7fd      	b.n	800aa6a <vTaskSwitchContext+0x3e>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	60fb      	str	r3, [r7, #12]
 800aa74:	491c      	ldr	r1, [pc, #112]	@ (800aae8 <vTaskSwitchContext+0xbc>)
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	440b      	add	r3, r1
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d0e3      	beq.n	800aa50 <vTaskSwitchContext+0x24>
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4a15      	ldr	r2, [pc, #84]	@ (800aae8 <vTaskSwitchContext+0xbc>)
 800aa94:	4413      	add	r3, r2
 800aa96:	60bb      	str	r3, [r7, #8]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	685a      	ldr	r2, [r3, #4]
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	605a      	str	r2, [r3, #4]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	685a      	ldr	r2, [r3, #4]
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	3308      	adds	r3, #8
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d104      	bne.n	800aab8 <vTaskSwitchContext+0x8c>
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	685a      	ldr	r2, [r3, #4]
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	605a      	str	r2, [r3, #4]
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	4a0b      	ldr	r2, [pc, #44]	@ (800aaec <vTaskSwitchContext+0xc0>)
 800aac0:	6013      	str	r3, [r2, #0]
 800aac2:	4a08      	ldr	r2, [pc, #32]	@ (800aae4 <vTaskSwitchContext+0xb8>)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aac8:	4b08      	ldr	r3, [pc, #32]	@ (800aaec <vTaskSwitchContext+0xc0>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3354      	adds	r3, #84	@ 0x54
 800aace:	4a08      	ldr	r2, [pc, #32]	@ (800aaf0 <vTaskSwitchContext+0xc4>)
 800aad0:	6013      	str	r3, [r2, #0]
}
 800aad2:	bf00      	nop
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bc80      	pop	{r7}
 800aada:	4770      	bx	lr
 800aadc:	2000154c 	.word	0x2000154c
 800aae0:	20001538 	.word	0x20001538
 800aae4:	2000152c 	.word	0x2000152c
 800aae8:	20001054 	.word	0x20001054
 800aaec:	20001050 	.word	0x20001050
 800aaf0:	2000018c 	.word	0x2000018c

0800aaf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10b      	bne.n	800ab1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	60fb      	str	r3, [r7, #12]
}
 800ab16:	bf00      	nop
 800ab18:	bf00      	nop
 800ab1a:	e7fd      	b.n	800ab18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab1c:	4b07      	ldr	r3, [pc, #28]	@ (800ab3c <vTaskPlaceOnEventList+0x48>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	3318      	adds	r3, #24
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7fe fe4f 	bl	80097c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab2a:	2101      	movs	r1, #1
 800ab2c:	6838      	ldr	r0, [r7, #0]
 800ab2e:	f000 fa87 	bl	800b040 <prvAddCurrentTaskToDelayedList>
}
 800ab32:	bf00      	nop
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20001050 	.word	0x20001050

0800ab40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10b      	bne.n	800ab6a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	617b      	str	r3, [r7, #20]
}
 800ab64:	bf00      	nop
 800ab66:	bf00      	nop
 800ab68:	e7fd      	b.n	800ab66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ab94 <vTaskPlaceOnEventListRestricted+0x54>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3318      	adds	r3, #24
 800ab70:	4619      	mov	r1, r3
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f7fe fe05 	bl	8009782 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d002      	beq.n	800ab84 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ab7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab84:	6879      	ldr	r1, [r7, #4]
 800ab86:	68b8      	ldr	r0, [r7, #8]
 800ab88:	f000 fa5a 	bl	800b040 <prvAddCurrentTaskToDelayedList>
	}
 800ab8c:	bf00      	nop
 800ab8e:	3718      	adds	r7, #24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	20001050 	.word	0x20001050

0800ab98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10b      	bne.n	800abc6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	60fb      	str	r3, [r7, #12]
}
 800abc0:	bf00      	nop
 800abc2:	bf00      	nop
 800abc4:	e7fd      	b.n	800abc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	3318      	adds	r3, #24
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe fe34 	bl	8009838 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abd0:	4b1d      	ldr	r3, [pc, #116]	@ (800ac48 <xTaskRemoveFromEventList+0xb0>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d11d      	bne.n	800ac14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	3304      	adds	r3, #4
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe fe2b 	bl	8009838 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abe6:	4b19      	ldr	r3, [pc, #100]	@ (800ac4c <xTaskRemoveFromEventList+0xb4>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	429a      	cmp	r2, r3
 800abec:	d903      	bls.n	800abf6 <xTaskRemoveFromEventList+0x5e>
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf2:	4a16      	ldr	r2, [pc, #88]	@ (800ac4c <xTaskRemoveFromEventList+0xb4>)
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abfa:	4613      	mov	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4a13      	ldr	r2, [pc, #76]	@ (800ac50 <xTaskRemoveFromEventList+0xb8>)
 800ac04:	441a      	add	r2, r3
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	3304      	adds	r3, #4
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	f7fe fdb8 	bl	8009782 <vListInsertEnd>
 800ac12:	e005      	b.n	800ac20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	3318      	adds	r3, #24
 800ac18:	4619      	mov	r1, r3
 800ac1a:	480e      	ldr	r0, [pc, #56]	@ (800ac54 <xTaskRemoveFromEventList+0xbc>)
 800ac1c:	f7fe fdb1 	bl	8009782 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac24:	4b0c      	ldr	r3, [pc, #48]	@ (800ac58 <xTaskRemoveFromEventList+0xc0>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d905      	bls.n	800ac3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac32:	4b0a      	ldr	r3, [pc, #40]	@ (800ac5c <xTaskRemoveFromEventList+0xc4>)
 800ac34:	2201      	movs	r2, #1
 800ac36:	601a      	str	r2, [r3, #0]
 800ac38:	e001      	b.n	800ac3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac3e:	697b      	ldr	r3, [r7, #20]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	2000154c 	.word	0x2000154c
 800ac4c:	2000152c 	.word	0x2000152c
 800ac50:	20001054 	.word	0x20001054
 800ac54:	200014e4 	.word	0x200014e4
 800ac58:	20001050 	.word	0x20001050
 800ac5c:	20001538 	.word	0x20001538

0800ac60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac68:	4b06      	ldr	r3, [pc, #24]	@ (800ac84 <vTaskInternalSetTimeOutState+0x24>)
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac70:	4b05      	ldr	r3, [pc, #20]	@ (800ac88 <vTaskInternalSetTimeOutState+0x28>)
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	605a      	str	r2, [r3, #4]
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bc80      	pop	{r7}
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	2000153c 	.word	0x2000153c
 800ac88:	20001528 	.word	0x20001528

0800ac8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b088      	sub	sp, #32
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10b      	bne.n	800acb4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ac9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	613b      	str	r3, [r7, #16]
}
 800acae:	bf00      	nop
 800acb0:	bf00      	nop
 800acb2:	e7fd      	b.n	800acb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10b      	bne.n	800acd2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	60fb      	str	r3, [r7, #12]
}
 800accc:	bf00      	nop
 800acce:	bf00      	nop
 800acd0:	e7fd      	b.n	800acce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800acd2:	f000 fe53 	bl	800b97c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800acd6:	4b1d      	ldr	r3, [pc, #116]	@ (800ad4c <xTaskCheckForTimeOut+0xc0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	69ba      	ldr	r2, [r7, #24]
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acee:	d102      	bne.n	800acf6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800acf0:	2300      	movs	r3, #0
 800acf2:	61fb      	str	r3, [r7, #28]
 800acf4:	e023      	b.n	800ad3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	4b15      	ldr	r3, [pc, #84]	@ (800ad50 <xTaskCheckForTimeOut+0xc4>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d007      	beq.n	800ad12 <xTaskCheckForTimeOut+0x86>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d302      	bcc.n	800ad12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	61fb      	str	r3, [r7, #28]
 800ad10:	e015      	b.n	800ad3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d20b      	bcs.n	800ad34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	1ad2      	subs	r2, r2, r3
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff ff99 	bl	800ac60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	61fb      	str	r3, [r7, #28]
 800ad32:	e004      	b.n	800ad3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	2200      	movs	r2, #0
 800ad38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad3e:	f000 fe4d 	bl	800b9dc <vPortExitCritical>

	return xReturn;
 800ad42:	69fb      	ldr	r3, [r7, #28]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3720      	adds	r7, #32
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	20001528 	.word	0x20001528
 800ad50:	2000153c 	.word	0x2000153c

0800ad54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad54:	b480      	push	{r7}
 800ad56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad58:	4b03      	ldr	r3, [pc, #12]	@ (800ad68 <vTaskMissedYield+0x14>)
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	601a      	str	r2, [r3, #0]
}
 800ad5e:	bf00      	nop
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bc80      	pop	{r7}
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	20001538 	.word	0x20001538

0800ad6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad74:	f000 f852 	bl	800ae1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad78:	4b06      	ldr	r3, [pc, #24]	@ (800ad94 <prvIdleTask+0x28>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d9f9      	bls.n	800ad74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad80:	4b05      	ldr	r3, [pc, #20]	@ (800ad98 <prvIdleTask+0x2c>)
 800ad82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad90:	e7f0      	b.n	800ad74 <prvIdleTask+0x8>
 800ad92:	bf00      	nop
 800ad94:	20001054 	.word	0x20001054
 800ad98:	e000ed04 	.word	0xe000ed04

0800ad9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ada2:	2300      	movs	r3, #0
 800ada4:	607b      	str	r3, [r7, #4]
 800ada6:	e00c      	b.n	800adc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	4613      	mov	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4413      	add	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4a12      	ldr	r2, [pc, #72]	@ (800adfc <prvInitialiseTaskLists+0x60>)
 800adb4:	4413      	add	r3, r2
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe fcb8 	bl	800972c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3301      	adds	r3, #1
 800adc0:	607b      	str	r3, [r7, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b37      	cmp	r3, #55	@ 0x37
 800adc6:	d9ef      	bls.n	800ada8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800adc8:	480d      	ldr	r0, [pc, #52]	@ (800ae00 <prvInitialiseTaskLists+0x64>)
 800adca:	f7fe fcaf 	bl	800972c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800adce:	480d      	ldr	r0, [pc, #52]	@ (800ae04 <prvInitialiseTaskLists+0x68>)
 800add0:	f7fe fcac 	bl	800972c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800add4:	480c      	ldr	r0, [pc, #48]	@ (800ae08 <prvInitialiseTaskLists+0x6c>)
 800add6:	f7fe fca9 	bl	800972c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800adda:	480c      	ldr	r0, [pc, #48]	@ (800ae0c <prvInitialiseTaskLists+0x70>)
 800addc:	f7fe fca6 	bl	800972c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ade0:	480b      	ldr	r0, [pc, #44]	@ (800ae10 <prvInitialiseTaskLists+0x74>)
 800ade2:	f7fe fca3 	bl	800972c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ade6:	4b0b      	ldr	r3, [pc, #44]	@ (800ae14 <prvInitialiseTaskLists+0x78>)
 800ade8:	4a05      	ldr	r2, [pc, #20]	@ (800ae00 <prvInitialiseTaskLists+0x64>)
 800adea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adec:	4b0a      	ldr	r3, [pc, #40]	@ (800ae18 <prvInitialiseTaskLists+0x7c>)
 800adee:	4a05      	ldr	r2, [pc, #20]	@ (800ae04 <prvInitialiseTaskLists+0x68>)
 800adf0:	601a      	str	r2, [r3, #0]
}
 800adf2:	bf00      	nop
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20001054 	.word	0x20001054
 800ae00:	200014b4 	.word	0x200014b4
 800ae04:	200014c8 	.word	0x200014c8
 800ae08:	200014e4 	.word	0x200014e4
 800ae0c:	200014f8 	.word	0x200014f8
 800ae10:	20001510 	.word	0x20001510
 800ae14:	200014dc 	.word	0x200014dc
 800ae18:	200014e0 	.word	0x200014e0

0800ae1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae22:	e019      	b.n	800ae58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae24:	f000 fdaa 	bl	800b97c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae28:	4b10      	ldr	r3, [pc, #64]	@ (800ae6c <prvCheckTasksWaitingTermination+0x50>)
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	3304      	adds	r3, #4
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fe fcff 	bl	8009838 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae70 <prvCheckTasksWaitingTermination+0x54>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	4a0b      	ldr	r2, [pc, #44]	@ (800ae70 <prvCheckTasksWaitingTermination+0x54>)
 800ae42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae44:	4b0b      	ldr	r3, [pc, #44]	@ (800ae74 <prvCheckTasksWaitingTermination+0x58>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	4a0a      	ldr	r2, [pc, #40]	@ (800ae74 <prvCheckTasksWaitingTermination+0x58>)
 800ae4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae4e:	f000 fdc5 	bl	800b9dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f810 	bl	800ae78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae58:	4b06      	ldr	r3, [pc, #24]	@ (800ae74 <prvCheckTasksWaitingTermination+0x58>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1e1      	bne.n	800ae24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae60:	bf00      	nop
 800ae62:	bf00      	nop
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	200014f8 	.word	0x200014f8
 800ae70:	20001524 	.word	0x20001524
 800ae74:	2000150c 	.word	0x2000150c

0800ae78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	3354      	adds	r3, #84	@ 0x54
 800ae84:	4618      	mov	r0, r3
 800ae86:	f001 ff25 	bl	800ccd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d108      	bne.n	800aea6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 ff3f 	bl	800bd1c <vPortFree>
				vPortFree( pxTCB );
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 ff3c 	bl	800bd1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aea4:	e019      	b.n	800aeda <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d103      	bne.n	800aeb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 ff33 	bl	800bd1c <vPortFree>
	}
 800aeb6:	e010      	b.n	800aeda <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	d00b      	beq.n	800aeda <prvDeleteTCB+0x62>
	__asm volatile
 800aec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	60fb      	str	r3, [r7, #12]
}
 800aed4:	bf00      	nop
 800aed6:	bf00      	nop
 800aed8:	e7fd      	b.n	800aed6 <prvDeleteTCB+0x5e>
	}
 800aeda:	bf00      	nop
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
	...

0800aee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aeea:	4b0c      	ldr	r3, [pc, #48]	@ (800af1c <prvResetNextTaskUnblockTime+0x38>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d104      	bne.n	800aefe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aef4:	4b0a      	ldr	r3, [pc, #40]	@ (800af20 <prvResetNextTaskUnblockTime+0x3c>)
 800aef6:	f04f 32ff 	mov.w	r2, #4294967295
 800aefa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aefc:	e008      	b.n	800af10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aefe:	4b07      	ldr	r3, [pc, #28]	@ (800af1c <prvResetNextTaskUnblockTime+0x38>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	4a04      	ldr	r2, [pc, #16]	@ (800af20 <prvResetNextTaskUnblockTime+0x3c>)
 800af0e:	6013      	str	r3, [r2, #0]
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	bc80      	pop	{r7}
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	200014dc 	.word	0x200014dc
 800af20:	20001544 	.word	0x20001544

0800af24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af2a:	4b0b      	ldr	r3, [pc, #44]	@ (800af58 <xTaskGetSchedulerState+0x34>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d102      	bne.n	800af38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af32:	2301      	movs	r3, #1
 800af34:	607b      	str	r3, [r7, #4]
 800af36:	e008      	b.n	800af4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af38:	4b08      	ldr	r3, [pc, #32]	@ (800af5c <xTaskGetSchedulerState+0x38>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d102      	bne.n	800af46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af40:	2302      	movs	r3, #2
 800af42:	607b      	str	r3, [r7, #4]
 800af44:	e001      	b.n	800af4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af46:	2300      	movs	r3, #0
 800af48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af4a:	687b      	ldr	r3, [r7, #4]
	}
 800af4c:	4618      	mov	r0, r3
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	bc80      	pop	{r7}
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	20001530 	.word	0x20001530
 800af5c:	2000154c 	.word	0x2000154c

0800af60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af6c:	2300      	movs	r3, #0
 800af6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d058      	beq.n	800b028 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af76:	4b2f      	ldr	r3, [pc, #188]	@ (800b034 <xTaskPriorityDisinherit+0xd4>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d00b      	beq.n	800af98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800af80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	60fb      	str	r3, [r7, #12]
}
 800af92:	bf00      	nop
 800af94:	bf00      	nop
 800af96:	e7fd      	b.n	800af94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10b      	bne.n	800afb8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	60bb      	str	r3, [r7, #8]
}
 800afb2:	bf00      	nop
 800afb4:	bf00      	nop
 800afb6:	e7fd      	b.n	800afb4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afbc:	1e5a      	subs	r2, r3, #1
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afca:	429a      	cmp	r2, r3
 800afcc:	d02c      	beq.n	800b028 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d128      	bne.n	800b028 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	3304      	adds	r3, #4
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fe fc2c 	bl	8009838 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aff8:	4b0f      	ldr	r3, [pc, #60]	@ (800b038 <xTaskPriorityDisinherit+0xd8>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	429a      	cmp	r2, r3
 800affe:	d903      	bls.n	800b008 <xTaskPriorityDisinherit+0xa8>
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b004:	4a0c      	ldr	r2, [pc, #48]	@ (800b038 <xTaskPriorityDisinherit+0xd8>)
 800b006:	6013      	str	r3, [r2, #0]
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b00c:	4613      	mov	r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	4413      	add	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4a09      	ldr	r2, [pc, #36]	@ (800b03c <xTaskPriorityDisinherit+0xdc>)
 800b016:	441a      	add	r2, r3
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	3304      	adds	r3, #4
 800b01c:	4619      	mov	r1, r3
 800b01e:	4610      	mov	r0, r2
 800b020:	f7fe fbaf 	bl	8009782 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b024:	2301      	movs	r3, #1
 800b026:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b028:	697b      	ldr	r3, [r7, #20]
	}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	20001050 	.word	0x20001050
 800b038:	2000152c 	.word	0x2000152c
 800b03c:	20001054 	.word	0x20001054

0800b040 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b04a:	4b21      	ldr	r3, [pc, #132]	@ (800b0d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b050:	4b20      	ldr	r3, [pc, #128]	@ (800b0d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3304      	adds	r3, #4
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe fbee 	bl	8009838 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b062:	d10a      	bne.n	800b07a <prvAddCurrentTaskToDelayedList+0x3a>
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d007      	beq.n	800b07a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b06a:	4b1a      	ldr	r3, [pc, #104]	@ (800b0d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3304      	adds	r3, #4
 800b070:	4619      	mov	r1, r3
 800b072:	4819      	ldr	r0, [pc, #100]	@ (800b0d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b074:	f7fe fb85 	bl	8009782 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b078:	e026      	b.n	800b0c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4413      	add	r3, r2
 800b080:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b082:	4b14      	ldr	r3, [pc, #80]	@ (800b0d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d209      	bcs.n	800b0a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b092:	4b12      	ldr	r3, [pc, #72]	@ (800b0dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	4b0f      	ldr	r3, [pc, #60]	@ (800b0d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3304      	adds	r3, #4
 800b09c:	4619      	mov	r1, r3
 800b09e:	4610      	mov	r0, r2
 800b0a0:	f7fe fb92 	bl	80097c8 <vListInsert>
}
 800b0a4:	e010      	b.n	800b0c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0a6:	4b0e      	ldr	r3, [pc, #56]	@ (800b0e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b0d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	f7fe fb88 	bl	80097c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b0b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d202      	bcs.n	800b0c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b0c2:	4a08      	ldr	r2, [pc, #32]	@ (800b0e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	6013      	str	r3, [r2, #0]
}
 800b0c8:	bf00      	nop
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	20001528 	.word	0x20001528
 800b0d4:	20001050 	.word	0x20001050
 800b0d8:	20001510 	.word	0x20001510
 800b0dc:	200014e0 	.word	0x200014e0
 800b0e0:	200014dc 	.word	0x200014dc
 800b0e4:	20001544 	.word	0x20001544

0800b0e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08a      	sub	sp, #40	@ 0x28
 800b0ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b0f2:	f000 fb11 	bl	800b718 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b0f6:	4b1d      	ldr	r3, [pc, #116]	@ (800b16c <xTimerCreateTimerTask+0x84>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d021      	beq.n	800b142 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b102:	2300      	movs	r3, #0
 800b104:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b106:	1d3a      	adds	r2, r7, #4
 800b108:	f107 0108 	add.w	r1, r7, #8
 800b10c:	f107 030c 	add.w	r3, r7, #12
 800b110:	4618      	mov	r0, r3
 800b112:	f7fe faf1 	bl	80096f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b116:	6879      	ldr	r1, [r7, #4]
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	9202      	str	r2, [sp, #8]
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	2302      	movs	r3, #2
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	2300      	movs	r3, #0
 800b126:	460a      	mov	r2, r1
 800b128:	4911      	ldr	r1, [pc, #68]	@ (800b170 <xTimerCreateTimerTask+0x88>)
 800b12a:	4812      	ldr	r0, [pc, #72]	@ (800b174 <xTimerCreateTimerTask+0x8c>)
 800b12c:	f7ff f8a6 	bl	800a27c <xTaskCreateStatic>
 800b130:	4603      	mov	r3, r0
 800b132:	4a11      	ldr	r2, [pc, #68]	@ (800b178 <xTimerCreateTimerTask+0x90>)
 800b134:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b136:	4b10      	ldr	r3, [pc, #64]	@ (800b178 <xTimerCreateTimerTask+0x90>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d001      	beq.n	800b142 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b13e:	2301      	movs	r3, #1
 800b140:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10b      	bne.n	800b160 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	613b      	str	r3, [r7, #16]
}
 800b15a:	bf00      	nop
 800b15c:	bf00      	nop
 800b15e:	e7fd      	b.n	800b15c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b160:	697b      	ldr	r3, [r7, #20]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3718      	adds	r7, #24
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20001580 	.word	0x20001580
 800b170:	0800d95c 	.word	0x0800d95c
 800b174:	0800b2b5 	.word	0x0800b2b5
 800b178:	20001584 	.word	0x20001584

0800b17c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08a      	sub	sp, #40	@ 0x28
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b18a:	2300      	movs	r3, #0
 800b18c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10b      	bne.n	800b1ac <xTimerGenericCommand+0x30>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	623b      	str	r3, [r7, #32]
}
 800b1a6:	bf00      	nop
 800b1a8:	bf00      	nop
 800b1aa:	e7fd      	b.n	800b1a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b1ac:	4b19      	ldr	r3, [pc, #100]	@ (800b214 <xTimerGenericCommand+0x98>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d02a      	beq.n	800b20a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2b05      	cmp	r3, #5
 800b1c4:	dc18      	bgt.n	800b1f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b1c6:	f7ff fead 	bl	800af24 <xTaskGetSchedulerState>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d109      	bne.n	800b1e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b1d0:	4b10      	ldr	r3, [pc, #64]	@ (800b214 <xTimerGenericCommand+0x98>)
 800b1d2:	6818      	ldr	r0, [r3, #0]
 800b1d4:	f107 0110 	add.w	r1, r7, #16
 800b1d8:	2300      	movs	r3, #0
 800b1da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1dc:	f7fe fc60 	bl	8009aa0 <xQueueGenericSend>
 800b1e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b1e2:	e012      	b.n	800b20a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800b214 <xTimerGenericCommand+0x98>)
 800b1e6:	6818      	ldr	r0, [r3, #0]
 800b1e8:	f107 0110 	add.w	r1, r7, #16
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f7fe fc56 	bl	8009aa0 <xQueueGenericSend>
 800b1f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b1f6:	e008      	b.n	800b20a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b1f8:	4b06      	ldr	r3, [pc, #24]	@ (800b214 <xTimerGenericCommand+0x98>)
 800b1fa:	6818      	ldr	r0, [r3, #0]
 800b1fc:	f107 0110 	add.w	r1, r7, #16
 800b200:	2300      	movs	r3, #0
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	f7fe fd4e 	bl	8009ca4 <xQueueGenericSendFromISR>
 800b208:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3728      	adds	r7, #40	@ 0x28
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20001580 	.word	0x20001580

0800b218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b088      	sub	sp, #32
 800b21c:	af02      	add	r7, sp, #8
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b222:	4b23      	ldr	r3, [pc, #140]	@ (800b2b0 <prvProcessExpiredTimer+0x98>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	3304      	adds	r3, #4
 800b230:	4618      	mov	r0, r3
 800b232:	f7fe fb01 	bl	8009838 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b23c:	f003 0304 	and.w	r3, r3, #4
 800b240:	2b00      	cmp	r3, #0
 800b242:	d023      	beq.n	800b28c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	699a      	ldr	r2, [r3, #24]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	18d1      	adds	r1, r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	6978      	ldr	r0, [r7, #20]
 800b252:	f000 f8d3 	bl	800b3fc <prvInsertTimerInActiveList>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d020      	beq.n	800b29e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b25c:	2300      	movs	r3, #0
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	2300      	movs	r3, #0
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	2100      	movs	r1, #0
 800b266:	6978      	ldr	r0, [r7, #20]
 800b268:	f7ff ff88 	bl	800b17c <xTimerGenericCommand>
 800b26c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d114      	bne.n	800b29e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	60fb      	str	r3, [r7, #12]
}
 800b286:	bf00      	nop
 800b288:	bf00      	nop
 800b28a:	e7fd      	b.n	800b288 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b292:	f023 0301 	bic.w	r3, r3, #1
 800b296:	b2da      	uxtb	r2, r3
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	6978      	ldr	r0, [r7, #20]
 800b2a4:	4798      	blx	r3
}
 800b2a6:	bf00      	nop
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	20001578 	.word	0x20001578

0800b2b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2bc:	f107 0308 	add.w	r3, r7, #8
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 f859 	bl	800b378 <prvGetNextExpireTime>
 800b2c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f000 f805 	bl	800b2dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b2d2:	f000 f8d5 	bl	800b480 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2d6:	bf00      	nop
 800b2d8:	e7f0      	b.n	800b2bc <prvTimerTask+0x8>
	...

0800b2dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b2e6:	f7ff fa2d 	bl	800a744 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2ea:	f107 0308 	add.w	r3, r7, #8
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 f864 	bl	800b3bc <prvSampleTimeNow>
 800b2f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d130      	bne.n	800b35e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10a      	bne.n	800b318 <prvProcessTimerOrBlockTask+0x3c>
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	429a      	cmp	r2, r3
 800b308:	d806      	bhi.n	800b318 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b30a:	f7ff fa29 	bl	800a760 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b30e:	68f9      	ldr	r1, [r7, #12]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7ff ff81 	bl	800b218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b316:	e024      	b.n	800b362 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d008      	beq.n	800b330 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b31e:	4b13      	ldr	r3, [pc, #76]	@ (800b36c <prvProcessTimerOrBlockTask+0x90>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d101      	bne.n	800b32c <prvProcessTimerOrBlockTask+0x50>
 800b328:	2301      	movs	r3, #1
 800b32a:	e000      	b.n	800b32e <prvProcessTimerOrBlockTask+0x52>
 800b32c:	2300      	movs	r3, #0
 800b32e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b330:	4b0f      	ldr	r3, [pc, #60]	@ (800b370 <prvProcessTimerOrBlockTask+0x94>)
 800b332:	6818      	ldr	r0, [r3, #0]
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	4619      	mov	r1, r3
 800b33e:	f7fe ff69 	bl	800a214 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b342:	f7ff fa0d 	bl	800a760 <xTaskResumeAll>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10a      	bne.n	800b362 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b34c:	4b09      	ldr	r3, [pc, #36]	@ (800b374 <prvProcessTimerOrBlockTask+0x98>)
 800b34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b352:	601a      	str	r2, [r3, #0]
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	f3bf 8f6f 	isb	sy
}
 800b35c:	e001      	b.n	800b362 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b35e:	f7ff f9ff 	bl	800a760 <xTaskResumeAll>
}
 800b362:	bf00      	nop
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	2000157c 	.word	0x2000157c
 800b370:	20001580 	.word	0x20001580
 800b374:	e000ed04 	.word	0xe000ed04

0800b378 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b380:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b8 <prvGetNextExpireTime+0x40>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d101      	bne.n	800b38e <prvGetNextExpireTime+0x16>
 800b38a:	2201      	movs	r2, #1
 800b38c:	e000      	b.n	800b390 <prvGetNextExpireTime+0x18>
 800b38e:	2200      	movs	r2, #0
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d105      	bne.n	800b3a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b39c:	4b06      	ldr	r3, [pc, #24]	@ (800b3b8 <prvGetNextExpireTime+0x40>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	60fb      	str	r3, [r7, #12]
 800b3a6:	e001      	b.n	800b3ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3714      	adds	r7, #20
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bc80      	pop	{r7}
 800b3b6:	4770      	bx	lr
 800b3b8:	20001578 	.word	0x20001578

0800b3bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b3c4:	f7ff fa6a 	bl	800a89c <xTaskGetTickCount>
 800b3c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b3ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f8 <prvSampleTimeNow+0x3c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d205      	bcs.n	800b3e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b3d4:	f000 f93a 	bl	800b64c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	e002      	b.n	800b3e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b3e6:	4a04      	ldr	r2, [pc, #16]	@ (800b3f8 <prvSampleTimeNow+0x3c>)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20001588 	.word	0x20001588

0800b3fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
 800b408:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b40a:	2300      	movs	r3, #0
 800b40c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d812      	bhi.n	800b448 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	1ad2      	subs	r2, r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d302      	bcc.n	800b436 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b430:	2301      	movs	r3, #1
 800b432:	617b      	str	r3, [r7, #20]
 800b434:	e01b      	b.n	800b46e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b436:	4b10      	ldr	r3, [pc, #64]	@ (800b478 <prvInsertTimerInActiveList+0x7c>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3304      	adds	r3, #4
 800b43e:	4619      	mov	r1, r3
 800b440:	4610      	mov	r0, r2
 800b442:	f7fe f9c1 	bl	80097c8 <vListInsert>
 800b446:	e012      	b.n	800b46e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d206      	bcs.n	800b45e <prvInsertTimerInActiveList+0x62>
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	429a      	cmp	r2, r3
 800b456:	d302      	bcc.n	800b45e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b458:	2301      	movs	r3, #1
 800b45a:	617b      	str	r3, [r7, #20]
 800b45c:	e007      	b.n	800b46e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b45e:	4b07      	ldr	r3, [pc, #28]	@ (800b47c <prvInsertTimerInActiveList+0x80>)
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3304      	adds	r3, #4
 800b466:	4619      	mov	r1, r3
 800b468:	4610      	mov	r0, r2
 800b46a:	f7fe f9ad 	bl	80097c8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b46e:	697b      	ldr	r3, [r7, #20]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3718      	adds	r7, #24
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	2000157c 	.word	0x2000157c
 800b47c:	20001578 	.word	0x20001578

0800b480 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b08e      	sub	sp, #56	@ 0x38
 800b484:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b486:	e0ce      	b.n	800b626 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	da19      	bge.n	800b4c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b48e:	1d3b      	adds	r3, r7, #4
 800b490:	3304      	adds	r3, #4
 800b492:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10b      	bne.n	800b4b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	61fb      	str	r3, [r7, #28]
}
 800b4ac:	bf00      	nop
 800b4ae:	bf00      	nop
 800b4b0:	e7fd      	b.n	800b4ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4b8:	6850      	ldr	r0, [r2, #4]
 800b4ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4bc:	6892      	ldr	r2, [r2, #8]
 800b4be:	4611      	mov	r1, r2
 800b4c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f2c0 80ae 	blt.w	800b626 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d0:	695b      	ldr	r3, [r3, #20]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d004      	beq.n	800b4e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d8:	3304      	adds	r3, #4
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fe f9ac 	bl	8009838 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4e0:	463b      	mov	r3, r7
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff ff6a 	bl	800b3bc <prvSampleTimeNow>
 800b4e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b09      	cmp	r3, #9
 800b4ee:	f200 8097 	bhi.w	800b620 <prvProcessReceivedCommands+0x1a0>
 800b4f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4f8 <prvProcessReceivedCommands+0x78>)
 800b4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f8:	0800b521 	.word	0x0800b521
 800b4fc:	0800b521 	.word	0x0800b521
 800b500:	0800b521 	.word	0x0800b521
 800b504:	0800b597 	.word	0x0800b597
 800b508:	0800b5ab 	.word	0x0800b5ab
 800b50c:	0800b5f7 	.word	0x0800b5f7
 800b510:	0800b521 	.word	0x0800b521
 800b514:	0800b521 	.word	0x0800b521
 800b518:	0800b597 	.word	0x0800b597
 800b51c:	0800b5ab 	.word	0x0800b5ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b522:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b526:	f043 0301 	orr.w	r3, r3, #1
 800b52a:	b2da      	uxtb	r2, r3
 800b52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b52e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	18d1      	adds	r1, r2, r3
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b53e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b540:	f7ff ff5c 	bl	800b3fc <prvInsertTimerInActiveList>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d06c      	beq.n	800b624 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b54c:	6a1b      	ldr	r3, [r3, #32]
 800b54e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b550:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b558:	f003 0304 	and.w	r3, r3, #4
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d061      	beq.n	800b624 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b564:	699b      	ldr	r3, [r3, #24]
 800b566:	441a      	add	r2, r3
 800b568:	2300      	movs	r3, #0
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	2300      	movs	r3, #0
 800b56e:	2100      	movs	r1, #0
 800b570:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b572:	f7ff fe03 	bl	800b17c <xTimerGenericCommand>
 800b576:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b578:	6a3b      	ldr	r3, [r7, #32]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d152      	bne.n	800b624 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b582:	f383 8811 	msr	BASEPRI, r3
 800b586:	f3bf 8f6f 	isb	sy
 800b58a:	f3bf 8f4f 	dsb	sy
 800b58e:	61bb      	str	r3, [r7, #24]
}
 800b590:	bf00      	nop
 800b592:	bf00      	nop
 800b594:	e7fd      	b.n	800b592 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b59c:	f023 0301 	bic.w	r3, r3, #1
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b5a8:	e03d      	b.n	800b626 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5b0:	f043 0301 	orr.w	r3, r3, #1
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10b      	bne.n	800b5e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ce:	f383 8811 	msr	BASEPRI, r3
 800b5d2:	f3bf 8f6f 	isb	sy
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	617b      	str	r3, [r7, #20]
}
 800b5dc:	bf00      	nop
 800b5de:	bf00      	nop
 800b5e0:	e7fd      	b.n	800b5de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e4:	699a      	ldr	r2, [r3, #24]
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e8:	18d1      	adds	r1, r2, r3
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5f0:	f7ff ff04 	bl	800b3fc <prvInsertTimerInActiveList>
					break;
 800b5f4:	e017      	b.n	800b626 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5fc:	f003 0302 	and.w	r3, r3, #2
 800b600:	2b00      	cmp	r3, #0
 800b602:	d103      	bne.n	800b60c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b606:	f000 fb89 	bl	800bd1c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b60a:	e00c      	b.n	800b626 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b612:	f023 0301 	bic.w	r3, r3, #1
 800b616:	b2da      	uxtb	r2, r3
 800b618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b61a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b61e:	e002      	b.n	800b626 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b620:	bf00      	nop
 800b622:	e000      	b.n	800b626 <prvProcessReceivedCommands+0x1a6>
					break;
 800b624:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b626:	4b08      	ldr	r3, [pc, #32]	@ (800b648 <prvProcessReceivedCommands+0x1c8>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	1d39      	adds	r1, r7, #4
 800b62c:	2200      	movs	r2, #0
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fe fbd6 	bl	8009de0 <xQueueReceive>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	f47f af26 	bne.w	800b488 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	3730      	adds	r7, #48	@ 0x30
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	20001580 	.word	0x20001580

0800b64c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b088      	sub	sp, #32
 800b650:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b652:	e049      	b.n	800b6e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b654:	4b2e      	ldr	r3, [pc, #184]	@ (800b710 <prvSwitchTimerLists+0xc4>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b65e:	4b2c      	ldr	r3, [pc, #176]	@ (800b710 <prvSwitchTimerLists+0xc4>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	3304      	adds	r3, #4
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fe f8e3 	bl	8009838 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6a1b      	ldr	r3, [r3, #32]
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b680:	f003 0304 	and.w	r3, r3, #4
 800b684:	2b00      	cmp	r3, #0
 800b686:	d02f      	beq.n	800b6e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	4413      	add	r3, r2
 800b690:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	429a      	cmp	r2, r3
 800b698:	d90e      	bls.n	800b6b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6a6:	4b1a      	ldr	r3, [pc, #104]	@ (800b710 <prvSwitchTimerLists+0xc4>)
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	4610      	mov	r0, r2
 800b6b2:	f7fe f889 	bl	80097c8 <vListInsert>
 800b6b6:	e017      	b.n	800b6e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	693a      	ldr	r2, [r7, #16]
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f7ff fd5a 	bl	800b17c <xTimerGenericCommand>
 800b6c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10b      	bne.n	800b6e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	603b      	str	r3, [r7, #0]
}
 800b6e2:	bf00      	nop
 800b6e4:	bf00      	nop
 800b6e6:	e7fd      	b.n	800b6e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6e8:	4b09      	ldr	r3, [pc, #36]	@ (800b710 <prvSwitchTimerLists+0xc4>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1b0      	bne.n	800b654 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b6f2:	4b07      	ldr	r3, [pc, #28]	@ (800b710 <prvSwitchTimerLists+0xc4>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b6f8:	4b06      	ldr	r3, [pc, #24]	@ (800b714 <prvSwitchTimerLists+0xc8>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a04      	ldr	r2, [pc, #16]	@ (800b710 <prvSwitchTimerLists+0xc4>)
 800b6fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b700:	4a04      	ldr	r2, [pc, #16]	@ (800b714 <prvSwitchTimerLists+0xc8>)
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	6013      	str	r3, [r2, #0]
}
 800b706:	bf00      	nop
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	20001578 	.word	0x20001578
 800b714:	2000157c 	.word	0x2000157c

0800b718 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b71e:	f000 f92d 	bl	800b97c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b722:	4b15      	ldr	r3, [pc, #84]	@ (800b778 <prvCheckForValidListAndQueue+0x60>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d120      	bne.n	800b76c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b72a:	4814      	ldr	r0, [pc, #80]	@ (800b77c <prvCheckForValidListAndQueue+0x64>)
 800b72c:	f7fd fffe 	bl	800972c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b730:	4813      	ldr	r0, [pc, #76]	@ (800b780 <prvCheckForValidListAndQueue+0x68>)
 800b732:	f7fd fffb 	bl	800972c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b736:	4b13      	ldr	r3, [pc, #76]	@ (800b784 <prvCheckForValidListAndQueue+0x6c>)
 800b738:	4a10      	ldr	r2, [pc, #64]	@ (800b77c <prvCheckForValidListAndQueue+0x64>)
 800b73a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b73c:	4b12      	ldr	r3, [pc, #72]	@ (800b788 <prvCheckForValidListAndQueue+0x70>)
 800b73e:	4a10      	ldr	r2, [pc, #64]	@ (800b780 <prvCheckForValidListAndQueue+0x68>)
 800b740:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b742:	2300      	movs	r3, #0
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	4b11      	ldr	r3, [pc, #68]	@ (800b78c <prvCheckForValidListAndQueue+0x74>)
 800b748:	4a11      	ldr	r2, [pc, #68]	@ (800b790 <prvCheckForValidListAndQueue+0x78>)
 800b74a:	2110      	movs	r1, #16
 800b74c:	200a      	movs	r0, #10
 800b74e:	f7fe f907 	bl	8009960 <xQueueGenericCreateStatic>
 800b752:	4603      	mov	r3, r0
 800b754:	4a08      	ldr	r2, [pc, #32]	@ (800b778 <prvCheckForValidListAndQueue+0x60>)
 800b756:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b758:	4b07      	ldr	r3, [pc, #28]	@ (800b778 <prvCheckForValidListAndQueue+0x60>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d005      	beq.n	800b76c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b760:	4b05      	ldr	r3, [pc, #20]	@ (800b778 <prvCheckForValidListAndQueue+0x60>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	490b      	ldr	r1, [pc, #44]	@ (800b794 <prvCheckForValidListAndQueue+0x7c>)
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe fd2c 	bl	800a1c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b76c:	f000 f936 	bl	800b9dc <vPortExitCritical>
}
 800b770:	bf00      	nop
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20001580 	.word	0x20001580
 800b77c:	20001550 	.word	0x20001550
 800b780:	20001564 	.word	0x20001564
 800b784:	20001578 	.word	0x20001578
 800b788:	2000157c 	.word	0x2000157c
 800b78c:	2000162c 	.word	0x2000162c
 800b790:	2000158c 	.word	0x2000158c
 800b794:	0800d964 	.word	0x0800d964

0800b798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	3b04      	subs	r3, #4
 800b7a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b7b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	3b04      	subs	r3, #4
 800b7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	f023 0201 	bic.w	r2, r3, #1
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	3b04      	subs	r3, #4
 800b7c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7c8:	4a08      	ldr	r2, [pc, #32]	@ (800b7ec <pxPortInitialiseStack+0x54>)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3b14      	subs	r3, #20
 800b7d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3b20      	subs	r3, #32
 800b7de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3714      	adds	r7, #20
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bc80      	pop	{r7}
 800b7ea:	4770      	bx	lr
 800b7ec:	0800b7f1 	.word	0x0800b7f1

0800b7f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b7fa:	4b12      	ldr	r3, [pc, #72]	@ (800b844 <prvTaskExitError+0x54>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b802:	d00b      	beq.n	800b81c <prvTaskExitError+0x2c>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	60fb      	str	r3, [r7, #12]
}
 800b816:	bf00      	nop
 800b818:	bf00      	nop
 800b81a:	e7fd      	b.n	800b818 <prvTaskExitError+0x28>
	__asm volatile
 800b81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b820:	f383 8811 	msr	BASEPRI, r3
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	60bb      	str	r3, [r7, #8]
}
 800b82e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b830:	bf00      	nop
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d0fc      	beq.n	800b832 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b838:	bf00      	nop
 800b83a:	bf00      	nop
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	bc80      	pop	{r7}
 800b842:	4770      	bx	lr
 800b844:	2000011c 	.word	0x2000011c
	...

0800b850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b850:	4b07      	ldr	r3, [pc, #28]	@ (800b870 <pxCurrentTCBConst2>)
 800b852:	6819      	ldr	r1, [r3, #0]
 800b854:	6808      	ldr	r0, [r1, #0]
 800b856:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b85a:	f380 8809 	msr	PSP, r0
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f04f 0000 	mov.w	r0, #0
 800b866:	f380 8811 	msr	BASEPRI, r0
 800b86a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b86e:	4770      	bx	lr

0800b870 <pxCurrentTCBConst2>:
 800b870:	20001050 	.word	0x20001050
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b874:	bf00      	nop
 800b876:	bf00      	nop

0800b878 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b878:	4806      	ldr	r0, [pc, #24]	@ (800b894 <prvPortStartFirstTask+0x1c>)
 800b87a:	6800      	ldr	r0, [r0, #0]
 800b87c:	6800      	ldr	r0, [r0, #0]
 800b87e:	f380 8808 	msr	MSP, r0
 800b882:	b662      	cpsie	i
 800b884:	b661      	cpsie	f
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	df00      	svc	0
 800b890:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b892:	bf00      	nop
 800b894:	e000ed08 	.word	0xe000ed08

0800b898 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b89e:	4b32      	ldr	r3, [pc, #200]	@ (800b968 <xPortStartScheduler+0xd0>)
 800b8a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	22ff      	movs	r2, #255	@ 0xff
 800b8ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8b8:	78fb      	ldrb	r3, [r7, #3]
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	4b2a      	ldr	r3, [pc, #168]	@ (800b96c <xPortStartScheduler+0xd4>)
 800b8c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8c6:	4b2a      	ldr	r3, [pc, #168]	@ (800b970 <xPortStartScheduler+0xd8>)
 800b8c8:	2207      	movs	r2, #7
 800b8ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8cc:	e009      	b.n	800b8e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b8ce:	4b28      	ldr	r3, [pc, #160]	@ (800b970 <xPortStartScheduler+0xd8>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	4a26      	ldr	r2, [pc, #152]	@ (800b970 <xPortStartScheduler+0xd8>)
 800b8d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b8d8:	78fb      	ldrb	r3, [r7, #3]
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	005b      	lsls	r3, r3, #1
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8e2:	78fb      	ldrb	r3, [r7, #3]
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ea:	2b80      	cmp	r3, #128	@ 0x80
 800b8ec:	d0ef      	beq.n	800b8ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b8ee:	4b20      	ldr	r3, [pc, #128]	@ (800b970 <xPortStartScheduler+0xd8>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f1c3 0307 	rsb	r3, r3, #7
 800b8f6:	2b04      	cmp	r3, #4
 800b8f8:	d00b      	beq.n	800b912 <xPortStartScheduler+0x7a>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	60bb      	str	r3, [r7, #8]
}
 800b90c:	bf00      	nop
 800b90e:	bf00      	nop
 800b910:	e7fd      	b.n	800b90e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b912:	4b17      	ldr	r3, [pc, #92]	@ (800b970 <xPortStartScheduler+0xd8>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	021b      	lsls	r3, r3, #8
 800b918:	4a15      	ldr	r2, [pc, #84]	@ (800b970 <xPortStartScheduler+0xd8>)
 800b91a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b91c:	4b14      	ldr	r3, [pc, #80]	@ (800b970 <xPortStartScheduler+0xd8>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b924:	4a12      	ldr	r2, [pc, #72]	@ (800b970 <xPortStartScheduler+0xd8>)
 800b926:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	b2da      	uxtb	r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b930:	4b10      	ldr	r3, [pc, #64]	@ (800b974 <xPortStartScheduler+0xdc>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a0f      	ldr	r2, [pc, #60]	@ (800b974 <xPortStartScheduler+0xdc>)
 800b936:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b93a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b93c:	4b0d      	ldr	r3, [pc, #52]	@ (800b974 <xPortStartScheduler+0xdc>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a0c      	ldr	r2, [pc, #48]	@ (800b974 <xPortStartScheduler+0xdc>)
 800b942:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b946:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b948:	f000 f8b8 	bl	800babc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b94c:	4b0a      	ldr	r3, [pc, #40]	@ (800b978 <xPortStartScheduler+0xe0>)
 800b94e:	2200      	movs	r2, #0
 800b950:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b952:	f7ff ff91 	bl	800b878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b956:	f7ff f869 	bl	800aa2c <vTaskSwitchContext>
	prvTaskExitError();
 800b95a:	f7ff ff49 	bl	800b7f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	e000e400 	.word	0xe000e400
 800b96c:	2000167c 	.word	0x2000167c
 800b970:	20001680 	.word	0x20001680
 800b974:	e000ed20 	.word	0xe000ed20
 800b978:	2000011c 	.word	0x2000011c

0800b97c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	607b      	str	r3, [r7, #4]
}
 800b994:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b996:	4b0f      	ldr	r3, [pc, #60]	@ (800b9d4 <vPortEnterCritical+0x58>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3301      	adds	r3, #1
 800b99c:	4a0d      	ldr	r2, [pc, #52]	@ (800b9d4 <vPortEnterCritical+0x58>)
 800b99e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d4 <vPortEnterCritical+0x58>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d110      	bne.n	800b9ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b9d8 <vPortEnterCritical+0x5c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00b      	beq.n	800b9ca <vPortEnterCritical+0x4e>
	__asm volatile
 800b9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	603b      	str	r3, [r7, #0]
}
 800b9c4:	bf00      	nop
 800b9c6:	bf00      	nop
 800b9c8:	e7fd      	b.n	800b9c6 <vPortEnterCritical+0x4a>
	}
}
 800b9ca:	bf00      	nop
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bc80      	pop	{r7}
 800b9d2:	4770      	bx	lr
 800b9d4:	2000011c 	.word	0x2000011c
 800b9d8:	e000ed04 	.word	0xe000ed04

0800b9dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b9e2:	4b12      	ldr	r3, [pc, #72]	@ (800ba2c <vPortExitCritical+0x50>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10b      	bne.n	800ba02 <vPortExitCritical+0x26>
	__asm volatile
 800b9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ee:	f383 8811 	msr	BASEPRI, r3
 800b9f2:	f3bf 8f6f 	isb	sy
 800b9f6:	f3bf 8f4f 	dsb	sy
 800b9fa:	607b      	str	r3, [r7, #4]
}
 800b9fc:	bf00      	nop
 800b9fe:	bf00      	nop
 800ba00:	e7fd      	b.n	800b9fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba02:	4b0a      	ldr	r3, [pc, #40]	@ (800ba2c <vPortExitCritical+0x50>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	4a08      	ldr	r2, [pc, #32]	@ (800ba2c <vPortExitCritical+0x50>)
 800ba0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba0c:	4b07      	ldr	r3, [pc, #28]	@ (800ba2c <vPortExitCritical+0x50>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d105      	bne.n	800ba20 <vPortExitCritical+0x44>
 800ba14:	2300      	movs	r3, #0
 800ba16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	f383 8811 	msr	BASEPRI, r3
}
 800ba1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba20:	bf00      	nop
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bc80      	pop	{r7}
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	2000011c 	.word	0x2000011c

0800ba30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba30:	f3ef 8009 	mrs	r0, PSP
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	4b0d      	ldr	r3, [pc, #52]	@ (800ba70 <pxCurrentTCBConst>)
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ba40:	6010      	str	r0, [r2, #0]
 800ba42:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ba46:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ba4a:	f380 8811 	msr	BASEPRI, r0
 800ba4e:	f7fe ffed 	bl	800aa2c <vTaskSwitchContext>
 800ba52:	f04f 0000 	mov.w	r0, #0
 800ba56:	f380 8811 	msr	BASEPRI, r0
 800ba5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ba5e:	6819      	ldr	r1, [r3, #0]
 800ba60:	6808      	ldr	r0, [r1, #0]
 800ba62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ba66:	f380 8809 	msr	PSP, r0
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	4770      	bx	lr

0800ba70 <pxCurrentTCBConst>:
 800ba70:	20001050 	.word	0x20001050
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ba74:	bf00      	nop
 800ba76:	bf00      	nop

0800ba78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	607b      	str	r3, [r7, #4]
}
 800ba90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba92:	f7fe ff11 	bl	800a8b8 <xTaskIncrementTick>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba9c:	4b06      	ldr	r3, [pc, #24]	@ (800bab8 <xPortSysTickHandler+0x40>)
 800ba9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	2300      	movs	r3, #0
 800baa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	f383 8811 	msr	BASEPRI, r3
}
 800baae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bab0:	bf00      	nop
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	e000ed04 	.word	0xe000ed04

0800babc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800babc:	b480      	push	{r7}
 800babe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bac0:	4b0a      	ldr	r3, [pc, #40]	@ (800baec <vPortSetupTimerInterrupt+0x30>)
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bac6:	4b0a      	ldr	r3, [pc, #40]	@ (800baf0 <vPortSetupTimerInterrupt+0x34>)
 800bac8:	2200      	movs	r2, #0
 800baca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bacc:	4b09      	ldr	r3, [pc, #36]	@ (800baf4 <vPortSetupTimerInterrupt+0x38>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a09      	ldr	r2, [pc, #36]	@ (800baf8 <vPortSetupTimerInterrupt+0x3c>)
 800bad2:	fba2 2303 	umull	r2, r3, r2, r3
 800bad6:	099b      	lsrs	r3, r3, #6
 800bad8:	4a08      	ldr	r2, [pc, #32]	@ (800bafc <vPortSetupTimerInterrupt+0x40>)
 800bada:	3b01      	subs	r3, #1
 800badc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bade:	4b03      	ldr	r3, [pc, #12]	@ (800baec <vPortSetupTimerInterrupt+0x30>)
 800bae0:	2207      	movs	r2, #7
 800bae2:	601a      	str	r2, [r3, #0]
}
 800bae4:	bf00      	nop
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bc80      	pop	{r7}
 800baea:	4770      	bx	lr
 800baec:	e000e010 	.word	0xe000e010
 800baf0:	e000e018 	.word	0xe000e018
 800baf4:	20000000 	.word	0x20000000
 800baf8:	10624dd3 	.word	0x10624dd3
 800bafc:	e000e014 	.word	0xe000e014

0800bb00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb06:	f3ef 8305 	mrs	r3, IPSR
 800bb0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2b0f      	cmp	r3, #15
 800bb10:	d915      	bls.n	800bb3e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb12:	4a17      	ldr	r2, [pc, #92]	@ (800bb70 <vPortValidateInterruptPriority+0x70>)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	4413      	add	r3, r2
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb1c:	4b15      	ldr	r3, [pc, #84]	@ (800bb74 <vPortValidateInterruptPriority+0x74>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	7afa      	ldrb	r2, [r7, #11]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d20b      	bcs.n	800bb3e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	607b      	str	r3, [r7, #4]
}
 800bb38:	bf00      	nop
 800bb3a:	bf00      	nop
 800bb3c:	e7fd      	b.n	800bb3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb3e:	4b0e      	ldr	r3, [pc, #56]	@ (800bb78 <vPortValidateInterruptPriority+0x78>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bb46:	4b0d      	ldr	r3, [pc, #52]	@ (800bb7c <vPortValidateInterruptPriority+0x7c>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d90b      	bls.n	800bb66 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	603b      	str	r3, [r7, #0]
}
 800bb60:	bf00      	nop
 800bb62:	bf00      	nop
 800bb64:	e7fd      	b.n	800bb62 <vPortValidateInterruptPriority+0x62>
	}
 800bb66:	bf00      	nop
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bc80      	pop	{r7}
 800bb6e:	4770      	bx	lr
 800bb70:	e000e3f0 	.word	0xe000e3f0
 800bb74:	2000167c 	.word	0x2000167c
 800bb78:	e000ed0c 	.word	0xe000ed0c
 800bb7c:	20001680 	.word	0x20001680

0800bb80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b08a      	sub	sp, #40	@ 0x28
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb8c:	f7fe fdda 	bl	800a744 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb90:	4b5c      	ldr	r3, [pc, #368]	@ (800bd04 <pvPortMalloc+0x184>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb98:	f000 f924 	bl	800bde4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb9c:	4b5a      	ldr	r3, [pc, #360]	@ (800bd08 <pvPortMalloc+0x188>)
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	4013      	ands	r3, r2
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f040 8095 	bne.w	800bcd4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01e      	beq.n	800bbee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bbb0:	2208      	movs	r2, #8
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f003 0307 	and.w	r3, r3, #7
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d015      	beq.n	800bbee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f023 0307 	bic.w	r3, r3, #7
 800bbc8:	3308      	adds	r3, #8
 800bbca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f003 0307 	and.w	r3, r3, #7
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00b      	beq.n	800bbee <pvPortMalloc+0x6e>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	617b      	str	r3, [r7, #20]
}
 800bbe8:	bf00      	nop
 800bbea:	bf00      	nop
 800bbec:	e7fd      	b.n	800bbea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d06f      	beq.n	800bcd4 <pvPortMalloc+0x154>
 800bbf4:	4b45      	ldr	r3, [pc, #276]	@ (800bd0c <pvPortMalloc+0x18c>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d86a      	bhi.n	800bcd4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bbfe:	4b44      	ldr	r3, [pc, #272]	@ (800bd10 <pvPortMalloc+0x190>)
 800bc00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc02:	4b43      	ldr	r3, [pc, #268]	@ (800bd10 <pvPortMalloc+0x190>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc08:	e004      	b.n	800bc14 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d903      	bls.n	800bc26 <pvPortMalloc+0xa6>
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1f1      	bne.n	800bc0a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc26:	4b37      	ldr	r3, [pc, #220]	@ (800bd04 <pvPortMalloc+0x184>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d051      	beq.n	800bcd4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc30:	6a3b      	ldr	r3, [r7, #32]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2208      	movs	r2, #8
 800bc36:	4413      	add	r3, r2
 800bc38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	1ad2      	subs	r2, r2, r3
 800bc4a:	2308      	movs	r3, #8
 800bc4c:	005b      	lsls	r3, r3, #1
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d920      	bls.n	800bc94 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4413      	add	r3, r2
 800bc58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	f003 0307 	and.w	r3, r3, #7
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00b      	beq.n	800bc7c <pvPortMalloc+0xfc>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	613b      	str	r3, [r7, #16]
}
 800bc76:	bf00      	nop
 800bc78:	bf00      	nop
 800bc7a:	e7fd      	b.n	800bc78 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	1ad2      	subs	r2, r2, r3
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bc88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc8e:	69b8      	ldr	r0, [r7, #24]
 800bc90:	f000 f90a 	bl	800bea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc94:	4b1d      	ldr	r3, [pc, #116]	@ (800bd0c <pvPortMalloc+0x18c>)
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	4a1b      	ldr	r2, [pc, #108]	@ (800bd0c <pvPortMalloc+0x18c>)
 800bca0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bca2:	4b1a      	ldr	r3, [pc, #104]	@ (800bd0c <pvPortMalloc+0x18c>)
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	4b1b      	ldr	r3, [pc, #108]	@ (800bd14 <pvPortMalloc+0x194>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d203      	bcs.n	800bcb6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bcae:	4b17      	ldr	r3, [pc, #92]	@ (800bd0c <pvPortMalloc+0x18c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a18      	ldr	r2, [pc, #96]	@ (800bd14 <pvPortMalloc+0x194>)
 800bcb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb8:	685a      	ldr	r2, [r3, #4]
 800bcba:	4b13      	ldr	r3, [pc, #76]	@ (800bd08 <pvPortMalloc+0x188>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	431a      	orrs	r2, r3
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bcca:	4b13      	ldr	r3, [pc, #76]	@ (800bd18 <pvPortMalloc+0x198>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	4a11      	ldr	r2, [pc, #68]	@ (800bd18 <pvPortMalloc+0x198>)
 800bcd2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bcd4:	f7fe fd44 	bl	800a760 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	f003 0307 	and.w	r3, r3, #7
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00b      	beq.n	800bcfa <pvPortMalloc+0x17a>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	60fb      	str	r3, [r7, #12]
}
 800bcf4:	bf00      	nop
 800bcf6:	bf00      	nop
 800bcf8:	e7fd      	b.n	800bcf6 <pvPortMalloc+0x176>
	return pvReturn;
 800bcfa:	69fb      	ldr	r3, [r7, #28]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3728      	adds	r7, #40	@ 0x28
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	2000228c 	.word	0x2000228c
 800bd08:	200022a0 	.word	0x200022a0
 800bd0c:	20002290 	.word	0x20002290
 800bd10:	20002284 	.word	0x20002284
 800bd14:	20002294 	.word	0x20002294
 800bd18:	20002298 	.word	0x20002298

0800bd1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d04f      	beq.n	800bdce <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bd2e:	2308      	movs	r3, #8
 800bd30:	425b      	negs	r3, r3
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	4413      	add	r3, r2
 800bd36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	685a      	ldr	r2, [r3, #4]
 800bd40:	4b25      	ldr	r3, [pc, #148]	@ (800bdd8 <vPortFree+0xbc>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4013      	ands	r3, r2
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10b      	bne.n	800bd62 <vPortFree+0x46>
	__asm volatile
 800bd4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	60fb      	str	r3, [r7, #12]
}
 800bd5c:	bf00      	nop
 800bd5e:	bf00      	nop
 800bd60:	e7fd      	b.n	800bd5e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00b      	beq.n	800bd82 <vPortFree+0x66>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	60bb      	str	r3, [r7, #8]
}
 800bd7c:	bf00      	nop
 800bd7e:	bf00      	nop
 800bd80:	e7fd      	b.n	800bd7e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	685a      	ldr	r2, [r3, #4]
 800bd86:	4b14      	ldr	r3, [pc, #80]	@ (800bdd8 <vPortFree+0xbc>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d01e      	beq.n	800bdce <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d11a      	bne.n	800bdce <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd8 <vPortFree+0xbc>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	43db      	mvns	r3, r3
 800bda2:	401a      	ands	r2, r3
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bda8:	f7fe fccc 	bl	800a744 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	4b0a      	ldr	r3, [pc, #40]	@ (800bddc <vPortFree+0xc0>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	4a09      	ldr	r2, [pc, #36]	@ (800bddc <vPortFree+0xc0>)
 800bdb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bdba:	6938      	ldr	r0, [r7, #16]
 800bdbc:	f000 f874 	bl	800bea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bdc0:	4b07      	ldr	r3, [pc, #28]	@ (800bde0 <vPortFree+0xc4>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	4a06      	ldr	r2, [pc, #24]	@ (800bde0 <vPortFree+0xc4>)
 800bdc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bdca:	f7fe fcc9 	bl	800a760 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bdce:	bf00      	nop
 800bdd0:	3718      	adds	r7, #24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	200022a0 	.word	0x200022a0
 800bddc:	20002290 	.word	0x20002290
 800bde0:	2000229c 	.word	0x2000229c

0800bde4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bdea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800bdee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bdf0:	4b27      	ldr	r3, [pc, #156]	@ (800be90 <prvHeapInit+0xac>)
 800bdf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f003 0307 	and.w	r3, r3, #7
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00c      	beq.n	800be18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3307      	adds	r3, #7
 800be02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f023 0307 	bic.w	r3, r3, #7
 800be0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	4a1f      	ldr	r2, [pc, #124]	@ (800be90 <prvHeapInit+0xac>)
 800be14:	4413      	add	r3, r2
 800be16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800be1c:	4a1d      	ldr	r2, [pc, #116]	@ (800be94 <prvHeapInit+0xb0>)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800be22:	4b1c      	ldr	r3, [pc, #112]	@ (800be94 <prvHeapInit+0xb0>)
 800be24:	2200      	movs	r2, #0
 800be26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	4413      	add	r3, r2
 800be2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800be30:	2208      	movs	r2, #8
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	1a9b      	subs	r3, r3, r2
 800be36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f023 0307 	bic.w	r3, r3, #7
 800be3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4a15      	ldr	r2, [pc, #84]	@ (800be98 <prvHeapInit+0xb4>)
 800be44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be46:	4b14      	ldr	r3, [pc, #80]	@ (800be98 <prvHeapInit+0xb4>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2200      	movs	r2, #0
 800be4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be4e:	4b12      	ldr	r3, [pc, #72]	@ (800be98 <prvHeapInit+0xb4>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2200      	movs	r2, #0
 800be54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	1ad2      	subs	r2, r2, r3
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be64:	4b0c      	ldr	r3, [pc, #48]	@ (800be98 <prvHeapInit+0xb4>)
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	4a0a      	ldr	r2, [pc, #40]	@ (800be9c <prvHeapInit+0xb8>)
 800be72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	4a09      	ldr	r2, [pc, #36]	@ (800bea0 <prvHeapInit+0xbc>)
 800be7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be7c:	4b09      	ldr	r3, [pc, #36]	@ (800bea4 <prvHeapInit+0xc0>)
 800be7e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800be82:	601a      	str	r2, [r3, #0]
}
 800be84:	bf00      	nop
 800be86:	3714      	adds	r7, #20
 800be88:	46bd      	mov	sp, r7
 800be8a:	bc80      	pop	{r7}
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	20001684 	.word	0x20001684
 800be94:	20002284 	.word	0x20002284
 800be98:	2000228c 	.word	0x2000228c
 800be9c:	20002294 	.word	0x20002294
 800bea0:	20002290 	.word	0x20002290
 800bea4:	200022a0 	.word	0x200022a0

0800bea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800beb0:	4b27      	ldr	r3, [pc, #156]	@ (800bf50 <prvInsertBlockIntoFreeList+0xa8>)
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	e002      	b.n	800bebc <prvInsertBlockIntoFreeList+0x14>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	60fb      	str	r3, [r7, #12]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d8f7      	bhi.n	800beb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	4413      	add	r3, r2
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d108      	bne.n	800beea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	685a      	ldr	r2, [r3, #4]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	441a      	add	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	441a      	add	r2, r3
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	429a      	cmp	r2, r3
 800befc:	d118      	bne.n	800bf30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	4b14      	ldr	r3, [pc, #80]	@ (800bf54 <prvInsertBlockIntoFreeList+0xac>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d00d      	beq.n	800bf26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	441a      	add	r2, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	e008      	b.n	800bf38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bf26:	4b0b      	ldr	r3, [pc, #44]	@ (800bf54 <prvInsertBlockIntoFreeList+0xac>)
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	e003      	b.n	800bf38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d002      	beq.n	800bf46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf46:	bf00      	nop
 800bf48:	3714      	adds	r7, #20
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bc80      	pop	{r7}
 800bf4e:	4770      	bx	lr
 800bf50:	20002284 	.word	0x20002284
 800bf54:	2000228c 	.word	0x2000228c

0800bf58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	4912      	ldr	r1, [pc, #72]	@ (800bfa8 <MX_USB_DEVICE_Init+0x50>)
 800bf60:	4812      	ldr	r0, [pc, #72]	@ (800bfac <MX_USB_DEVICE_Init+0x54>)
 800bf62:	f7fc f9de 	bl	8008322 <USBD_Init>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d001      	beq.n	800bf70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bf6c:	f7f5 f8e8 	bl	8001140 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bf70:	490f      	ldr	r1, [pc, #60]	@ (800bfb0 <MX_USB_DEVICE_Init+0x58>)
 800bf72:	480e      	ldr	r0, [pc, #56]	@ (800bfac <MX_USB_DEVICE_Init+0x54>)
 800bf74:	f7fc fa00 	bl	8008378 <USBD_RegisterClass>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d001      	beq.n	800bf82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bf7e:	f7f5 f8df 	bl	8001140 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bf82:	490c      	ldr	r1, [pc, #48]	@ (800bfb4 <MX_USB_DEVICE_Init+0x5c>)
 800bf84:	4809      	ldr	r0, [pc, #36]	@ (800bfac <MX_USB_DEVICE_Init+0x54>)
 800bf86:	f7fc f931 	bl	80081ec <USBD_CDC_RegisterInterface>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bf90:	f7f5 f8d6 	bl	8001140 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bf94:	4805      	ldr	r0, [pc, #20]	@ (800bfac <MX_USB_DEVICE_Init+0x54>)
 800bf96:	f7fc fa08 	bl	80083aa <USBD_Start>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d001      	beq.n	800bfa4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bfa0:	f7f5 f8ce 	bl	8001140 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bfa4:	bf00      	nop
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	20000130 	.word	0x20000130
 800bfac:	200022a4 	.word	0x200022a4
 800bfb0:	20000018 	.word	0x20000018
 800bfb4:	20000120 	.word	0x20000120

0800bfb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	4905      	ldr	r1, [pc, #20]	@ (800bfd4 <CDC_Init_FS+0x1c>)
 800bfc0:	4805      	ldr	r0, [pc, #20]	@ (800bfd8 <CDC_Init_FS+0x20>)
 800bfc2:	f7fc f929 	bl	8008218 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bfc6:	4905      	ldr	r1, [pc, #20]	@ (800bfdc <CDC_Init_FS+0x24>)
 800bfc8:	4803      	ldr	r0, [pc, #12]	@ (800bfd8 <CDC_Init_FS+0x20>)
 800bfca:	f7fc f93e 	bl	800824a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bfce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	20002968 	.word	0x20002968
 800bfd8:	200022a4 	.word	0x200022a4
 800bfdc:	20002568 	.word	0x20002568

0800bfe0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bfe4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bc80      	pop	{r7}
 800bfec:	4770      	bx	lr
	...

0800bff0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	4603      	mov	r3, r0
 800bff8:	6039      	str	r1, [r7, #0]
 800bffa:	71fb      	strb	r3, [r7, #7]
 800bffc:	4613      	mov	r3, r2
 800bffe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c000:	79fb      	ldrb	r3, [r7, #7]
 800c002:	2b23      	cmp	r3, #35	@ 0x23
 800c004:	d84a      	bhi.n	800c09c <CDC_Control_FS+0xac>
 800c006:	a201      	add	r2, pc, #4	@ (adr r2, 800c00c <CDC_Control_FS+0x1c>)
 800c008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00c:	0800c09d 	.word	0x0800c09d
 800c010:	0800c09d 	.word	0x0800c09d
 800c014:	0800c09d 	.word	0x0800c09d
 800c018:	0800c09d 	.word	0x0800c09d
 800c01c:	0800c09d 	.word	0x0800c09d
 800c020:	0800c09d 	.word	0x0800c09d
 800c024:	0800c09d 	.word	0x0800c09d
 800c028:	0800c09d 	.word	0x0800c09d
 800c02c:	0800c09d 	.word	0x0800c09d
 800c030:	0800c09d 	.word	0x0800c09d
 800c034:	0800c09d 	.word	0x0800c09d
 800c038:	0800c09d 	.word	0x0800c09d
 800c03c:	0800c09d 	.word	0x0800c09d
 800c040:	0800c09d 	.word	0x0800c09d
 800c044:	0800c09d 	.word	0x0800c09d
 800c048:	0800c09d 	.word	0x0800c09d
 800c04c:	0800c09d 	.word	0x0800c09d
 800c050:	0800c09d 	.word	0x0800c09d
 800c054:	0800c09d 	.word	0x0800c09d
 800c058:	0800c09d 	.word	0x0800c09d
 800c05c:	0800c09d 	.word	0x0800c09d
 800c060:	0800c09d 	.word	0x0800c09d
 800c064:	0800c09d 	.word	0x0800c09d
 800c068:	0800c09d 	.word	0x0800c09d
 800c06c:	0800c09d 	.word	0x0800c09d
 800c070:	0800c09d 	.word	0x0800c09d
 800c074:	0800c09d 	.word	0x0800c09d
 800c078:	0800c09d 	.word	0x0800c09d
 800c07c:	0800c09d 	.word	0x0800c09d
 800c080:	0800c09d 	.word	0x0800c09d
 800c084:	0800c09d 	.word	0x0800c09d
 800c088:	0800c09d 	.word	0x0800c09d
 800c08c:	0800c09d 	.word	0x0800c09d
 800c090:	0800c09d 	.word	0x0800c09d
 800c094:	0800c09d 	.word	0x0800c09d
 800c098:	0800c09d 	.word	0x0800c09d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c09c:	bf00      	nop
  }

  return (USBD_OK);
 800c09e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bc80      	pop	{r7}
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop

0800c0ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c0b6:	6879      	ldr	r1, [r7, #4]
 800c0b8:	4805      	ldr	r0, [pc, #20]	@ (800c0d0 <CDC_Receive_FS+0x24>)
 800c0ba:	f7fc f8c6 	bl	800824a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c0be:	4804      	ldr	r0, [pc, #16]	@ (800c0d0 <CDC_Receive_FS+0x24>)
 800c0c0:	f7fc f905 	bl	80082ce <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c0c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3708      	adds	r7, #8
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	200022a4 	.word	0x200022a4

0800c0d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c0e4:	4b0d      	ldr	r3, [pc, #52]	@ (800c11c <CDC_Transmit_FS+0x48>)
 800c0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d001      	beq.n	800c0fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e00b      	b.n	800c112 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c0fa:	887b      	ldrh	r3, [r7, #2]
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	6879      	ldr	r1, [r7, #4]
 800c100:	4806      	ldr	r0, [pc, #24]	@ (800c11c <CDC_Transmit_FS+0x48>)
 800c102:	f7fc f889 	bl	8008218 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c106:	4805      	ldr	r0, [pc, #20]	@ (800c11c <CDC_Transmit_FS+0x48>)
 800c108:	f7fc f8b2 	bl	8008270 <USBD_CDC_TransmitPacket>
 800c10c:	4603      	mov	r3, r0
 800c10e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c110:	7bfb      	ldrb	r3, [r7, #15]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	200022a4 	.word	0x200022a4

0800c120 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	4603      	mov	r3, r0
 800c128:	6039      	str	r1, [r7, #0]
 800c12a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	2212      	movs	r2, #18
 800c130:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c132:	4b03      	ldr	r3, [pc, #12]	@ (800c140 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c134:	4618      	mov	r0, r3
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	bc80      	pop	{r7}
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop
 800c140:	2000014c 	.word	0x2000014c

0800c144 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	4603      	mov	r3, r0
 800c14c:	6039      	str	r1, [r7, #0]
 800c14e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	2204      	movs	r2, #4
 800c154:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c156:	4b03      	ldr	r3, [pc, #12]	@ (800c164 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c158:	4618      	mov	r0, r3
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bc80      	pop	{r7}
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	20000160 	.word	0x20000160

0800c168 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	4603      	mov	r3, r0
 800c170:	6039      	str	r1, [r7, #0]
 800c172:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c174:	79fb      	ldrb	r3, [r7, #7]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d105      	bne.n	800c186 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	4907      	ldr	r1, [pc, #28]	@ (800c19c <USBD_FS_ProductStrDescriptor+0x34>)
 800c17e:	4808      	ldr	r0, [pc, #32]	@ (800c1a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c180:	f7fd f889 	bl	8009296 <USBD_GetString>
 800c184:	e004      	b.n	800c190 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	4904      	ldr	r1, [pc, #16]	@ (800c19c <USBD_FS_ProductStrDescriptor+0x34>)
 800c18a:	4805      	ldr	r0, [pc, #20]	@ (800c1a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c18c:	f7fd f883 	bl	8009296 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c190:	4b02      	ldr	r3, [pc, #8]	@ (800c19c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20002d68 	.word	0x20002d68
 800c1a0:	0800d96c 	.word	0x0800d96c

0800c1a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	6039      	str	r1, [r7, #0]
 800c1ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	4904      	ldr	r1, [pc, #16]	@ (800c1c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c1b4:	4804      	ldr	r0, [pc, #16]	@ (800c1c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c1b6:	f7fd f86e 	bl	8009296 <USBD_GetString>
  return USBD_StrDesc;
 800c1ba:	4b02      	ldr	r3, [pc, #8]	@ (800c1c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	20002d68 	.word	0x20002d68
 800c1c8:	0800d984 	.word	0x0800d984

0800c1cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	6039      	str	r1, [r7, #0]
 800c1d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	221a      	movs	r2, #26
 800c1dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c1de:	f000 f843 	bl	800c268 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c1e2:	4b02      	ldr	r3, [pc, #8]	@ (800c1ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	20000164 	.word	0x20000164

0800c1f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	6039      	str	r1, [r7, #0]
 800c1fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c1fc:	79fb      	ldrb	r3, [r7, #7]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d105      	bne.n	800c20e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c202:	683a      	ldr	r2, [r7, #0]
 800c204:	4907      	ldr	r1, [pc, #28]	@ (800c224 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c206:	4808      	ldr	r0, [pc, #32]	@ (800c228 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c208:	f7fd f845 	bl	8009296 <USBD_GetString>
 800c20c:	e004      	b.n	800c218 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c20e:	683a      	ldr	r2, [r7, #0]
 800c210:	4904      	ldr	r1, [pc, #16]	@ (800c224 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c212:	4805      	ldr	r0, [pc, #20]	@ (800c228 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c214:	f7fd f83f 	bl	8009296 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c218:	4b02      	ldr	r3, [pc, #8]	@ (800c224 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	20002d68 	.word	0x20002d68
 800c228:	0800d998 	.word	0x0800d998

0800c22c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	6039      	str	r1, [r7, #0]
 800c236:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c238:	79fb      	ldrb	r3, [r7, #7]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d105      	bne.n	800c24a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	4907      	ldr	r1, [pc, #28]	@ (800c260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c242:	4808      	ldr	r0, [pc, #32]	@ (800c264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c244:	f7fd f827 	bl	8009296 <USBD_GetString>
 800c248:	e004      	b.n	800c254 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	4904      	ldr	r1, [pc, #16]	@ (800c260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c24e:	4805      	ldr	r0, [pc, #20]	@ (800c264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c250:	f7fd f821 	bl	8009296 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c254:	4b02      	ldr	r3, [pc, #8]	@ (800c260 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c256:	4618      	mov	r0, r3
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20002d68 	.word	0x20002d68
 800c264:	0800d9a4 	.word	0x0800d9a4

0800c268 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c26e:	4b0f      	ldr	r3, [pc, #60]	@ (800c2ac <Get_SerialNum+0x44>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c274:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b0 <Get_SerialNum+0x48>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c27a:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b4 <Get_SerialNum+0x4c>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4413      	add	r3, r2
 800c286:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d009      	beq.n	800c2a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c28e:	2208      	movs	r2, #8
 800c290:	4909      	ldr	r1, [pc, #36]	@ (800c2b8 <Get_SerialNum+0x50>)
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f000 f814 	bl	800c2c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c298:	2204      	movs	r2, #4
 800c29a:	4908      	ldr	r1, [pc, #32]	@ (800c2bc <Get_SerialNum+0x54>)
 800c29c:	68b8      	ldr	r0, [r7, #8]
 800c29e:	f000 f80f 	bl	800c2c0 <IntToUnicode>
  }
}
 800c2a2:	bf00      	nop
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	1ffff7e8 	.word	0x1ffff7e8
 800c2b0:	1ffff7ec 	.word	0x1ffff7ec
 800c2b4:	1ffff7f0 	.word	0x1ffff7f0
 800c2b8:	20000166 	.word	0x20000166
 800c2bc:	20000176 	.word	0x20000176

0800c2c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b087      	sub	sp, #28
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	75fb      	strb	r3, [r7, #23]
 800c2d6:	e027      	b.n	800c328 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	0f1b      	lsrs	r3, r3, #28
 800c2dc:	2b09      	cmp	r3, #9
 800c2de:	d80b      	bhi.n	800c2f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	0f1b      	lsrs	r3, r3, #28
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	7dfb      	ldrb	r3, [r7, #23]
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	440b      	add	r3, r1
 800c2f0:	3230      	adds	r2, #48	@ 0x30
 800c2f2:	b2d2      	uxtb	r2, r2
 800c2f4:	701a      	strb	r2, [r3, #0]
 800c2f6:	e00a      	b.n	800c30e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	0f1b      	lsrs	r3, r3, #28
 800c2fc:	b2da      	uxtb	r2, r3
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	005b      	lsls	r3, r3, #1
 800c302:	4619      	mov	r1, r3
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	440b      	add	r3, r1
 800c308:	3237      	adds	r2, #55	@ 0x37
 800c30a:	b2d2      	uxtb	r2, r2
 800c30c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	011b      	lsls	r3, r3, #4
 800c312:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c314:	7dfb      	ldrb	r3, [r7, #23]
 800c316:	005b      	lsls	r3, r3, #1
 800c318:	3301      	adds	r3, #1
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	4413      	add	r3, r2
 800c31e:	2200      	movs	r2, #0
 800c320:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c322:	7dfb      	ldrb	r3, [r7, #23]
 800c324:	3301      	adds	r3, #1
 800c326:	75fb      	strb	r3, [r7, #23]
 800c328:	7dfa      	ldrb	r2, [r7, #23]
 800c32a:	79fb      	ldrb	r3, [r7, #7]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d3d3      	bcc.n	800c2d8 <IntToUnicode+0x18>
  }
}
 800c330:	bf00      	nop
 800c332:	bf00      	nop
 800c334:	371c      	adds	r7, #28
 800c336:	46bd      	mov	sp, r7
 800c338:	bc80      	pop	{r7}
 800c33a:	4770      	bx	lr

0800c33c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a0d      	ldr	r2, [pc, #52]	@ (800c380 <HAL_PCD_MspInit+0x44>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d113      	bne.n	800c376 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c34e:	4b0d      	ldr	r3, [pc, #52]	@ (800c384 <HAL_PCD_MspInit+0x48>)
 800c350:	69db      	ldr	r3, [r3, #28]
 800c352:	4a0c      	ldr	r2, [pc, #48]	@ (800c384 <HAL_PCD_MspInit+0x48>)
 800c354:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c358:	61d3      	str	r3, [r2, #28]
 800c35a:	4b0a      	ldr	r3, [pc, #40]	@ (800c384 <HAL_PCD_MspInit+0x48>)
 800c35c:	69db      	ldr	r3, [r3, #28]
 800c35e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800c366:	2200      	movs	r2, #0
 800c368:	2105      	movs	r1, #5
 800c36a:	2014      	movs	r0, #20
 800c36c:	f7f5 f9db 	bl	8001726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c370:	2014      	movs	r0, #20
 800c372:	f7f5 f9f4 	bl	800175e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c376:	bf00      	nop
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	40005c00 	.word	0x40005c00
 800c384:	40021000 	.word	0x40021000

0800c388 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c39c:	4619      	mov	r1, r3
 800c39e:	4610      	mov	r0, r2
 800c3a0:	f7fc f84b 	bl	800843a <USBD_LL_SetupStage>
}
 800c3a4:	bf00      	nop
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800c3be:	78fa      	ldrb	r2, [r7, #3]
 800c3c0:	6879      	ldr	r1, [r7, #4]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	4413      	add	r3, r2
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	440b      	add	r3, r1
 800c3cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	78fb      	ldrb	r3, [r7, #3]
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	f7fc f87d 	bl	80084d4 <USBD_LL_DataOutStage>
}
 800c3da:	bf00      	nop
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b082      	sub	sp, #8
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800c3f4:	78fa      	ldrb	r2, [r7, #3]
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	00db      	lsls	r3, r3, #3
 800c400:	440b      	add	r3, r1
 800c402:	3324      	adds	r3, #36	@ 0x24
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	78fb      	ldrb	r3, [r7, #3]
 800c408:	4619      	mov	r1, r3
 800c40a:	f7fc f8d4 	bl	80085b6 <USBD_LL_DataInStage>
}
 800c40e:	bf00      	nop
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b082      	sub	sp, #8
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c424:	4618      	mov	r0, r3
 800c426:	f7fc f9e4 	bl	80087f2 <USBD_LL_SOF>
}
 800c42a:	bf00      	nop
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b084      	sub	sp, #16
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c43a:	2301      	movs	r3, #1
 800c43c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	799b      	ldrb	r3, [r3, #6]
 800c442:	2b02      	cmp	r3, #2
 800c444:	d001      	beq.n	800c44a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c446:	f7f4 fe7b 	bl	8001140 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c450:	7bfa      	ldrb	r2, [r7, #15]
 800c452:	4611      	mov	r1, r2
 800c454:	4618      	mov	r0, r3
 800c456:	f7fc f994 	bl	8008782 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c460:	4618      	mov	r0, r3
 800c462:	f7fc f94d 	bl	8008700 <USBD_LL_Reset>
}
 800c466:	bf00      	nop
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
	...

0800c470 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fc f98e 	bl	80087a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	7a9b      	ldrb	r3, [r3, #10]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d005      	beq.n	800c498 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c48c:	4b04      	ldr	r3, [pc, #16]	@ (800c4a0 <HAL_PCD_SuspendCallback+0x30>)
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	4a03      	ldr	r2, [pc, #12]	@ (800c4a0 <HAL_PCD_SuspendCallback+0x30>)
 800c492:	f043 0306 	orr.w	r3, r3, #6
 800c496:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	e000ed00 	.word	0xe000ed00

0800c4a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fc f988 	bl	80087c8 <USBD_LL_Resume>
}
 800c4b8:	bf00      	nop
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c4c8:	4a28      	ldr	r2, [pc, #160]	@ (800c56c <USBD_LL_Init+0xac>)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a26      	ldr	r2, [pc, #152]	@ (800c56c <USBD_LL_Init+0xac>)
 800c4d4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c4d8:	4b24      	ldr	r3, [pc, #144]	@ (800c56c <USBD_LL_Init+0xac>)
 800c4da:	4a25      	ldr	r2, [pc, #148]	@ (800c570 <USBD_LL_Init+0xb0>)
 800c4dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c4de:	4b23      	ldr	r3, [pc, #140]	@ (800c56c <USBD_LL_Init+0xac>)
 800c4e0:	2208      	movs	r2, #8
 800c4e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c4e4:	4b21      	ldr	r3, [pc, #132]	@ (800c56c <USBD_LL_Init+0xac>)
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c4ea:	4b20      	ldr	r3, [pc, #128]	@ (800c56c <USBD_LL_Init+0xac>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c4f0:	4b1e      	ldr	r3, [pc, #120]	@ (800c56c <USBD_LL_Init+0xac>)
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c4f6:	4b1d      	ldr	r3, [pc, #116]	@ (800c56c <USBD_LL_Init+0xac>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c4fc:	481b      	ldr	r0, [pc, #108]	@ (800c56c <USBD_LL_Init+0xac>)
 800c4fe:	f7f6 fc12 	bl	8002d26 <HAL_PCD_Init>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d001      	beq.n	800c50c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c508:	f7f4 fe1a 	bl	8001140 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c512:	2318      	movs	r3, #24
 800c514:	2200      	movs	r2, #0
 800c516:	2100      	movs	r1, #0
 800c518:	f7f8 f923 	bl	8004762 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c522:	2358      	movs	r3, #88	@ 0x58
 800c524:	2200      	movs	r2, #0
 800c526:	2180      	movs	r1, #128	@ 0x80
 800c528:	f7f8 f91b 	bl	8004762 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c532:	23c0      	movs	r3, #192	@ 0xc0
 800c534:	2200      	movs	r2, #0
 800c536:	2181      	movs	r1, #129	@ 0x81
 800c538:	f7f8 f913 	bl	8004762 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c542:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c546:	2200      	movs	r2, #0
 800c548:	2101      	movs	r1, #1
 800c54a:	f7f8 f90a 	bl	8004762 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c554:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c558:	2200      	movs	r2, #0
 800c55a:	2182      	movs	r1, #130	@ 0x82
 800c55c:	f7f8 f901 	bl	8004762 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	20002f68 	.word	0x20002f68
 800c570:	40005c00 	.word	0x40005c00

0800c574 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c57c:	2300      	movs	r3, #0
 800c57e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7f6 fcc1 	bl	8002f12 <HAL_PCD_Start>
 800c590:	4603      	mov	r3, r0
 800c592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c594:	7bfb      	ldrb	r3, [r7, #15]
 800c596:	4618      	mov	r0, r3
 800c598:	f000 f94e 	bl	800c838 <USBD_Get_USB_Status>
 800c59c:	4603      	mov	r3, r0
 800c59e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b084      	sub	sp, #16
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	4608      	mov	r0, r1
 800c5b4:	4611      	mov	r1, r2
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	70fb      	strb	r3, [r7, #3]
 800c5bc:	460b      	mov	r3, r1
 800c5be:	70bb      	strb	r3, [r7, #2]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c5d2:	78bb      	ldrb	r3, [r7, #2]
 800c5d4:	883a      	ldrh	r2, [r7, #0]
 800c5d6:	78f9      	ldrb	r1, [r7, #3]
 800c5d8:	f7f6 fe15 	bl	8003206 <HAL_PCD_EP_Open>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 f928 	bl	800c838 <USBD_Get_USB_Status>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b084      	sub	sp, #16
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	460b      	mov	r3, r1
 800c600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c602:	2300      	movs	r3, #0
 800c604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c606:	2300      	movs	r3, #0
 800c608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c610:	78fa      	ldrb	r2, [r7, #3]
 800c612:	4611      	mov	r1, r2
 800c614:	4618      	mov	r0, r3
 800c616:	f7f6 fe53 	bl	80032c0 <HAL_PCD_EP_Close>
 800c61a:	4603      	mov	r3, r0
 800c61c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c61e:	7bfb      	ldrb	r3, [r7, #15]
 800c620:	4618      	mov	r0, r3
 800c622:	f000 f909 	bl	800c838 <USBD_Get_USB_Status>
 800c626:	4603      	mov	r3, r0
 800c628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c62a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	460b      	mov	r3, r1
 800c63e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c640:	2300      	movs	r3, #0
 800c642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c644:	2300      	movs	r3, #0
 800c646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c64e:	78fa      	ldrb	r2, [r7, #3]
 800c650:	4611      	mov	r1, r2
 800c652:	4618      	mov	r0, r3
 800c654:	f7f6 fefb 	bl	800344e <HAL_PCD_EP_SetStall>
 800c658:	4603      	mov	r3, r0
 800c65a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c65c:	7bfb      	ldrb	r3, [r7, #15]
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 f8ea 	bl	800c838 <USBD_Get_USB_Status>
 800c664:	4603      	mov	r3, r0
 800c666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c668:	7bbb      	ldrb	r3, [r7, #14]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b084      	sub	sp, #16
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
 800c67a:	460b      	mov	r3, r1
 800c67c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c67e:	2300      	movs	r3, #0
 800c680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c682:	2300      	movs	r3, #0
 800c684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c68c:	78fa      	ldrb	r2, [r7, #3]
 800c68e:	4611      	mov	r1, r2
 800c690:	4618      	mov	r0, r3
 800c692:	f7f6 ff3c 	bl	800350e <HAL_PCD_EP_ClrStall>
 800c696:	4603      	mov	r3, r0
 800c698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 f8cb 	bl	800c838 <USBD_Get_USB_Status>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c6c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c6c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	da0b      	bge.n	800c6e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c6cc:	78fb      	ldrb	r3, [r7, #3]
 800c6ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c6d2:	68f9      	ldr	r1, [r7, #12]
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	4413      	add	r3, r2
 800c6da:	00db      	lsls	r3, r3, #3
 800c6dc:	440b      	add	r3, r1
 800c6de:	3312      	adds	r3, #18
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	e00b      	b.n	800c6fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c6e4:	78fb      	ldrb	r3, [r7, #3]
 800c6e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c6ea:	68f9      	ldr	r1, [r7, #12]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	4413      	add	r3, r2
 800c6f2:	00db      	lsls	r3, r3, #3
 800c6f4:	440b      	add	r3, r1
 800c6f6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c6fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3714      	adds	r7, #20
 800c700:	46bd      	mov	sp, r7
 800c702:	bc80      	pop	{r7}
 800c704:	4770      	bx	lr

0800c706 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b084      	sub	sp, #16
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	460b      	mov	r3, r1
 800c710:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c712:	2300      	movs	r3, #0
 800c714:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c716:	2300      	movs	r3, #0
 800c718:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c720:	78fa      	ldrb	r2, [r7, #3]
 800c722:	4611      	mov	r1, r2
 800c724:	4618      	mov	r0, r3
 800c726:	f7f6 fd4a 	bl	80031be <HAL_PCD_SetAddress>
 800c72a:	4603      	mov	r3, r0
 800c72c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c72e:	7bfb      	ldrb	r3, [r7, #15]
 800c730:	4618      	mov	r0, r3
 800c732:	f000 f881 	bl	800c838 <USBD_Get_USB_Status>
 800c736:	4603      	mov	r3, r0
 800c738:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c73a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3710      	adds	r7, #16
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	607a      	str	r2, [r7, #4]
 800c74e:	461a      	mov	r2, r3
 800c750:	460b      	mov	r3, r1
 800c752:	72fb      	strb	r3, [r7, #11]
 800c754:	4613      	mov	r3, r2
 800c756:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c758:	2300      	movs	r3, #0
 800c75a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c75c:	2300      	movs	r3, #0
 800c75e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c766:	893b      	ldrh	r3, [r7, #8]
 800c768:	7af9      	ldrb	r1, [r7, #11]
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	f7f6 fe38 	bl	80033e0 <HAL_PCD_EP_Transmit>
 800c770:	4603      	mov	r3, r0
 800c772:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c774:	7dfb      	ldrb	r3, [r7, #23]
 800c776:	4618      	mov	r0, r3
 800c778:	f000 f85e 	bl	800c838 <USBD_Get_USB_Status>
 800c77c:	4603      	mov	r3, r0
 800c77e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c780:	7dbb      	ldrb	r3, [r7, #22]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3718      	adds	r7, #24
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b086      	sub	sp, #24
 800c78e:	af00      	add	r7, sp, #0
 800c790:	60f8      	str	r0, [r7, #12]
 800c792:	607a      	str	r2, [r7, #4]
 800c794:	461a      	mov	r2, r3
 800c796:	460b      	mov	r3, r1
 800c798:	72fb      	strb	r3, [r7, #11]
 800c79a:	4613      	mov	r3, r2
 800c79c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c7ac:	893b      	ldrh	r3, [r7, #8]
 800c7ae:	7af9      	ldrb	r1, [r7, #11]
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	f7f6 fdcd 	bl	8003350 <HAL_PCD_EP_Receive>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7ba:	7dfb      	ldrb	r3, [r7, #23]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f000 f83b 	bl	800c838 <USBD_Get_USB_Status>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c7c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3718      	adds	r7, #24
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	460b      	mov	r3, r1
 800c7da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c7e2:	78fa      	ldrb	r2, [r7, #3]
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7f6 fde3 	bl	80033b2 <HAL_PCD_EP_GetRxCount>
 800c7ec:	4603      	mov	r3, r0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
	...

0800c7f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c800:	4b02      	ldr	r3, [pc, #8]	@ (800c80c <USBD_static_malloc+0x14>)
}
 800c802:	4618      	mov	r0, r3
 800c804:	370c      	adds	r7, #12
 800c806:	46bd      	mov	sp, r7
 800c808:	bc80      	pop	{r7}
 800c80a:	4770      	bx	lr
 800c80c:	20003240 	.word	0x20003240

0800c810 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]

}
 800c818:	bf00      	nop
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bc80      	pop	{r7}
 800c820:	4770      	bx	lr

0800c822 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c822:	b480      	push	{r7}
 800c824:	b083      	sub	sp, #12
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	460b      	mov	r3, r1
 800c82c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c82e:	bf00      	nop
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	bc80      	pop	{r7}
 800c836:	4770      	bx	lr

0800c838 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c842:	2300      	movs	r3, #0
 800c844:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	2b03      	cmp	r3, #3
 800c84a:	d817      	bhi.n	800c87c <USBD_Get_USB_Status+0x44>
 800c84c:	a201      	add	r2, pc, #4	@ (adr r2, 800c854 <USBD_Get_USB_Status+0x1c>)
 800c84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c852:	bf00      	nop
 800c854:	0800c865 	.word	0x0800c865
 800c858:	0800c86b 	.word	0x0800c86b
 800c85c:	0800c871 	.word	0x0800c871
 800c860:	0800c877 	.word	0x0800c877
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c864:	2300      	movs	r3, #0
 800c866:	73fb      	strb	r3, [r7, #15]
    break;
 800c868:	e00b      	b.n	800c882 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c86a:	2302      	movs	r3, #2
 800c86c:	73fb      	strb	r3, [r7, #15]
    break;
 800c86e:	e008      	b.n	800c882 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c870:	2301      	movs	r3, #1
 800c872:	73fb      	strb	r3, [r7, #15]
    break;
 800c874:	e005      	b.n	800c882 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c876:	2302      	movs	r3, #2
 800c878:	73fb      	strb	r3, [r7, #15]
    break;
 800c87a:	e002      	b.n	800c882 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c87c:	2302      	movs	r3, #2
 800c87e:	73fb      	strb	r3, [r7, #15]
    break;
 800c880:	bf00      	nop
  }
  return usb_status;
 800c882:	7bfb      	ldrb	r3, [r7, #15]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	bc80      	pop	{r7}
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop

0800c890 <std>:
 800c890:	2300      	movs	r3, #0
 800c892:	b510      	push	{r4, lr}
 800c894:	4604      	mov	r4, r0
 800c896:	e9c0 3300 	strd	r3, r3, [r0]
 800c89a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c89e:	6083      	str	r3, [r0, #8]
 800c8a0:	8181      	strh	r1, [r0, #12]
 800c8a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c8a4:	81c2      	strh	r2, [r0, #14]
 800c8a6:	6183      	str	r3, [r0, #24]
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	2208      	movs	r2, #8
 800c8ac:	305c      	adds	r0, #92	@ 0x5c
 800c8ae:	f000 f9f9 	bl	800cca4 <memset>
 800c8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c8e8 <std+0x58>)
 800c8b4:	6224      	str	r4, [r4, #32]
 800c8b6:	6263      	str	r3, [r4, #36]	@ 0x24
 800c8b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c8ec <std+0x5c>)
 800c8ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c8bc:	4b0c      	ldr	r3, [pc, #48]	@ (800c8f0 <std+0x60>)
 800c8be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c8c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c8f4 <std+0x64>)
 800c8c2:	6323      	str	r3, [r4, #48]	@ 0x30
 800c8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c8f8 <std+0x68>)
 800c8c6:	429c      	cmp	r4, r3
 800c8c8:	d006      	beq.n	800c8d8 <std+0x48>
 800c8ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c8ce:	4294      	cmp	r4, r2
 800c8d0:	d002      	beq.n	800c8d8 <std+0x48>
 800c8d2:	33d0      	adds	r3, #208	@ 0xd0
 800c8d4:	429c      	cmp	r4, r3
 800c8d6:	d105      	bne.n	800c8e4 <std+0x54>
 800c8d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8e0:	f000 baae 	b.w	800ce40 <__retarget_lock_init_recursive>
 800c8e4:	bd10      	pop	{r4, pc}
 800c8e6:	bf00      	nop
 800c8e8:	0800caf5 	.word	0x0800caf5
 800c8ec:	0800cb17 	.word	0x0800cb17
 800c8f0:	0800cb4f 	.word	0x0800cb4f
 800c8f4:	0800cb73 	.word	0x0800cb73
 800c8f8:	20003460 	.word	0x20003460

0800c8fc <stdio_exit_handler>:
 800c8fc:	4a02      	ldr	r2, [pc, #8]	@ (800c908 <stdio_exit_handler+0xc>)
 800c8fe:	4903      	ldr	r1, [pc, #12]	@ (800c90c <stdio_exit_handler+0x10>)
 800c900:	4803      	ldr	r0, [pc, #12]	@ (800c910 <stdio_exit_handler+0x14>)
 800c902:	f000 b869 	b.w	800c9d8 <_fwalk_sglue>
 800c906:	bf00      	nop
 800c908:	20000180 	.word	0x20000180
 800c90c:	0800d6f5 	.word	0x0800d6f5
 800c910:	20000190 	.word	0x20000190

0800c914 <cleanup_stdio>:
 800c914:	6841      	ldr	r1, [r0, #4]
 800c916:	4b0c      	ldr	r3, [pc, #48]	@ (800c948 <cleanup_stdio+0x34>)
 800c918:	b510      	push	{r4, lr}
 800c91a:	4299      	cmp	r1, r3
 800c91c:	4604      	mov	r4, r0
 800c91e:	d001      	beq.n	800c924 <cleanup_stdio+0x10>
 800c920:	f000 fee8 	bl	800d6f4 <_fflush_r>
 800c924:	68a1      	ldr	r1, [r4, #8]
 800c926:	4b09      	ldr	r3, [pc, #36]	@ (800c94c <cleanup_stdio+0x38>)
 800c928:	4299      	cmp	r1, r3
 800c92a:	d002      	beq.n	800c932 <cleanup_stdio+0x1e>
 800c92c:	4620      	mov	r0, r4
 800c92e:	f000 fee1 	bl	800d6f4 <_fflush_r>
 800c932:	68e1      	ldr	r1, [r4, #12]
 800c934:	4b06      	ldr	r3, [pc, #24]	@ (800c950 <cleanup_stdio+0x3c>)
 800c936:	4299      	cmp	r1, r3
 800c938:	d004      	beq.n	800c944 <cleanup_stdio+0x30>
 800c93a:	4620      	mov	r0, r4
 800c93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c940:	f000 bed8 	b.w	800d6f4 <_fflush_r>
 800c944:	bd10      	pop	{r4, pc}
 800c946:	bf00      	nop
 800c948:	20003460 	.word	0x20003460
 800c94c:	200034c8 	.word	0x200034c8
 800c950:	20003530 	.word	0x20003530

0800c954 <global_stdio_init.part.0>:
 800c954:	b510      	push	{r4, lr}
 800c956:	4b0b      	ldr	r3, [pc, #44]	@ (800c984 <global_stdio_init.part.0+0x30>)
 800c958:	4c0b      	ldr	r4, [pc, #44]	@ (800c988 <global_stdio_init.part.0+0x34>)
 800c95a:	4a0c      	ldr	r2, [pc, #48]	@ (800c98c <global_stdio_init.part.0+0x38>)
 800c95c:	4620      	mov	r0, r4
 800c95e:	601a      	str	r2, [r3, #0]
 800c960:	2104      	movs	r1, #4
 800c962:	2200      	movs	r2, #0
 800c964:	f7ff ff94 	bl	800c890 <std>
 800c968:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c96c:	2201      	movs	r2, #1
 800c96e:	2109      	movs	r1, #9
 800c970:	f7ff ff8e 	bl	800c890 <std>
 800c974:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c978:	2202      	movs	r2, #2
 800c97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c97e:	2112      	movs	r1, #18
 800c980:	f7ff bf86 	b.w	800c890 <std>
 800c984:	20003598 	.word	0x20003598
 800c988:	20003460 	.word	0x20003460
 800c98c:	0800c8fd 	.word	0x0800c8fd

0800c990 <__sfp_lock_acquire>:
 800c990:	4801      	ldr	r0, [pc, #4]	@ (800c998 <__sfp_lock_acquire+0x8>)
 800c992:	f000 ba56 	b.w	800ce42 <__retarget_lock_acquire_recursive>
 800c996:	bf00      	nop
 800c998:	200035a1 	.word	0x200035a1

0800c99c <__sfp_lock_release>:
 800c99c:	4801      	ldr	r0, [pc, #4]	@ (800c9a4 <__sfp_lock_release+0x8>)
 800c99e:	f000 ba51 	b.w	800ce44 <__retarget_lock_release_recursive>
 800c9a2:	bf00      	nop
 800c9a4:	200035a1 	.word	0x200035a1

0800c9a8 <__sinit>:
 800c9a8:	b510      	push	{r4, lr}
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	f7ff fff0 	bl	800c990 <__sfp_lock_acquire>
 800c9b0:	6a23      	ldr	r3, [r4, #32]
 800c9b2:	b11b      	cbz	r3, 800c9bc <__sinit+0x14>
 800c9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9b8:	f7ff bff0 	b.w	800c99c <__sfp_lock_release>
 800c9bc:	4b04      	ldr	r3, [pc, #16]	@ (800c9d0 <__sinit+0x28>)
 800c9be:	6223      	str	r3, [r4, #32]
 800c9c0:	4b04      	ldr	r3, [pc, #16]	@ (800c9d4 <__sinit+0x2c>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1f5      	bne.n	800c9b4 <__sinit+0xc>
 800c9c8:	f7ff ffc4 	bl	800c954 <global_stdio_init.part.0>
 800c9cc:	e7f2      	b.n	800c9b4 <__sinit+0xc>
 800c9ce:	bf00      	nop
 800c9d0:	0800c915 	.word	0x0800c915
 800c9d4:	20003598 	.word	0x20003598

0800c9d8 <_fwalk_sglue>:
 800c9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9dc:	4607      	mov	r7, r0
 800c9de:	4688      	mov	r8, r1
 800c9e0:	4614      	mov	r4, r2
 800c9e2:	2600      	movs	r6, #0
 800c9e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9e8:	f1b9 0901 	subs.w	r9, r9, #1
 800c9ec:	d505      	bpl.n	800c9fa <_fwalk_sglue+0x22>
 800c9ee:	6824      	ldr	r4, [r4, #0]
 800c9f0:	2c00      	cmp	r4, #0
 800c9f2:	d1f7      	bne.n	800c9e4 <_fwalk_sglue+0xc>
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9fa:	89ab      	ldrh	r3, [r5, #12]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d907      	bls.n	800ca10 <_fwalk_sglue+0x38>
 800ca00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca04:	3301      	adds	r3, #1
 800ca06:	d003      	beq.n	800ca10 <_fwalk_sglue+0x38>
 800ca08:	4629      	mov	r1, r5
 800ca0a:	4638      	mov	r0, r7
 800ca0c:	47c0      	blx	r8
 800ca0e:	4306      	orrs	r6, r0
 800ca10:	3568      	adds	r5, #104	@ 0x68
 800ca12:	e7e9      	b.n	800c9e8 <_fwalk_sglue+0x10>

0800ca14 <iprintf>:
 800ca14:	b40f      	push	{r0, r1, r2, r3}
 800ca16:	b507      	push	{r0, r1, r2, lr}
 800ca18:	4906      	ldr	r1, [pc, #24]	@ (800ca34 <iprintf+0x20>)
 800ca1a:	ab04      	add	r3, sp, #16
 800ca1c:	6808      	ldr	r0, [r1, #0]
 800ca1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca22:	6881      	ldr	r1, [r0, #8]
 800ca24:	9301      	str	r3, [sp, #4]
 800ca26:	f000 fb3b 	bl	800d0a0 <_vfiprintf_r>
 800ca2a:	b003      	add	sp, #12
 800ca2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca30:	b004      	add	sp, #16
 800ca32:	4770      	bx	lr
 800ca34:	2000018c 	.word	0x2000018c

0800ca38 <_puts_r>:
 800ca38:	6a03      	ldr	r3, [r0, #32]
 800ca3a:	b570      	push	{r4, r5, r6, lr}
 800ca3c:	4605      	mov	r5, r0
 800ca3e:	460e      	mov	r6, r1
 800ca40:	6884      	ldr	r4, [r0, #8]
 800ca42:	b90b      	cbnz	r3, 800ca48 <_puts_r+0x10>
 800ca44:	f7ff ffb0 	bl	800c9a8 <__sinit>
 800ca48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca4a:	07db      	lsls	r3, r3, #31
 800ca4c:	d405      	bmi.n	800ca5a <_puts_r+0x22>
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	0598      	lsls	r0, r3, #22
 800ca52:	d402      	bmi.n	800ca5a <_puts_r+0x22>
 800ca54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca56:	f000 f9f4 	bl	800ce42 <__retarget_lock_acquire_recursive>
 800ca5a:	89a3      	ldrh	r3, [r4, #12]
 800ca5c:	0719      	lsls	r1, r3, #28
 800ca5e:	d502      	bpl.n	800ca66 <_puts_r+0x2e>
 800ca60:	6923      	ldr	r3, [r4, #16]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d135      	bne.n	800cad2 <_puts_r+0x9a>
 800ca66:	4621      	mov	r1, r4
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f000 f8c5 	bl	800cbf8 <__swsetup_r>
 800ca6e:	b380      	cbz	r0, 800cad2 <_puts_r+0x9a>
 800ca70:	f04f 35ff 	mov.w	r5, #4294967295
 800ca74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca76:	07da      	lsls	r2, r3, #31
 800ca78:	d405      	bmi.n	800ca86 <_puts_r+0x4e>
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	059b      	lsls	r3, r3, #22
 800ca7e:	d402      	bmi.n	800ca86 <_puts_r+0x4e>
 800ca80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca82:	f000 f9df 	bl	800ce44 <__retarget_lock_release_recursive>
 800ca86:	4628      	mov	r0, r5
 800ca88:	bd70      	pop	{r4, r5, r6, pc}
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	da04      	bge.n	800ca98 <_puts_r+0x60>
 800ca8e:	69a2      	ldr	r2, [r4, #24]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	dc17      	bgt.n	800cac4 <_puts_r+0x8c>
 800ca94:	290a      	cmp	r1, #10
 800ca96:	d015      	beq.n	800cac4 <_puts_r+0x8c>
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	1c5a      	adds	r2, r3, #1
 800ca9c:	6022      	str	r2, [r4, #0]
 800ca9e:	7019      	strb	r1, [r3, #0]
 800caa0:	68a3      	ldr	r3, [r4, #8]
 800caa2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800caa6:	3b01      	subs	r3, #1
 800caa8:	60a3      	str	r3, [r4, #8]
 800caaa:	2900      	cmp	r1, #0
 800caac:	d1ed      	bne.n	800ca8a <_puts_r+0x52>
 800caae:	2b00      	cmp	r3, #0
 800cab0:	da11      	bge.n	800cad6 <_puts_r+0x9e>
 800cab2:	4622      	mov	r2, r4
 800cab4:	210a      	movs	r1, #10
 800cab6:	4628      	mov	r0, r5
 800cab8:	f000 f85f 	bl	800cb7a <__swbuf_r>
 800cabc:	3001      	adds	r0, #1
 800cabe:	d0d7      	beq.n	800ca70 <_puts_r+0x38>
 800cac0:	250a      	movs	r5, #10
 800cac2:	e7d7      	b.n	800ca74 <_puts_r+0x3c>
 800cac4:	4622      	mov	r2, r4
 800cac6:	4628      	mov	r0, r5
 800cac8:	f000 f857 	bl	800cb7a <__swbuf_r>
 800cacc:	3001      	adds	r0, #1
 800cace:	d1e7      	bne.n	800caa0 <_puts_r+0x68>
 800cad0:	e7ce      	b.n	800ca70 <_puts_r+0x38>
 800cad2:	3e01      	subs	r6, #1
 800cad4:	e7e4      	b.n	800caa0 <_puts_r+0x68>
 800cad6:	6823      	ldr	r3, [r4, #0]
 800cad8:	1c5a      	adds	r2, r3, #1
 800cada:	6022      	str	r2, [r4, #0]
 800cadc:	220a      	movs	r2, #10
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	e7ee      	b.n	800cac0 <_puts_r+0x88>
	...

0800cae4 <puts>:
 800cae4:	4b02      	ldr	r3, [pc, #8]	@ (800caf0 <puts+0xc>)
 800cae6:	4601      	mov	r1, r0
 800cae8:	6818      	ldr	r0, [r3, #0]
 800caea:	f7ff bfa5 	b.w	800ca38 <_puts_r>
 800caee:	bf00      	nop
 800caf0:	2000018c 	.word	0x2000018c

0800caf4 <__sread>:
 800caf4:	b510      	push	{r4, lr}
 800caf6:	460c      	mov	r4, r1
 800caf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cafc:	f000 f952 	bl	800cda4 <_read_r>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	bfab      	itete	ge
 800cb04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cb06:	89a3      	ldrhlt	r3, [r4, #12]
 800cb08:	181b      	addge	r3, r3, r0
 800cb0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cb0e:	bfac      	ite	ge
 800cb10:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cb12:	81a3      	strhlt	r3, [r4, #12]
 800cb14:	bd10      	pop	{r4, pc}

0800cb16 <__swrite>:
 800cb16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb1a:	461f      	mov	r7, r3
 800cb1c:	898b      	ldrh	r3, [r1, #12]
 800cb1e:	4605      	mov	r5, r0
 800cb20:	05db      	lsls	r3, r3, #23
 800cb22:	460c      	mov	r4, r1
 800cb24:	4616      	mov	r6, r2
 800cb26:	d505      	bpl.n	800cb34 <__swrite+0x1e>
 800cb28:	2302      	movs	r3, #2
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb30:	f000 f926 	bl	800cd80 <_lseek_r>
 800cb34:	89a3      	ldrh	r3, [r4, #12]
 800cb36:	4632      	mov	r2, r6
 800cb38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cb3c:	81a3      	strh	r3, [r4, #12]
 800cb3e:	4628      	mov	r0, r5
 800cb40:	463b      	mov	r3, r7
 800cb42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb4a:	f000 b93d 	b.w	800cdc8 <_write_r>

0800cb4e <__sseek>:
 800cb4e:	b510      	push	{r4, lr}
 800cb50:	460c      	mov	r4, r1
 800cb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb56:	f000 f913 	bl	800cd80 <_lseek_r>
 800cb5a:	1c43      	adds	r3, r0, #1
 800cb5c:	89a3      	ldrh	r3, [r4, #12]
 800cb5e:	bf15      	itete	ne
 800cb60:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cb62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cb66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cb6a:	81a3      	strheq	r3, [r4, #12]
 800cb6c:	bf18      	it	ne
 800cb6e:	81a3      	strhne	r3, [r4, #12]
 800cb70:	bd10      	pop	{r4, pc}

0800cb72 <__sclose>:
 800cb72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb76:	f000 b89d 	b.w	800ccb4 <_close_r>

0800cb7a <__swbuf_r>:
 800cb7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb7c:	460e      	mov	r6, r1
 800cb7e:	4614      	mov	r4, r2
 800cb80:	4605      	mov	r5, r0
 800cb82:	b118      	cbz	r0, 800cb8c <__swbuf_r+0x12>
 800cb84:	6a03      	ldr	r3, [r0, #32]
 800cb86:	b90b      	cbnz	r3, 800cb8c <__swbuf_r+0x12>
 800cb88:	f7ff ff0e 	bl	800c9a8 <__sinit>
 800cb8c:	69a3      	ldr	r3, [r4, #24]
 800cb8e:	60a3      	str	r3, [r4, #8]
 800cb90:	89a3      	ldrh	r3, [r4, #12]
 800cb92:	071a      	lsls	r2, r3, #28
 800cb94:	d501      	bpl.n	800cb9a <__swbuf_r+0x20>
 800cb96:	6923      	ldr	r3, [r4, #16]
 800cb98:	b943      	cbnz	r3, 800cbac <__swbuf_r+0x32>
 800cb9a:	4621      	mov	r1, r4
 800cb9c:	4628      	mov	r0, r5
 800cb9e:	f000 f82b 	bl	800cbf8 <__swsetup_r>
 800cba2:	b118      	cbz	r0, 800cbac <__swbuf_r+0x32>
 800cba4:	f04f 37ff 	mov.w	r7, #4294967295
 800cba8:	4638      	mov	r0, r7
 800cbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbac:	6823      	ldr	r3, [r4, #0]
 800cbae:	6922      	ldr	r2, [r4, #16]
 800cbb0:	b2f6      	uxtb	r6, r6
 800cbb2:	1a98      	subs	r0, r3, r2
 800cbb4:	6963      	ldr	r3, [r4, #20]
 800cbb6:	4637      	mov	r7, r6
 800cbb8:	4283      	cmp	r3, r0
 800cbba:	dc05      	bgt.n	800cbc8 <__swbuf_r+0x4e>
 800cbbc:	4621      	mov	r1, r4
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	f000 fd98 	bl	800d6f4 <_fflush_r>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d1ed      	bne.n	800cba4 <__swbuf_r+0x2a>
 800cbc8:	68a3      	ldr	r3, [r4, #8]
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	60a3      	str	r3, [r4, #8]
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	1c5a      	adds	r2, r3, #1
 800cbd2:	6022      	str	r2, [r4, #0]
 800cbd4:	701e      	strb	r6, [r3, #0]
 800cbd6:	6962      	ldr	r2, [r4, #20]
 800cbd8:	1c43      	adds	r3, r0, #1
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d004      	beq.n	800cbe8 <__swbuf_r+0x6e>
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	07db      	lsls	r3, r3, #31
 800cbe2:	d5e1      	bpl.n	800cba8 <__swbuf_r+0x2e>
 800cbe4:	2e0a      	cmp	r6, #10
 800cbe6:	d1df      	bne.n	800cba8 <__swbuf_r+0x2e>
 800cbe8:	4621      	mov	r1, r4
 800cbea:	4628      	mov	r0, r5
 800cbec:	f000 fd82 	bl	800d6f4 <_fflush_r>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d0d9      	beq.n	800cba8 <__swbuf_r+0x2e>
 800cbf4:	e7d6      	b.n	800cba4 <__swbuf_r+0x2a>
	...

0800cbf8 <__swsetup_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4b29      	ldr	r3, [pc, #164]	@ (800cca0 <__swsetup_r+0xa8>)
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	6818      	ldr	r0, [r3, #0]
 800cc00:	460c      	mov	r4, r1
 800cc02:	b118      	cbz	r0, 800cc0c <__swsetup_r+0x14>
 800cc04:	6a03      	ldr	r3, [r0, #32]
 800cc06:	b90b      	cbnz	r3, 800cc0c <__swsetup_r+0x14>
 800cc08:	f7ff fece 	bl	800c9a8 <__sinit>
 800cc0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc10:	0719      	lsls	r1, r3, #28
 800cc12:	d422      	bmi.n	800cc5a <__swsetup_r+0x62>
 800cc14:	06da      	lsls	r2, r3, #27
 800cc16:	d407      	bmi.n	800cc28 <__swsetup_r+0x30>
 800cc18:	2209      	movs	r2, #9
 800cc1a:	602a      	str	r2, [r5, #0]
 800cc1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc20:	f04f 30ff 	mov.w	r0, #4294967295
 800cc24:	81a3      	strh	r3, [r4, #12]
 800cc26:	e033      	b.n	800cc90 <__swsetup_r+0x98>
 800cc28:	0758      	lsls	r0, r3, #29
 800cc2a:	d512      	bpl.n	800cc52 <__swsetup_r+0x5a>
 800cc2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc2e:	b141      	cbz	r1, 800cc42 <__swsetup_r+0x4a>
 800cc30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc34:	4299      	cmp	r1, r3
 800cc36:	d002      	beq.n	800cc3e <__swsetup_r+0x46>
 800cc38:	4628      	mov	r0, r5
 800cc3a:	f000 f913 	bl	800ce64 <_free_r>
 800cc3e:	2300      	movs	r3, #0
 800cc40:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc42:	89a3      	ldrh	r3, [r4, #12]
 800cc44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cc48:	81a3      	strh	r3, [r4, #12]
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	6063      	str	r3, [r4, #4]
 800cc4e:	6923      	ldr	r3, [r4, #16]
 800cc50:	6023      	str	r3, [r4, #0]
 800cc52:	89a3      	ldrh	r3, [r4, #12]
 800cc54:	f043 0308 	orr.w	r3, r3, #8
 800cc58:	81a3      	strh	r3, [r4, #12]
 800cc5a:	6923      	ldr	r3, [r4, #16]
 800cc5c:	b94b      	cbnz	r3, 800cc72 <__swsetup_r+0x7a>
 800cc5e:	89a3      	ldrh	r3, [r4, #12]
 800cc60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc68:	d003      	beq.n	800cc72 <__swsetup_r+0x7a>
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	f000 fd8e 	bl	800d78e <__smakebuf_r>
 800cc72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc76:	f013 0201 	ands.w	r2, r3, #1
 800cc7a:	d00a      	beq.n	800cc92 <__swsetup_r+0x9a>
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	60a2      	str	r2, [r4, #8]
 800cc80:	6962      	ldr	r2, [r4, #20]
 800cc82:	4252      	negs	r2, r2
 800cc84:	61a2      	str	r2, [r4, #24]
 800cc86:	6922      	ldr	r2, [r4, #16]
 800cc88:	b942      	cbnz	r2, 800cc9c <__swsetup_r+0xa4>
 800cc8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc8e:	d1c5      	bne.n	800cc1c <__swsetup_r+0x24>
 800cc90:	bd38      	pop	{r3, r4, r5, pc}
 800cc92:	0799      	lsls	r1, r3, #30
 800cc94:	bf58      	it	pl
 800cc96:	6962      	ldrpl	r2, [r4, #20]
 800cc98:	60a2      	str	r2, [r4, #8]
 800cc9a:	e7f4      	b.n	800cc86 <__swsetup_r+0x8e>
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	e7f7      	b.n	800cc90 <__swsetup_r+0x98>
 800cca0:	2000018c 	.word	0x2000018c

0800cca4 <memset>:
 800cca4:	4603      	mov	r3, r0
 800cca6:	4402      	add	r2, r0
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d100      	bne.n	800ccae <memset+0xa>
 800ccac:	4770      	bx	lr
 800ccae:	f803 1b01 	strb.w	r1, [r3], #1
 800ccb2:	e7f9      	b.n	800cca8 <memset+0x4>

0800ccb4 <_close_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	4d05      	ldr	r5, [pc, #20]	@ (800ccd0 <_close_r+0x1c>)
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	602b      	str	r3, [r5, #0]
 800ccc0:	f7f4 fb93 	bl	80013ea <_close>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_close_r+0x1a>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_close_r+0x1a>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	2000359c 	.word	0x2000359c

0800ccd4 <_reclaim_reent>:
 800ccd4:	4b29      	ldr	r3, [pc, #164]	@ (800cd7c <_reclaim_reent+0xa8>)
 800ccd6:	b570      	push	{r4, r5, r6, lr}
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4604      	mov	r4, r0
 800ccdc:	4283      	cmp	r3, r0
 800ccde:	d04b      	beq.n	800cd78 <_reclaim_reent+0xa4>
 800cce0:	69c3      	ldr	r3, [r0, #28]
 800cce2:	b1ab      	cbz	r3, 800cd10 <_reclaim_reent+0x3c>
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	b16b      	cbz	r3, 800cd04 <_reclaim_reent+0x30>
 800cce8:	2500      	movs	r5, #0
 800ccea:	69e3      	ldr	r3, [r4, #28]
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	5959      	ldr	r1, [r3, r5]
 800ccf0:	2900      	cmp	r1, #0
 800ccf2:	d13b      	bne.n	800cd6c <_reclaim_reent+0x98>
 800ccf4:	3504      	adds	r5, #4
 800ccf6:	2d80      	cmp	r5, #128	@ 0x80
 800ccf8:	d1f7      	bne.n	800ccea <_reclaim_reent+0x16>
 800ccfa:	69e3      	ldr	r3, [r4, #28]
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	68d9      	ldr	r1, [r3, #12]
 800cd00:	f000 f8b0 	bl	800ce64 <_free_r>
 800cd04:	69e3      	ldr	r3, [r4, #28]
 800cd06:	6819      	ldr	r1, [r3, #0]
 800cd08:	b111      	cbz	r1, 800cd10 <_reclaim_reent+0x3c>
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f000 f8aa 	bl	800ce64 <_free_r>
 800cd10:	6961      	ldr	r1, [r4, #20]
 800cd12:	b111      	cbz	r1, 800cd1a <_reclaim_reent+0x46>
 800cd14:	4620      	mov	r0, r4
 800cd16:	f000 f8a5 	bl	800ce64 <_free_r>
 800cd1a:	69e1      	ldr	r1, [r4, #28]
 800cd1c:	b111      	cbz	r1, 800cd24 <_reclaim_reent+0x50>
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f000 f8a0 	bl	800ce64 <_free_r>
 800cd24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cd26:	b111      	cbz	r1, 800cd2e <_reclaim_reent+0x5a>
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f000 f89b 	bl	800ce64 <_free_r>
 800cd2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd30:	b111      	cbz	r1, 800cd38 <_reclaim_reent+0x64>
 800cd32:	4620      	mov	r0, r4
 800cd34:	f000 f896 	bl	800ce64 <_free_r>
 800cd38:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cd3a:	b111      	cbz	r1, 800cd42 <_reclaim_reent+0x6e>
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f000 f891 	bl	800ce64 <_free_r>
 800cd42:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cd44:	b111      	cbz	r1, 800cd4c <_reclaim_reent+0x78>
 800cd46:	4620      	mov	r0, r4
 800cd48:	f000 f88c 	bl	800ce64 <_free_r>
 800cd4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cd4e:	b111      	cbz	r1, 800cd56 <_reclaim_reent+0x82>
 800cd50:	4620      	mov	r0, r4
 800cd52:	f000 f887 	bl	800ce64 <_free_r>
 800cd56:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cd58:	b111      	cbz	r1, 800cd60 <_reclaim_reent+0x8c>
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f000 f882 	bl	800ce64 <_free_r>
 800cd60:	6a23      	ldr	r3, [r4, #32]
 800cd62:	b14b      	cbz	r3, 800cd78 <_reclaim_reent+0xa4>
 800cd64:	4620      	mov	r0, r4
 800cd66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd6a:	4718      	bx	r3
 800cd6c:	680e      	ldr	r6, [r1, #0]
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f000 f878 	bl	800ce64 <_free_r>
 800cd74:	4631      	mov	r1, r6
 800cd76:	e7bb      	b.n	800ccf0 <_reclaim_reent+0x1c>
 800cd78:	bd70      	pop	{r4, r5, r6, pc}
 800cd7a:	bf00      	nop
 800cd7c:	2000018c 	.word	0x2000018c

0800cd80 <_lseek_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	4604      	mov	r4, r0
 800cd84:	4608      	mov	r0, r1
 800cd86:	4611      	mov	r1, r2
 800cd88:	2200      	movs	r2, #0
 800cd8a:	4d05      	ldr	r5, [pc, #20]	@ (800cda0 <_lseek_r+0x20>)
 800cd8c:	602a      	str	r2, [r5, #0]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	f7f4 fb4f 	bl	8001432 <_lseek>
 800cd94:	1c43      	adds	r3, r0, #1
 800cd96:	d102      	bne.n	800cd9e <_lseek_r+0x1e>
 800cd98:	682b      	ldr	r3, [r5, #0]
 800cd9a:	b103      	cbz	r3, 800cd9e <_lseek_r+0x1e>
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	bd38      	pop	{r3, r4, r5, pc}
 800cda0:	2000359c 	.word	0x2000359c

0800cda4 <_read_r>:
 800cda4:	b538      	push	{r3, r4, r5, lr}
 800cda6:	4604      	mov	r4, r0
 800cda8:	4608      	mov	r0, r1
 800cdaa:	4611      	mov	r1, r2
 800cdac:	2200      	movs	r2, #0
 800cdae:	4d05      	ldr	r5, [pc, #20]	@ (800cdc4 <_read_r+0x20>)
 800cdb0:	602a      	str	r2, [r5, #0]
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	f7f4 fae0 	bl	8001378 <_read>
 800cdb8:	1c43      	adds	r3, r0, #1
 800cdba:	d102      	bne.n	800cdc2 <_read_r+0x1e>
 800cdbc:	682b      	ldr	r3, [r5, #0]
 800cdbe:	b103      	cbz	r3, 800cdc2 <_read_r+0x1e>
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	2000359c 	.word	0x2000359c

0800cdc8 <_write_r>:
 800cdc8:	b538      	push	{r3, r4, r5, lr}
 800cdca:	4604      	mov	r4, r0
 800cdcc:	4608      	mov	r0, r1
 800cdce:	4611      	mov	r1, r2
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	4d05      	ldr	r5, [pc, #20]	@ (800cde8 <_write_r+0x20>)
 800cdd4:	602a      	str	r2, [r5, #0]
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	f7f4 faeb 	bl	80013b2 <_write>
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d102      	bne.n	800cde6 <_write_r+0x1e>
 800cde0:	682b      	ldr	r3, [r5, #0]
 800cde2:	b103      	cbz	r3, 800cde6 <_write_r+0x1e>
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	2000359c 	.word	0x2000359c

0800cdec <__errno>:
 800cdec:	4b01      	ldr	r3, [pc, #4]	@ (800cdf4 <__errno+0x8>)
 800cdee:	6818      	ldr	r0, [r3, #0]
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	2000018c 	.word	0x2000018c

0800cdf8 <__libc_init_array>:
 800cdf8:	b570      	push	{r4, r5, r6, lr}
 800cdfa:	2600      	movs	r6, #0
 800cdfc:	4d0c      	ldr	r5, [pc, #48]	@ (800ce30 <__libc_init_array+0x38>)
 800cdfe:	4c0d      	ldr	r4, [pc, #52]	@ (800ce34 <__libc_init_array+0x3c>)
 800ce00:	1b64      	subs	r4, r4, r5
 800ce02:	10a4      	asrs	r4, r4, #2
 800ce04:	42a6      	cmp	r6, r4
 800ce06:	d109      	bne.n	800ce1c <__libc_init_array+0x24>
 800ce08:	f000 fd80 	bl	800d90c <_init>
 800ce0c:	2600      	movs	r6, #0
 800ce0e:	4d0a      	ldr	r5, [pc, #40]	@ (800ce38 <__libc_init_array+0x40>)
 800ce10:	4c0a      	ldr	r4, [pc, #40]	@ (800ce3c <__libc_init_array+0x44>)
 800ce12:	1b64      	subs	r4, r4, r5
 800ce14:	10a4      	asrs	r4, r4, #2
 800ce16:	42a6      	cmp	r6, r4
 800ce18:	d105      	bne.n	800ce26 <__libc_init_array+0x2e>
 800ce1a:	bd70      	pop	{r4, r5, r6, pc}
 800ce1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce20:	4798      	blx	r3
 800ce22:	3601      	adds	r6, #1
 800ce24:	e7ee      	b.n	800ce04 <__libc_init_array+0xc>
 800ce26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce2a:	4798      	blx	r3
 800ce2c:	3601      	adds	r6, #1
 800ce2e:	e7f2      	b.n	800ce16 <__libc_init_array+0x1e>
 800ce30:	0800da38 	.word	0x0800da38
 800ce34:	0800da38 	.word	0x0800da38
 800ce38:	0800da38 	.word	0x0800da38
 800ce3c:	0800da3c 	.word	0x0800da3c

0800ce40 <__retarget_lock_init_recursive>:
 800ce40:	4770      	bx	lr

0800ce42 <__retarget_lock_acquire_recursive>:
 800ce42:	4770      	bx	lr

0800ce44 <__retarget_lock_release_recursive>:
 800ce44:	4770      	bx	lr

0800ce46 <memcpy>:
 800ce46:	440a      	add	r2, r1
 800ce48:	4291      	cmp	r1, r2
 800ce4a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce4e:	d100      	bne.n	800ce52 <memcpy+0xc>
 800ce50:	4770      	bx	lr
 800ce52:	b510      	push	{r4, lr}
 800ce54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce58:	4291      	cmp	r1, r2
 800ce5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce5e:	d1f9      	bne.n	800ce54 <memcpy+0xe>
 800ce60:	bd10      	pop	{r4, pc}
	...

0800ce64 <_free_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	4605      	mov	r5, r0
 800ce68:	2900      	cmp	r1, #0
 800ce6a:	d040      	beq.n	800ceee <_free_r+0x8a>
 800ce6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce70:	1f0c      	subs	r4, r1, #4
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	bfb8      	it	lt
 800ce76:	18e4      	addlt	r4, r4, r3
 800ce78:	f000 f8de 	bl	800d038 <__malloc_lock>
 800ce7c:	4a1c      	ldr	r2, [pc, #112]	@ (800cef0 <_free_r+0x8c>)
 800ce7e:	6813      	ldr	r3, [r2, #0]
 800ce80:	b933      	cbnz	r3, 800ce90 <_free_r+0x2c>
 800ce82:	6063      	str	r3, [r4, #4]
 800ce84:	6014      	str	r4, [r2, #0]
 800ce86:	4628      	mov	r0, r5
 800ce88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce8c:	f000 b8da 	b.w	800d044 <__malloc_unlock>
 800ce90:	42a3      	cmp	r3, r4
 800ce92:	d908      	bls.n	800cea6 <_free_r+0x42>
 800ce94:	6820      	ldr	r0, [r4, #0]
 800ce96:	1821      	adds	r1, r4, r0
 800ce98:	428b      	cmp	r3, r1
 800ce9a:	bf01      	itttt	eq
 800ce9c:	6819      	ldreq	r1, [r3, #0]
 800ce9e:	685b      	ldreq	r3, [r3, #4]
 800cea0:	1809      	addeq	r1, r1, r0
 800cea2:	6021      	streq	r1, [r4, #0]
 800cea4:	e7ed      	b.n	800ce82 <_free_r+0x1e>
 800cea6:	461a      	mov	r2, r3
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	b10b      	cbz	r3, 800ceb0 <_free_r+0x4c>
 800ceac:	42a3      	cmp	r3, r4
 800ceae:	d9fa      	bls.n	800cea6 <_free_r+0x42>
 800ceb0:	6811      	ldr	r1, [r2, #0]
 800ceb2:	1850      	adds	r0, r2, r1
 800ceb4:	42a0      	cmp	r0, r4
 800ceb6:	d10b      	bne.n	800ced0 <_free_r+0x6c>
 800ceb8:	6820      	ldr	r0, [r4, #0]
 800ceba:	4401      	add	r1, r0
 800cebc:	1850      	adds	r0, r2, r1
 800cebe:	4283      	cmp	r3, r0
 800cec0:	6011      	str	r1, [r2, #0]
 800cec2:	d1e0      	bne.n	800ce86 <_free_r+0x22>
 800cec4:	6818      	ldr	r0, [r3, #0]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	4408      	add	r0, r1
 800ceca:	6010      	str	r0, [r2, #0]
 800cecc:	6053      	str	r3, [r2, #4]
 800cece:	e7da      	b.n	800ce86 <_free_r+0x22>
 800ced0:	d902      	bls.n	800ced8 <_free_r+0x74>
 800ced2:	230c      	movs	r3, #12
 800ced4:	602b      	str	r3, [r5, #0]
 800ced6:	e7d6      	b.n	800ce86 <_free_r+0x22>
 800ced8:	6820      	ldr	r0, [r4, #0]
 800ceda:	1821      	adds	r1, r4, r0
 800cedc:	428b      	cmp	r3, r1
 800cede:	bf01      	itttt	eq
 800cee0:	6819      	ldreq	r1, [r3, #0]
 800cee2:	685b      	ldreq	r3, [r3, #4]
 800cee4:	1809      	addeq	r1, r1, r0
 800cee6:	6021      	streq	r1, [r4, #0]
 800cee8:	6063      	str	r3, [r4, #4]
 800ceea:	6054      	str	r4, [r2, #4]
 800ceec:	e7cb      	b.n	800ce86 <_free_r+0x22>
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	200035a8 	.word	0x200035a8

0800cef4 <sbrk_aligned>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	4e0f      	ldr	r6, [pc, #60]	@ (800cf34 <sbrk_aligned+0x40>)
 800cef8:	460c      	mov	r4, r1
 800cefa:	6831      	ldr	r1, [r6, #0]
 800cefc:	4605      	mov	r5, r0
 800cefe:	b911      	cbnz	r1, 800cf06 <sbrk_aligned+0x12>
 800cf00:	f000 fca4 	bl	800d84c <_sbrk_r>
 800cf04:	6030      	str	r0, [r6, #0]
 800cf06:	4621      	mov	r1, r4
 800cf08:	4628      	mov	r0, r5
 800cf0a:	f000 fc9f 	bl	800d84c <_sbrk_r>
 800cf0e:	1c43      	adds	r3, r0, #1
 800cf10:	d103      	bne.n	800cf1a <sbrk_aligned+0x26>
 800cf12:	f04f 34ff 	mov.w	r4, #4294967295
 800cf16:	4620      	mov	r0, r4
 800cf18:	bd70      	pop	{r4, r5, r6, pc}
 800cf1a:	1cc4      	adds	r4, r0, #3
 800cf1c:	f024 0403 	bic.w	r4, r4, #3
 800cf20:	42a0      	cmp	r0, r4
 800cf22:	d0f8      	beq.n	800cf16 <sbrk_aligned+0x22>
 800cf24:	1a21      	subs	r1, r4, r0
 800cf26:	4628      	mov	r0, r5
 800cf28:	f000 fc90 	bl	800d84c <_sbrk_r>
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	d1f2      	bne.n	800cf16 <sbrk_aligned+0x22>
 800cf30:	e7ef      	b.n	800cf12 <sbrk_aligned+0x1e>
 800cf32:	bf00      	nop
 800cf34:	200035a4 	.word	0x200035a4

0800cf38 <_malloc_r>:
 800cf38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf3c:	1ccd      	adds	r5, r1, #3
 800cf3e:	f025 0503 	bic.w	r5, r5, #3
 800cf42:	3508      	adds	r5, #8
 800cf44:	2d0c      	cmp	r5, #12
 800cf46:	bf38      	it	cc
 800cf48:	250c      	movcc	r5, #12
 800cf4a:	2d00      	cmp	r5, #0
 800cf4c:	4606      	mov	r6, r0
 800cf4e:	db01      	blt.n	800cf54 <_malloc_r+0x1c>
 800cf50:	42a9      	cmp	r1, r5
 800cf52:	d904      	bls.n	800cf5e <_malloc_r+0x26>
 800cf54:	230c      	movs	r3, #12
 800cf56:	6033      	str	r3, [r6, #0]
 800cf58:	2000      	movs	r0, #0
 800cf5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d034 <_malloc_r+0xfc>
 800cf62:	f000 f869 	bl	800d038 <__malloc_lock>
 800cf66:	f8d8 3000 	ldr.w	r3, [r8]
 800cf6a:	461c      	mov	r4, r3
 800cf6c:	bb44      	cbnz	r4, 800cfc0 <_malloc_r+0x88>
 800cf6e:	4629      	mov	r1, r5
 800cf70:	4630      	mov	r0, r6
 800cf72:	f7ff ffbf 	bl	800cef4 <sbrk_aligned>
 800cf76:	1c43      	adds	r3, r0, #1
 800cf78:	4604      	mov	r4, r0
 800cf7a:	d158      	bne.n	800d02e <_malloc_r+0xf6>
 800cf7c:	f8d8 4000 	ldr.w	r4, [r8]
 800cf80:	4627      	mov	r7, r4
 800cf82:	2f00      	cmp	r7, #0
 800cf84:	d143      	bne.n	800d00e <_malloc_r+0xd6>
 800cf86:	2c00      	cmp	r4, #0
 800cf88:	d04b      	beq.n	800d022 <_malloc_r+0xea>
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	4639      	mov	r1, r7
 800cf8e:	4630      	mov	r0, r6
 800cf90:	eb04 0903 	add.w	r9, r4, r3
 800cf94:	f000 fc5a 	bl	800d84c <_sbrk_r>
 800cf98:	4581      	cmp	r9, r0
 800cf9a:	d142      	bne.n	800d022 <_malloc_r+0xea>
 800cf9c:	6821      	ldr	r1, [r4, #0]
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	1a6d      	subs	r5, r5, r1
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	f7ff ffa6 	bl	800cef4 <sbrk_aligned>
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	d03a      	beq.n	800d022 <_malloc_r+0xea>
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	442b      	add	r3, r5
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	f8d8 3000 	ldr.w	r3, [r8]
 800cfb6:	685a      	ldr	r2, [r3, #4]
 800cfb8:	bb62      	cbnz	r2, 800d014 <_malloc_r+0xdc>
 800cfba:	f8c8 7000 	str.w	r7, [r8]
 800cfbe:	e00f      	b.n	800cfe0 <_malloc_r+0xa8>
 800cfc0:	6822      	ldr	r2, [r4, #0]
 800cfc2:	1b52      	subs	r2, r2, r5
 800cfc4:	d420      	bmi.n	800d008 <_malloc_r+0xd0>
 800cfc6:	2a0b      	cmp	r2, #11
 800cfc8:	d917      	bls.n	800cffa <_malloc_r+0xc2>
 800cfca:	1961      	adds	r1, r4, r5
 800cfcc:	42a3      	cmp	r3, r4
 800cfce:	6025      	str	r5, [r4, #0]
 800cfd0:	bf18      	it	ne
 800cfd2:	6059      	strne	r1, [r3, #4]
 800cfd4:	6863      	ldr	r3, [r4, #4]
 800cfd6:	bf08      	it	eq
 800cfd8:	f8c8 1000 	streq.w	r1, [r8]
 800cfdc:	5162      	str	r2, [r4, r5]
 800cfde:	604b      	str	r3, [r1, #4]
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	f000 f82f 	bl	800d044 <__malloc_unlock>
 800cfe6:	f104 000b 	add.w	r0, r4, #11
 800cfea:	1d23      	adds	r3, r4, #4
 800cfec:	f020 0007 	bic.w	r0, r0, #7
 800cff0:	1ac2      	subs	r2, r0, r3
 800cff2:	bf1c      	itt	ne
 800cff4:	1a1b      	subne	r3, r3, r0
 800cff6:	50a3      	strne	r3, [r4, r2]
 800cff8:	e7af      	b.n	800cf5a <_malloc_r+0x22>
 800cffa:	6862      	ldr	r2, [r4, #4]
 800cffc:	42a3      	cmp	r3, r4
 800cffe:	bf0c      	ite	eq
 800d000:	f8c8 2000 	streq.w	r2, [r8]
 800d004:	605a      	strne	r2, [r3, #4]
 800d006:	e7eb      	b.n	800cfe0 <_malloc_r+0xa8>
 800d008:	4623      	mov	r3, r4
 800d00a:	6864      	ldr	r4, [r4, #4]
 800d00c:	e7ae      	b.n	800cf6c <_malloc_r+0x34>
 800d00e:	463c      	mov	r4, r7
 800d010:	687f      	ldr	r7, [r7, #4]
 800d012:	e7b6      	b.n	800cf82 <_malloc_r+0x4a>
 800d014:	461a      	mov	r2, r3
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	42a3      	cmp	r3, r4
 800d01a:	d1fb      	bne.n	800d014 <_malloc_r+0xdc>
 800d01c:	2300      	movs	r3, #0
 800d01e:	6053      	str	r3, [r2, #4]
 800d020:	e7de      	b.n	800cfe0 <_malloc_r+0xa8>
 800d022:	230c      	movs	r3, #12
 800d024:	4630      	mov	r0, r6
 800d026:	6033      	str	r3, [r6, #0]
 800d028:	f000 f80c 	bl	800d044 <__malloc_unlock>
 800d02c:	e794      	b.n	800cf58 <_malloc_r+0x20>
 800d02e:	6005      	str	r5, [r0, #0]
 800d030:	e7d6      	b.n	800cfe0 <_malloc_r+0xa8>
 800d032:	bf00      	nop
 800d034:	200035a8 	.word	0x200035a8

0800d038 <__malloc_lock>:
 800d038:	4801      	ldr	r0, [pc, #4]	@ (800d040 <__malloc_lock+0x8>)
 800d03a:	f7ff bf02 	b.w	800ce42 <__retarget_lock_acquire_recursive>
 800d03e:	bf00      	nop
 800d040:	200035a0 	.word	0x200035a0

0800d044 <__malloc_unlock>:
 800d044:	4801      	ldr	r0, [pc, #4]	@ (800d04c <__malloc_unlock+0x8>)
 800d046:	f7ff befd 	b.w	800ce44 <__retarget_lock_release_recursive>
 800d04a:	bf00      	nop
 800d04c:	200035a0 	.word	0x200035a0

0800d050 <__sfputc_r>:
 800d050:	6893      	ldr	r3, [r2, #8]
 800d052:	b410      	push	{r4}
 800d054:	3b01      	subs	r3, #1
 800d056:	2b00      	cmp	r3, #0
 800d058:	6093      	str	r3, [r2, #8]
 800d05a:	da07      	bge.n	800d06c <__sfputc_r+0x1c>
 800d05c:	6994      	ldr	r4, [r2, #24]
 800d05e:	42a3      	cmp	r3, r4
 800d060:	db01      	blt.n	800d066 <__sfputc_r+0x16>
 800d062:	290a      	cmp	r1, #10
 800d064:	d102      	bne.n	800d06c <__sfputc_r+0x1c>
 800d066:	bc10      	pop	{r4}
 800d068:	f7ff bd87 	b.w	800cb7a <__swbuf_r>
 800d06c:	6813      	ldr	r3, [r2, #0]
 800d06e:	1c58      	adds	r0, r3, #1
 800d070:	6010      	str	r0, [r2, #0]
 800d072:	7019      	strb	r1, [r3, #0]
 800d074:	4608      	mov	r0, r1
 800d076:	bc10      	pop	{r4}
 800d078:	4770      	bx	lr

0800d07a <__sfputs_r>:
 800d07a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07c:	4606      	mov	r6, r0
 800d07e:	460f      	mov	r7, r1
 800d080:	4614      	mov	r4, r2
 800d082:	18d5      	adds	r5, r2, r3
 800d084:	42ac      	cmp	r4, r5
 800d086:	d101      	bne.n	800d08c <__sfputs_r+0x12>
 800d088:	2000      	movs	r0, #0
 800d08a:	e007      	b.n	800d09c <__sfputs_r+0x22>
 800d08c:	463a      	mov	r2, r7
 800d08e:	4630      	mov	r0, r6
 800d090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d094:	f7ff ffdc 	bl	800d050 <__sfputc_r>
 800d098:	1c43      	adds	r3, r0, #1
 800d09a:	d1f3      	bne.n	800d084 <__sfputs_r+0xa>
 800d09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0a0 <_vfiprintf_r>:
 800d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a4:	460d      	mov	r5, r1
 800d0a6:	4614      	mov	r4, r2
 800d0a8:	4698      	mov	r8, r3
 800d0aa:	4606      	mov	r6, r0
 800d0ac:	b09d      	sub	sp, #116	@ 0x74
 800d0ae:	b118      	cbz	r0, 800d0b8 <_vfiprintf_r+0x18>
 800d0b0:	6a03      	ldr	r3, [r0, #32]
 800d0b2:	b90b      	cbnz	r3, 800d0b8 <_vfiprintf_r+0x18>
 800d0b4:	f7ff fc78 	bl	800c9a8 <__sinit>
 800d0b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0ba:	07d9      	lsls	r1, r3, #31
 800d0bc:	d405      	bmi.n	800d0ca <_vfiprintf_r+0x2a>
 800d0be:	89ab      	ldrh	r3, [r5, #12]
 800d0c0:	059a      	lsls	r2, r3, #22
 800d0c2:	d402      	bmi.n	800d0ca <_vfiprintf_r+0x2a>
 800d0c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0c6:	f7ff febc 	bl	800ce42 <__retarget_lock_acquire_recursive>
 800d0ca:	89ab      	ldrh	r3, [r5, #12]
 800d0cc:	071b      	lsls	r3, r3, #28
 800d0ce:	d501      	bpl.n	800d0d4 <_vfiprintf_r+0x34>
 800d0d0:	692b      	ldr	r3, [r5, #16]
 800d0d2:	b99b      	cbnz	r3, 800d0fc <_vfiprintf_r+0x5c>
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f7ff fd8e 	bl	800cbf8 <__swsetup_r>
 800d0dc:	b170      	cbz	r0, 800d0fc <_vfiprintf_r+0x5c>
 800d0de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0e0:	07dc      	lsls	r4, r3, #31
 800d0e2:	d504      	bpl.n	800d0ee <_vfiprintf_r+0x4e>
 800d0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e8:	b01d      	add	sp, #116	@ 0x74
 800d0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ee:	89ab      	ldrh	r3, [r5, #12]
 800d0f0:	0598      	lsls	r0, r3, #22
 800d0f2:	d4f7      	bmi.n	800d0e4 <_vfiprintf_r+0x44>
 800d0f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0f6:	f7ff fea5 	bl	800ce44 <__retarget_lock_release_recursive>
 800d0fa:	e7f3      	b.n	800d0e4 <_vfiprintf_r+0x44>
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800d100:	2320      	movs	r3, #32
 800d102:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d106:	2330      	movs	r3, #48	@ 0x30
 800d108:	f04f 0901 	mov.w	r9, #1
 800d10c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d110:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d2bc <_vfiprintf_r+0x21c>
 800d114:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d118:	4623      	mov	r3, r4
 800d11a:	469a      	mov	sl, r3
 800d11c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d120:	b10a      	cbz	r2, 800d126 <_vfiprintf_r+0x86>
 800d122:	2a25      	cmp	r2, #37	@ 0x25
 800d124:	d1f9      	bne.n	800d11a <_vfiprintf_r+0x7a>
 800d126:	ebba 0b04 	subs.w	fp, sl, r4
 800d12a:	d00b      	beq.n	800d144 <_vfiprintf_r+0xa4>
 800d12c:	465b      	mov	r3, fp
 800d12e:	4622      	mov	r2, r4
 800d130:	4629      	mov	r1, r5
 800d132:	4630      	mov	r0, r6
 800d134:	f7ff ffa1 	bl	800d07a <__sfputs_r>
 800d138:	3001      	adds	r0, #1
 800d13a:	f000 80a7 	beq.w	800d28c <_vfiprintf_r+0x1ec>
 800d13e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d140:	445a      	add	r2, fp
 800d142:	9209      	str	r2, [sp, #36]	@ 0x24
 800d144:	f89a 3000 	ldrb.w	r3, [sl]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	f000 809f 	beq.w	800d28c <_vfiprintf_r+0x1ec>
 800d14e:	2300      	movs	r3, #0
 800d150:	f04f 32ff 	mov.w	r2, #4294967295
 800d154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d158:	f10a 0a01 	add.w	sl, sl, #1
 800d15c:	9304      	str	r3, [sp, #16]
 800d15e:	9307      	str	r3, [sp, #28]
 800d160:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d164:	931a      	str	r3, [sp, #104]	@ 0x68
 800d166:	4654      	mov	r4, sl
 800d168:	2205      	movs	r2, #5
 800d16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d16e:	4853      	ldr	r0, [pc, #332]	@ (800d2bc <_vfiprintf_r+0x21c>)
 800d170:	f000 fb7c 	bl	800d86c <memchr>
 800d174:	9a04      	ldr	r2, [sp, #16]
 800d176:	b9d8      	cbnz	r0, 800d1b0 <_vfiprintf_r+0x110>
 800d178:	06d1      	lsls	r1, r2, #27
 800d17a:	bf44      	itt	mi
 800d17c:	2320      	movmi	r3, #32
 800d17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d182:	0713      	lsls	r3, r2, #28
 800d184:	bf44      	itt	mi
 800d186:	232b      	movmi	r3, #43	@ 0x2b
 800d188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d18c:	f89a 3000 	ldrb.w	r3, [sl]
 800d190:	2b2a      	cmp	r3, #42	@ 0x2a
 800d192:	d015      	beq.n	800d1c0 <_vfiprintf_r+0x120>
 800d194:	4654      	mov	r4, sl
 800d196:	2000      	movs	r0, #0
 800d198:	f04f 0c0a 	mov.w	ip, #10
 800d19c:	9a07      	ldr	r2, [sp, #28]
 800d19e:	4621      	mov	r1, r4
 800d1a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1a4:	3b30      	subs	r3, #48	@ 0x30
 800d1a6:	2b09      	cmp	r3, #9
 800d1a8:	d94b      	bls.n	800d242 <_vfiprintf_r+0x1a2>
 800d1aa:	b1b0      	cbz	r0, 800d1da <_vfiprintf_r+0x13a>
 800d1ac:	9207      	str	r2, [sp, #28]
 800d1ae:	e014      	b.n	800d1da <_vfiprintf_r+0x13a>
 800d1b0:	eba0 0308 	sub.w	r3, r0, r8
 800d1b4:	fa09 f303 	lsl.w	r3, r9, r3
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	46a2      	mov	sl, r4
 800d1bc:	9304      	str	r3, [sp, #16]
 800d1be:	e7d2      	b.n	800d166 <_vfiprintf_r+0xc6>
 800d1c0:	9b03      	ldr	r3, [sp, #12]
 800d1c2:	1d19      	adds	r1, r3, #4
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	9103      	str	r1, [sp, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	bfbb      	ittet	lt
 800d1cc:	425b      	neglt	r3, r3
 800d1ce:	f042 0202 	orrlt.w	r2, r2, #2
 800d1d2:	9307      	strge	r3, [sp, #28]
 800d1d4:	9307      	strlt	r3, [sp, #28]
 800d1d6:	bfb8      	it	lt
 800d1d8:	9204      	strlt	r2, [sp, #16]
 800d1da:	7823      	ldrb	r3, [r4, #0]
 800d1dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1de:	d10a      	bne.n	800d1f6 <_vfiprintf_r+0x156>
 800d1e0:	7863      	ldrb	r3, [r4, #1]
 800d1e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1e4:	d132      	bne.n	800d24c <_vfiprintf_r+0x1ac>
 800d1e6:	9b03      	ldr	r3, [sp, #12]
 800d1e8:	3402      	adds	r4, #2
 800d1ea:	1d1a      	adds	r2, r3, #4
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	9203      	str	r2, [sp, #12]
 800d1f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1f4:	9305      	str	r3, [sp, #20]
 800d1f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d2c0 <_vfiprintf_r+0x220>
 800d1fa:	2203      	movs	r2, #3
 800d1fc:	4650      	mov	r0, sl
 800d1fe:	7821      	ldrb	r1, [r4, #0]
 800d200:	f000 fb34 	bl	800d86c <memchr>
 800d204:	b138      	cbz	r0, 800d216 <_vfiprintf_r+0x176>
 800d206:	2240      	movs	r2, #64	@ 0x40
 800d208:	9b04      	ldr	r3, [sp, #16]
 800d20a:	eba0 000a 	sub.w	r0, r0, sl
 800d20e:	4082      	lsls	r2, r0
 800d210:	4313      	orrs	r3, r2
 800d212:	3401      	adds	r4, #1
 800d214:	9304      	str	r3, [sp, #16]
 800d216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d21a:	2206      	movs	r2, #6
 800d21c:	4829      	ldr	r0, [pc, #164]	@ (800d2c4 <_vfiprintf_r+0x224>)
 800d21e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d222:	f000 fb23 	bl	800d86c <memchr>
 800d226:	2800      	cmp	r0, #0
 800d228:	d03f      	beq.n	800d2aa <_vfiprintf_r+0x20a>
 800d22a:	4b27      	ldr	r3, [pc, #156]	@ (800d2c8 <_vfiprintf_r+0x228>)
 800d22c:	bb1b      	cbnz	r3, 800d276 <_vfiprintf_r+0x1d6>
 800d22e:	9b03      	ldr	r3, [sp, #12]
 800d230:	3307      	adds	r3, #7
 800d232:	f023 0307 	bic.w	r3, r3, #7
 800d236:	3308      	adds	r3, #8
 800d238:	9303      	str	r3, [sp, #12]
 800d23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d23c:	443b      	add	r3, r7
 800d23e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d240:	e76a      	b.n	800d118 <_vfiprintf_r+0x78>
 800d242:	460c      	mov	r4, r1
 800d244:	2001      	movs	r0, #1
 800d246:	fb0c 3202 	mla	r2, ip, r2, r3
 800d24a:	e7a8      	b.n	800d19e <_vfiprintf_r+0xfe>
 800d24c:	2300      	movs	r3, #0
 800d24e:	f04f 0c0a 	mov.w	ip, #10
 800d252:	4619      	mov	r1, r3
 800d254:	3401      	adds	r4, #1
 800d256:	9305      	str	r3, [sp, #20]
 800d258:	4620      	mov	r0, r4
 800d25a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d25e:	3a30      	subs	r2, #48	@ 0x30
 800d260:	2a09      	cmp	r2, #9
 800d262:	d903      	bls.n	800d26c <_vfiprintf_r+0x1cc>
 800d264:	2b00      	cmp	r3, #0
 800d266:	d0c6      	beq.n	800d1f6 <_vfiprintf_r+0x156>
 800d268:	9105      	str	r1, [sp, #20]
 800d26a:	e7c4      	b.n	800d1f6 <_vfiprintf_r+0x156>
 800d26c:	4604      	mov	r4, r0
 800d26e:	2301      	movs	r3, #1
 800d270:	fb0c 2101 	mla	r1, ip, r1, r2
 800d274:	e7f0      	b.n	800d258 <_vfiprintf_r+0x1b8>
 800d276:	ab03      	add	r3, sp, #12
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	462a      	mov	r2, r5
 800d27c:	4630      	mov	r0, r6
 800d27e:	4b13      	ldr	r3, [pc, #76]	@ (800d2cc <_vfiprintf_r+0x22c>)
 800d280:	a904      	add	r1, sp, #16
 800d282:	f3af 8000 	nop.w
 800d286:	4607      	mov	r7, r0
 800d288:	1c78      	adds	r0, r7, #1
 800d28a:	d1d6      	bne.n	800d23a <_vfiprintf_r+0x19a>
 800d28c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d28e:	07d9      	lsls	r1, r3, #31
 800d290:	d405      	bmi.n	800d29e <_vfiprintf_r+0x1fe>
 800d292:	89ab      	ldrh	r3, [r5, #12]
 800d294:	059a      	lsls	r2, r3, #22
 800d296:	d402      	bmi.n	800d29e <_vfiprintf_r+0x1fe>
 800d298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d29a:	f7ff fdd3 	bl	800ce44 <__retarget_lock_release_recursive>
 800d29e:	89ab      	ldrh	r3, [r5, #12]
 800d2a0:	065b      	lsls	r3, r3, #25
 800d2a2:	f53f af1f 	bmi.w	800d0e4 <_vfiprintf_r+0x44>
 800d2a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2a8:	e71e      	b.n	800d0e8 <_vfiprintf_r+0x48>
 800d2aa:	ab03      	add	r3, sp, #12
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	462a      	mov	r2, r5
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	4b06      	ldr	r3, [pc, #24]	@ (800d2cc <_vfiprintf_r+0x22c>)
 800d2b4:	a904      	add	r1, sp, #16
 800d2b6:	f000 f87d 	bl	800d3b4 <_printf_i>
 800d2ba:	e7e4      	b.n	800d286 <_vfiprintf_r+0x1e6>
 800d2bc:	0800da02 	.word	0x0800da02
 800d2c0:	0800da08 	.word	0x0800da08
 800d2c4:	0800da0c 	.word	0x0800da0c
 800d2c8:	00000000 	.word	0x00000000
 800d2cc:	0800d07b 	.word	0x0800d07b

0800d2d0 <_printf_common>:
 800d2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d4:	4616      	mov	r6, r2
 800d2d6:	4698      	mov	r8, r3
 800d2d8:	688a      	ldr	r2, [r1, #8]
 800d2da:	690b      	ldr	r3, [r1, #16]
 800d2dc:	4607      	mov	r7, r0
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	bfb8      	it	lt
 800d2e2:	4613      	movlt	r3, r2
 800d2e4:	6033      	str	r3, [r6, #0]
 800d2e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2f0:	b10a      	cbz	r2, 800d2f6 <_printf_common+0x26>
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	6033      	str	r3, [r6, #0]
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	0699      	lsls	r1, r3, #26
 800d2fa:	bf42      	ittt	mi
 800d2fc:	6833      	ldrmi	r3, [r6, #0]
 800d2fe:	3302      	addmi	r3, #2
 800d300:	6033      	strmi	r3, [r6, #0]
 800d302:	6825      	ldr	r5, [r4, #0]
 800d304:	f015 0506 	ands.w	r5, r5, #6
 800d308:	d106      	bne.n	800d318 <_printf_common+0x48>
 800d30a:	f104 0a19 	add.w	sl, r4, #25
 800d30e:	68e3      	ldr	r3, [r4, #12]
 800d310:	6832      	ldr	r2, [r6, #0]
 800d312:	1a9b      	subs	r3, r3, r2
 800d314:	42ab      	cmp	r3, r5
 800d316:	dc2b      	bgt.n	800d370 <_printf_common+0xa0>
 800d318:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d31c:	6822      	ldr	r2, [r4, #0]
 800d31e:	3b00      	subs	r3, #0
 800d320:	bf18      	it	ne
 800d322:	2301      	movne	r3, #1
 800d324:	0692      	lsls	r2, r2, #26
 800d326:	d430      	bmi.n	800d38a <_printf_common+0xba>
 800d328:	4641      	mov	r1, r8
 800d32a:	4638      	mov	r0, r7
 800d32c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d330:	47c8      	blx	r9
 800d332:	3001      	adds	r0, #1
 800d334:	d023      	beq.n	800d37e <_printf_common+0xae>
 800d336:	6823      	ldr	r3, [r4, #0]
 800d338:	6922      	ldr	r2, [r4, #16]
 800d33a:	f003 0306 	and.w	r3, r3, #6
 800d33e:	2b04      	cmp	r3, #4
 800d340:	bf14      	ite	ne
 800d342:	2500      	movne	r5, #0
 800d344:	6833      	ldreq	r3, [r6, #0]
 800d346:	f04f 0600 	mov.w	r6, #0
 800d34a:	bf08      	it	eq
 800d34c:	68e5      	ldreq	r5, [r4, #12]
 800d34e:	f104 041a 	add.w	r4, r4, #26
 800d352:	bf08      	it	eq
 800d354:	1aed      	subeq	r5, r5, r3
 800d356:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d35a:	bf08      	it	eq
 800d35c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d360:	4293      	cmp	r3, r2
 800d362:	bfc4      	itt	gt
 800d364:	1a9b      	subgt	r3, r3, r2
 800d366:	18ed      	addgt	r5, r5, r3
 800d368:	42b5      	cmp	r5, r6
 800d36a:	d11a      	bne.n	800d3a2 <_printf_common+0xd2>
 800d36c:	2000      	movs	r0, #0
 800d36e:	e008      	b.n	800d382 <_printf_common+0xb2>
 800d370:	2301      	movs	r3, #1
 800d372:	4652      	mov	r2, sl
 800d374:	4641      	mov	r1, r8
 800d376:	4638      	mov	r0, r7
 800d378:	47c8      	blx	r9
 800d37a:	3001      	adds	r0, #1
 800d37c:	d103      	bne.n	800d386 <_printf_common+0xb6>
 800d37e:	f04f 30ff 	mov.w	r0, #4294967295
 800d382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d386:	3501      	adds	r5, #1
 800d388:	e7c1      	b.n	800d30e <_printf_common+0x3e>
 800d38a:	2030      	movs	r0, #48	@ 0x30
 800d38c:	18e1      	adds	r1, r4, r3
 800d38e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d398:	4422      	add	r2, r4
 800d39a:	3302      	adds	r3, #2
 800d39c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d3a0:	e7c2      	b.n	800d328 <_printf_common+0x58>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	4622      	mov	r2, r4
 800d3a6:	4641      	mov	r1, r8
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	47c8      	blx	r9
 800d3ac:	3001      	adds	r0, #1
 800d3ae:	d0e6      	beq.n	800d37e <_printf_common+0xae>
 800d3b0:	3601      	adds	r6, #1
 800d3b2:	e7d9      	b.n	800d368 <_printf_common+0x98>

0800d3b4 <_printf_i>:
 800d3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b8:	7e0f      	ldrb	r7, [r1, #24]
 800d3ba:	4691      	mov	r9, r2
 800d3bc:	2f78      	cmp	r7, #120	@ 0x78
 800d3be:	4680      	mov	r8, r0
 800d3c0:	460c      	mov	r4, r1
 800d3c2:	469a      	mov	sl, r3
 800d3c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d3c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d3ca:	d807      	bhi.n	800d3dc <_printf_i+0x28>
 800d3cc:	2f62      	cmp	r7, #98	@ 0x62
 800d3ce:	d80a      	bhi.n	800d3e6 <_printf_i+0x32>
 800d3d0:	2f00      	cmp	r7, #0
 800d3d2:	f000 80d3 	beq.w	800d57c <_printf_i+0x1c8>
 800d3d6:	2f58      	cmp	r7, #88	@ 0x58
 800d3d8:	f000 80ba 	beq.w	800d550 <_printf_i+0x19c>
 800d3dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d3e4:	e03a      	b.n	800d45c <_printf_i+0xa8>
 800d3e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d3ea:	2b15      	cmp	r3, #21
 800d3ec:	d8f6      	bhi.n	800d3dc <_printf_i+0x28>
 800d3ee:	a101      	add	r1, pc, #4	@ (adr r1, 800d3f4 <_printf_i+0x40>)
 800d3f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3f4:	0800d44d 	.word	0x0800d44d
 800d3f8:	0800d461 	.word	0x0800d461
 800d3fc:	0800d3dd 	.word	0x0800d3dd
 800d400:	0800d3dd 	.word	0x0800d3dd
 800d404:	0800d3dd 	.word	0x0800d3dd
 800d408:	0800d3dd 	.word	0x0800d3dd
 800d40c:	0800d461 	.word	0x0800d461
 800d410:	0800d3dd 	.word	0x0800d3dd
 800d414:	0800d3dd 	.word	0x0800d3dd
 800d418:	0800d3dd 	.word	0x0800d3dd
 800d41c:	0800d3dd 	.word	0x0800d3dd
 800d420:	0800d563 	.word	0x0800d563
 800d424:	0800d48b 	.word	0x0800d48b
 800d428:	0800d51d 	.word	0x0800d51d
 800d42c:	0800d3dd 	.word	0x0800d3dd
 800d430:	0800d3dd 	.word	0x0800d3dd
 800d434:	0800d585 	.word	0x0800d585
 800d438:	0800d3dd 	.word	0x0800d3dd
 800d43c:	0800d48b 	.word	0x0800d48b
 800d440:	0800d3dd 	.word	0x0800d3dd
 800d444:	0800d3dd 	.word	0x0800d3dd
 800d448:	0800d525 	.word	0x0800d525
 800d44c:	6833      	ldr	r3, [r6, #0]
 800d44e:	1d1a      	adds	r2, r3, #4
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	6032      	str	r2, [r6, #0]
 800d454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d458:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d45c:	2301      	movs	r3, #1
 800d45e:	e09e      	b.n	800d59e <_printf_i+0x1ea>
 800d460:	6833      	ldr	r3, [r6, #0]
 800d462:	6820      	ldr	r0, [r4, #0]
 800d464:	1d19      	adds	r1, r3, #4
 800d466:	6031      	str	r1, [r6, #0]
 800d468:	0606      	lsls	r6, r0, #24
 800d46a:	d501      	bpl.n	800d470 <_printf_i+0xbc>
 800d46c:	681d      	ldr	r5, [r3, #0]
 800d46e:	e003      	b.n	800d478 <_printf_i+0xc4>
 800d470:	0645      	lsls	r5, r0, #25
 800d472:	d5fb      	bpl.n	800d46c <_printf_i+0xb8>
 800d474:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d478:	2d00      	cmp	r5, #0
 800d47a:	da03      	bge.n	800d484 <_printf_i+0xd0>
 800d47c:	232d      	movs	r3, #45	@ 0x2d
 800d47e:	426d      	negs	r5, r5
 800d480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d484:	230a      	movs	r3, #10
 800d486:	4859      	ldr	r0, [pc, #356]	@ (800d5ec <_printf_i+0x238>)
 800d488:	e011      	b.n	800d4ae <_printf_i+0xfa>
 800d48a:	6821      	ldr	r1, [r4, #0]
 800d48c:	6833      	ldr	r3, [r6, #0]
 800d48e:	0608      	lsls	r0, r1, #24
 800d490:	f853 5b04 	ldr.w	r5, [r3], #4
 800d494:	d402      	bmi.n	800d49c <_printf_i+0xe8>
 800d496:	0649      	lsls	r1, r1, #25
 800d498:	bf48      	it	mi
 800d49a:	b2ad      	uxthmi	r5, r5
 800d49c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d49e:	6033      	str	r3, [r6, #0]
 800d4a0:	bf14      	ite	ne
 800d4a2:	230a      	movne	r3, #10
 800d4a4:	2308      	moveq	r3, #8
 800d4a6:	4851      	ldr	r0, [pc, #324]	@ (800d5ec <_printf_i+0x238>)
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d4ae:	6866      	ldr	r6, [r4, #4]
 800d4b0:	2e00      	cmp	r6, #0
 800d4b2:	bfa8      	it	ge
 800d4b4:	6821      	ldrge	r1, [r4, #0]
 800d4b6:	60a6      	str	r6, [r4, #8]
 800d4b8:	bfa4      	itt	ge
 800d4ba:	f021 0104 	bicge.w	r1, r1, #4
 800d4be:	6021      	strge	r1, [r4, #0]
 800d4c0:	b90d      	cbnz	r5, 800d4c6 <_printf_i+0x112>
 800d4c2:	2e00      	cmp	r6, #0
 800d4c4:	d04b      	beq.n	800d55e <_printf_i+0x1aa>
 800d4c6:	4616      	mov	r6, r2
 800d4c8:	fbb5 f1f3 	udiv	r1, r5, r3
 800d4cc:	fb03 5711 	mls	r7, r3, r1, r5
 800d4d0:	5dc7      	ldrb	r7, [r0, r7]
 800d4d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4d6:	462f      	mov	r7, r5
 800d4d8:	42bb      	cmp	r3, r7
 800d4da:	460d      	mov	r5, r1
 800d4dc:	d9f4      	bls.n	800d4c8 <_printf_i+0x114>
 800d4de:	2b08      	cmp	r3, #8
 800d4e0:	d10b      	bne.n	800d4fa <_printf_i+0x146>
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	07df      	lsls	r7, r3, #31
 800d4e6:	d508      	bpl.n	800d4fa <_printf_i+0x146>
 800d4e8:	6923      	ldr	r3, [r4, #16]
 800d4ea:	6861      	ldr	r1, [r4, #4]
 800d4ec:	4299      	cmp	r1, r3
 800d4ee:	bfde      	ittt	le
 800d4f0:	2330      	movle	r3, #48	@ 0x30
 800d4f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d4fa:	1b92      	subs	r2, r2, r6
 800d4fc:	6122      	str	r2, [r4, #16]
 800d4fe:	464b      	mov	r3, r9
 800d500:	4621      	mov	r1, r4
 800d502:	4640      	mov	r0, r8
 800d504:	f8cd a000 	str.w	sl, [sp]
 800d508:	aa03      	add	r2, sp, #12
 800d50a:	f7ff fee1 	bl	800d2d0 <_printf_common>
 800d50e:	3001      	adds	r0, #1
 800d510:	d14a      	bne.n	800d5a8 <_printf_i+0x1f4>
 800d512:	f04f 30ff 	mov.w	r0, #4294967295
 800d516:	b004      	add	sp, #16
 800d518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d51c:	6823      	ldr	r3, [r4, #0]
 800d51e:	f043 0320 	orr.w	r3, r3, #32
 800d522:	6023      	str	r3, [r4, #0]
 800d524:	2778      	movs	r7, #120	@ 0x78
 800d526:	4832      	ldr	r0, [pc, #200]	@ (800d5f0 <_printf_i+0x23c>)
 800d528:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d52c:	6823      	ldr	r3, [r4, #0]
 800d52e:	6831      	ldr	r1, [r6, #0]
 800d530:	061f      	lsls	r7, r3, #24
 800d532:	f851 5b04 	ldr.w	r5, [r1], #4
 800d536:	d402      	bmi.n	800d53e <_printf_i+0x18a>
 800d538:	065f      	lsls	r7, r3, #25
 800d53a:	bf48      	it	mi
 800d53c:	b2ad      	uxthmi	r5, r5
 800d53e:	6031      	str	r1, [r6, #0]
 800d540:	07d9      	lsls	r1, r3, #31
 800d542:	bf44      	itt	mi
 800d544:	f043 0320 	orrmi.w	r3, r3, #32
 800d548:	6023      	strmi	r3, [r4, #0]
 800d54a:	b11d      	cbz	r5, 800d554 <_printf_i+0x1a0>
 800d54c:	2310      	movs	r3, #16
 800d54e:	e7ab      	b.n	800d4a8 <_printf_i+0xf4>
 800d550:	4826      	ldr	r0, [pc, #152]	@ (800d5ec <_printf_i+0x238>)
 800d552:	e7e9      	b.n	800d528 <_printf_i+0x174>
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	f023 0320 	bic.w	r3, r3, #32
 800d55a:	6023      	str	r3, [r4, #0]
 800d55c:	e7f6      	b.n	800d54c <_printf_i+0x198>
 800d55e:	4616      	mov	r6, r2
 800d560:	e7bd      	b.n	800d4de <_printf_i+0x12a>
 800d562:	6833      	ldr	r3, [r6, #0]
 800d564:	6825      	ldr	r5, [r4, #0]
 800d566:	1d18      	adds	r0, r3, #4
 800d568:	6961      	ldr	r1, [r4, #20]
 800d56a:	6030      	str	r0, [r6, #0]
 800d56c:	062e      	lsls	r6, r5, #24
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	d501      	bpl.n	800d576 <_printf_i+0x1c2>
 800d572:	6019      	str	r1, [r3, #0]
 800d574:	e002      	b.n	800d57c <_printf_i+0x1c8>
 800d576:	0668      	lsls	r0, r5, #25
 800d578:	d5fb      	bpl.n	800d572 <_printf_i+0x1be>
 800d57a:	8019      	strh	r1, [r3, #0]
 800d57c:	2300      	movs	r3, #0
 800d57e:	4616      	mov	r6, r2
 800d580:	6123      	str	r3, [r4, #16]
 800d582:	e7bc      	b.n	800d4fe <_printf_i+0x14a>
 800d584:	6833      	ldr	r3, [r6, #0]
 800d586:	2100      	movs	r1, #0
 800d588:	1d1a      	adds	r2, r3, #4
 800d58a:	6032      	str	r2, [r6, #0]
 800d58c:	681e      	ldr	r6, [r3, #0]
 800d58e:	6862      	ldr	r2, [r4, #4]
 800d590:	4630      	mov	r0, r6
 800d592:	f000 f96b 	bl	800d86c <memchr>
 800d596:	b108      	cbz	r0, 800d59c <_printf_i+0x1e8>
 800d598:	1b80      	subs	r0, r0, r6
 800d59a:	6060      	str	r0, [r4, #4]
 800d59c:	6863      	ldr	r3, [r4, #4]
 800d59e:	6123      	str	r3, [r4, #16]
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5a6:	e7aa      	b.n	800d4fe <_printf_i+0x14a>
 800d5a8:	4632      	mov	r2, r6
 800d5aa:	4649      	mov	r1, r9
 800d5ac:	4640      	mov	r0, r8
 800d5ae:	6923      	ldr	r3, [r4, #16]
 800d5b0:	47d0      	blx	sl
 800d5b2:	3001      	adds	r0, #1
 800d5b4:	d0ad      	beq.n	800d512 <_printf_i+0x15e>
 800d5b6:	6823      	ldr	r3, [r4, #0]
 800d5b8:	079b      	lsls	r3, r3, #30
 800d5ba:	d413      	bmi.n	800d5e4 <_printf_i+0x230>
 800d5bc:	68e0      	ldr	r0, [r4, #12]
 800d5be:	9b03      	ldr	r3, [sp, #12]
 800d5c0:	4298      	cmp	r0, r3
 800d5c2:	bfb8      	it	lt
 800d5c4:	4618      	movlt	r0, r3
 800d5c6:	e7a6      	b.n	800d516 <_printf_i+0x162>
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	4632      	mov	r2, r6
 800d5cc:	4649      	mov	r1, r9
 800d5ce:	4640      	mov	r0, r8
 800d5d0:	47d0      	blx	sl
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	d09d      	beq.n	800d512 <_printf_i+0x15e>
 800d5d6:	3501      	adds	r5, #1
 800d5d8:	68e3      	ldr	r3, [r4, #12]
 800d5da:	9903      	ldr	r1, [sp, #12]
 800d5dc:	1a5b      	subs	r3, r3, r1
 800d5de:	42ab      	cmp	r3, r5
 800d5e0:	dcf2      	bgt.n	800d5c8 <_printf_i+0x214>
 800d5e2:	e7eb      	b.n	800d5bc <_printf_i+0x208>
 800d5e4:	2500      	movs	r5, #0
 800d5e6:	f104 0619 	add.w	r6, r4, #25
 800d5ea:	e7f5      	b.n	800d5d8 <_printf_i+0x224>
 800d5ec:	0800da13 	.word	0x0800da13
 800d5f0:	0800da24 	.word	0x0800da24

0800d5f4 <__sflush_r>:
 800d5f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5fa:	0716      	lsls	r6, r2, #28
 800d5fc:	4605      	mov	r5, r0
 800d5fe:	460c      	mov	r4, r1
 800d600:	d454      	bmi.n	800d6ac <__sflush_r+0xb8>
 800d602:	684b      	ldr	r3, [r1, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	dc02      	bgt.n	800d60e <__sflush_r+0x1a>
 800d608:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	dd48      	ble.n	800d6a0 <__sflush_r+0xac>
 800d60e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d610:	2e00      	cmp	r6, #0
 800d612:	d045      	beq.n	800d6a0 <__sflush_r+0xac>
 800d614:	2300      	movs	r3, #0
 800d616:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d61a:	682f      	ldr	r7, [r5, #0]
 800d61c:	6a21      	ldr	r1, [r4, #32]
 800d61e:	602b      	str	r3, [r5, #0]
 800d620:	d030      	beq.n	800d684 <__sflush_r+0x90>
 800d622:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d624:	89a3      	ldrh	r3, [r4, #12]
 800d626:	0759      	lsls	r1, r3, #29
 800d628:	d505      	bpl.n	800d636 <__sflush_r+0x42>
 800d62a:	6863      	ldr	r3, [r4, #4]
 800d62c:	1ad2      	subs	r2, r2, r3
 800d62e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d630:	b10b      	cbz	r3, 800d636 <__sflush_r+0x42>
 800d632:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d634:	1ad2      	subs	r2, r2, r3
 800d636:	2300      	movs	r3, #0
 800d638:	4628      	mov	r0, r5
 800d63a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d63c:	6a21      	ldr	r1, [r4, #32]
 800d63e:	47b0      	blx	r6
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	89a3      	ldrh	r3, [r4, #12]
 800d644:	d106      	bne.n	800d654 <__sflush_r+0x60>
 800d646:	6829      	ldr	r1, [r5, #0]
 800d648:	291d      	cmp	r1, #29
 800d64a:	d82b      	bhi.n	800d6a4 <__sflush_r+0xb0>
 800d64c:	4a28      	ldr	r2, [pc, #160]	@ (800d6f0 <__sflush_r+0xfc>)
 800d64e:	410a      	asrs	r2, r1
 800d650:	07d6      	lsls	r6, r2, #31
 800d652:	d427      	bmi.n	800d6a4 <__sflush_r+0xb0>
 800d654:	2200      	movs	r2, #0
 800d656:	6062      	str	r2, [r4, #4]
 800d658:	6922      	ldr	r2, [r4, #16]
 800d65a:	04d9      	lsls	r1, r3, #19
 800d65c:	6022      	str	r2, [r4, #0]
 800d65e:	d504      	bpl.n	800d66a <__sflush_r+0x76>
 800d660:	1c42      	adds	r2, r0, #1
 800d662:	d101      	bne.n	800d668 <__sflush_r+0x74>
 800d664:	682b      	ldr	r3, [r5, #0]
 800d666:	b903      	cbnz	r3, 800d66a <__sflush_r+0x76>
 800d668:	6560      	str	r0, [r4, #84]	@ 0x54
 800d66a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d66c:	602f      	str	r7, [r5, #0]
 800d66e:	b1b9      	cbz	r1, 800d6a0 <__sflush_r+0xac>
 800d670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d674:	4299      	cmp	r1, r3
 800d676:	d002      	beq.n	800d67e <__sflush_r+0x8a>
 800d678:	4628      	mov	r0, r5
 800d67a:	f7ff fbf3 	bl	800ce64 <_free_r>
 800d67e:	2300      	movs	r3, #0
 800d680:	6363      	str	r3, [r4, #52]	@ 0x34
 800d682:	e00d      	b.n	800d6a0 <__sflush_r+0xac>
 800d684:	2301      	movs	r3, #1
 800d686:	4628      	mov	r0, r5
 800d688:	47b0      	blx	r6
 800d68a:	4602      	mov	r2, r0
 800d68c:	1c50      	adds	r0, r2, #1
 800d68e:	d1c9      	bne.n	800d624 <__sflush_r+0x30>
 800d690:	682b      	ldr	r3, [r5, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d0c6      	beq.n	800d624 <__sflush_r+0x30>
 800d696:	2b1d      	cmp	r3, #29
 800d698:	d001      	beq.n	800d69e <__sflush_r+0xaa>
 800d69a:	2b16      	cmp	r3, #22
 800d69c:	d11d      	bne.n	800d6da <__sflush_r+0xe6>
 800d69e:	602f      	str	r7, [r5, #0]
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	e021      	b.n	800d6e8 <__sflush_r+0xf4>
 800d6a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6a8:	b21b      	sxth	r3, r3
 800d6aa:	e01a      	b.n	800d6e2 <__sflush_r+0xee>
 800d6ac:	690f      	ldr	r7, [r1, #16]
 800d6ae:	2f00      	cmp	r7, #0
 800d6b0:	d0f6      	beq.n	800d6a0 <__sflush_r+0xac>
 800d6b2:	0793      	lsls	r3, r2, #30
 800d6b4:	bf18      	it	ne
 800d6b6:	2300      	movne	r3, #0
 800d6b8:	680e      	ldr	r6, [r1, #0]
 800d6ba:	bf08      	it	eq
 800d6bc:	694b      	ldreq	r3, [r1, #20]
 800d6be:	1bf6      	subs	r6, r6, r7
 800d6c0:	600f      	str	r7, [r1, #0]
 800d6c2:	608b      	str	r3, [r1, #8]
 800d6c4:	2e00      	cmp	r6, #0
 800d6c6:	ddeb      	ble.n	800d6a0 <__sflush_r+0xac>
 800d6c8:	4633      	mov	r3, r6
 800d6ca:	463a      	mov	r2, r7
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	6a21      	ldr	r1, [r4, #32]
 800d6d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d6d4:	47e0      	blx	ip
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	dc07      	bgt.n	800d6ea <__sflush_r+0xf6>
 800d6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e6:	81a3      	strh	r3, [r4, #12]
 800d6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ea:	4407      	add	r7, r0
 800d6ec:	1a36      	subs	r6, r6, r0
 800d6ee:	e7e9      	b.n	800d6c4 <__sflush_r+0xd0>
 800d6f0:	dfbffffe 	.word	0xdfbffffe

0800d6f4 <_fflush_r>:
 800d6f4:	b538      	push	{r3, r4, r5, lr}
 800d6f6:	690b      	ldr	r3, [r1, #16]
 800d6f8:	4605      	mov	r5, r0
 800d6fa:	460c      	mov	r4, r1
 800d6fc:	b913      	cbnz	r3, 800d704 <_fflush_r+0x10>
 800d6fe:	2500      	movs	r5, #0
 800d700:	4628      	mov	r0, r5
 800d702:	bd38      	pop	{r3, r4, r5, pc}
 800d704:	b118      	cbz	r0, 800d70e <_fflush_r+0x1a>
 800d706:	6a03      	ldr	r3, [r0, #32]
 800d708:	b90b      	cbnz	r3, 800d70e <_fflush_r+0x1a>
 800d70a:	f7ff f94d 	bl	800c9a8 <__sinit>
 800d70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d0f3      	beq.n	800d6fe <_fflush_r+0xa>
 800d716:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d718:	07d0      	lsls	r0, r2, #31
 800d71a:	d404      	bmi.n	800d726 <_fflush_r+0x32>
 800d71c:	0599      	lsls	r1, r3, #22
 800d71e:	d402      	bmi.n	800d726 <_fflush_r+0x32>
 800d720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d722:	f7ff fb8e 	bl	800ce42 <__retarget_lock_acquire_recursive>
 800d726:	4628      	mov	r0, r5
 800d728:	4621      	mov	r1, r4
 800d72a:	f7ff ff63 	bl	800d5f4 <__sflush_r>
 800d72e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d730:	4605      	mov	r5, r0
 800d732:	07da      	lsls	r2, r3, #31
 800d734:	d4e4      	bmi.n	800d700 <_fflush_r+0xc>
 800d736:	89a3      	ldrh	r3, [r4, #12]
 800d738:	059b      	lsls	r3, r3, #22
 800d73a:	d4e1      	bmi.n	800d700 <_fflush_r+0xc>
 800d73c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d73e:	f7ff fb81 	bl	800ce44 <__retarget_lock_release_recursive>
 800d742:	e7dd      	b.n	800d700 <_fflush_r+0xc>

0800d744 <__swhatbuf_r>:
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	460c      	mov	r4, r1
 800d748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d74c:	4615      	mov	r5, r2
 800d74e:	2900      	cmp	r1, #0
 800d750:	461e      	mov	r6, r3
 800d752:	b096      	sub	sp, #88	@ 0x58
 800d754:	da0c      	bge.n	800d770 <__swhatbuf_r+0x2c>
 800d756:	89a3      	ldrh	r3, [r4, #12]
 800d758:	2100      	movs	r1, #0
 800d75a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d75e:	bf14      	ite	ne
 800d760:	2340      	movne	r3, #64	@ 0x40
 800d762:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d766:	2000      	movs	r0, #0
 800d768:	6031      	str	r1, [r6, #0]
 800d76a:	602b      	str	r3, [r5, #0]
 800d76c:	b016      	add	sp, #88	@ 0x58
 800d76e:	bd70      	pop	{r4, r5, r6, pc}
 800d770:	466a      	mov	r2, sp
 800d772:	f000 f849 	bl	800d808 <_fstat_r>
 800d776:	2800      	cmp	r0, #0
 800d778:	dbed      	blt.n	800d756 <__swhatbuf_r+0x12>
 800d77a:	9901      	ldr	r1, [sp, #4]
 800d77c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d780:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d784:	4259      	negs	r1, r3
 800d786:	4159      	adcs	r1, r3
 800d788:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d78c:	e7eb      	b.n	800d766 <__swhatbuf_r+0x22>

0800d78e <__smakebuf_r>:
 800d78e:	898b      	ldrh	r3, [r1, #12]
 800d790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d792:	079d      	lsls	r5, r3, #30
 800d794:	4606      	mov	r6, r0
 800d796:	460c      	mov	r4, r1
 800d798:	d507      	bpl.n	800d7aa <__smakebuf_r+0x1c>
 800d79a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d79e:	6023      	str	r3, [r4, #0]
 800d7a0:	6123      	str	r3, [r4, #16]
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	6163      	str	r3, [r4, #20]
 800d7a6:	b003      	add	sp, #12
 800d7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7aa:	466a      	mov	r2, sp
 800d7ac:	ab01      	add	r3, sp, #4
 800d7ae:	f7ff ffc9 	bl	800d744 <__swhatbuf_r>
 800d7b2:	9f00      	ldr	r7, [sp, #0]
 800d7b4:	4605      	mov	r5, r0
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	4630      	mov	r0, r6
 800d7ba:	f7ff fbbd 	bl	800cf38 <_malloc_r>
 800d7be:	b948      	cbnz	r0, 800d7d4 <__smakebuf_r+0x46>
 800d7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7c4:	059a      	lsls	r2, r3, #22
 800d7c6:	d4ee      	bmi.n	800d7a6 <__smakebuf_r+0x18>
 800d7c8:	f023 0303 	bic.w	r3, r3, #3
 800d7cc:	f043 0302 	orr.w	r3, r3, #2
 800d7d0:	81a3      	strh	r3, [r4, #12]
 800d7d2:	e7e2      	b.n	800d79a <__smakebuf_r+0xc>
 800d7d4:	89a3      	ldrh	r3, [r4, #12]
 800d7d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d7da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7de:	81a3      	strh	r3, [r4, #12]
 800d7e0:	9b01      	ldr	r3, [sp, #4]
 800d7e2:	6020      	str	r0, [r4, #0]
 800d7e4:	b15b      	cbz	r3, 800d7fe <__smakebuf_r+0x70>
 800d7e6:	4630      	mov	r0, r6
 800d7e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7ec:	f000 f81e 	bl	800d82c <_isatty_r>
 800d7f0:	b128      	cbz	r0, 800d7fe <__smakebuf_r+0x70>
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	f023 0303 	bic.w	r3, r3, #3
 800d7f8:	f043 0301 	orr.w	r3, r3, #1
 800d7fc:	81a3      	strh	r3, [r4, #12]
 800d7fe:	89a3      	ldrh	r3, [r4, #12]
 800d800:	431d      	orrs	r5, r3
 800d802:	81a5      	strh	r5, [r4, #12]
 800d804:	e7cf      	b.n	800d7a6 <__smakebuf_r+0x18>
	...

0800d808 <_fstat_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	2300      	movs	r3, #0
 800d80c:	4d06      	ldr	r5, [pc, #24]	@ (800d828 <_fstat_r+0x20>)
 800d80e:	4604      	mov	r4, r0
 800d810:	4608      	mov	r0, r1
 800d812:	4611      	mov	r1, r2
 800d814:	602b      	str	r3, [r5, #0]
 800d816:	f7f3 fdf3 	bl	8001400 <_fstat>
 800d81a:	1c43      	adds	r3, r0, #1
 800d81c:	d102      	bne.n	800d824 <_fstat_r+0x1c>
 800d81e:	682b      	ldr	r3, [r5, #0]
 800d820:	b103      	cbz	r3, 800d824 <_fstat_r+0x1c>
 800d822:	6023      	str	r3, [r4, #0]
 800d824:	bd38      	pop	{r3, r4, r5, pc}
 800d826:	bf00      	nop
 800d828:	2000359c 	.word	0x2000359c

0800d82c <_isatty_r>:
 800d82c:	b538      	push	{r3, r4, r5, lr}
 800d82e:	2300      	movs	r3, #0
 800d830:	4d05      	ldr	r5, [pc, #20]	@ (800d848 <_isatty_r+0x1c>)
 800d832:	4604      	mov	r4, r0
 800d834:	4608      	mov	r0, r1
 800d836:	602b      	str	r3, [r5, #0]
 800d838:	f7f3 fdf1 	bl	800141e <_isatty>
 800d83c:	1c43      	adds	r3, r0, #1
 800d83e:	d102      	bne.n	800d846 <_isatty_r+0x1a>
 800d840:	682b      	ldr	r3, [r5, #0]
 800d842:	b103      	cbz	r3, 800d846 <_isatty_r+0x1a>
 800d844:	6023      	str	r3, [r4, #0]
 800d846:	bd38      	pop	{r3, r4, r5, pc}
 800d848:	2000359c 	.word	0x2000359c

0800d84c <_sbrk_r>:
 800d84c:	b538      	push	{r3, r4, r5, lr}
 800d84e:	2300      	movs	r3, #0
 800d850:	4d05      	ldr	r5, [pc, #20]	@ (800d868 <_sbrk_r+0x1c>)
 800d852:	4604      	mov	r4, r0
 800d854:	4608      	mov	r0, r1
 800d856:	602b      	str	r3, [r5, #0]
 800d858:	f7f3 fdf8 	bl	800144c <_sbrk>
 800d85c:	1c43      	adds	r3, r0, #1
 800d85e:	d102      	bne.n	800d866 <_sbrk_r+0x1a>
 800d860:	682b      	ldr	r3, [r5, #0]
 800d862:	b103      	cbz	r3, 800d866 <_sbrk_r+0x1a>
 800d864:	6023      	str	r3, [r4, #0]
 800d866:	bd38      	pop	{r3, r4, r5, pc}
 800d868:	2000359c 	.word	0x2000359c

0800d86c <memchr>:
 800d86c:	4603      	mov	r3, r0
 800d86e:	b510      	push	{r4, lr}
 800d870:	b2c9      	uxtb	r1, r1
 800d872:	4402      	add	r2, r0
 800d874:	4293      	cmp	r3, r2
 800d876:	4618      	mov	r0, r3
 800d878:	d101      	bne.n	800d87e <memchr+0x12>
 800d87a:	2000      	movs	r0, #0
 800d87c:	e003      	b.n	800d886 <memchr+0x1a>
 800d87e:	7804      	ldrb	r4, [r0, #0]
 800d880:	3301      	adds	r3, #1
 800d882:	428c      	cmp	r4, r1
 800d884:	d1f6      	bne.n	800d874 <memchr+0x8>
 800d886:	bd10      	pop	{r4, pc}

0800d888 <floorf>:
 800d888:	b570      	push	{r4, r5, r6, lr}
 800d88a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800d88e:	3d7f      	subs	r5, #127	@ 0x7f
 800d890:	2d16      	cmp	r5, #22
 800d892:	4601      	mov	r1, r0
 800d894:	4604      	mov	r4, r0
 800d896:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800d89a:	dc26      	bgt.n	800d8ea <floorf+0x62>
 800d89c:	2d00      	cmp	r5, #0
 800d89e:	da0f      	bge.n	800d8c0 <floorf+0x38>
 800d8a0:	4917      	ldr	r1, [pc, #92]	@ (800d900 <floorf+0x78>)
 800d8a2:	f7f2 fe17 	bl	80004d4 <__addsf3>
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	f7f3 f8d8 	bl	8000a5c <__aeabi_fcmpgt>
 800d8ac:	b130      	cbz	r0, 800d8bc <floorf+0x34>
 800d8ae:	2c00      	cmp	r4, #0
 800d8b0:	da23      	bge.n	800d8fa <floorf+0x72>
 800d8b2:	2e00      	cmp	r6, #0
 800d8b4:	4c13      	ldr	r4, [pc, #76]	@ (800d904 <floorf+0x7c>)
 800d8b6:	bf08      	it	eq
 800d8b8:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d8bc:	4621      	mov	r1, r4
 800d8be:	e01a      	b.n	800d8f6 <floorf+0x6e>
 800d8c0:	4e11      	ldr	r6, [pc, #68]	@ (800d908 <floorf+0x80>)
 800d8c2:	412e      	asrs	r6, r5
 800d8c4:	4230      	tst	r0, r6
 800d8c6:	d016      	beq.n	800d8f6 <floorf+0x6e>
 800d8c8:	490d      	ldr	r1, [pc, #52]	@ (800d900 <floorf+0x78>)
 800d8ca:	f7f2 fe03 	bl	80004d4 <__addsf3>
 800d8ce:	2100      	movs	r1, #0
 800d8d0:	f7f3 f8c4 	bl	8000a5c <__aeabi_fcmpgt>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d0f1      	beq.n	800d8bc <floorf+0x34>
 800d8d8:	2c00      	cmp	r4, #0
 800d8da:	bfbe      	ittt	lt
 800d8dc:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800d8e0:	412b      	asrlt	r3, r5
 800d8e2:	18e4      	addlt	r4, r4, r3
 800d8e4:	ea24 0406 	bic.w	r4, r4, r6
 800d8e8:	e7e8      	b.n	800d8bc <floorf+0x34>
 800d8ea:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800d8ee:	d302      	bcc.n	800d8f6 <floorf+0x6e>
 800d8f0:	f7f2 fdf0 	bl	80004d4 <__addsf3>
 800d8f4:	4601      	mov	r1, r0
 800d8f6:	4608      	mov	r0, r1
 800d8f8:	bd70      	pop	{r4, r5, r6, pc}
 800d8fa:	2400      	movs	r4, #0
 800d8fc:	e7de      	b.n	800d8bc <floorf+0x34>
 800d8fe:	bf00      	nop
 800d900:	7149f2ca 	.word	0x7149f2ca
 800d904:	bf800000 	.word	0xbf800000
 800d908:	007fffff 	.word	0x007fffff

0800d90c <_init>:
 800d90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d90e:	bf00      	nop
 800d910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d912:	bc08      	pop	{r3}
 800d914:	469e      	mov	lr, r3
 800d916:	4770      	bx	lr

0800d918 <_fini>:
 800d918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d91a:	bf00      	nop
 800d91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d91e:	bc08      	pop	{r3}
 800d920:	469e      	mov	lr, r3
 800d922:	4770      	bx	lr
