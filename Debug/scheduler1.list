
scheduler1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d368  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800d478  0800d478  0000e478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5d8  0800d5d8  0000f1e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d5d8  0800d5d8  0000f1e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d5d8  0800d5d8  0000f1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5d8  0800d5d8  0000e5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d5dc  0800d5dc  0000e5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800d5e0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dd0  200001e0  0800d7c0  0000f1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002fb0  0800d7c0  0000ffb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe58  00000000  00000000  0000f209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f41  00000000  00000000  0002f061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  00033fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001557  00000000  00000000  00035b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd3c  00000000  00000000  000370d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021913  00000000  00000000  00053e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c696  00000000  00000000  00075726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111dbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c98  00000000  00000000  00111e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00119a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d460 	.word	0x0800d460

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800d460 	.word	0x0800d460

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2iz>:
 800060c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000614:	d30f      	bcc.n	8000636 <__aeabi_f2iz+0x2a>
 8000616:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d90d      	bls.n	800063c <__aeabi_f2iz+0x30>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000628:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800062c:	fa23 f002 	lsr.w	r0, r3, r2
 8000630:	bf18      	it	ne
 8000632:	4240      	negne	r0, r0
 8000634:	4770      	bx	lr
 8000636:	f04f 0000 	mov.w	r0, #0
 800063a:	4770      	bx	lr
 800063c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000640:	d101      	bne.n	8000646 <__aeabi_f2iz+0x3a>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	d105      	bne.n	8000652 <__aeabi_f2iz+0x46>
 8000646:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800064a:	bf08      	it	eq
 800064c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <DelayMicro>:
#include "dht22.h"
//--------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <DelayMicro+0x34>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <DelayMicro+0x38>)
 8000666:	fba2 2303 	umull	r2, r3, r2, r3
 800066a:	0ddb      	lsrs	r3, r3, #23
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	fb02 f303 	mul.w	r3, r2, r3
 8000672:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8000674:	bf00      	nop
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1fa      	bne.n	8000676 <DelayMicro+0x1e>
}
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	20000004 	.word	0x20000004
 8000690:	ee9bfab5 	.word	0xee9bfab5

08000694 <dht22_init>:

//--------------------------------------------------
void dht22_init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_DeInit(data_port, data_pin);
 80006a6:	2104      	movs	r1, #4
 80006a8:	480e      	ldr	r0, [pc, #56]	@ (80006e4 <dht22_init+0x50>)
 80006aa:	f000 ffc7 	bl	800163c <HAL_GPIO_DeInit>
  GPIO_InitStruct.Pin = data_pin;
 80006ae:	2304      	movs	r3, #4
 80006b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80006b2:	2311      	movs	r3, #17
 80006b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(data_port, &GPIO_InitStruct);
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4808      	ldr	r0, [pc, #32]	@ (80006e4 <dht22_init+0x50>)
 80006c4:	f000 fe36 	bl	8001334 <HAL_GPIO_Init>
	///////////////////////////////////////////////////////
  HAL_Delay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006cc:	f000 fd2e 	bl	800112c <HAL_Delay>
  HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2104      	movs	r1, #4
 80006d4:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <dht22_init+0x50>)
 80006d6:	f001 f884 	bl	80017e2 <HAL_GPIO_WritePin>

}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40010800 	.word	0x40010800

080006e8 <DHT22_Get_Temp>:

uint8_t DHT22_Get_Temp(float *Temp)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint8_t dataArray[6], myChecksum;
	uint16_t Temp16;
	uint8_t i, j = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2104      	movs	r1, #4
 80006f8:	4854      	ldr	r0, [pc, #336]	@ (800084c <DHT22_Get_Temp+0x164>)
 80006fa:	f001 f872 	bl	80017e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	2104      	movs	r1, #4
 8000702:	4852      	ldr	r0, [pc, #328]	@ (800084c <DHT22_Get_Temp+0x164>)
 8000704:	f001 f86d 	bl	80017e2 <HAL_GPIO_WritePin>
	DelayMicro(2000);
 8000708:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800070c:	f7ff ffa4 	bl	8000658 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2104      	movs	r1, #4
 8000714:	484d      	ldr	r0, [pc, #308]	@ (800084c <DHT22_Get_Temp+0x164>)
 8000716:	f001 f864 	bl	80017e2 <HAL_GPIO_WritePin>
	DelayMicro(1200);
 800071a:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 800071e:	f7ff ff9b 	bl	8000658 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2104      	movs	r1, #4
 8000726:	4849      	ldr	r0, [pc, #292]	@ (800084c <DHT22_Get_Temp+0x164>)
 8000728:	f001 f85b 	bl	80017e2 <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40
 800072c:	2027      	movs	r0, #39	@ 0x27
 800072e:	f7ff ff93 	bl	8000658 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 8000732:	2104      	movs	r1, #4
 8000734:	4845      	ldr	r0, [pc, #276]	@ (800084c <DHT22_Get_Temp+0x164>)
 8000736:	f001 f83d 	bl	80017b4 <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d101      	bne.n	8000744 <DHT22_Get_Temp+0x5c>
	{
		return 0;
 8000740:	2300      	movs	r3, #0
 8000742:	e07e      	b.n	8000842 <DHT22_Get_Temp+0x15a>
	}
	DelayMicro(80);
 8000744:	2050      	movs	r0, #80	@ 0x50
 8000746:	f7ff ff87 	bl	8000658 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 800074a:	2104      	movs	r1, #4
 800074c:	483f      	ldr	r0, [pc, #252]	@ (800084c <DHT22_Get_Temp+0x164>)
 800074e:	f001 f831 	bl	80017b4 <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <DHT22_Get_Temp+0x74>
	{
		return 0;
 8000758:	2300      	movs	r3, #0
 800075a:	e072      	b.n	8000842 <DHT22_Get_Temp+0x15a>
	}
	DelayMicro(80);
 800075c:	2050      	movs	r0, #80	@ 0x50
 800075e:	f7ff ff7b 	bl	8000658 <DelayMicro>

	for (j=0; j<5; j++)
 8000762:	2300      	movs	r3, #0
 8000764:	757b      	strb	r3, [r7, #21]
 8000766:	e040      	b.n	80007ea <DHT22_Get_Temp+0x102>
	{
		dataArray[j]=0;
 8000768:	7d7b      	ldrb	r3, [r7, #21]
 800076a:	3318      	adds	r3, #24
 800076c:	443b      	add	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(i=0; i<8; i++)
 8000774:	2300      	movs	r3, #0
 8000776:	75bb      	strb	r3, [r7, #22]
 8000778:	e031      	b.n	80007de <DHT22_Get_Temp+0xf6>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);
 800077a:	bf00      	nop
 800077c:	2104      	movs	r1, #4
 800077e:	4833      	ldr	r0, [pc, #204]	@ (800084c <DHT22_Get_Temp+0x164>)
 8000780:	f001 f818 	bl	80017b4 <HAL_GPIO_ReadPin>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d0f8      	beq.n	800077c <DHT22_Get_Temp+0x94>
			DelayMicro(30);
 800078a:	201e      	movs	r0, #30
 800078c:	f7ff ff64 	bl	8000658 <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 8000790:	2104      	movs	r1, #4
 8000792:	482e      	ldr	r0, [pc, #184]	@ (800084c <DHT22_Get_Temp+0x164>)
 8000794:	f001 f80e 	bl	80017b4 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d014      	beq.n	80007c8 <DHT22_Get_Temp+0xe0>
				dataArray[j] |= (1<<(7-i));
 800079e:	7d7b      	ldrb	r3, [r7, #21]
 80007a0:	3318      	adds	r3, #24
 80007a2:	443b      	add	r3, r7
 80007a4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80007a8:	b25a      	sxtb	r2, r3
 80007aa:	7dbb      	ldrb	r3, [r7, #22]
 80007ac:	f1c3 0307 	rsb	r3, r3, #7
 80007b0:	2101      	movs	r1, #1
 80007b2:	fa01 f303 	lsl.w	r3, r1, r3
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b25a      	sxtb	r2, r3
 80007bc:	7d7b      	ldrb	r3, [r7, #21]
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	3318      	adds	r3, #24
 80007c2:	443b      	add	r3, r7
 80007c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);
 80007c8:	bf00      	nop
 80007ca:	2104      	movs	r1, #4
 80007cc:	481f      	ldr	r0, [pc, #124]	@ (800084c <DHT22_Get_Temp+0x164>)
 80007ce:	f000 fff1 	bl	80017b4 <HAL_GPIO_ReadPin>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d0f8      	beq.n	80007ca <DHT22_Get_Temp+0xe2>
		for(i=0; i<8; i++)
 80007d8:	7dbb      	ldrb	r3, [r7, #22]
 80007da:	3301      	adds	r3, #1
 80007dc:	75bb      	strb	r3, [r7, #22]
 80007de:	7dbb      	ldrb	r3, [r7, #22]
 80007e0:	2b07      	cmp	r3, #7
 80007e2:	d9ca      	bls.n	800077a <DHT22_Get_Temp+0x92>
	for (j=0; j<5; j++)
 80007e4:	7d7b      	ldrb	r3, [r7, #21]
 80007e6:	3301      	adds	r3, #1
 80007e8:	757b      	strb	r3, [r7, #21]
 80007ea:	7d7b      	ldrb	r3, [r7, #21]
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	d9bb      	bls.n	8000768 <DHT22_Get_Temp+0x80>
		}
	}
	myChecksum = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	753b      	strb	r3, [r7, #20]
 80007f8:	e00a      	b.n	8000810 <DHT22_Get_Temp+0x128>
	{
		myChecksum += dataArray[k];
 80007fa:	7d3b      	ldrb	r3, [r7, #20]
 80007fc:	3318      	adds	r3, #24
 80007fe:	443b      	add	r3, r7
 8000800:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	4413      	add	r3, r2
 8000808:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 800080a:	7d3b      	ldrb	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	753b      	strb	r3, [r7, #20]
 8000810:	7d3b      	ldrb	r3, [r7, #20]
 8000812:	2b03      	cmp	r3, #3
 8000814:	d9f1      	bls.n	80007fa <DHT22_Get_Temp+0x112>
	}
		Temp16 = (dataArray[2] <<8) | dataArray[3];
 8000816:	7bbb      	ldrb	r3, [r7, #14]
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	b21a      	sxth	r2, r3
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	b21b      	sxth	r3, r3
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	827b      	strh	r3, [r7, #18]

		*Temp = Temp16/10.0f;
 8000826:	8a7b      	ldrh	r3, [r7, #18]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fd4b 	bl	80002c4 <__aeabi_i2f>
 800082e:	4603      	mov	r3, r0
 8000830:	4907      	ldr	r1, [pc, #28]	@ (8000850 <DHT22_Get_Temp+0x168>)
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fe4e 	bl	80004d4 <__aeabi_fdiv>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	601a      	str	r2, [r3, #0]
		return 1;
 8000840:	2301      	movs	r3, #1
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40010800 	.word	0x40010800
 8000850:	41200000 	.word	0x41200000

08000854 <__io_putchar>:
// ************** DEFINE ****************

/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    while (CDC_Transmit_FS((uint8_t *)&ch, 1) == USBD_BUSY);
 800085c:	bf00      	nop
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2101      	movs	r1, #1
 8000862:	4618      	mov	r0, r3
 8000864:	f00b fa22 	bl	800bcac <CDC_Transmit_FS>
 8000868:	4603      	mov	r3, r0
 800086a:	2b01      	cmp	r3, #1
 800086c:	d0f7      	beq.n	800085e <__io_putchar+0xa>
    return ch;
 800086e:	687b      	ldr	r3, [r7, #4]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <MPU6050_Init>:
 * Reference to initialized common hi2c1 variable in main.c
 *
 * */
extern I2C_HandleTypeDef hi2c1;

inline void MPU6050_Init (void){
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af04      	add	r7, sp, #16
	uint8_t check,Data;
	// check the sensor ID (SEE WHO AM I DATASHEET)
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800087e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	2301      	movs	r3, #1
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2301      	movs	r3, #1
 800088e:	2275      	movs	r2, #117	@ 0x75
 8000890:	21d0      	movs	r1, #208	@ 0xd0
 8000892:	4824      	ldr	r0, [pc, #144]	@ (8000924 <MPU6050_Init+0xac>)
 8000894:	f001 f9fc 	bl	8001c90 <HAL_I2C_Mem_Read>
	if (check == 104) // the sensor is present
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b68      	cmp	r3, #104	@ 0x68
 800089c:	d13e      	bne.n	800091c <MPU6050_Init+0xa4>
	{
		printf("MPU Detected\n");
 800089e:	4822      	ldr	r0, [pc, #136]	@ (8000928 <MPU6050_Init+0xb0>)
 80008a0:	f00b ff0c 	bl	800c6bc <puts>
		// setting PWR Registers
		Data = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80008a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ac:	9302      	str	r3, [sp, #8]
 80008ae:	2301      	movs	r3, #1
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	1dbb      	adds	r3, r7, #6
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	226b      	movs	r2, #107	@ 0x6b
 80008ba:	21d0      	movs	r1, #208	@ 0xd0
 80008bc:	4819      	ldr	r0, [pc, #100]	@ (8000924 <MPU6050_Init+0xac>)
 80008be:	f001 f8ed 	bl	8001a9c <HAL_I2C_Mem_Write>
		// var sample rate with SMPLRT_DIV_REG
		Data = 0x07;
 80008c2:	2307      	movs	r3, #7
 80008c4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80008c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	2301      	movs	r3, #1
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	1dbb      	adds	r3, r7, #6
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2301      	movs	r3, #1
 80008d6:	2219      	movs	r2, #25
 80008d8:	21d0      	movs	r1, #208	@ 0xd0
 80008da:	4812      	ldr	r0, [pc, #72]	@ (8000924 <MPU6050_Init+0xac>)
 80008dc:	f001 f8de 	bl	8001a9c <HAL_I2C_Mem_Write>
		// var accelerometer config with ACCEL_CONFIG_REG
		Data = 0x00;
 80008e0:	2300      	movs	r3, #0
 80008e2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80008e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	2301      	movs	r3, #1
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	1dbb      	adds	r3, r7, #6
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	221c      	movs	r2, #28
 80008f6:	21d0      	movs	r1, #208	@ 0xd0
 80008f8:	480a      	ldr	r0, [pc, #40]	@ (8000924 <MPU6050_Init+0xac>)
 80008fa:	f001 f8cf 	bl	8001a9c <HAL_I2C_Mem_Write>
		// var Gyro config with GYRO_CONFIG_REG
		Data = 0x00;
 80008fe:	2300      	movs	r3, #0
 8000900:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000906:	9302      	str	r3, [sp, #8]
 8000908:	2301      	movs	r3, #1
 800090a:	9301      	str	r3, [sp, #4]
 800090c:	1dbb      	adds	r3, r7, #6
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2301      	movs	r3, #1
 8000912:	221b      	movs	r2, #27
 8000914:	21d0      	movs	r1, #208	@ 0xd0
 8000916:	4803      	ldr	r0, [pc, #12]	@ (8000924 <MPU6050_Init+0xac>)
 8000918:	f001 f8c0 	bl	8001a9c <HAL_I2C_Mem_Write>
	}
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000210 	.word	0x20000210
 8000928:	0800d478 	.word	0x0800d478

0800092c <MPU6050_Read_Accel>:


inline void MPU6050_Read_Accel ( void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 8000932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000936:	9302      	str	r3, [sp, #8]
 8000938:	2306      	movs	r3, #6
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	463b      	mov	r3, r7
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2301      	movs	r3, #1
 8000942:	223b      	movs	r2, #59	@ 0x3b
 8000944:	21d0      	movs	r1, #208	@ 0xd0
 8000946:	4829      	ldr	r0, [pc, #164]	@ (80009ec <MPU6050_Read_Accel+0xc0>)
 8000948:	f001 f9a2 	bl	8001c90 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800094c:	783b      	ldrb	r3, [r7, #0]
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	b21a      	sxth	r2, r3
 8000952:	787b      	ldrb	r3, [r7, #1]
 8000954:	b21b      	sxth	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b21a      	sxth	r2, r3
 800095a:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <MPU6050_Read_Accel+0xc4>)
 800095c:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800095e:	78bb      	ldrb	r3, [r7, #2]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	b21a      	sxth	r2, r3
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	b21b      	sxth	r3, r3
 8000968:	4313      	orrs	r3, r2
 800096a:	b21a      	sxth	r2, r3
 800096c:	4b21      	ldr	r3, [pc, #132]	@ (80009f4 <MPU6050_Read_Accel+0xc8>)
 800096e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000970:	793b      	ldrb	r3, [r7, #4]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	b21a      	sxth	r2, r3
 8000976:	797b      	ldrb	r3, [r7, #5]
 8000978:	b21b      	sxth	r3, r3
 800097a:	4313      	orrs	r3, r2
 800097c:	b21a      	sxth	r2, r3
 800097e:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <MPU6050_Read_Accel+0xcc>)
 8000980:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = (float)Accel_X_RAW/16384.0;
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MPU6050_Read_Accel+0xc4>)
 8000984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fc9b 	bl	80002c4 <__aeabi_i2f>
 800098e:	4603      	mov	r3, r0
 8000990:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fd9d 	bl	80004d4 <__aeabi_fdiv>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MPU6050_Read_Accel+0xd0>)
 80009a0:	601a      	str	r2, [r3, #0]
	Ay = (float)Accel_Y_RAW/16384.0;
 80009a2:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MPU6050_Read_Accel+0xc8>)
 80009a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc8b 	bl	80002c4 <__aeabi_i2f>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fd8d 	bl	80004d4 <__aeabi_fdiv>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <MPU6050_Read_Accel+0xd4>)
 80009c0:	601a      	str	r2, [r3, #0]
	Az = (float)Accel_Z_RAW/16384.0;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <MPU6050_Read_Accel+0xcc>)
 80009c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fc7b 	bl	80002c4 <__aeabi_i2f>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fd7d 	bl	80004d4 <__aeabi_fdiv>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MPU6050_Read_Accel+0xd8>)
 80009e0:	601a      	str	r2, [r3, #0]
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000210 	.word	0x20000210
 80009f0:	200001fc 	.word	0x200001fc
 80009f4:	200001fe 	.word	0x200001fe
 80009f8:	20000200 	.word	0x20000200
 80009fc:	20000204 	.word	0x20000204
 8000a00:	20000208 	.word	0x20000208
 8000a04:	2000020c 	.word	0x2000020c

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0c:	f000 fb5c 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a10:	f000 f82c 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a14:	f000 f8b4 	bl	8000b80 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a18:	f000 f884 	bl	8000b24 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MX_USB_DEVICE_Init();
 8000a1c:	f00b f874 	bl	800bb08 <MX_USB_DEVICE_Init>

//  MPU6050_Init();
  dht22_init();
 8000a20:	f7ff fe38 	bl	8000694 <dht22_init>
//  DWT_Init();


 MPU6050_Init();
 8000a24:	f7ff ff28 	bl	8000878 <MPU6050_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a28:	f008 fb32 	bl	8009090 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mpu */
  mpuHandle = osThreadNew(TaskMpu, NULL, &mpu_attributes);
 8000a2c:	4a09      	ldr	r2, [pc, #36]	@ (8000a54 <main+0x4c>)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <main+0x50>)
 8000a32:	f008 fb75 	bl	8009120 <osThreadNew>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <main+0x54>)
 8000a3a:	6013      	str	r3, [r2, #0]

  /* creation of dht */
  dhtHandle = osThreadNew(TaskDht, NULL, &dht_attributes);
 8000a3c:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <main+0x58>)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4808      	ldr	r0, [pc, #32]	@ (8000a64 <main+0x5c>)
 8000a42:	f008 fb6d 	bl	8009120 <osThreadNew>
 8000a46:	4603      	mov	r3, r0
 8000a48:	4a07      	ldr	r2, [pc, #28]	@ (8000a68 <main+0x60>)
 8000a4a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a4c:	f008 fb42 	bl	80090d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <main+0x48>
 8000a54:	0800d530 	.word	0x0800d530
 8000a58:	08000c09 	.word	0x08000c09
 8000a5c:	20000264 	.word	0x20000264
 8000a60:	0800d554 	.word	0x0800d554
 8000a64:	08000c6d 	.word	0x08000c6d
 8000a68:	20000268 	.word	0x20000268

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b094      	sub	sp, #80	@ 0x50
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a76:	2228      	movs	r2, #40	@ 0x28
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f00b fefe 	bl	800c87c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ab8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f003 fc6c 	bl	80043a0 <HAL_RCC_OscConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ace:	f000 f913 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ae2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2101      	movs	r1, #1
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 fed8 	bl	80048a4 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000afa:	f000 f8fd 	bl	8000cf8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000afe:	2310      	movs	r3, #16
 8000b00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b06:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 f888 	bl	8004c20 <HAL_RCCEx_PeriphCLKConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b16:	f000 f8ef 	bl	8000cf8 <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	@ 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b2a:	4a13      	ldr	r2, [pc, #76]	@ (8000b78 <MX_I2C1_Init+0x54>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b30:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <MX_I2C1_Init+0x58>)
 8000b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b62:	f000 fe57 	bl	8001814 <HAL_I2C_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b6c:	f000 f8c4 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000210 	.word	0x20000210
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	000186a0 	.word	0x000186a0

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_GPIO_Init+0x7c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a18      	ldr	r2, [pc, #96]	@ (8000bfc <MX_GPIO_Init+0x7c>)
 8000b9a:	f043 0320 	orr.w	r3, r3, #32
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <MX_GPIO_Init+0x7c>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0320 	and.w	r3, r3, #32
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <MX_GPIO_Init+0x7c>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a12      	ldr	r2, [pc, #72]	@ (8000bfc <MX_GPIO_Init+0x7c>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <MX_GPIO_Init+0x7c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <MX_GPIO_Init+0x7c>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <MX_GPIO_Init+0x7c>)
 8000bca:	f043 0308 	orr.w	r3, r3, #8
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <MX_GPIO_Init+0x7c>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0308 	and.w	r3, r3, #8
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : data_Pin */
  GPIO_InitStruct.Pin = data_Pin;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <MX_GPIO_Init+0x80>)
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(data_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <MX_GPIO_Init+0x84>)
 8000bf0:	f000 fba0 	bl	8001334 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	10110000 	.word	0x10110000
 8000c04:	40010800 	.word	0x40010800

08000c08 <TaskMpu>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMpu */
void TaskMpu(void *argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c10:	f00a ff7a 	bl	800bb08 <MX_USB_DEVICE_Init>
  {

//	 start = DWT_GetCycleCount();
	  //
//	  	  MPU6050_Read_Accel();
	    MPU6050_Read_Accel();
 8000c14:	f7ff fe8a 	bl	800092c <MPU6050_Read_Accel>
	  //	  intPart = (int)floorf(Ax * 100);
	  	  printf("ax=%d\n",(int) Ax);
 8000c18:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <TaskMpu+0x54>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fcf5 	bl	800060c <__aeabi_f2iz>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4619      	mov	r1, r3
 8000c26:	480e      	ldr	r0, [pc, #56]	@ (8000c60 <TaskMpu+0x58>)
 8000c28:	f00b fce0 	bl	800c5ec <iprintf>
	  	  printf("Period task 2: %d ms\n", period_task_2 * 1000);
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <TaskMpu+0x5c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <TaskMpu+0x60>)
 8000c3e:	f00b fcd5 	bl	800c5ec <iprintf>


	    // print exe time of mpu task
//	  	  printf("%d\n",(int)(DWT_GetCycleCount() - start));

    osDelay(period_task_2 * 1000);
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <TaskMpu+0x5c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c4c:	fb02 f303 	mul.w	r3, r2, r3
 8000c50:	4618      	mov	r0, r3
 8000c52:	f008 faf7 	bl	8009244 <osDelay>
	    MPU6050_Read_Accel();
 8000c56:	bf00      	nop
 8000c58:	e7dc      	b.n	8000c14 <TaskMpu+0xc>
 8000c5a:	bf00      	nop
 8000c5c:	20000204 	.word	0x20000204
 8000c60:	0800d490 	.word	0x0800d490
 8000c64:	20000001 	.word	0x20000001
 8000c68:	0800d498 	.word	0x0800d498

08000c6c <TaskDht>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskDht */
void TaskDht(void *argument)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskDht */
	float temp = 0;
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
//	 TickType_t  start = 0;
	 uint32_t start = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
//	    start = xTaskGetTickCount();
//	  printf("Hello from rtos \n");
//	  start = DWT_GetCycleCount();
	 	  	  DHT22_Get_Temp(&temp);
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fd30 	bl	80006e8 <DHT22_Get_Temp>

//	 	  	  int intPart = (int)floorf(temp);
	 	  //
	 	  	  printf("t=%d\n",(int) temp);
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fcbe 	bl	800060c <__aeabi_f2iz>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <TaskDht+0x5c>)
 8000c96:	f00b fca9 	bl	800c5ec <iprintf>
	 	  	  printf("Period task 1: %d ms\n", period_task_1 * 5000);
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <TaskDht+0x60>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ca4:	fb02 f303 	mul.w	r3, r2, r3
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4809      	ldr	r0, [pc, #36]	@ (8000cd0 <TaskDht+0x64>)
 8000cac:	f00b fc9e 	bl	800c5ec <iprintf>
//	 	 	  printf("%d\n",(int)(DWT_GetCycleCount() - start));


    osDelay(period_task_1 * 5000);
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <TaskDht+0x60>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000cba:	fb02 f303 	mul.w	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f008 fac0 	bl	8009244 <osDelay>
	 	  	  DHT22_Get_Temp(&temp);
 8000cc4:	bf00      	nop
 8000cc6:	e7da      	b.n	8000c7e <TaskDht+0x12>
 8000cc8:	0800d4b0 	.word	0x0800d4b0
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	0800d4b8 	.word	0x0800d4b8

08000cd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d101      	bne.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ce6:	f000 fa05 	bl	80010f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40012c00 	.word	0x40012c00

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d0a:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <HAL_MspInit+0x68>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a17      	ldr	r2, [pc, #92]	@ (8000d6c <HAL_MspInit+0x68>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6193      	str	r3, [r2, #24]
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_MspInit+0x68>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_MspInit+0x68>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	4a11      	ldr	r2, [pc, #68]	@ (8000d6c <HAL_MspInit+0x68>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d2c:	61d3      	str	r3, [r2, #28]
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <HAL_MspInit+0x68>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	f06f 0001 	mvn.w	r0, #1
 8000d42:	f000 facc 	bl	80012de <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_MspInit+0x6c>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <HAL_MspInit+0x6c>)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000

08000d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a15      	ldr	r2, [pc, #84]	@ (8000de4 <HAL_I2C_MspInit+0x70>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d123      	bne.n	8000ddc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <HAL_I2C_MspInit+0x74>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a13      	ldr	r2, [pc, #76]	@ (8000de8 <HAL_I2C_MspInit+0x74>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <HAL_I2C_MspInit+0x74>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dac:	23c0      	movs	r3, #192	@ 0xc0
 8000dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db0:	2312      	movs	r3, #18
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480b      	ldr	r0, [pc, #44]	@ (8000dec <HAL_I2C_MspInit+0x78>)
 8000dc0:	f000 fab8 	bl	8001334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <HAL_I2C_MspInit+0x74>)
 8000dc6:	69db      	ldr	r3, [r3, #28]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <HAL_I2C_MspInit+0x74>)
 8000dca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dce:	61d3      	str	r3, [r2, #28]
 8000dd0:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <HAL_I2C_MspInit+0x74>)
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40005400 	.word	0x40005400
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010c00 	.word	0x40010c00

08000df0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	@ 0x30
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e06:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec0 <HAL_InitTick+0xd0>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ec0 <HAL_InitTick+0xd0>)
 8000e0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e10:	6193      	str	r3, [r2, #24]
 8000e12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec0 <HAL_InitTick+0xd0>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e1e:	f107 020c 	add.w	r2, r7, #12
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 feab 	bl	8004b84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e2e:	f003 fe95 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8000e32:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e36:	4a23      	ldr	r2, [pc, #140]	@ (8000ec4 <HAL_InitTick+0xd4>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	0c9b      	lsrs	r3, r3, #18
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e44:	4a21      	ldr	r2, [pc, #132]	@ (8000ecc <HAL_InitTick+0xdc>)
 8000e46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e4e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e54:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e68:	4817      	ldr	r0, [pc, #92]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e6a:	f003 ff8f 	bl	8004d8c <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d11b      	bne.n	8000eb4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e7c:	4812      	ldr	r0, [pc, #72]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e7e:	f003 ffdd 	bl	8004e3c <HAL_TIM_Base_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d111      	bne.n	8000eb4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e90:	2019      	movs	r0, #25
 8000e92:	f000 fa40 	bl	8001316 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d808      	bhi.n	8000eae <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	2019      	movs	r0, #25
 8000ea2:	f000 fa1c 	bl	80012de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <HAL_InitTick+0xe0>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	e002      	b.n	8000eb4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3730      	adds	r7, #48	@ 0x30
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	2000026c 	.word	0x2000026c
 8000ecc:	40012c00 	.word	0x40012c00
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f0e:	f001 fe02 	bl	8002b16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000296c 	.word	0x2000296c

08000f1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <TIM1_UP_IRQHandler+0x10>)
 8000f22:	f003 ffdd 	bl	8004ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000026c 	.word	0x2000026c

08000f30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e00a      	b.n	8000f58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f42:	f3af 8000 	nop.w
 8000f46:	4601      	mov	r1, r0
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	60ba      	str	r2, [r7, #8]
 8000f4e:	b2ca      	uxtb	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf0      	blt.n	8000f42 <_read+0x12>
  }

  return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	e009      	b.n	8000f90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fc65 	bl	8000854 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbf1      	blt.n	8000f7c <_write+0x12>
  }
  return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_close>:

int _close(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fc8:	605a      	str	r2, [r3, #4]
  return 0;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <_isatty>:

int _isatty(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b085      	sub	sp, #20
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
	...

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	@ (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	@ (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f00b fcc6 	bl	800c9c4 <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20005000 	.word	0x20005000
 8001064:	00000400 	.word	0x00000400
 8001068:	200002b4 	.word	0x200002b4
 800106c:	20002fb0 	.word	0x20002fb0

08001070 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800107c:	f7ff fff8 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001082:	490c      	ldr	r1, [pc, #48]	@ (80010b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001084:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a09      	ldr	r2, [pc, #36]	@ (80010bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001098:	4c09      	ldr	r4, [pc, #36]	@ (80010c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a6:	f00b fc93 	bl	800c9d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010aa:	f7ff fcad 	bl	8000a08 <main>
  bx lr
 80010ae:	4770      	bx	lr
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80010b8:	0800d5e0 	.word	0x0800d5e0
  ldr r2, =_sbss
 80010bc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80010c0:	20002fb0 	.word	0x20002fb0

080010c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_2_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <HAL_Init+0x28>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a07      	ldr	r2, [pc, #28]	@ (80010f0 <HAL_Init+0x28>)
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 f8f5 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010de:	200f      	movs	r0, #15
 80010e0:	f7ff fe86 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e4:	f7ff fe0e 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40022000 	.word	0x40022000

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <HAL_IncTick+0x1c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <HAL_IncTick+0x20>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a03      	ldr	r2, [pc, #12]	@ (8001114 <HAL_IncTick+0x20>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	2000000c 	.word	0x2000000c
 8001114:	200002b8 	.word	0x200002b8

08001118 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b02      	ldr	r3, [pc, #8]	@ (8001128 <HAL_GetTick+0x10>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	200002b8 	.word	0x200002b8

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff fff0 	bl	8001118 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffe0 	bl	8001118 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000000c 	.word	0x2000000c

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800119c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	4906      	ldr	r1, [pc, #24]	@ (800120c <__NVIC_EnableIRQ+0x34>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	@ (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	@ (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	@ 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	@ 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff4f 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff64 	bl	80011bc <__NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ffb2 	bl	8001264 <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff81 	bl	8001210 <__NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff57 	bl	80011d8 <__NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001334:	b480      	push	{r7}
 8001336:	b08b      	sub	sp, #44	@ 0x2c
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001346:	e169      	b.n	800161c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001348:	2201      	movs	r2, #1
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	429a      	cmp	r2, r3
 8001362:	f040 8158 	bne.w	8001616 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a9a      	ldr	r2, [pc, #616]	@ (80015d4 <HAL_GPIO_Init+0x2a0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d05e      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001370:	4a98      	ldr	r2, [pc, #608]	@ (80015d4 <HAL_GPIO_Init+0x2a0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d875      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 8001376:	4a98      	ldr	r2, [pc, #608]	@ (80015d8 <HAL_GPIO_Init+0x2a4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d058      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 800137c:	4a96      	ldr	r2, [pc, #600]	@ (80015d8 <HAL_GPIO_Init+0x2a4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d86f      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 8001382:	4a96      	ldr	r2, [pc, #600]	@ (80015dc <HAL_GPIO_Init+0x2a8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d052      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001388:	4a94      	ldr	r2, [pc, #592]	@ (80015dc <HAL_GPIO_Init+0x2a8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d869      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 800138e:	4a94      	ldr	r2, [pc, #592]	@ (80015e0 <HAL_GPIO_Init+0x2ac>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d04c      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001394:	4a92      	ldr	r2, [pc, #584]	@ (80015e0 <HAL_GPIO_Init+0x2ac>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d863      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 800139a:	4a92      	ldr	r2, [pc, #584]	@ (80015e4 <HAL_GPIO_Init+0x2b0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d046      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 80013a0:	4a90      	ldr	r2, [pc, #576]	@ (80015e4 <HAL_GPIO_Init+0x2b0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d85d      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 80013a6:	2b12      	cmp	r3, #18
 80013a8:	d82a      	bhi.n	8001400 <HAL_GPIO_Init+0xcc>
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d859      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 80013ae:	a201      	add	r2, pc, #4	@ (adr r2, 80013b4 <HAL_GPIO_Init+0x80>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	0800142f 	.word	0x0800142f
 80013b8:	08001409 	.word	0x08001409
 80013bc:	0800141b 	.word	0x0800141b
 80013c0:	0800145d 	.word	0x0800145d
 80013c4:	08001463 	.word	0x08001463
 80013c8:	08001463 	.word	0x08001463
 80013cc:	08001463 	.word	0x08001463
 80013d0:	08001463 	.word	0x08001463
 80013d4:	08001463 	.word	0x08001463
 80013d8:	08001463 	.word	0x08001463
 80013dc:	08001463 	.word	0x08001463
 80013e0:	08001463 	.word	0x08001463
 80013e4:	08001463 	.word	0x08001463
 80013e8:	08001463 	.word	0x08001463
 80013ec:	08001463 	.word	0x08001463
 80013f0:	08001463 	.word	0x08001463
 80013f4:	08001463 	.word	0x08001463
 80013f8:	08001411 	.word	0x08001411
 80013fc:	08001425 	.word	0x08001425
 8001400:	4a79      	ldr	r2, [pc, #484]	@ (80015e8 <HAL_GPIO_Init+0x2b4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001406:	e02c      	b.n	8001462 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	623b      	str	r3, [r7, #32]
          break;
 800140e:	e029      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	3304      	adds	r3, #4
 8001416:	623b      	str	r3, [r7, #32]
          break;
 8001418:	e024      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	3308      	adds	r3, #8
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e01f      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	330c      	adds	r3, #12
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e01a      	b.n	8001464 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001436:	2304      	movs	r3, #4
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e013      	b.n	8001464 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001444:	2308      	movs	r3, #8
 8001446:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	611a      	str	r2, [r3, #16]
          break;
 800144e:	e009      	b.n	8001464 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001450:	2308      	movs	r3, #8
 8001452:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	615a      	str	r2, [r3, #20]
          break;
 800145a:	e003      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
          break;
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x130>
          break;
 8001462:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2bff      	cmp	r3, #255	@ 0xff
 8001468:	d801      	bhi.n	800146e <HAL_GPIO_Init+0x13a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	e001      	b.n	8001472 <HAL_GPIO_Init+0x13e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3304      	adds	r3, #4
 8001472:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2bff      	cmp	r3, #255	@ 0xff
 8001478:	d802      	bhi.n	8001480 <HAL_GPIO_Init+0x14c>
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x152>
 8001480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001482:	3b08      	subs	r3, #8
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	210f      	movs	r1, #15
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	401a      	ands	r2, r3
 8001498:	6a39      	ldr	r1, [r7, #32]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	431a      	orrs	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80b1 	beq.w	8001616 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b4:	4b4d      	ldr	r3, [pc, #308]	@ (80015ec <HAL_GPIO_Init+0x2b8>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a4c      	ldr	r2, [pc, #304]	@ (80015ec <HAL_GPIO_Init+0x2b8>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b4a      	ldr	r3, [pc, #296]	@ (80015ec <HAL_GPIO_Init+0x2b8>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014cc:	4a48      	ldr	r2, [pc, #288]	@ (80015f0 <HAL_GPIO_Init+0x2bc>)
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a40      	ldr	r2, [pc, #256]	@ (80015f4 <HAL_GPIO_Init+0x2c0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d013      	beq.n	8001520 <HAL_GPIO_Init+0x1ec>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a3f      	ldr	r2, [pc, #252]	@ (80015f8 <HAL_GPIO_Init+0x2c4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d00d      	beq.n	800151c <HAL_GPIO_Init+0x1e8>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a3e      	ldr	r2, [pc, #248]	@ (80015fc <HAL_GPIO_Init+0x2c8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d007      	beq.n	8001518 <HAL_GPIO_Init+0x1e4>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a3d      	ldr	r2, [pc, #244]	@ (8001600 <HAL_GPIO_Init+0x2cc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_GPIO_Init+0x1e0>
 8001510:	2303      	movs	r3, #3
 8001512:	e006      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001514:	2304      	movs	r3, #4
 8001516:	e004      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001518:	2302      	movs	r3, #2
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001520:	2300      	movs	r3, #0
 8001522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001524:	f002 0203 	and.w	r2, r2, #3
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	4093      	lsls	r3, r2
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001532:	492f      	ldr	r1, [pc, #188]	@ (80015f0 <HAL_GPIO_Init+0x2bc>)
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800154c:	4b2d      	ldr	r3, [pc, #180]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	492c      	ldr	r1, [pc, #176]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	608b      	str	r3, [r1, #8]
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800155a:	4b2a      	ldr	r3, [pc, #168]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	43db      	mvns	r3, r3
 8001562:	4928      	ldr	r1, [pc, #160]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 8001564:	4013      	ands	r3, r2
 8001566:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001574:	4b23      	ldr	r3, [pc, #140]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	4922      	ldr	r1, [pc, #136]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	60cb      	str	r3, [r1, #12]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	491e      	ldr	r1, [pc, #120]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 800158c:	4013      	ands	r3, r2
 800158e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4918      	ldr	r1, [pc, #96]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4914      	ldr	r1, [pc, #80]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d021      	beq.n	8001608 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	490e      	ldr	r1, [pc, #56]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e021      	b.n	8001616 <HAL_GPIO_Init+0x2e2>
 80015d2:	bf00      	nop
 80015d4:	10320000 	.word	0x10320000
 80015d8:	10310000 	.word	0x10310000
 80015dc:	10220000 	.word	0x10220000
 80015e0:	10210000 	.word	0x10210000
 80015e4:	10120000 	.word	0x10120000
 80015e8:	10110000 	.word	0x10110000
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010000 	.word	0x40010000
 80015f4:	40010800 	.word	0x40010800
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	40011000 	.word	0x40011000
 8001600:	40011400 	.word	0x40011400
 8001604:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_GPIO_Init+0x304>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	43db      	mvns	r3, r3
 8001610:	4909      	ldr	r1, [pc, #36]	@ (8001638 <HAL_GPIO_Init+0x304>)
 8001612:	4013      	ands	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	3301      	adds	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	f47f ae8e 	bne.w	8001348 <HAL_GPIO_Init+0x14>
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	372c      	adds	r7, #44	@ 0x2c
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800164a:	e09a      	b.n	8001782 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800164c:	2201      	movs	r2, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 808d 	beq.w	800177c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001662:	4a4e      	ldr	r2, [pc, #312]	@ (800179c <HAL_GPIO_DeInit+0x160>)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4013      	ands	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a46      	ldr	r2, [pc, #280]	@ (80017a0 <HAL_GPIO_DeInit+0x164>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d013      	beq.n	80016b4 <HAL_GPIO_DeInit+0x78>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a45      	ldr	r2, [pc, #276]	@ (80017a4 <HAL_GPIO_DeInit+0x168>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d00d      	beq.n	80016b0 <HAL_GPIO_DeInit+0x74>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a44      	ldr	r2, [pc, #272]	@ (80017a8 <HAL_GPIO_DeInit+0x16c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d007      	beq.n	80016ac <HAL_GPIO_DeInit+0x70>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a43      	ldr	r2, [pc, #268]	@ (80017ac <HAL_GPIO_DeInit+0x170>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d101      	bne.n	80016a8 <HAL_GPIO_DeInit+0x6c>
 80016a4:	2303      	movs	r3, #3
 80016a6:	e006      	b.n	80016b6 <HAL_GPIO_DeInit+0x7a>
 80016a8:	2304      	movs	r3, #4
 80016aa:	e004      	b.n	80016b6 <HAL_GPIO_DeInit+0x7a>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e002      	b.n	80016b6 <HAL_GPIO_DeInit+0x7a>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <HAL_GPIO_DeInit+0x7a>
 80016b4:	2300      	movs	r3, #0
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	f002 0203 	and.w	r2, r2, #3
 80016bc:	0092      	lsls	r2, r2, #2
 80016be:	4093      	lsls	r3, r2
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d132      	bne.n	800172c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80016c6:	4b3a      	ldr	r3, [pc, #232]	@ (80017b0 <HAL_GPIO_DeInit+0x174>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4938      	ldr	r1, [pc, #224]	@ (80017b0 <HAL_GPIO_DeInit+0x174>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80016d4:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <HAL_GPIO_DeInit+0x174>)
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	43db      	mvns	r3, r3
 80016dc:	4934      	ldr	r1, [pc, #208]	@ (80017b0 <HAL_GPIO_DeInit+0x174>)
 80016de:	4013      	ands	r3, r2
 80016e0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80016e2:	4b33      	ldr	r3, [pc, #204]	@ (80017b0 <HAL_GPIO_DeInit+0x174>)
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4931      	ldr	r1, [pc, #196]	@ (80017b0 <HAL_GPIO_DeInit+0x174>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80016f0:	4b2f      	ldr	r3, [pc, #188]	@ (80017b0 <HAL_GPIO_DeInit+0x174>)
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	492d      	ldr	r1, [pc, #180]	@ (80017b0 <HAL_GPIO_DeInit+0x174>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800170e:	4a23      	ldr	r2, [pc, #140]	@ (800179c <HAL_GPIO_DeInit+0x160>)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	089b      	lsrs	r3, r3, #2
 8001714:	3302      	adds	r3, #2
 8001716:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	43da      	mvns	r2, r3
 800171e:	481f      	ldr	r0, [pc, #124]	@ (800179c <HAL_GPIO_DeInit+0x160>)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	400a      	ands	r2, r1
 8001726:	3302      	adds	r3, #2
 8001728:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2bff      	cmp	r3, #255	@ 0xff
 8001730:	d801      	bhi.n	8001736 <HAL_GPIO_DeInit+0xfa>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	e001      	b.n	800173a <HAL_GPIO_DeInit+0xfe>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3304      	adds	r3, #4
 800173a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2bff      	cmp	r3, #255	@ 0xff
 8001740:	d802      	bhi.n	8001748 <HAL_GPIO_DeInit+0x10c>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	e002      	b.n	800174e <HAL_GPIO_DeInit+0x112>
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3b08      	subs	r3, #8
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	210f      	movs	r1, #15
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	401a      	ands	r2, r3
 8001760:	2104      	movs	r1, #4
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	431a      	orrs	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	43db      	mvns	r3, r3
 8001776:	401a      	ands	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	3301      	adds	r3, #1
 8001780:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	f47f af5e 	bne.w	800164c <HAL_GPIO_DeInit+0x10>
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3724      	adds	r7, #36	@ 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40010000 	.word	0x40010000
 80017a0:	40010800 	.word	0x40010800
 80017a4:	40010c00 	.word	0x40010c00
 80017a8:	40011000 	.word	0x40011000
 80017ac:	40011400 	.word	0x40011400
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e001      	b.n	80017d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	807b      	strh	r3, [r7, #2]
 80017ee:	4613      	mov	r3, r2
 80017f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017f2:	787b      	ldrb	r3, [r7, #1]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f8:	887a      	ldrh	r2, [r7, #2]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017fe:	e003      	b.n	8001808 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	041a      	lsls	r2, r3, #16
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	611a      	str	r2, [r3, #16]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
	...

08001814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e12b      	b.n	8001a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fa9a 	bl	8000d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2224      	movs	r2, #36	@ 0x24
 8001844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0201 	bic.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001878:	f003 f95c 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 800187c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a81      	ldr	r2, [pc, #516]	@ (8001a88 <HAL_I2C_Init+0x274>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d807      	bhi.n	8001898 <HAL_I2C_Init+0x84>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4a80      	ldr	r2, [pc, #512]	@ (8001a8c <HAL_I2C_Init+0x278>)
 800188c:	4293      	cmp	r3, r2
 800188e:	bf94      	ite	ls
 8001890:	2301      	movls	r3, #1
 8001892:	2300      	movhi	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	e006      	b.n	80018a6 <HAL_I2C_Init+0x92>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a90 <HAL_I2C_Init+0x27c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	bf94      	ite	ls
 80018a0:	2301      	movls	r3, #1
 80018a2:	2300      	movhi	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0e7      	b.n	8001a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4a78      	ldr	r2, [pc, #480]	@ (8001a94 <HAL_I2C_Init+0x280>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0c9b      	lsrs	r3, r3, #18
 80018b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001a88 <HAL_I2C_Init+0x274>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d802      	bhi.n	80018e8 <HAL_I2C_Init+0xd4>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3301      	adds	r3, #1
 80018e6:	e009      	b.n	80018fc <HAL_I2C_Init+0xe8>
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	4a69      	ldr	r2, [pc, #420]	@ (8001a98 <HAL_I2C_Init+0x284>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	099b      	lsrs	r3, r3, #6
 80018fa:	3301      	adds	r3, #1
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	430b      	orrs	r3, r1
 8001902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800190e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	495c      	ldr	r1, [pc, #368]	@ (8001a88 <HAL_I2C_Init+0x274>)
 8001918:	428b      	cmp	r3, r1
 800191a:	d819      	bhi.n	8001950 <HAL_I2C_Init+0x13c>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e59      	subs	r1, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fbb1 f3f3 	udiv	r3, r1, r3
 800192a:	1c59      	adds	r1, r3, #1
 800192c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001930:	400b      	ands	r3, r1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00a      	beq.n	800194c <HAL_I2C_Init+0x138>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1e59      	subs	r1, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fbb1 f3f3 	udiv	r3, r1, r3
 8001944:	3301      	adds	r3, #1
 8001946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194a:	e051      	b.n	80019f0 <HAL_I2C_Init+0x1dc>
 800194c:	2304      	movs	r3, #4
 800194e:	e04f      	b.n	80019f0 <HAL_I2C_Init+0x1dc>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d111      	bne.n	800197c <HAL_I2C_Init+0x168>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1e58      	subs	r0, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6859      	ldr	r1, [r3, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	440b      	add	r3, r1
 8001966:	fbb0 f3f3 	udiv	r3, r0, r3
 800196a:	3301      	adds	r3, #1
 800196c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	e012      	b.n	80019a2 <HAL_I2C_Init+0x18e>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1e58      	subs	r0, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	0099      	lsls	r1, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001992:	3301      	adds	r3, #1
 8001994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Init+0x196>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e022      	b.n	80019f0 <HAL_I2C_Init+0x1dc>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10e      	bne.n	80019d0 <HAL_I2C_Init+0x1bc>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1e58      	subs	r0, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6859      	ldr	r1, [r3, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	440b      	add	r3, r1
 80019c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ce:	e00f      	b.n	80019f0 <HAL_I2C_Init+0x1dc>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1e58      	subs	r0, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	0099      	lsls	r1, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	6809      	ldr	r1, [r1, #0]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69da      	ldr	r2, [r3, #28]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6911      	ldr	r1, [r2, #16]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68d2      	ldr	r2, [r2, #12]
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	000186a0 	.word	0x000186a0
 8001a8c:	001e847f 	.word	0x001e847f
 8001a90:	003d08ff 	.word	0x003d08ff
 8001a94:	431bde83 	.word	0x431bde83
 8001a98:	10624dd3 	.word	0x10624dd3

08001a9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	817b      	strh	r3, [r7, #10]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	813b      	strh	r3, [r7, #8]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ab6:	f7ff fb2f 	bl	8001118 <HAL_GetTick>
 8001aba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b20      	cmp	r3, #32
 8001ac6:	f040 80d9 	bne.w	8001c7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2319      	movs	r3, #25
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	496d      	ldr	r1, [pc, #436]	@ (8001c88 <HAL_I2C_Mem_Write+0x1ec>)
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 fccd 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e0cc      	b.n	8001c7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_I2C_Mem_Write+0x56>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e0c5      	b.n	8001c7e <HAL_I2C_Mem_Write+0x1e2>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d007      	beq.n	8001b18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2221      	movs	r2, #33	@ 0x21
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2240      	movs	r2, #64	@ 0x40
 8001b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a3a      	ldr	r2, [r7, #32]
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4a4d      	ldr	r2, [pc, #308]	@ (8001c8c <HAL_I2C_Mem_Write+0x1f0>)
 8001b58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b5a:	88f8      	ldrh	r0, [r7, #6]
 8001b5c:	893a      	ldrh	r2, [r7, #8]
 8001b5e:	8979      	ldrh	r1, [r7, #10]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	4603      	mov	r3, r0
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 fb04 	bl	8002178 <I2C_RequestMemoryWrite>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d052      	beq.n	8001c1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e081      	b.n	8001c7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fd92 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00d      	beq.n	8001ba6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d107      	bne.n	8001ba2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ba0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e06b      	b.n	8001c7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	781a      	ldrb	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d11b      	bne.n	8001c1c <HAL_I2C_Mem_Write+0x180>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d017      	beq.n	8001c1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1aa      	bne.n	8001b7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 fd85 	bl	8002738 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00d      	beq.n	8001c50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d107      	bne.n	8001c4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e016      	b.n	8001c7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e000      	b.n	8001c7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c7c:	2302      	movs	r3, #2
  }
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	00100002 	.word	0x00100002
 8001c8c:	ffff0000 	.word	0xffff0000

08001c90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08c      	sub	sp, #48	@ 0x30
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	4608      	mov	r0, r1
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	817b      	strh	r3, [r7, #10]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	813b      	strh	r3, [r7, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cae:	f7ff fa33 	bl	8001118 <HAL_GetTick>
 8001cb2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	f040 8250 	bne.w	8002162 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2319      	movs	r3, #25
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4982      	ldr	r1, [pc, #520]	@ (8001ed4 <HAL_I2C_Mem_Read+0x244>)
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 fbd1 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e243      	b.n	8002164 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_I2C_Mem_Read+0x5a>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e23c      	b.n	8002164 <HAL_I2C_Mem_Read+0x4d4>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d007      	beq.n	8001d10 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2222      	movs	r2, #34	@ 0x22
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2240      	movs	r2, #64	@ 0x40
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4a62      	ldr	r2, [pc, #392]	@ (8001ed8 <HAL_I2C_Mem_Read+0x248>)
 8001d50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d52:	88f8      	ldrh	r0, [r7, #6]
 8001d54:	893a      	ldrh	r2, [r7, #8]
 8001d56:	8979      	ldrh	r1, [r7, #10]
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	4603      	mov	r3, r0
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fa9e 	bl	80022a4 <I2C_RequestMemoryRead>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e1f8      	b.n	8002164 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d113      	bne.n	8001da2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e1cc      	b.n	800213c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d11e      	bne.n	8001de8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001db8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dba:	b672      	cpsid	i
}
 8001dbc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001de2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001de4:	b662      	cpsie	i
}
 8001de6:	e035      	b.n	8001e54 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d11e      	bne.n	8001e2e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e00:	b672      	cpsid	i
}
 8001e02:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e2a:	b662      	cpsie	i
}
 8001e2c:	e012      	b.n	8001e54 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e3c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001e54:	e172      	b.n	800213c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	f200 811f 	bhi.w	800209e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d123      	bne.n	8001eb0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 fcab 	bl	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e173      	b.n	8002164 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001eae:	e145      	b.n	800213c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d152      	bne.n	8001f5e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4906      	ldr	r1, [pc, #24]	@ (8001edc <HAL_I2C_Mem_Read+0x24c>)
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fad6 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d008      	beq.n	8001ee0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e148      	b.n	8002164 <HAL_I2C_Mem_Read+0x4d4>
 8001ed2:	bf00      	nop
 8001ed4:	00100002 	.word	0x00100002
 8001ed8:	ffff0000 	.word	0xffff0000
 8001edc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee0:	b672      	cpsid	i
}
 8001ee2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f26:	b662      	cpsie	i
}
 8001f28:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f5c:	e0ee      	b.n	800213c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f64:	2200      	movs	r2, #0
 8001f66:	4981      	ldr	r1, [pc, #516]	@ (800216c <HAL_I2C_Mem_Read+0x4dc>)
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fa83 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0f5      	b.n	8002164 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002170 <HAL_I2C_Mem_Read+0x4e0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	4a6b      	ldr	r2, [pc, #428]	@ (8002174 <HAL_I2C_Mem_Read+0x4e4>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0a1a      	lsrs	r2, r3, #8
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00da      	lsls	r2, r3, #3
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d118      	bne.n	8002016 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f043 0220 	orr.w	r2, r3, #32
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002006:	b662      	cpsie	i
}
 8002008:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0a6      	b.n	8002164 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b04      	cmp	r3, #4
 8002022:	d1d9      	bne.n	8001fd8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002066:	b662      	cpsie	i
}
 8002068:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002086:	3b01      	subs	r3, #1
 8002088:	b29a      	uxth	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800209c:	e04e      	b.n	800213c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fb90 	bl	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e058      	b.n	8002164 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d124      	bne.n	800213c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d107      	bne.n	800210a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002108:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	f47f ae88 	bne.w	8001e56 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002162:	2302      	movs	r3, #2
  }
}
 8002164:	4618      	mov	r0, r3
 8002166:	3728      	adds	r7, #40	@ 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	00010004 	.word	0x00010004
 8002170:	20000004 	.word	0x20000004
 8002174:	14f8b589 	.word	0x14f8b589

08002178 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4603      	mov	r3, r0
 8002188:	817b      	strh	r3, [r7, #10]
 800218a:	460b      	mov	r3, r1
 800218c:	813b      	strh	r3, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f960 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00d      	beq.n	80021d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021c8:	d103      	bne.n	80021d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e05f      	b.n	8002296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	492d      	ldr	r1, [pc, #180]	@ (80022a0 <I2C_RequestMemoryWrite+0x128>)
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f9bb 	bl	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e04c      	b.n	8002296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002214:	6a39      	ldr	r1, [r7, #32]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fa46 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00d      	beq.n	800223e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	2b04      	cmp	r3, #4
 8002228:	d107      	bne.n	800223a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002238:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e02b      	b.n	8002296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002244:	893b      	ldrh	r3, [r7, #8]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	e021      	b.n	8002294 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002250:	893b      	ldrh	r3, [r7, #8]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	b29b      	uxth	r3, r3
 8002256:	b2da      	uxtb	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800225e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002260:	6a39      	ldr	r1, [r7, #32]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fa20 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00d      	beq.n	800228a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	2b04      	cmp	r3, #4
 8002274:	d107      	bne.n	8002286 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002284:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e005      	b.n	8002296 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800228a:	893b      	ldrh	r3, [r7, #8]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	00010002 	.word	0x00010002

080022a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	817b      	strh	r3, [r7, #10]
 80022b6:	460b      	mov	r3, r1
 80022b8:	813b      	strh	r3, [r7, #8]
 80022ba:	4613      	mov	r3, r2
 80022bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f8c2 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002304:	d103      	bne.n	800230e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0aa      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002312:	897b      	ldrh	r3, [r7, #10]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002320:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	6a3a      	ldr	r2, [r7, #32]
 8002326:	4952      	ldr	r1, [pc, #328]	@ (8002470 <I2C_RequestMemoryRead+0x1cc>)
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f91d 	bl	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e097      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800234e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002350:	6a39      	ldr	r1, [r7, #32]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f9a8 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00d      	beq.n	800237a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	2b04      	cmp	r3, #4
 8002364:	d107      	bne.n	8002376 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002374:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e076      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002380:	893b      	ldrh	r3, [r7, #8]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	e021      	b.n	80023d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800238c:	893b      	ldrh	r3, [r7, #8]
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	b29b      	uxth	r3, r3
 8002392:	b2da      	uxtb	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800239a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239c:	6a39      	ldr	r1, [r7, #32]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f982 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00d      	beq.n	80023c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d107      	bne.n	80023c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e050      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023c6:	893b      	ldrh	r3, [r7, #8]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d2:	6a39      	ldr	r1, [r7, #32]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f967 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00d      	beq.n	80023fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d107      	bne.n	80023f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e035      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800240a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	2200      	movs	r2, #0
 8002414:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f82b 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00d      	beq.n	8002440 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002432:	d103      	bne.n	800243c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800243a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e013      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002440:	897b      	ldrh	r3, [r7, #10]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	b2da      	uxtb	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	6a3a      	ldr	r2, [r7, #32]
 8002454:	4906      	ldr	r1, [pc, #24]	@ (8002470 <I2C_RequestMemoryRead+0x1cc>)
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f886 	bl	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	00010002 	.word	0x00010002

08002474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002484:	e048      	b.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d044      	beq.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248e:	f7fe fe43 	bl	8001118 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d139      	bne.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	0c1b      	lsrs	r3, r3, #16
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10d      	bne.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	43da      	mvns	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4013      	ands	r3, r2
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	e00c      	b.n	80024e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	43da      	mvns	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	4013      	ands	r3, r2
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d116      	bne.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f043 0220 	orr.w	r2, r3, #32
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e023      	b.n	8002560 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10d      	bne.n	800253e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	43da      	mvns	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4013      	ands	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	e00c      	b.n	8002558 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	43da      	mvns	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4013      	ands	r3, r2
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	429a      	cmp	r2, r3
 800255c:	d093      	beq.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002576:	e071      	b.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002586:	d123      	bne.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002596:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	f043 0204 	orr.w	r2, r3, #4
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e067      	b.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d6:	d041      	beq.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d8:	f7fe fd9e 	bl	8001118 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d302      	bcc.n	80025ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d136      	bne.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10c      	bne.n	8002612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	43da      	mvns	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4013      	ands	r3, r2
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	bf14      	ite	ne
 800260a:	2301      	movne	r3, #1
 800260c:	2300      	moveq	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	e00b      	b.n	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	43da      	mvns	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4013      	ands	r3, r2
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d016      	beq.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	f043 0220 	orr.w	r2, r3, #32
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e021      	b.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	0c1b      	lsrs	r3, r3, #16
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d10c      	bne.n	8002680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	43da      	mvns	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4013      	ands	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e00b      	b.n	8002698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4013      	ands	r3, r2
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	f47f af6d 	bne.w	8002578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b4:	e034      	b.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f8e3 	bl	8002882 <I2C_IsAcknowledgeFailed>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e034      	b.n	8002730 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d028      	beq.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7fe fd23 	bl	8001118 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d11d      	bne.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ee:	2b80      	cmp	r3, #128	@ 0x80
 80026f0:	d016      	beq.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e007      	b.n	8002730 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272a:	2b80      	cmp	r3, #128	@ 0x80
 800272c:	d1c3      	bne.n	80026b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002744:	e034      	b.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f89b 	bl	8002882 <I2C_IsAcknowledgeFailed>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e034      	b.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d028      	beq.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7fe fcdb 	bl	8001118 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11d      	bne.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b04      	cmp	r3, #4
 8002780:	d016      	beq.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e007      	b.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d1c3      	bne.n	8002746 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027d4:	e049      	b.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d119      	bne.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0210 	mvn.w	r2, #16
 80027ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e030      	b.n	800287a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002818:	f7fe fc7e 	bl	8001118 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	429a      	cmp	r2, r3
 8002826:	d302      	bcc.n	800282e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d11d      	bne.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002838:	2b40      	cmp	r3, #64	@ 0x40
 800283a:	d016      	beq.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f043 0220 	orr.w	r2, r3, #32
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e007      	b.n	800287a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002874:	2b40      	cmp	r3, #64	@ 0x40
 8002876:	d1ae      	bne.n	80027d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002898:	d11b      	bne.n	80028d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f043 0204 	orr.w	r2, r3, #4
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0e8      	b.n	8002ac2 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d106      	bne.n	800290a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f009 fb05 	bl	800bf14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2203      	movs	r2, #3
 800290e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f002 fc96 	bl	800524e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3304      	adds	r3, #4
 800292a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292c:	f002 fc6c 	bl	8005208 <USB_CoreInit>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0bf      	b.n	8002ac2 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f002 fc9a 	bl	8005282 <USB_SetCurrentMode>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b0      	b.n	8002ac2 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	e03e      	b.n	80029e4 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	3311      	adds	r3, #17
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	3310      	adds	r3, #16
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	3313      	adds	r3, #19
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	3320      	adds	r3, #32
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	3324      	adds	r3, #36	@ 0x24
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	3301      	adds	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	791b      	ldrb	r3, [r3, #4]
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d3bb      	bcc.n	8002966 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
 80029f2:	e044      	b.n	8002a7e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029f4:	7bfa      	ldrb	r2, [r7, #15]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	440b      	add	r3, r1
 8002a18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	440b      	add	r3, r1
 8002a44:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	440b      	add	r3, r1
 8002a5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	791b      	ldrb	r3, [r3, #4]
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d3b5      	bcc.n	80029f4 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a92:	f002 fc02 	bl	800529a <USB_DevInit>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e00c      	b.n	8002ac2 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 fe81 	bl	80077c2 <USB_DevDisconnect>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_PCD_Start+0x16>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e016      	b.n	8002b0e <HAL_PCD_Start+0x44>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f002 fb98 	bl	8005222 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002af2:	2101      	movs	r1, #1
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f009 fc80 	bl	800c3fa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 fe55 	bl	80077ae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b088      	sub	sp, #32
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 fe57 	bl	80077d6 <USB_ReadInterrupts>
 8002b28:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fb1a 	bl	800316e <PCD_EP_ISR_Handler>

    return;
 8002b3a:	e119      	b.n	8002d70 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d013      	beq.n	8002b6e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b58:	b292      	uxth	r2, r2
 8002b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f009 fa53 	bl	800c00a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b64:	2100      	movs	r1, #0
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f905 	bl	8002d76 <HAL_PCD_SetAddress>

    return;
 8002b6c:	e100      	b.n	8002d70 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00c      	beq.n	8002b92 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b8a:	b292      	uxth	r2, r2
 8002b8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b90:	e0ee      	b.n	8002d70 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00c      	beq.n	8002bb6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002bb4:	e0dc      	b.n	8002d70 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d027      	beq.n	8002c10 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0204 	bic.w	r2, r2, #4
 8002bd2:	b292      	uxth	r2, r2
 8002bd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0208 	bic.w	r2, r2, #8
 8002bea:	b292      	uxth	r2, r2
 8002bec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f009 fa43 	bl	800c07c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c08:	b292      	uxth	r2, r2
 8002c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c0e:	e0af      	b.n	8002d70 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8083 	beq.w	8002d22 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	77fb      	strb	r3, [r7, #31]
 8002c20:	e010      	b.n	8002c44 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	7ffb      	ldrb	r3, [r7, #31]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	441a      	add	r2, r3
 8002c2e:	7ffb      	ldrb	r3, [r7, #31]
 8002c30:	8812      	ldrh	r2, [r2, #0]
 8002c32:	b292      	uxth	r2, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	3320      	adds	r3, #32
 8002c38:	443b      	add	r3, r7
 8002c3a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002c3e:	7ffb      	ldrb	r3, [r7, #31]
 8002c40:	3301      	adds	r3, #1
 8002c42:	77fb      	strb	r3, [r7, #31]
 8002c44:	7ffb      	ldrb	r3, [r7, #31]
 8002c46:	2b07      	cmp	r3, #7
 8002c48:	d9eb      	bls.n	8002c22 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0201 	orr.w	r2, r2, #1
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0201 	bic.w	r2, r2, #1
 8002c74:	b292      	uxth	r2, r2
 8002c76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002c7a:	bf00      	nop
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f6      	beq.n	8002c7c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca0:	b292      	uxth	r2, r2
 8002ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	e00f      	b.n	8002ccc <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002cac:	7ffb      	ldrb	r3, [r7, #31]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	7ffa      	ldrb	r2, [r7, #31]
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	440a      	add	r2, r1
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	3320      	adds	r3, #32
 8002cbe:	443b      	add	r3, r7
 8002cc0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002cc4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002cc6:	7ffb      	ldrb	r3, [r7, #31]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	77fb      	strb	r3, [r7, #31]
 8002ccc:	7ffb      	ldrb	r3, [r7, #31]
 8002cce:	2b07      	cmp	r3, #7
 8002cd0:	d9ec      	bls.n	8002cac <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0208 	orr.w	r2, r2, #8
 8002ce4:	b292      	uxth	r2, r2
 8002ce6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cfc:	b292      	uxth	r2, r2
 8002cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0204 	orr.w	r2, r2, #4
 8002d14:	b292      	uxth	r2, r2
 8002d16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f009 f994 	bl	800c048 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002d20:	e026      	b.n	8002d70 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d3e:	b292      	uxth	r2, r2
 8002d40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f009 f952 	bl	800bfee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002d4a:	e011      	b.n	8002d70 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00c      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d68:	b292      	uxth	r2, r2
 8002d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d6e:	bf00      	nop
  }
}
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_PCD_SetAddress+0x1a>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e012      	b.n	8002db6 <HAL_PCD_SetAddress+0x40>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f004 fcee 	bl	8007788 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	4608      	mov	r0, r1
 8002dc8:	4611      	mov	r1, r2
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4603      	mov	r3, r0
 8002dce:	70fb      	strb	r3, [r7, #3]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	803b      	strh	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	da0e      	bge.n	8002e02 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 0207 	and.w	r2, r3, #7
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	3310      	adds	r3, #16
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	705a      	strb	r2, [r3, #1]
 8002e00:	e00e      	b.n	8002e20 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 0207 	and.w	r2, r3, #7
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e2c:	883a      	ldrh	r2, [r7, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	78ba      	ldrb	r2, [r7, #2]
 8002e36:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e38:	78bb      	ldrb	r3, [r7, #2]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d102      	bne.n	8002e44 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_PCD_EP_Open+0x94>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e00e      	b.n	8002e70 <HAL_PCD_EP_Open+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68f9      	ldr	r1, [r7, #12]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 fa37 	bl	80052d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002e6e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	da0e      	bge.n	8002eaa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	f003 0207 	and.w	r2, r3, #7
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	3310      	adds	r3, #16
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	705a      	strb	r2, [r3, #1]
 8002ea8:	e00e      	b.n	8002ec8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 0207 	and.w	r2, r3, #7
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_PCD_EP_Close+0x6a>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e00e      	b.n	8002f00 <HAL_PCD_EP_Close+0x88>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68f9      	ldr	r1, [r7, #12]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f002 fdaf 	bl	8005a54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	460b      	mov	r3, r1
 8002f16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f18:	7afb      	ldrb	r3, [r7, #11]
 8002f1a:	f003 0207 	and.w	r2, r3, #7
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2200      	movs	r2, #0
 8002f46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f48:	7afb      	ldrb	r3, [r7, #11]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6979      	ldr	r1, [r7, #20]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 ff66 	bl	8005e2c <USB_EPStartXfer>

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	f003 0207 	and.w	r2, r3, #7
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002f8c:	681b      	ldr	r3, [r3, #0]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa8:	7afb      	ldrb	r3, [r7, #11]
 8002faa:	f003 0207 	and.w	r2, r3, #7
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	3310      	adds	r3, #16
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe4:	7afb      	ldrb	r3, [r7, #11]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6979      	ldr	r1, [r7, #20]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f002 ff18 	bl	8005e2c <USB_EPStartXfer>

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	7912      	ldrb	r2, [r2, #4]
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e04c      	b.n	80030be <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003028:	2b00      	cmp	r3, #0
 800302a:	da0e      	bge.n	800304a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 0207 	and.w	r2, r3, #7
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	3310      	adds	r3, #16
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	705a      	strb	r2, [r3, #1]
 8003048:	e00c      	b.n	8003064 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4413      	add	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	b2da      	uxtb	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_PCD_EP_SetStall+0x7e>
 8003080:	2302      	movs	r3, #2
 8003082:	e01c      	b.n	80030be <HAL_PCD_EP_SetStall+0xb8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68f9      	ldr	r1, [r7, #12]
 8003092:	4618      	mov	r0, r3
 8003094:	f004 fa7b 	bl	800758e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d108      	bne.n	80030b4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f004 fba0 	bl	80077f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	7912      	ldrb	r2, [r2, #4]
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e040      	b.n	8003166 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	da0e      	bge.n	800310a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	f003 0207 	and.w	r2, r3, #7
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	3310      	adds	r3, #16
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	705a      	strb	r2, [r3, #1]
 8003108:	e00e      	b.n	8003128 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 0207 	and.w	r2, r3, #7
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_PCD_EP_ClrStall+0x82>
 8003144:	2302      	movs	r3, #2
 8003146:	e00e      	b.n	8003166 <HAL_PCD_EP_ClrStall+0xa0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68f9      	ldr	r1, [r7, #12]
 8003156:	4618      	mov	r0, r3
 8003158:	f004 fa69 	bl	800762e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b096      	sub	sp, #88	@ 0x58
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003176:	e3bb      	b.n	80038f0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003180:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003184:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003192:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 8175 	bne.w	8003486 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800319c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d14e      	bne.n	8003246 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80031b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031b8:	81fb      	strh	r3, [r7, #14]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	89fb      	ldrh	r3, [r7, #14]
 80031c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3310      	adds	r3, #16
 80031d0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031da:	b29b      	uxth	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	3302      	adds	r3, #2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80031fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	441a      	add	r2, r3
 8003208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800320c:	2100      	movs	r1, #0
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f008 fed3 	bl	800bfba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7b5b      	ldrb	r3, [r3, #13]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8368 	beq.w	80038f0 <PCD_EP_ISR_Handler+0x782>
 8003220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 8363 	bne.w	80038f0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7b5b      	ldrb	r3, [r3, #13]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003234:	b2da      	uxtb	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	735a      	strb	r2, [r3, #13]
 8003244:	e354      	b.n	80038f0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800324c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003258:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800325c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003260:	2b00      	cmp	r3, #0
 8003262:	d034      	beq.n	80032ce <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800326c:	b29b      	uxth	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	3306      	adds	r3, #6
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800328c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800328e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800329a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800329c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800329e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f004 faf6 	bl	8007894 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80032b4:	4013      	ands	r3, r2
 80032b6:	823b      	strh	r3, [r7, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	8a3a      	ldrh	r2, [r7, #16]
 80032be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032c2:	b292      	uxth	r2, r2
 80032c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f008 fe4a 	bl	800bf60 <HAL_PCD_SetupStageCallback>
 80032cc:	e310      	b.n	80038f0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032ce:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f280 830c 	bge.w	80038f0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29a      	uxth	r2, r3
 80032e0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80032e4:	4013      	ands	r3, r2
 80032e6:	83fb      	strh	r3, [r7, #30]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	8bfa      	ldrh	r2, [r7, #30]
 80032ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032f2:	b292      	uxth	r2, r2
 80032f4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032fe:	b29b      	uxth	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	3306      	adds	r3, #6
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800331e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003320:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d019      	beq.n	800335e <PCD_EP_ISR_Handler+0x1f0>
 800332a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d015      	beq.n	800335e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003338:	6959      	ldr	r1, [r3, #20]
 800333a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800333c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800333e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003340:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003342:	b29b      	uxth	r3, r3
 8003344:	f004 faa6 	bl	8007894 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	441a      	add	r2, r3
 8003352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003354:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003356:	2100      	movs	r1, #0
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f008 fe13 	bl	800bf84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003368:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800336c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003370:	2b00      	cmp	r3, #0
 8003372:	f040 82bd 	bne.w	80038f0 <PCD_EP_ISR_Handler+0x782>
 8003376:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800337a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800337e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003382:	f000 82b5 	beq.w	80038f0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003394:	b29b      	uxth	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	4413      	add	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	801a      	strh	r2, [r3, #0]
 80033b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80033bc:	d91d      	bls.n	80033fa <PCD_EP_ISR_Handler+0x28c>
 80033be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <PCD_EP_ISR_Handler+0x26a>
 80033d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033d4:	3b01      	subs	r3, #1
 80033d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29a      	uxth	r2, r3
 80033de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	029b      	lsls	r3, r3, #10
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	4313      	orrs	r3, r2
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	801a      	strh	r2, [r3, #0]
 80033f8:	e026      	b.n	8003448 <PCD_EP_ISR_Handler+0x2da>
 80033fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <PCD_EP_ISR_Handler+0x2aa>
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800340c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003410:	b29a      	uxth	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	801a      	strh	r2, [r3, #0]
 8003416:	e017      	b.n	8003448 <PCD_EP_ISR_Handler+0x2da>
 8003418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <PCD_EP_ISR_Handler+0x2c4>
 800342c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800342e:	3301      	adds	r3, #1
 8003430:	647b      	str	r3, [r7, #68]	@ 0x44
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	b29a      	uxth	r2, r3
 8003438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800343a:	b29b      	uxth	r3, r3
 800343c:	029b      	lsls	r3, r3, #10
 800343e:	b29b      	uxth	r3, r3
 8003440:	4313      	orrs	r3, r2
 8003442:	b29a      	uxth	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003458:	827b      	strh	r3, [r7, #18]
 800345a:	8a7b      	ldrh	r3, [r7, #18]
 800345c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003460:	827b      	strh	r3, [r7, #18]
 8003462:	8a7b      	ldrh	r3, [r7, #18]
 8003464:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003468:	827b      	strh	r3, [r7, #18]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	8a7b      	ldrh	r3, [r7, #18]
 8003470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800347c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003480:	b29b      	uxth	r3, r3
 8003482:	8013      	strh	r3, [r2, #0]
 8003484:	e234      	b.n	80038f0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800349a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f280 80fc 	bge.w	800369c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80034ba:	4013      	ands	r3, r2
 80034bc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80034d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034d6:	b292      	uxth	r2, r2
 80034d8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80034da:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80034f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f2:	7b1b      	ldrb	r3, [r3, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d125      	bne.n	8003544 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003500:	b29b      	uxth	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	3306      	adds	r3, #6
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003520:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003524:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8092 	beq.w	8003652 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003534:	6959      	ldr	r1, [r3, #20]
 8003536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003538:	88da      	ldrh	r2, [r3, #6]
 800353a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800353e:	f004 f9a9 	bl	8007894 <USB_ReadPMA>
 8003542:	e086      	b.n	8003652 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003546:	78db      	ldrb	r3, [r3, #3]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d10a      	bne.n	8003562 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800354c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003550:	461a      	mov	r2, r3
 8003552:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f9d9 	bl	800390c <HAL_PCD_EP_DB_Receive>
 800355a:	4603      	mov	r3, r0
 800355c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003560:	e077      	b.n	8003652 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800357c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	441a      	add	r2, r3
 800358e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003592:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003596:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800359a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800359e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d024      	beq.n	800360a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	3302      	adds	r3, #2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80035ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d02e      	beq.n	8003652 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fa:	6959      	ldr	r1, [r3, #20]
 80035fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fe:	891a      	ldrh	r2, [r3, #8]
 8003600:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003604:	f004 f946 	bl	8007894 <USB_ReadPMA>
 8003608:	e023      	b.n	8003652 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003612:	b29b      	uxth	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	3306      	adds	r3, #6
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003632:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003636:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003644:	6959      	ldr	r1, [r3, #20]
 8003646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003648:	895a      	ldrh	r2, [r3, #10]
 800364a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800364e:	f004 f921 	bl	8007894 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800365a:	441a      	add	r2, r3
 800365c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800365e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003668:	441a      	add	r2, r3
 800366a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800366e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <PCD_EP_ISR_Handler+0x514>
 8003676:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800367a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	429a      	cmp	r2, r3
 8003680:	d206      	bcs.n	8003690 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f008 fc7b 	bl	800bf84 <HAL_PCD_DataOutStageCallback>
 800368e:	e005      	b.n	800369c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003696:	4618      	mov	r0, r3
 8003698:	f002 fbc8 	bl	8005e2c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800369c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80036a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8123 	beq.w	80038f0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80036aa:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	3310      	adds	r3, #16
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80036d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80036ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80036fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fc:	78db      	ldrb	r3, [r3, #3]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	f040 80a2 	bne.w	8003848 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003706:	2200      	movs	r2, #0
 8003708:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800370a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370c:	7b1b      	ldrb	r3, [r3, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8093 	beq.w	800383a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003714:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d046      	beq.n	80037ae <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003722:	785b      	ldrb	r3, [r3, #1]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d126      	bne.n	8003776 <PCD_EP_ISR_Handler+0x608>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003736:	b29b      	uxth	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	4413      	add	r3, r2
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	011a      	lsls	r2, r3, #4
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	4413      	add	r3, r2
 800374a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375a:	b29a      	uxth	r2, r3
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	801a      	strh	r2, [r3, #0]
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800376a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800376e:	b29a      	uxth	r2, r3
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	801a      	strh	r2, [r3, #0]
 8003774:	e061      	b.n	800383a <PCD_EP_ISR_Handler+0x6cc>
 8003776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003778:	785b      	ldrb	r3, [r3, #1]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d15d      	bne.n	800383a <PCD_EP_ISR_Handler+0x6cc>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800378c:	b29b      	uxth	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003792:	4413      	add	r3, r2
 8003794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	011a      	lsls	r2, r3, #4
 800379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379e:	4413      	add	r3, r2
 80037a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a8:	2200      	movs	r2, #0
 80037aa:	801a      	strh	r2, [r3, #0]
 80037ac:	e045      	b.n	800383a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b6:	785b      	ldrb	r3, [r3, #1]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d126      	bne.n	800380a <PCD_EP_ISR_Handler+0x69c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d0:	4413      	add	r3, r2
 80037d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80037d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	011a      	lsls	r2, r3, #4
 80037da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037dc:	4413      	add	r3, r2
 80037de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003802:	b29a      	uxth	r2, r3
 8003804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003806:	801a      	strh	r2, [r3, #0]
 8003808:	e017      	b.n	800383a <PCD_EP_ISR_Handler+0x6cc>
 800380a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d113      	bne.n	800383a <PCD_EP_ISR_Handler+0x6cc>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800381a:	b29b      	uxth	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003820:	4413      	add	r3, r2
 8003822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	011a      	lsls	r2, r3, #4
 800382a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800382c:	4413      	add	r3, r2
 800382e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003832:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003836:	2200      	movs	r2, #0
 8003838:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800383a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	4619      	mov	r1, r3
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f008 fbba 	bl	800bfba <HAL_PCD_DataInStageCallback>
 8003846:	e053      	b.n	80038f0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003848:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800384c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d146      	bne.n	80038e2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800385c:	b29b      	uxth	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	3302      	adds	r3, #2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800387c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003882:	699a      	ldr	r2, [r3, #24]
 8003884:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003888:	429a      	cmp	r2, r3
 800388a:	d907      	bls.n	800389c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800388c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003894:	1ad2      	subs	r2, r2, r3
 8003896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003898:	619a      	str	r2, [r3, #24]
 800389a:	e002      	b.n	80038a2 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800389c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389e:	2200      	movs	r2, #0
 80038a0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80038a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	4619      	mov	r1, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f008 fb82 	bl	800bfba <HAL_PCD_DataInStageCallback>
 80038b6:	e01b      	b.n	80038f0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80038b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80038c0:	441a      	add	r2, r3
 80038c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80038c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c8:	69da      	ldr	r2, [r3, #28]
 80038ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80038ce:	441a      	add	r2, r3
 80038d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038da:	4618      	mov	r0, r3
 80038dc:	f002 faa6 	bl	8005e2c <USB_EPStartXfer>
 80038e0:	e006      	b.n	80038f0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80038e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80038e6:	461a      	mov	r2, r3
 80038e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f91b 	bl	8003b26 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	b21b      	sxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f6ff ac3b 	blt.w	8003178 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3758      	adds	r7, #88	@ 0x58
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d07e      	beq.n	8003a22 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800392c:	b29b      	uxth	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	3302      	adds	r3, #2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800394c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	8b7b      	ldrh	r3, [r7, #26]
 8003954:	429a      	cmp	r2, r3
 8003956:	d306      	bcc.n	8003966 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	699a      	ldr	r2, [r3, #24]
 800395c:	8b7b      	ldrh	r3, [r7, #26]
 800395e:	1ad2      	subs	r2, r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	619a      	str	r2, [r3, #24]
 8003964:	e002      	b.n	800396c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d123      	bne.n	80039bc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	b29b      	uxth	r3, r3
 8003986:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800398a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800398e:	833b      	strh	r3, [r7, #24]
 8003990:	8b3b      	ldrh	r3, [r7, #24]
 8003992:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003996:	833b      	strh	r3, [r7, #24]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	8b3b      	ldrh	r3, [r7, #24]
 80039a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01f      	beq.n	8003a06 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e0:	82fb      	strh	r3, [r7, #22]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	441a      	add	r2, r3
 80039f0:	8afb      	ldrh	r3, [r7, #22]
 80039f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a06:	8b7b      	ldrh	r3, [r7, #26]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8087 	beq.w	8003b1c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6959      	ldr	r1, [r3, #20]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	891a      	ldrh	r2, [r3, #8]
 8003a1a:	8b7b      	ldrh	r3, [r7, #26]
 8003a1c:	f003 ff3a 	bl	8007894 <USB_ReadPMA>
 8003a20:	e07c      	b.n	8003b1c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	3306      	adds	r3, #6
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	699a      	ldr	r2, [r3, #24]
 8003a50:	8b7b      	ldrh	r3, [r7, #26]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d306      	bcc.n	8003a64 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	8b7b      	ldrh	r3, [r7, #26]
 8003a5c:	1ad2      	subs	r2, r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	619a      	str	r2, [r3, #24]
 8003a62:	e002      	b.n	8003a6a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2200      	movs	r2, #0
 8003a68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d123      	bne.n	8003aba <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a8c:	83fb      	strh	r3, [r7, #30]
 8003a8e:	8bfb      	ldrh	r3, [r7, #30]
 8003a90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a94:	83fb      	strh	r3, [r7, #30]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	441a      	add	r2, r3
 8003aa4:	8bfb      	ldrh	r3, [r7, #30]
 8003aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d11f      	bne.n	8003b04 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ade:	83bb      	strh	r3, [r7, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	441a      	add	r2, r3
 8003aee:	8bbb      	ldrh	r3, [r7, #28]
 8003af0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003af4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003af8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003afc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b04:	8b7b      	ldrh	r3, [r7, #26]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6959      	ldr	r1, [r3, #20]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	895a      	ldrh	r2, [r3, #10]
 8003b16:	8b7b      	ldrh	r3, [r7, #26]
 8003b18:	f003 febc 	bl	8007894 <USB_ReadPMA>
    }
  }

  return count;
 8003b1c:	8b7b      	ldrh	r3, [r7, #26]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b0a4      	sub	sp, #144	@ 0x90
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	4613      	mov	r3, r2
 8003b32:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 81dd 	beq.w	8003efa <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	3302      	adds	r3, #2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b68:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d907      	bls.n	8003b88 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b80:	1ad2      	subs	r2, r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	619a      	str	r2, [r3, #24]
 8003b86:	e002      	b.n	8003b8e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 80b9 	bne.w	8003d0a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d126      	bne.n	8003bee <HAL_PCD_EP_DB_Transmit+0xc8>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb4:	4413      	add	r3, r2
 8003bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	011a      	lsls	r2, r3, #4
 8003bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd6:	801a      	strh	r2, [r3, #0]
 8003bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bea:	801a      	strh	r2, [r3, #0]
 8003bec:	e01a      	b.n	8003c24 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	785b      	ldrb	r3, [r3, #1]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d116      	bne.n	8003c24 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0a:	4413      	add	r3, r2
 8003c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	011a      	lsls	r2, r3, #4
 8003c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c16:	4413      	add	r3, r2
 8003c18:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c20:	2200      	movs	r2, #0
 8003c22:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	785b      	ldrb	r3, [r3, #1]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d126      	bne.n	8003c80 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	011a      	lsls	r2, r3, #4
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	801a      	strh	r2, [r3, #0]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	e017      	b.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	785b      	ldrb	r3, [r3, #1]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d113      	bne.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	4413      	add	r3, r2
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	011a      	lsls	r2, r3, #4
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	2200      	movs	r2, #0
 8003cae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f008 f97f 	bl	800bfba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 82fc 	beq.w	80042c0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce2:	82fb      	strh	r3, [r7, #22]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	441a      	add	r2, r3
 8003cf2:	8afb      	ldrh	r3, [r7, #22]
 8003cf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	8013      	strh	r3, [r2, #0]
 8003d08:	e2da      	b.n	80042c0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d021      	beq.n	8003d58 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	441a      	add	r2, r3
 8003d40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	f040 82ae 	bne.w	80042c0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d6c:	441a      	add	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d7a:	441a      	add	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d30b      	bcc.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	6a1a      	ldr	r2, [r3, #32]
 8003d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d9c:	1ad2      	subs	r2, r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	621a      	str	r2, [r3, #32]
 8003da2:	e017      	b.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d108      	bne.n	8003dbe <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003dac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003db0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003dbc:	e00a      	b.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d165      	bne.n	8003ea8 <HAL_PCD_EP_DB_Transmit+0x382>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df0:	4413      	add	r3, r2
 8003df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	011a      	lsls	r2, r3, #4
 8003dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e12:	801a      	strh	r2, [r3, #0]
 8003e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e18:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e1a:	d91d      	bls.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x332>
 8003e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <HAL_PCD_EP_DB_Transmit+0x310>
 8003e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e32:	3b01      	subs	r3, #1
 8003e34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	029b      	lsls	r3, r3, #10
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e54:	801a      	strh	r2, [r3, #0]
 8003e56:	e044      	b.n	8003ee2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <HAL_PCD_EP_DB_Transmit+0x350>
 8003e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	e035      	b.n	8003ee2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	029b      	lsls	r3, r3, #10
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea4:	801a      	strh	r2, [r3, #0]
 8003ea6:	e01c      	b.n	8003ee2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	785b      	ldrb	r3, [r3, #1]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d118      	bne.n	8003ee2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ec4:	4413      	add	r3, r2
 8003ec6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	011a      	lsls	r2, r3, #4
 8003ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6959      	ldr	r1, [r3, #20]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	891a      	ldrh	r2, [r3, #8]
 8003eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f003 fc89 	bl	800780a <USB_WritePMA>
 8003ef8:	e1e2      	b.n	80042c0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3306      	adds	r3, #6
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f22:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d307      	bcc.n	8003f42 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	619a      	str	r2, [r3, #24]
 8003f40:	e002      	b.n	8003f48 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2200      	movs	r2, #0
 8003f46:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 80c0 	bne.w	80040d2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	785b      	ldrb	r3, [r3, #1]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d126      	bne.n	8003fa8 <HAL_PCD_EP_DB_Transmit+0x482>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f6e:	4413      	add	r3, r2
 8003f70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	011a      	lsls	r2, r3, #4
 8003f78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f90:	801a      	strh	r2, [r3, #0]
 8003f92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fa4:	801a      	strh	r2, [r3, #0]
 8003fa6:	e01a      	b.n	8003fde <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d116      	bne.n	8003fde <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fc4:	4413      	add	r3, r2
 8003fc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	011a      	lsls	r2, r3, #4
 8003fce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fda:	2200      	movs	r2, #0
 8003fdc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	785b      	ldrb	r3, [r3, #1]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d12b      	bne.n	8004044 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004000:	4413      	add	r3, r2
 8004002:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	011a      	lsls	r2, r3, #4
 800400a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800400c:	4413      	add	r3, r2
 800400e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004012:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004016:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004022:	b29a      	uxth	r2, r3
 8004024:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800403a:	b29a      	uxth	r2, r3
 800403c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	e017      	b.n	8004074 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	785b      	ldrb	r3, [r3, #1]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d113      	bne.n	8004074 <HAL_PCD_EP_DB_Transmit+0x54e>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004054:	b29b      	uxth	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800405a:	4413      	add	r3, r2
 800405c:	677b      	str	r3, [r7, #116]	@ 0x74
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	011a      	lsls	r2, r3, #4
 8004064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004066:	4413      	add	r3, r2
 8004068:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800406c:	673b      	str	r3, [r7, #112]	@ 0x70
 800406e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004070:	2200      	movs	r2, #0
 8004072:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	4619      	mov	r1, r3
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f007 ff9d 	bl	800bfba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004080:	88fb      	ldrh	r3, [r7, #6]
 8004082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004086:	2b00      	cmp	r3, #0
 8004088:	f040 811a 	bne.w	80042c0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	441a      	add	r2, r3
 80040b8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80040bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	8013      	strh	r3, [r2, #0]
 80040d0:	e0f6      	b.n	80042c0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d121      	bne.n	8004120 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	441a      	add	r2, r3
 8004108:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800410c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004110:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004114:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800411c:	b29b      	uxth	r3, r3
 800411e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004126:	2b01      	cmp	r3, #1
 8004128:	f040 80ca 	bne.w	80042c0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004134:	441a      	add	r2, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	69da      	ldr	r2, [r3, #28]
 800413e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004142:	441a      	add	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6a1a      	ldr	r2, [r3, #32]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	429a      	cmp	r2, r3
 8004152:	d30b      	bcc.n	800416c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	6a1a      	ldr	r2, [r3, #32]
 8004160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004164:	1ad2      	subs	r2, r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	621a      	str	r2, [r3, #32]
 800416a:	e017      	b.n	800419c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d108      	bne.n	8004186 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004174:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004178:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004184:	e00a      	b.n	800419c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2200      	movs	r2, #0
 8004192:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d165      	bne.n	8004276 <HAL_PCD_EP_DB_Transmit+0x750>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041be:	4413      	add	r3, r2
 80041c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	011a      	lsls	r2, r3, #4
 80041c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041ca:	4413      	add	r3, r2
 80041cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041dc:	b29a      	uxth	r2, r3
 80041de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80041e8:	d91d      	bls.n	8004226 <HAL_PCD_EP_DB_Transmit+0x700>
 80041ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <HAL_PCD_EP_DB_Transmit+0x6de>
 80041fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004200:	3b01      	subs	r3, #1
 8004202:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004204:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29a      	uxth	r2, r3
 800420a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800420c:	b29b      	uxth	r3, r3
 800420e:	029b      	lsls	r3, r3, #10
 8004210:	b29b      	uxth	r3, r3
 8004212:	4313      	orrs	r3, r2
 8004214:	b29b      	uxth	r3, r3
 8004216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800421a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800421e:	b29a      	uxth	r2, r3
 8004220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004222:	801a      	strh	r2, [r3, #0]
 8004224:	e041      	b.n	80042aa <HAL_PCD_EP_DB_Transmit+0x784>
 8004226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <HAL_PCD_EP_DB_Transmit+0x71e>
 800422e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800423c:	b29a      	uxth	r2, r3
 800423e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004240:	801a      	strh	r2, [r3, #0]
 8004242:	e032      	b.n	80042aa <HAL_PCD_EP_DB_Transmit+0x784>
 8004244:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004248:	085b      	lsrs	r3, r3, #1
 800424a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800424c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_PCD_EP_DB_Transmit+0x738>
 8004258:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800425a:	3301      	adds	r3, #1
 800425c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800425e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29a      	uxth	r2, r3
 8004264:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004266:	b29b      	uxth	r3, r3
 8004268:	029b      	lsls	r3, r3, #10
 800426a:	b29b      	uxth	r3, r3
 800426c:	4313      	orrs	r3, r2
 800426e:	b29a      	uxth	r2, r3
 8004270:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004272:	801a      	strh	r2, [r3, #0]
 8004274:	e019      	b.n	80042aa <HAL_PCD_EP_DB_Transmit+0x784>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	785b      	ldrb	r3, [r3, #1]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d115      	bne.n	80042aa <HAL_PCD_EP_DB_Transmit+0x784>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004286:	b29b      	uxth	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428c:	4413      	add	r3, r2
 800428e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	011a      	lsls	r2, r3, #4
 8004296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004298:	4413      	add	r3, r2
 800429a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800429e:	653b      	str	r3, [r7, #80]	@ 0x50
 80042a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042a8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6959      	ldr	r1, [r3, #20]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	895a      	ldrh	r2, [r3, #10]
 80042b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f003 faa5 	bl	800780a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042da:	82bb      	strh	r3, [r7, #20]
 80042dc:	8abb      	ldrh	r3, [r7, #20]
 80042de:	f083 0310 	eor.w	r3, r3, #16
 80042e2:	82bb      	strh	r3, [r7, #20]
 80042e4:	8abb      	ldrh	r3, [r7, #20]
 80042e6:	f083 0320 	eor.w	r3, r3, #32
 80042ea:	82bb      	strh	r3, [r7, #20]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	441a      	add	r2, r3
 80042fa:	8abb      	ldrh	r3, [r7, #20]
 80042fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800430c:	b29b      	uxth	r3, r3
 800430e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3790      	adds	r7, #144	@ 0x90
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800431a:	b480      	push	{r7}
 800431c:	b087      	sub	sp, #28
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	607b      	str	r3, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	817b      	strh	r3, [r7, #10]
 8004328:	4613      	mov	r3, r2
 800432a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800432c:	897b      	ldrh	r3, [r7, #10]
 800432e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004338:	897b      	ldrh	r3, [r7, #10]
 800433a:	f003 0207 	and.w	r2, r3, #7
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	3310      	adds	r3, #16
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	e009      	b.n	8004364 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004350:	897a      	ldrh	r2, [r7, #10]
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004364:	893b      	ldrh	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d107      	bne.n	800437a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2200      	movs	r2, #0
 800436e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	b29a      	uxth	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	80da      	strh	r2, [r3, #6]
 8004378:	e00b      	b.n	8004392 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2201      	movs	r2, #1
 800437e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	b29a      	uxth	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	0c1b      	lsrs	r3, r3, #16
 800438c:	b29a      	uxth	r2, r3
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr
	...

080043a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e272      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8087 	beq.w	80044ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043c0:	4b92      	ldr	r3, [pc, #584]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d00c      	beq.n	80043e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043cc:	4b8f      	ldr	r3, [pc, #572]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 030c 	and.w	r3, r3, #12
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d112      	bne.n	80043fe <HAL_RCC_OscConfig+0x5e>
 80043d8:	4b8c      	ldr	r3, [pc, #560]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e4:	d10b      	bne.n	80043fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e6:	4b89      	ldr	r3, [pc, #548]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d06c      	beq.n	80044cc <HAL_RCC_OscConfig+0x12c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d168      	bne.n	80044cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e24c      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004406:	d106      	bne.n	8004416 <HAL_RCC_OscConfig+0x76>
 8004408:	4b80      	ldr	r3, [pc, #512]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a7f      	ldr	r2, [pc, #508]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	e02e      	b.n	8004474 <HAL_RCC_OscConfig+0xd4>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0x98>
 800441e:	4b7b      	ldr	r3, [pc, #492]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a7a      	ldr	r2, [pc, #488]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b78      	ldr	r3, [pc, #480]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a77      	ldr	r2, [pc, #476]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004430:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e01d      	b.n	8004474 <HAL_RCC_OscConfig+0xd4>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004440:	d10c      	bne.n	800445c <HAL_RCC_OscConfig+0xbc>
 8004442:	4b72      	ldr	r3, [pc, #456]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a71      	ldr	r2, [pc, #452]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	4b6f      	ldr	r3, [pc, #444]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a6e      	ldr	r2, [pc, #440]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e00b      	b.n	8004474 <HAL_RCC_OscConfig+0xd4>
 800445c:	4b6b      	ldr	r3, [pc, #428]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a6a      	ldr	r2, [pc, #424]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b68      	ldr	r3, [pc, #416]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a67      	ldr	r2, [pc, #412]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 800446e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004472:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fc fe4c 	bl	8001118 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004484:	f7fc fe48 	bl	8001118 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	@ 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e200      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004496:	4b5d      	ldr	r3, [pc, #372]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0xe4>
 80044a2:	e014      	b.n	80044ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fc fe38 	bl	8001118 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fc fe34 	bl	8001118 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	@ 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e1ec      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044be:	4b53      	ldr	r3, [pc, #332]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x10c>
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d063      	beq.n	80045a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044da:	4b4c      	ldr	r3, [pc, #304]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044e6:	4b49      	ldr	r3, [pc, #292]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d11c      	bne.n	800452c <HAL_RCC_OscConfig+0x18c>
 80044f2:	4b46      	ldr	r3, [pc, #280]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d116      	bne.n	800452c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fe:	4b43      	ldr	r3, [pc, #268]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_RCC_OscConfig+0x176>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d001      	beq.n	8004516 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e1c0      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004516:	4b3d      	ldr	r3, [pc, #244]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4939      	ldr	r1, [pc, #228]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452a:	e03a      	b.n	80045a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d020      	beq.n	8004576 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004534:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <HAL_RCC_OscConfig+0x270>)
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453a:	f7fc fded 	bl	8001118 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004542:	f7fc fde9 	bl	8001118 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e1a1      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004554:	4b2d      	ldr	r3, [pc, #180]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004560:	4b2a      	ldr	r3, [pc, #168]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4927      	ldr	r1, [pc, #156]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	600b      	str	r3, [r1, #0]
 8004574:	e015      	b.n	80045a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004576:	4b26      	ldr	r3, [pc, #152]	@ (8004610 <HAL_RCC_OscConfig+0x270>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fc fdcc 	bl	8001118 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004584:	f7fc fdc8 	bl	8001118 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e180      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004596:	4b1d      	ldr	r3, [pc, #116]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d03a      	beq.n	8004624 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d019      	beq.n	80045ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b6:	4b17      	ldr	r3, [pc, #92]	@ (8004614 <HAL_RCC_OscConfig+0x274>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045bc:	f7fc fdac 	bl	8001118 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045c4:	f7fc fda8 	bl	8001118 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e160      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d6:	4b0d      	ldr	r3, [pc, #52]	@ (800460c <HAL_RCC_OscConfig+0x26c>)
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045e2:	2001      	movs	r0, #1
 80045e4:	f000 fafe 	bl	8004be4 <RCC_Delay>
 80045e8:	e01c      	b.n	8004624 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <HAL_RCC_OscConfig+0x274>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f0:	f7fc fd92 	bl	8001118 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f6:	e00f      	b.n	8004618 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f8:	f7fc fd8e 	bl	8001118 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d908      	bls.n	8004618 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e146      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	42420000 	.word	0x42420000
 8004614:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004618:	4b92      	ldr	r3, [pc, #584]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e9      	bne.n	80045f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80a6 	beq.w	800477e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004636:	4b8b      	ldr	r3, [pc, #556]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10d      	bne.n	800465e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004642:	4b88      	ldr	r3, [pc, #544]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	4a87      	ldr	r2, [pc, #540]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800464c:	61d3      	str	r3, [r2, #28]
 800464e:	4b85      	ldr	r3, [pc, #532]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800465a:	2301      	movs	r3, #1
 800465c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465e:	4b82      	ldr	r3, [pc, #520]	@ (8004868 <HAL_RCC_OscConfig+0x4c8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d118      	bne.n	800469c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800466a:	4b7f      	ldr	r3, [pc, #508]	@ (8004868 <HAL_RCC_OscConfig+0x4c8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a7e      	ldr	r2, [pc, #504]	@ (8004868 <HAL_RCC_OscConfig+0x4c8>)
 8004670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004676:	f7fc fd4f 	bl	8001118 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467e:	f7fc fd4b 	bl	8001118 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b64      	cmp	r3, #100	@ 0x64
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e103      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004690:	4b75      	ldr	r3, [pc, #468]	@ (8004868 <HAL_RCC_OscConfig+0x4c8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d106      	bne.n	80046b2 <HAL_RCC_OscConfig+0x312>
 80046a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	6213      	str	r3, [r2, #32]
 80046b0:	e02d      	b.n	800470e <HAL_RCC_OscConfig+0x36e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCC_OscConfig+0x334>
 80046ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	4a69      	ldr	r2, [pc, #420]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6213      	str	r3, [r2, #32]
 80046c6:	4b67      	ldr	r3, [pc, #412]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	4a66      	ldr	r2, [pc, #408]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	f023 0304 	bic.w	r3, r3, #4
 80046d0:	6213      	str	r3, [r2, #32]
 80046d2:	e01c      	b.n	800470e <HAL_RCC_OscConfig+0x36e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b05      	cmp	r3, #5
 80046da:	d10c      	bne.n	80046f6 <HAL_RCC_OscConfig+0x356>
 80046dc:	4b61      	ldr	r3, [pc, #388]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	4a60      	ldr	r2, [pc, #384]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	f043 0304 	orr.w	r3, r3, #4
 80046e6:	6213      	str	r3, [r2, #32]
 80046e8:	4b5e      	ldr	r3, [pc, #376]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6213      	str	r3, [r2, #32]
 80046f4:	e00b      	b.n	800470e <HAL_RCC_OscConfig+0x36e>
 80046f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	4a5a      	ldr	r2, [pc, #360]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	6213      	str	r3, [r2, #32]
 8004702:	4b58      	ldr	r3, [pc, #352]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	4a57      	ldr	r2, [pc, #348]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 8004708:	f023 0304 	bic.w	r3, r3, #4
 800470c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d015      	beq.n	8004742 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004716:	f7fc fcff 	bl	8001118 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471c:	e00a      	b.n	8004734 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471e:	f7fc fcfb 	bl	8001118 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800472c:	4293      	cmp	r3, r2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e0b1      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004734:	4b4b      	ldr	r3, [pc, #300]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0ee      	beq.n	800471e <HAL_RCC_OscConfig+0x37e>
 8004740:	e014      	b.n	800476c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004742:	f7fc fce9 	bl	8001118 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004748:	e00a      	b.n	8004760 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474a:	f7fc fce5 	bl	8001118 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e09b      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004760:	4b40      	ldr	r3, [pc, #256]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1ee      	bne.n	800474a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d105      	bne.n	800477e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004772:	4b3c      	ldr	r3, [pc, #240]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	4a3b      	ldr	r2, [pc, #236]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 8004778:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800477c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8087 	beq.w	8004896 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004788:	4b36      	ldr	r3, [pc, #216]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 030c 	and.w	r3, r3, #12
 8004790:	2b08      	cmp	r3, #8
 8004792:	d061      	beq.n	8004858 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d146      	bne.n	800482a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479c:	4b33      	ldr	r3, [pc, #204]	@ (800486c <HAL_RCC_OscConfig+0x4cc>)
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a2:	f7fc fcb9 	bl	8001118 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047aa:	f7fc fcb5 	bl	8001118 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e06d      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047bc:	4b29      	ldr	r3, [pc, #164]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f0      	bne.n	80047aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d0:	d108      	bne.n	80047e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047d2:	4b24      	ldr	r3, [pc, #144]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	4921      	ldr	r1, [pc, #132]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a19      	ldr	r1, [r3, #32]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	430b      	orrs	r3, r1
 80047f6:	491b      	ldr	r1, [pc, #108]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047fc:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <HAL_RCC_OscConfig+0x4cc>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fc fc89 	bl	8001118 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480a:	f7fc fc85 	bl	8001118 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e03d      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800481c:	4b11      	ldr	r3, [pc, #68]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x46a>
 8004828:	e035      	b.n	8004896 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482a:	4b10      	ldr	r3, [pc, #64]	@ (800486c <HAL_RCC_OscConfig+0x4cc>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fc fc72 	bl	8001118 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004838:	f7fc fc6e 	bl	8001118 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e026      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800484a:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <HAL_RCC_OscConfig+0x4c4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x498>
 8004856:	e01e      	b.n	8004896 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d107      	bne.n	8004870 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e019      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
 8004864:	40021000 	.word	0x40021000
 8004868:	40007000 	.word	0x40007000
 800486c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004870:	4b0b      	ldr	r3, [pc, #44]	@ (80048a0 <HAL_RCC_OscConfig+0x500>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	429a      	cmp	r2, r3
 8004882:	d106      	bne.n	8004892 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d001      	beq.n	8004896 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000

080048a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0d0      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d910      	bls.n	80048e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b67      	ldr	r3, [pc, #412]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 0207 	bic.w	r2, r3, #7
 80048ce:	4965      	ldr	r1, [pc, #404]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c0>)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b63      	ldr	r3, [pc, #396]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0b8      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d020      	beq.n	8004936 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004900:	4b59      	ldr	r3, [pc, #356]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4a58      	ldr	r2, [pc, #352]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004906:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800490a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004918:	4b53      	ldr	r3, [pc, #332]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	4a52      	ldr	r2, [pc, #328]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004922:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004924:	4b50      	ldr	r3, [pc, #320]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	494d      	ldr	r1, [pc, #308]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004932:	4313      	orrs	r3, r2
 8004934:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d040      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d107      	bne.n	800495a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494a:	4b47      	ldr	r3, [pc, #284]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d115      	bne.n	8004982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e07f      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d107      	bne.n	8004972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004962:	4b41      	ldr	r3, [pc, #260]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d109      	bne.n	8004982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e073      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004972:	4b3d      	ldr	r3, [pc, #244]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e06b      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004982:	4b39      	ldr	r3, [pc, #228]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f023 0203 	bic.w	r2, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4936      	ldr	r1, [pc, #216]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	4313      	orrs	r3, r2
 8004992:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004994:	f7fc fbc0 	bl	8001118 <HAL_GetTick>
 8004998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499a:	e00a      	b.n	80049b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800499c:	f7fc fbbc 	bl	8001118 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e053      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 020c 	and.w	r2, r3, #12
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d1eb      	bne.n	800499c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049c4:	4b27      	ldr	r3, [pc, #156]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d210      	bcs.n	80049f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	4b24      	ldr	r3, [pc, #144]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 0207 	bic.w	r2, r3, #7
 80049da:	4922      	ldr	r1, [pc, #136]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c0>)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e2:	4b20      	ldr	r3, [pc, #128]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e032      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a00:	4b19      	ldr	r3, [pc, #100]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4916      	ldr	r1, [pc, #88]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d009      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a1e:	4b12      	ldr	r3, [pc, #72]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	490e      	ldr	r1, [pc, #56]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a32:	f000 f821 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8004a36:	4602      	mov	r2, r0
 8004a38:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	490a      	ldr	r1, [pc, #40]	@ (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004a44:	5ccb      	ldrb	r3, [r1, r3]
 8004a46:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4a:	4a09      	ldr	r2, [pc, #36]	@ (8004a70 <HAL_RCC_ClockConfig+0x1cc>)
 8004a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a4e:	4b09      	ldr	r3, [pc, #36]	@ (8004a74 <HAL_RCC_ClockConfig+0x1d0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fc f9cc 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40022000 	.word	0x40022000
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	0800d578 	.word	0x0800d578
 8004a70:	20000004 	.word	0x20000004
 8004a74:	20000008 	.word	0x20000008

08004a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	2300      	movs	r3, #0
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a92:	4b1e      	ldr	r3, [pc, #120]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d002      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x30>
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d003      	beq.n	8004aae <HAL_RCC_GetSysClockFreq+0x36>
 8004aa6:	e027      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004aa8:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8004aaa:	613b      	str	r3, [r7, #16]
      break;
 8004aac:	e027      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	0c9b      	lsrs	r3, r3, #18
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	4a17      	ldr	r2, [pc, #92]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ab8:	5cd3      	ldrb	r3, [r2, r3]
 8004aba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d010      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ac6:	4b11      	ldr	r3, [pc, #68]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	0c5b      	lsrs	r3, r3, #17
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	4a11      	ldr	r2, [pc, #68]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ad2:	5cd3      	ldrb	r3, [r2, r3]
 8004ad4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ada:	fb03 f202 	mul.w	r2, r3, r2
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e004      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a0c      	ldr	r2, [pc, #48]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004aec:	fb02 f303 	mul.w	r3, r2, r3
 8004af0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	613b      	str	r3, [r7, #16]
      break;
 8004af6:	e002      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004af8:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8004afa:	613b      	str	r3, [r7, #16]
      break;
 8004afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004afe:	693b      	ldr	r3, [r7, #16]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	007a1200 	.word	0x007a1200
 8004b14:	0800d590 	.word	0x0800d590
 8004b18:	0800d5a0 	.word	0x0800d5a0
 8004b1c:	003d0900 	.word	0x003d0900

08004b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b24:	4b02      	ldr	r3, [pc, #8]	@ (8004b30 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr
 8004b30:	20000004 	.word	0x20000004

08004b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b38:	f7ff fff2 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	4903      	ldr	r1, [pc, #12]	@ (8004b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000
 8004b58:	0800d588 	.word	0x0800d588

08004b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b60:	f7ff ffde 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	0adb      	lsrs	r3, r3, #11
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4903      	ldr	r1, [pc, #12]	@ (8004b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	0800d588 	.word	0x0800d588

08004b84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	220f      	movs	r2, #15
 8004b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b94:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <HAL_RCC_GetClockConfig+0x58>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 0203 	and.w	r2, r3, #3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8004bdc <HAL_RCC_GetClockConfig+0x58>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bac:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <HAL_RCC_GetClockConfig+0x58>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004bb8:	4b08      	ldr	r3, [pc, #32]	@ (8004bdc <HAL_RCC_GetClockConfig+0x58>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	08db      	lsrs	r3, r3, #3
 8004bbe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bc6:	4b06      	ldr	r3, [pc, #24]	@ (8004be0 <HAL_RCC_GetClockConfig+0x5c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0207 	and.w	r2, r3, #7
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	40022000 	.word	0x40022000

08004be4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bec:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <RCC_Delay+0x34>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8004c1c <RCC_Delay+0x38>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	0a5b      	lsrs	r3, r3, #9
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c00:	bf00      	nop
  }
  while (Delay --);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1e5a      	subs	r2, r3, #1
 8004c06:	60fa      	str	r2, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f9      	bne.n	8004c00 <RCC_Delay+0x1c>
}
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
 8004c18:	20000004 	.word	0x20000004
 8004c1c:	10624dd3 	.word	0x10624dd3

08004c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d07d      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c40:	4b4f      	ldr	r3, [pc, #316]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10d      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	4a4b      	ldr	r2, [pc, #300]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c56:	61d3      	str	r3, [r2, #28]
 8004c58:	4b49      	ldr	r3, [pc, #292]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c64:	2301      	movs	r3, #1
 8004c66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c68:	4b46      	ldr	r3, [pc, #280]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d118      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c74:	4b43      	ldr	r3, [pc, #268]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a42      	ldr	r2, [pc, #264]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c80:	f7fc fa4a 	bl	8001118 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c86:	e008      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c88:	f7fc fa46 	bl	8001118 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	@ 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e06d      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ca6:	4b36      	ldr	r3, [pc, #216]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d02e      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d027      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ccc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cce:	4b2e      	ldr	r3, [pc, #184]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cda:	4a29      	ldr	r2, [pc, #164]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d014      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cea:	f7fc fa15 	bl	8001118 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf0:	e00a      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf2:	f7fc fa11 	bl	8001118 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e036      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d08:	4b1d      	ldr	r3, [pc, #116]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ee      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d14:	4b1a      	ldr	r3, [pc, #104]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4917      	ldr	r1, [pc, #92]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d105      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2c:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	4a13      	ldr	r2, [pc, #76]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d44:	4b0e      	ldr	r3, [pc, #56]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	490b      	ldr	r1, [pc, #44]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d62:	4b07      	ldr	r3, [pc, #28]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	4904      	ldr	r1, [pc, #16]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40021000 	.word	0x40021000
 8004d84:	40007000 	.word	0x40007000
 8004d88:	42420440 	.word	0x42420440

08004d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e041      	b.n	8004e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f839 	bl	8004e2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	f000 f99c 	bl	8005108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d001      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e03a      	b.n	8004eca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a18      	ldr	r2, [pc, #96]	@ (8004ed4 <HAL_TIM_Base_Start_IT+0x98>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x58>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7e:	d009      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x58>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a14      	ldr	r2, [pc, #80]	@ (8004ed8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x58>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	@ (8004edc <HAL_TIM_Base_Start_IT+0xa0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d111      	bne.n	8004eb8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d010      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	e007      	b.n	8004ec8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800

08004ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d020      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01b      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0202 	mvn.w	r2, #2
 8004f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f8d1 	bl	80050d2 <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f8c4 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f8d3 	bl	80050e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d020      	beq.n	8004f90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01b      	beq.n	8004f90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0204 	mvn.w	r2, #4
 8004f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f8ab 	bl	80050d2 <HAL_TIM_IC_CaptureCallback>
 8004f7c:	e005      	b.n	8004f8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f89e 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f8ad 	bl	80050e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d020      	beq.n	8004fdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01b      	beq.n	8004fdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0208 	mvn.w	r2, #8
 8004fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f885 	bl	80050d2 <HAL_TIM_IC_CaptureCallback>
 8004fc8:	e005      	b.n	8004fd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f878 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f887 	bl	80050e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d020      	beq.n	8005028 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0310 	and.w	r3, r3, #16
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01b      	beq.n	8005028 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0210 	mvn.w	r2, #16
 8004ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f85f 	bl	80050d2 <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f852 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f861 	bl	80050e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0201 	mvn.w	r2, #1
 8005044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fb fe44 	bl	8000cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00c      	beq.n	8005070 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f8c3 	bl	80051f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00c      	beq.n	8005094 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d007      	beq.n	8005094 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f831 	bl	80050f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0220 	mvn.w	r2, #32
 80050b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f896 	bl	80051e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr

080050d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr

080050e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr

080050f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr

08005108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a2f      	ldr	r2, [pc, #188]	@ (80051d8 <TIM_Base_SetConfig+0xd0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00b      	beq.n	8005138 <TIM_Base_SetConfig+0x30>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005126:	d007      	beq.n	8005138 <TIM_Base_SetConfig+0x30>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a2c      	ldr	r2, [pc, #176]	@ (80051dc <TIM_Base_SetConfig+0xd4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0x30>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2b      	ldr	r2, [pc, #172]	@ (80051e0 <TIM_Base_SetConfig+0xd8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d108      	bne.n	800514a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800513e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a22      	ldr	r2, [pc, #136]	@ (80051d8 <TIM_Base_SetConfig+0xd0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00b      	beq.n	800516a <TIM_Base_SetConfig+0x62>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005158:	d007      	beq.n	800516a <TIM_Base_SetConfig+0x62>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1f      	ldr	r2, [pc, #124]	@ (80051dc <TIM_Base_SetConfig+0xd4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_Base_SetConfig+0x62>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1e      	ldr	r2, [pc, #120]	@ (80051e0 <TIM_Base_SetConfig+0xd8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d108      	bne.n	800517c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a0d      	ldr	r2, [pc, #52]	@ (80051d8 <TIM_Base_SetConfig+0xd0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d103      	bne.n	80051b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f023 0201 	bic.w	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	611a      	str	r2, [r3, #16]
  }
}
 80051ce:	bf00      	nop
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800

080051e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr

08005208 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	4638      	mov	r0, r7
 8005212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr

08005222 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005232:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005236:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	b29a      	uxth	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005256:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800525a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	b29b      	uxth	r3, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	b29b      	uxth	r3, r3
 800526c:	4013      	ands	r3, r2
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr

08005282 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	460b      	mov	r3, r1
 800528c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr

0800529a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	4638      	mov	r0, r7
 80052a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr

080052d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b09d      	sub	sp, #116	@ 0x74
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80052f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	78db      	ldrb	r3, [r3, #3]
 8005302:	2b03      	cmp	r3, #3
 8005304:	d81f      	bhi.n	8005346 <USB_ActivateEndpoint+0x72>
 8005306:	a201      	add	r2, pc, #4	@ (adr r2, 800530c <USB_ActivateEndpoint+0x38>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	0800531d 	.word	0x0800531d
 8005310:	08005339 	.word	0x08005339
 8005314:	0800534f 	.word	0x0800534f
 8005318:	0800532b 	.word	0x0800532b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800531c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005320:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005324:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005328:	e012      	b.n	8005350 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800532a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800532e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005332:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005336:	e00b      	b.n	8005350 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005338:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800533c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005340:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005344:	e004      	b.n	8005350 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800534c:	e000      	b.n	8005350 <USB_ActivateEndpoint+0x7c>
      break;
 800534e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800535e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800536a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800536e:	b29b      	uxth	r3, r3
 8005370:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005388:	b29b      	uxth	r3, r3
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	7812      	ldrb	r2, [r2, #0]
 800538e:	4313      	orrs	r3, r2
 8005390:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80053a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	7b1b      	ldrb	r3, [r3, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f040 8178 	bne.w	80056b0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8084 	beq.w	80054d2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	461a      	mov	r2, r3
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	4413      	add	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	011a      	lsls	r2, r3, #4
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	88db      	ldrh	r3, [r3, #6]
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	827b      	strh	r3, [r7, #18]
 800540c:	8a7b      	ldrh	r3, [r7, #18]
 800540e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01b      	beq.n	800544e <USB_ActivateEndpoint+0x17a>
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800542c:	823b      	strh	r3, [r7, #16]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	441a      	add	r2, r3
 8005438:	8a3b      	ldrh	r3, [r7, #16]
 800543a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800543e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005446:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800544a:	b29b      	uxth	r3, r3
 800544c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	78db      	ldrb	r3, [r3, #3]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d020      	beq.n	8005498 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800546c:	81bb      	strh	r3, [r7, #12]
 800546e:	89bb      	ldrh	r3, [r7, #12]
 8005470:	f083 0320 	eor.w	r3, r3, #32
 8005474:	81bb      	strh	r3, [r7, #12]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	89bb      	ldrh	r3, [r7, #12]
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800548a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800548e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]
 8005496:	e2d5      	b.n	8005a44 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ae:	81fb      	strh	r3, [r7, #14]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	441a      	add	r2, r3
 80054ba:	89fb      	ldrh	r3, [r7, #14]
 80054bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	8013      	strh	r3, [r2, #0]
 80054d0:	e2b8      	b.n	8005a44 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054dc:	b29b      	uxth	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	4413      	add	r3, r2
 80054e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	011a      	lsls	r2, r3, #4
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80054f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	88db      	ldrh	r3, [r3, #6]
 80054fa:	085b      	lsrs	r3, r3, #1
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005504:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005510:	b29b      	uxth	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005516:	4413      	add	r3, r2
 8005518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	011a      	lsls	r2, r3, #4
 8005520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005522:	4413      	add	r3, r2
 8005524:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005534:	b29a      	uxth	r2, r3
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	801a      	strh	r2, [r3, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005540:	d91d      	bls.n	800557e <USB_ActivateEndpoint+0x2aa>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	66bb      	str	r3, [r7, #104]	@ 0x68
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 031f 	and.w	r3, r3, #31
 8005552:	2b00      	cmp	r3, #0
 8005554:	d102      	bne.n	800555c <USB_ActivateEndpoint+0x288>
 8005556:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005558:	3b01      	subs	r3, #1
 800555a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29a      	uxth	r2, r3
 8005562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005564:	b29b      	uxth	r3, r3
 8005566:	029b      	lsls	r3, r3, #10
 8005568:	b29b      	uxth	r3, r3
 800556a:	4313      	orrs	r3, r2
 800556c:	b29b      	uxth	r3, r3
 800556e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005576:	b29a      	uxth	r2, r3
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	801a      	strh	r2, [r3, #0]
 800557c:	e026      	b.n	80055cc <USB_ActivateEndpoint+0x2f8>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <USB_ActivateEndpoint+0x2c8>
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005594:	b29a      	uxth	r2, r3
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	e017      	b.n	80055cc <USB_ActivateEndpoint+0x2f8>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	085b      	lsrs	r3, r3, #1
 80055a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <USB_ActivateEndpoint+0x2e2>
 80055b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055b2:	3301      	adds	r3, #1
 80055b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055be:	b29b      	uxth	r3, r3
 80055c0:	029b      	lsls	r3, r3, #10
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	4313      	orrs	r3, r2
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80055da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80055dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01b      	beq.n	800561c <USB_ActivateEndpoint+0x348>
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fa:	843b      	strh	r3, [r7, #32]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	441a      	add	r2, r3
 8005606:	8c3b      	ldrh	r3, [r7, #32]
 8005608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800560c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005610:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005618:	b29b      	uxth	r3, r3
 800561a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d124      	bne.n	800566e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563a:	83bb      	strh	r3, [r7, #28]
 800563c:	8bbb      	ldrh	r3, [r7, #28]
 800563e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005642:	83bb      	strh	r3, [r7, #28]
 8005644:	8bbb      	ldrh	r3, [r7, #28]
 8005646:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800564a:	83bb      	strh	r3, [r7, #28]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	441a      	add	r2, r3
 8005656:	8bbb      	ldrh	r3, [r7, #28]
 8005658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800565c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005668:	b29b      	uxth	r3, r3
 800566a:	8013      	strh	r3, [r2, #0]
 800566c:	e1ea      	b.n	8005a44 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005684:	83fb      	strh	r3, [r7, #30]
 8005686:	8bfb      	ldrh	r3, [r7, #30]
 8005688:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800568c:	83fb      	strh	r3, [r7, #30]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	441a      	add	r2, r3
 8005698:	8bfb      	ldrh	r3, [r7, #30]
 800569a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800569e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	8013      	strh	r3, [r2, #0]
 80056ae:	e1c9      	b.n	8005a44 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	78db      	ldrb	r3, [r3, #3]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d11e      	bne.n	80056f6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ce:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	441a      	add	r2, r3
 80056dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80056e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80056ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8013      	strh	r3, [r2, #0]
 80056f4:	e01d      	b.n	8005732 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	441a      	add	r2, r3
 800571a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800571e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005722:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800572a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800572e:	b29b      	uxth	r3, r3
 8005730:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800573c:	b29b      	uxth	r3, r3
 800573e:	461a      	mov	r2, r3
 8005740:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005742:	4413      	add	r3, r2
 8005744:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	011a      	lsls	r2, r3, #4
 800574c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800574e:	4413      	add	r3, r2
 8005750:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005754:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	891b      	ldrh	r3, [r3, #8]
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	b29b      	uxth	r3, r3
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	657b      	str	r3, [r7, #84]	@ 0x54
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005770:	b29b      	uxth	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005776:	4413      	add	r3, r2
 8005778:	657b      	str	r3, [r7, #84]	@ 0x54
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	011a      	lsls	r2, r3, #4
 8005780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005782:	4413      	add	r3, r2
 8005784:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005788:	653b      	str	r3, [r7, #80]	@ 0x50
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	895b      	ldrh	r3, [r3, #10]
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	b29b      	uxth	r3, r3
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005798:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f040 8093 	bne.w	80058ca <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80057b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80057b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01b      	beq.n	80057f8 <USB_ActivateEndpoint+0x524>
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	441a      	add	r2, r3
 80057e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80057e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005806:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01b      	beq.n	8005848 <USB_ActivateEndpoint+0x574>
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005826:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800583c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005840:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800585a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005860:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005862:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005866:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005868:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800586a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800586e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	441a      	add	r2, r3
 800587a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800587c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800588c:	b29b      	uxth	r3, r3
 800588e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	441a      	add	r2, r3
 80058b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80058b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	8013      	strh	r3, [r2, #0]
 80058c8:	e0bc      	b.n	8005a44 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80058da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80058de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01d      	beq.n	8005922 <USB_ActivateEndpoint+0x64e>
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	441a      	add	r2, r3
 800590a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800590e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005916:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800591a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800591e:	b29b      	uxth	r3, r3
 8005920:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005932:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d01d      	beq.n	800597a <USB_ActivateEndpoint+0x6a6>
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005954:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800596a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800596e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005972:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	78db      	ldrb	r3, [r3, #3]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d024      	beq.n	80059cc <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005998:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800599c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80059a0:	f083 0320 	eor.w	r3, r3, #32
 80059a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	441a      	add	r2, r3
 80059b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80059b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	8013      	strh	r3, [r2, #0]
 80059ca:	e01d      	b.n	8005a08 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	441a      	add	r2, r3
 80059f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80059f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	441a      	add	r2, r3
 8005a2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005a30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005a44:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3774      	adds	r7, #116	@ 0x74
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop

08005a54 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b08d      	sub	sp, #52	@ 0x34
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	7b1b      	ldrb	r3, [r3, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f040 808e 	bne.w	8005b84 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	785b      	ldrb	r3, [r3, #1]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d044      	beq.n	8005afa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	81bb      	strh	r3, [r7, #12]
 8005a7e:	89bb      	ldrh	r3, [r7, #12]
 8005a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01b      	beq.n	8005ac0 <USB_DeactivateEndpoint+0x6c>
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9e:	817b      	strh	r3, [r7, #10]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	441a      	add	r2, r3
 8005aaa:	897b      	ldrh	r3, [r7, #10]
 8005aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ab8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ad6:	813b      	strh	r3, [r7, #8]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	893b      	ldrh	r3, [r7, #8]
 8005ae4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ae8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	8013      	strh	r3, [r2, #0]
 8005af8:	e192      	b.n	8005e20 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	827b      	strh	r3, [r7, #18]
 8005b08:	8a7b      	ldrh	r3, [r7, #18]
 8005b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d01b      	beq.n	8005b4a <USB_DeactivateEndpoint+0xf6>
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b28:	823b      	strh	r3, [r7, #16]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	8a3b      	ldrh	r3, [r7, #16]
 8005b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b60:	81fb      	strh	r3, [r7, #14]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	89fb      	ldrh	r3, [r7, #14]
 8005b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	8013      	strh	r3, [r2, #0]
 8005b82:	e14d      	b.n	8005e20 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f040 80a5 	bne.w	8005cd8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	843b      	strh	r3, [r7, #32]
 8005b9c:	8c3b      	ldrh	r3, [r7, #32]
 8005b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01b      	beq.n	8005bde <USB_DeactivateEndpoint+0x18a>
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bbc:	83fb      	strh	r3, [r7, #30]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	441a      	add	r2, r3
 8005bc8:	8bfb      	ldrh	r3, [r7, #30]
 8005bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	83bb      	strh	r3, [r7, #28]
 8005bec:	8bbb      	ldrh	r3, [r7, #28]
 8005bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01b      	beq.n	8005c2e <USB_DeactivateEndpoint+0x1da>
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0c:	837b      	strh	r3, [r7, #26]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	8b7b      	ldrh	r3, [r7, #26]
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c44:	833b      	strh	r3, [r7, #24]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	441a      	add	r2, r3
 8005c50:	8b3b      	ldrh	r3, [r7, #24]
 8005c52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7c:	82fb      	strh	r3, [r7, #22]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	8afb      	ldrh	r3, [r7, #22]
 8005c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cb4:	82bb      	strh	r3, [r7, #20]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	441a      	add	r2, r3
 8005cc0:	8abb      	ldrh	r3, [r7, #20]
 8005cc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	8013      	strh	r3, [r2, #0]
 8005cd6:	e0a3      	b.n	8005e20 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005ce6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01b      	beq.n	8005d28 <USB_DeactivateEndpoint+0x2d4>
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d06:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	441a      	add	r2, r3
 8005d12:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005d36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01b      	beq.n	8005d78 <USB_DeactivateEndpoint+0x324>
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d56:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	441a      	add	r2, r3
 8005d62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005da4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	441a      	add	r2, r3
 8005dd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005dd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dfe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	441a      	add	r2, r3
 8005e0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3734      	adds	r7, #52	@ 0x34
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr

08005e2c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b0c2      	sub	sp, #264	@ 0x108
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e3a:	6018      	str	r0, [r3, #0]
 8005e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e44:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	f040 86b7 	bne.w	8006bc6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699a      	ldr	r2, [r3, #24]
 8005e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d908      	bls.n	8005e86 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005e84:	e007      	b.n	8005e96 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	7b1b      	ldrb	r3, [r3, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d13a      	bne.n	8005f1c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6959      	ldr	r1, [r3, #20]
 8005eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	88da      	ldrh	r2, [r3, #6]
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ec8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ecc:	6800      	ldr	r0, [r0, #0]
 8005ece:	f001 fc9c 	bl	800780a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	011a      	lsls	r2, r3, #4
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4413      	add	r3, r2
 8005f08:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	f000 be1f 	b.w	8006b5a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	78db      	ldrb	r3, [r3, #3]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	f040 8462 	bne.w	80067f2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	f240 83df 	bls.w	800670a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f72:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	441a      	add	r2, r3
 8005f90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005f94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f9c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb8:	1ad2      	subs	r2, r2, r3
 8005fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 81c7 	beq.w	800637c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d177      	bne.n	80060fa <USB_EPStartXfer+0x2ce>
 800600a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006024:	b29b      	uxth	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602a:	4413      	add	r3, r2
 800602c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800602e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	011a      	lsls	r2, r3, #4
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	4413      	add	r3, r2
 8006040:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006044:	627b      	str	r3, [r7, #36]	@ 0x24
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006050:	b29a      	uxth	r2, r3
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605a:	2b3e      	cmp	r3, #62	@ 0x3e
 800605c:	d921      	bls.n	80060a2 <USB_EPStartXfer+0x276>
 800605e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <USB_EPStartXfer+0x252>
 8006074:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006078:	3b01      	subs	r3, #1
 800607a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29a      	uxth	r2, r3
 8006084:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006088:	b29b      	uxth	r3, r3
 800608a:	029b      	lsls	r3, r3, #10
 800608c:	b29b      	uxth	r3, r3
 800608e:	4313      	orrs	r3, r2
 8006090:	b29b      	uxth	r3, r3
 8006092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609a:	b29a      	uxth	r2, r3
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	801a      	strh	r2, [r3, #0]
 80060a0:	e050      	b.n	8006144 <USB_EPStartXfer+0x318>
 80060a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <USB_EPStartXfer+0x294>
 80060aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	801a      	strh	r2, [r3, #0]
 80060be:	e041      	b.n	8006144 <USB_EPStartXfer+0x318>
 80060c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c4:	085b      	lsrs	r3, r3, #1
 80060c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80060ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d004      	beq.n	80060e0 <USB_EPStartXfer+0x2b4>
 80060d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80060da:	3301      	adds	r3, #1
 80060dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	029b      	lsls	r3, r3, #10
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	4313      	orrs	r3, r2
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	801a      	strh	r2, [r3, #0]
 80060f8:	e024      	b.n	8006144 <USB_EPStartXfer+0x318>
 80060fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d11c      	bne.n	8006144 <USB_EPStartXfer+0x318>
 800610a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006118:	b29b      	uxth	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	4413      	add	r3, r2
 8006120:	633b      	str	r3, [r7, #48]	@ 0x30
 8006122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	011a      	lsls	r2, r3, #4
 8006130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006132:	4413      	add	r3, r2
 8006134:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800613a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613e:	b29a      	uxth	r2, r3
 8006140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006142:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	895b      	ldrh	r3, [r3, #10]
 8006150:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6959      	ldr	r1, [r3, #20]
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006164:	b29b      	uxth	r3, r3
 8006166:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800616a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800616e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006172:	6800      	ldr	r0, [r0, #0]
 8006174:	f001 fb49 	bl	800780a <USB_WritePMA>
            ep->xfer_buff += len;
 8006178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006188:	441a      	add	r2, r3
 800618a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6a1a      	ldr	r2, [r3, #32]
 80061a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d90f      	bls.n	80061d2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80061b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6a1a      	ldr	r2, [r3, #32]
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c2:	1ad2      	subs	r2, r2, r3
 80061c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	621a      	str	r2, [r3, #32]
 80061d0:	e00e      	b.n	80061f0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80061d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80061e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2200      	movs	r2, #0
 80061ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	785b      	ldrb	r3, [r3, #1]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d177      	bne.n	80062f0 <USB_EPStartXfer+0x4c4>
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800621a:	b29b      	uxth	r3, r3
 800621c:	461a      	mov	r2, r3
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	4413      	add	r3, r2
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	011a      	lsls	r2, r3, #4
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	4413      	add	r3, r2
 8006236:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29b      	uxth	r3, r3
 8006242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006246:	b29a      	uxth	r2, r3
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006250:	2b3e      	cmp	r3, #62	@ 0x3e
 8006252:	d921      	bls.n	8006298 <USB_EPStartXfer+0x46c>
 8006254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <USB_EPStartXfer+0x448>
 800626a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800626e:	3b01      	subs	r3, #1
 8006270:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29a      	uxth	r2, r3
 800627a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800627e:	b29b      	uxth	r3, r3
 8006280:	029b      	lsls	r3, r3, #10
 8006282:	b29b      	uxth	r3, r3
 8006284:	4313      	orrs	r3, r2
 8006286:	b29b      	uxth	r3, r3
 8006288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006290:	b29a      	uxth	r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	801a      	strh	r2, [r3, #0]
 8006296:	e056      	b.n	8006346 <USB_EPStartXfer+0x51a>
 8006298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <USB_EPStartXfer+0x48a>
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	801a      	strh	r2, [r3, #0]
 80062b4:	e047      	b.n	8006346 <USB_EPStartXfer+0x51a>
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ba:	085b      	lsrs	r3, r3, #1
 80062bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80062c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d004      	beq.n	80062d6 <USB_EPStartXfer+0x4aa>
 80062cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062d0:	3301      	adds	r3, #1
 80062d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	029b      	lsls	r3, r3, #10
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	4313      	orrs	r3, r2
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	e02a      	b.n	8006346 <USB_EPStartXfer+0x51a>
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d122      	bne.n	8006346 <USB_EPStartXfer+0x51a>
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	623b      	str	r3, [r7, #32]
 800630c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006310:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800631a:	b29b      	uxth	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	4413      	add	r3, r2
 8006322:	623b      	str	r3, [r7, #32]
 8006324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	011a      	lsls	r2, r3, #4
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	4413      	add	r3, r2
 8006336:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006340:	b29a      	uxth	r2, r3
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	891b      	ldrh	r3, [r3, #8]
 8006352:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6959      	ldr	r1, [r3, #20]
 8006362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006366:	b29b      	uxth	r3, r3
 8006368:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800636c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006370:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006374:	6800      	ldr	r0, [r0, #0]
 8006376:	f001 fa48 	bl	800780a <USB_WritePMA>
 800637a:	e3ee      	b.n	8006b5a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800637c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d177      	bne.n	800647c <USB_EPStartXfer+0x650>
 800638c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006390:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ac:	4413      	add	r3, r2
 80063ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	011a      	lsls	r2, r3, #4
 80063be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063c0:	4413      	add	r3, r2
 80063c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80063c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063d6:	801a      	strh	r2, [r3, #0]
 80063d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80063de:	d921      	bls.n	8006424 <USB_EPStartXfer+0x5f8>
 80063e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e4:	095b      	lsrs	r3, r3, #5
 80063e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ee:	f003 031f 	and.w	r3, r3, #31
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <USB_EPStartXfer+0x5d4>
 80063f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063fa:	3b01      	subs	r3, #1
 80063fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29a      	uxth	r2, r3
 8006406:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800640a:	b29b      	uxth	r3, r3
 800640c:	029b      	lsls	r3, r3, #10
 800640e:	b29b      	uxth	r3, r3
 8006410:	4313      	orrs	r3, r2
 8006412:	b29b      	uxth	r3, r3
 8006414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641c:	b29a      	uxth	r2, r3
 800641e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006420:	801a      	strh	r2, [r3, #0]
 8006422:	e056      	b.n	80064d2 <USB_EPStartXfer+0x6a6>
 8006424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <USB_EPStartXfer+0x616>
 800642c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643a:	b29a      	uxth	r2, r3
 800643c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800643e:	801a      	strh	r2, [r3, #0]
 8006440:	e047      	b.n	80064d2 <USB_EPStartXfer+0x6a6>
 8006442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <USB_EPStartXfer+0x636>
 8006458:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800645c:	3301      	adds	r3, #1
 800645e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29a      	uxth	r2, r3
 8006468:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800646c:	b29b      	uxth	r3, r3
 800646e:	029b      	lsls	r3, r3, #10
 8006470:	b29b      	uxth	r3, r3
 8006472:	4313      	orrs	r3, r2
 8006474:	b29a      	uxth	r2, r3
 8006476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	e02a      	b.n	80064d2 <USB_EPStartXfer+0x6a6>
 800647c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d122      	bne.n	80064d2 <USB_EPStartXfer+0x6a6>
 800648c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006490:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	653b      	str	r3, [r7, #80]	@ 0x50
 8006498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064ac:	4413      	add	r3, r2
 80064ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80064b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	011a      	lsls	r2, r3, #4
 80064be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064c0:	4413      	add	r3, r2
 80064c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	891b      	ldrh	r3, [r3, #8]
 80064de:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6959      	ldr	r1, [r3, #20]
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80064f8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80064fc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006500:	6800      	ldr	r0, [r0, #0]
 8006502:	f001 f982 	bl	800780a <USB_WritePMA>
            ep->xfer_buff += len;
 8006506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695a      	ldr	r2, [r3, #20]
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006516:	441a      	add	r2, r3
 8006518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6a1a      	ldr	r2, [r3, #32]
 8006530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	429a      	cmp	r2, r3
 800653e:	d90f      	bls.n	8006560 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6a1a      	ldr	r2, [r3, #32]
 800654c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006550:	1ad2      	subs	r2, r2, r3
 8006552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	621a      	str	r2, [r3, #32]
 800655e:	e00e      	b.n	800657e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2200      	movs	r2, #0
 800657c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800657e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	643b      	str	r3, [r7, #64]	@ 0x40
 800658a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d177      	bne.n	800668a <USB_EPStartXfer+0x85e>
 800659a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ba:	4413      	add	r3, r2
 80065bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	011a      	lsls	r2, r3, #4
 80065cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ce:	4413      	add	r3, r2
 80065d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e4:	801a      	strh	r2, [r3, #0]
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80065ec:	d921      	bls.n	8006632 <USB_EPStartXfer+0x806>
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f2:	095b      	lsrs	r3, r3, #5
 80065f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80065f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	2b00      	cmp	r3, #0
 8006602:	d104      	bne.n	800660e <USB_EPStartXfer+0x7e2>
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006608:	3b01      	subs	r3, #1
 800660a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800660e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29a      	uxth	r2, r3
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006618:	b29b      	uxth	r3, r3
 800661a:	029b      	lsls	r3, r3, #10
 800661c:	b29b      	uxth	r3, r3
 800661e:	4313      	orrs	r3, r2
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662a:	b29a      	uxth	r2, r3
 800662c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e050      	b.n	80066d4 <USB_EPStartXfer+0x8a8>
 8006632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <USB_EPStartXfer+0x824>
 800663a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	b29b      	uxth	r3, r3
 8006640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006648:	b29a      	uxth	r2, r3
 800664a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	e041      	b.n	80066d4 <USB_EPStartXfer+0x8a8>
 8006650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006654:	085b      	lsrs	r3, r3, #1
 8006656:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800665a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d004      	beq.n	8006670 <USB_EPStartXfer+0x844>
 8006666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666a:	3301      	adds	r3, #1
 800666c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29a      	uxth	r2, r3
 8006676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667a:	b29b      	uxth	r3, r3
 800667c:	029b      	lsls	r3, r3, #10
 800667e:	b29b      	uxth	r3, r3
 8006680:	4313      	orrs	r3, r2
 8006682:	b29a      	uxth	r2, r3
 8006684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	e024      	b.n	80066d4 <USB_EPStartXfer+0x8a8>
 800668a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d11c      	bne.n	80066d4 <USB_EPStartXfer+0x8a8>
 800669a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ae:	4413      	add	r3, r2
 80066b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80066b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	011a      	lsls	r2, r3, #4
 80066c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c2:	4413      	add	r3, r2
 80066c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	895b      	ldrh	r3, [r3, #10]
 80066e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6959      	ldr	r1, [r3, #20]
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006702:	6800      	ldr	r0, [r0, #0]
 8006704:	f001 f881 	bl	800780a <USB_WritePMA>
 8006708:	e227      	b.n	8006b5a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800670a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800671a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800673c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006740:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	441a      	add	r2, r3
 800675e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800676a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800676e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006772:	b29b      	uxth	r3, r3
 8006774:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006796:	4413      	add	r3, r2
 8006798:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800679a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	011a      	lsls	r2, r3, #4
 80067a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067aa:	4413      	add	r3, r2
 80067ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	891b      	ldrh	r3, [r3, #8]
 80067c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6959      	ldr	r1, [r3, #20]
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067dc:	b29b      	uxth	r3, r3
 80067de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80067e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80067e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80067ea:	6800      	ldr	r0, [r0, #0]
 80067ec:	f001 f80d 	bl	800780a <USB_WritePMA>
 80067f0:	e1b3      	b.n	8006b5a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80067f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6a1a      	ldr	r2, [r3, #32]
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006802:	1ad2      	subs	r2, r2, r3
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 80c6 	beq.w	80069c4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	673b      	str	r3, [r7, #112]	@ 0x70
 8006844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d177      	bne.n	8006944 <USB_EPStartXfer+0xb18>
 8006854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006858:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006864:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800686e:	b29b      	uxth	r3, r3
 8006870:	461a      	mov	r2, r3
 8006872:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006874:	4413      	add	r3, r2
 8006876:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	011a      	lsls	r2, r3, #4
 8006886:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006888:	4413      	add	r3, r2
 800688a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800688e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006890:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800689a:	b29a      	uxth	r2, r3
 800689c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80068a6:	d921      	bls.n	80068ec <USB_EPStartXfer+0xac0>
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b6:	f003 031f 	and.w	r3, r3, #31
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d104      	bne.n	80068c8 <USB_EPStartXfer+0xa9c>
 80068be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80068c2:	3b01      	subs	r3, #1
 80068c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	029b      	lsls	r3, r3, #10
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	4313      	orrs	r3, r2
 80068da:	b29b      	uxth	r3, r3
 80068dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	e050      	b.n	800698e <USB_EPStartXfer+0xb62>
 80068ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <USB_EPStartXfer+0xade>
 80068f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006902:	b29a      	uxth	r2, r3
 8006904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006906:	801a      	strh	r2, [r3, #0]
 8006908:	e041      	b.n	800698e <USB_EPStartXfer+0xb62>
 800690a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <USB_EPStartXfer+0xafe>
 8006920:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006924:	3301      	adds	r3, #1
 8006926:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800692a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29a      	uxth	r2, r3
 8006930:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006934:	b29b      	uxth	r3, r3
 8006936:	029b      	lsls	r3, r3, #10
 8006938:	b29b      	uxth	r3, r3
 800693a:	4313      	orrs	r3, r2
 800693c:	b29a      	uxth	r2, r3
 800693e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006940:	801a      	strh	r2, [r3, #0]
 8006942:	e024      	b.n	800698e <USB_EPStartXfer+0xb62>
 8006944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d11c      	bne.n	800698e <USB_EPStartXfer+0xb62>
 8006954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006958:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006962:	b29b      	uxth	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006968:	4413      	add	r3, r2
 800696a:	673b      	str	r3, [r7, #112]	@ 0x70
 800696c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	011a      	lsls	r2, r3, #4
 800697a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800697c:	4413      	add	r3, r2
 800697e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006988:	b29a      	uxth	r2, r3
 800698a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800698c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800698e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	895b      	ldrh	r3, [r3, #10]
 800699a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800699e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6959      	ldr	r1, [r3, #20]
 80069aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80069b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80069b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80069bc:	6800      	ldr	r0, [r0, #0]
 80069be:	f000 ff24 	bl	800780a <USB_WritePMA>
 80069c2:	e0ca      	b.n	8006b5a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d177      	bne.n	8006ac4 <USB_EPStartXfer+0xc98>
 80069d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069f4:	4413      	add	r3, r2
 80069f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	011a      	lsls	r2, r3, #4
 8006a06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a08:	4413      	add	r3, r2
 8006a0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a24:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a26:	d921      	bls.n	8006a6c <USB_EPStartXfer+0xc40>
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <USB_EPStartXfer+0xc1c>
 8006a3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006a42:	3b01      	subs	r3, #1
 8006a44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	029b      	lsls	r3, r3, #10
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a68:	801a      	strh	r2, [r3, #0]
 8006a6a:	e05c      	b.n	8006b26 <USB_EPStartXfer+0xcfa>
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10a      	bne.n	8006a8a <USB_EPStartXfer+0xc5e>
 8006a74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a86:	801a      	strh	r2, [r3, #0]
 8006a88:	e04d      	b.n	8006b26 <USB_EPStartXfer+0xcfa>
 8006a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8e:	085b      	lsrs	r3, r3, #1
 8006a90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d004      	beq.n	8006aaa <USB_EPStartXfer+0xc7e>
 8006aa0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006aaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	029b      	lsls	r3, r3, #10
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	4313      	orrs	r3, r2
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ac0:	801a      	strh	r2, [r3, #0]
 8006ac2:	e030      	b.n	8006b26 <USB_EPStartXfer+0xcfa>
 8006ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d128      	bne.n	8006b26 <USB_EPStartXfer+0xcfa>
 8006ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006af8:	4413      	add	r3, r2
 8006afa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	011a      	lsls	r2, r3, #4
 8006b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b10:	4413      	add	r3, r2
 8006b12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006b24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	891b      	ldrh	r3, [r3, #8]
 8006b32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6959      	ldr	r1, [r3, #20]
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b54:	6800      	ldr	r0, [r0, #0]
 8006b56:	f000 fe58 	bl	800780a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b80:	817b      	strh	r3, [r7, #10]
 8006b82:	897b      	ldrh	r3, [r7, #10]
 8006b84:	f083 0310 	eor.w	r3, r3, #16
 8006b88:	817b      	strh	r3, [r7, #10]
 8006b8a:	897b      	ldrh	r3, [r7, #10]
 8006b8c:	f083 0320 	eor.w	r3, r3, #32
 8006b90:	817b      	strh	r3, [r7, #10]
 8006b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	441a      	add	r2, r3
 8006bac:	897b      	ldrh	r3, [r7, #10]
 8006bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	8013      	strh	r3, [r2, #0]
 8006bc2:	f000 bcde 	b.w	8007582 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	7b1b      	ldrb	r3, [r3, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f040 80bb 	bne.w	8006d4e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699a      	ldr	r2, [r3, #24]
 8006be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d917      	bls.n	8006c24 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c14:	1ad2      	subs	r2, r2, r3
 8006c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	619a      	str	r2, [r3, #24]
 8006c22:	e00e      	b.n	8006c42 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	461a      	mov	r2, r3
 8006c62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006c66:	4413      	add	r3, r2
 8006c68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	011a      	lsls	r2, r3, #4
 8006c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006c7e:	4413      	add	r3, r2
 8006c80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ca2:	d924      	bls.n	8006cee <USB_EPStartXfer+0xec2>
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d104      	bne.n	8006cc4 <USB_EPStartXfer+0xe98>
 8006cba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	029b      	lsls	r3, r3, #10
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ce8:	801a      	strh	r2, [r3, #0]
 8006cea:	f000 bc10 	b.w	800750e <USB_EPStartXfer+0x16e2>
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10c      	bne.n	8006d10 <USB_EPStartXfer+0xee4>
 8006cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	e3fe      	b.n	800750e <USB_EPStartXfer+0x16e2>
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d14:	085b      	lsrs	r3, r3, #1
 8006d16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d004      	beq.n	8006d30 <USB_EPStartXfer+0xf04>
 8006d26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	029b      	lsls	r3, r3, #10
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	4313      	orrs	r3, r2
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	e3df      	b.n	800750e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	78db      	ldrb	r3, [r3, #3]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	f040 8218 	bne.w	8007190 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	785b      	ldrb	r3, [r3, #1]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f040 809d 	bne.w	8006eac <USB_EPStartXfer+0x1080>
 8006d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d96:	4413      	add	r3, r2
 8006d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	011a      	lsls	r2, r3, #4
 8006daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dae:	4413      	add	r3, r2
 8006db0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006db4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dca:	801a      	strh	r2, [r3, #0]
 8006dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dda:	d92b      	bls.n	8006e34 <USB_EPStartXfer+0x1008>
 8006ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d104      	bne.n	8006e0c <USB_EPStartXfer+0xfe0>
 8006e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e06:	3b01      	subs	r3, #1
 8006e08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	029b      	lsls	r3, r3, #10
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	e070      	b.n	8006f16 <USB_EPStartXfer+0x10ea>
 8006e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10c      	bne.n	8006e5e <USB_EPStartXfer+0x1032>
 8006e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e5a:	801a      	strh	r2, [r3, #0]
 8006e5c:	e05b      	b.n	8006f16 <USB_EPStartXfer+0x10ea>
 8006e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	085b      	lsrs	r3, r3, #1
 8006e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <USB_EPStartXfer+0x1062>
 8006e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e88:	3301      	adds	r3, #1
 8006e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	029b      	lsls	r3, r3, #10
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	e034      	b.n	8006f16 <USB_EPStartXfer+0x10ea>
 8006eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	785b      	ldrb	r3, [r3, #1]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d12c      	bne.n	8006f16 <USB_EPStartXfer+0x10ea>
 8006ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	461a      	mov	r2, r3
 8006edc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	011a      	lsls	r2, r3, #4
 8006ef4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ef8:	4413      	add	r3, r2
 8006efa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006efe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006f14:	801a      	strh	r2, [r3, #0]
 8006f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f040 809d 	bne.w	8007070 <USB_EPStartXfer+0x1244>
 8006f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	011a      	lsls	r2, r3, #4
 8006f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f72:	4413      	add	r3, r2
 8006f74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f8e:	801a      	strh	r2, [r3, #0]
 8006f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f9e:	d92b      	bls.n	8006ff8 <USB_EPStartXfer+0x11cc>
 8006fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <USB_EPStartXfer+0x11a4>
 8006fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	029b      	lsls	r3, r3, #10
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e069      	b.n	80070cc <USB_EPStartXfer+0x12a0>
 8006ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10c      	bne.n	8007022 <USB_EPStartXfer+0x11f6>
 8007008:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007018:	b29a      	uxth	r2, r3
 800701a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e054      	b.n	80070cc <USB_EPStartXfer+0x12a0>
 8007022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	085b      	lsrs	r3, r3, #1
 8007030:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <USB_EPStartXfer+0x1226>
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800704c:	3301      	adds	r3, #1
 800704e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007052:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800705e:	b29b      	uxth	r3, r3
 8007060:	029b      	lsls	r3, r3, #10
 8007062:	b29b      	uxth	r3, r3
 8007064:	4313      	orrs	r3, r2
 8007066:	b29a      	uxth	r2, r3
 8007068:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	e02d      	b.n	80070cc <USB_EPStartXfer+0x12a0>
 8007070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d125      	bne.n	80070cc <USB_EPStartXfer+0x12a0>
 8007080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800708e:	b29b      	uxth	r3, r3
 8007090:	461a      	mov	r2, r3
 8007092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007096:	4413      	add	r3, r2
 8007098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800709c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	011a      	lsls	r2, r3, #4
 80070aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80070ae:	4413      	add	r3, r2
 80070b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070ca:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80070cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8218 	beq.w	800750e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80070de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <USB_EPStartXfer+0x12ea>
 800710a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800710e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10d      	bne.n	8007132 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007116:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800711a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800711e:	2b00      	cmp	r3, #0
 8007120:	f040 81f5 	bne.w	800750e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007124:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	f040 81ee 	bne.w	800750e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007136:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007158:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800715c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	441a      	add	r2, r3
 8007176:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800717a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800717e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007186:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800718a:	b29b      	uxth	r3, r3
 800718c:	8013      	strh	r3, [r2, #0]
 800718e:	e1be      	b.n	800750e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	78db      	ldrb	r3, [r3, #3]
 800719c:	2b01      	cmp	r3, #1
 800719e:	f040 81b4 	bne.w	800750a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80071a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d917      	bls.n	80071ee <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80071be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80071ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699a      	ldr	r2, [r3, #24]
 80071da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071de:	1ad2      	subs	r2, r2, r3
 80071e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	619a      	str	r2, [r3, #24]
 80071ec:	e00e      	b.n	800720c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80071fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2200      	movs	r2, #0
 800720a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800720c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 8085 	bne.w	8007328 <USB_EPStartXfer+0x14fc>
 800721e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800722c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007230:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800723a:	b29b      	uxth	r3, r3
 800723c:	461a      	mov	r2, r3
 800723e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007242:	4413      	add	r3, r2
 8007244:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	011a      	lsls	r2, r3, #4
 8007256:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800725a:	4413      	add	r3, r2
 800725c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007260:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007264:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007270:	b29a      	uxth	r2, r3
 8007272:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727c:	2b3e      	cmp	r3, #62	@ 0x3e
 800727e:	d923      	bls.n	80072c8 <USB_EPStartXfer+0x149c>
 8007280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007284:	095b      	lsrs	r3, r3, #5
 8007286:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800728a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728e:	f003 031f 	and.w	r3, r3, #31
 8007292:	2b00      	cmp	r3, #0
 8007294:	d104      	bne.n	80072a0 <USB_EPStartXfer+0x1474>
 8007296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800729a:	3b01      	subs	r3, #1
 800729c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80072a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	029b      	lsls	r3, r3, #10
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	4313      	orrs	r3, r2
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072be:	b29a      	uxth	r2, r3
 80072c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	e060      	b.n	800738a <USB_EPStartXfer+0x155e>
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10c      	bne.n	80072ea <USB_EPStartXfer+0x14be>
 80072d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	e04f      	b.n	800738a <USB_EPStartXfer+0x155e>
 80072ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ee:	085b      	lsrs	r3, r3, #1
 80072f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80072f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d004      	beq.n	800730a <USB_EPStartXfer+0x14de>
 8007300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007304:	3301      	adds	r3, #1
 8007306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800730a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29a      	uxth	r2, r3
 8007312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007316:	b29b      	uxth	r3, r3
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	b29b      	uxth	r3, r3
 800731c:	4313      	orrs	r3, r2
 800731e:	b29a      	uxth	r2, r3
 8007320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007324:	801a      	strh	r2, [r3, #0]
 8007326:	e030      	b.n	800738a <USB_EPStartXfer+0x155e>
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	785b      	ldrb	r3, [r3, #1]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d128      	bne.n	800738a <USB_EPStartXfer+0x155e>
 8007338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007354:	b29b      	uxth	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800735c:	4413      	add	r3, r2
 800735e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	011a      	lsls	r2, r3, #4
 8007370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007374:	4413      	add	r3, r2
 8007376:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800737a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800737e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007382:	b29a      	uxth	r2, r3
 8007384:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 8085 	bne.w	80074b4 <USB_EPStartXfer+0x1688>
 80073aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80073b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80073ce:	4413      	add	r3, r2
 80073d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80073d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	011a      	lsls	r2, r3, #4
 80073e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80073e6:	4413      	add	r3, r2
 80073e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007402:	801a      	strh	r2, [r3, #0]
 8007404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007408:	2b3e      	cmp	r3, #62	@ 0x3e
 800740a:	d923      	bls.n	8007454 <USB_EPStartXfer+0x1628>
 800740c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741a:	f003 031f 	and.w	r3, r3, #31
 800741e:	2b00      	cmp	r3, #0
 8007420:	d104      	bne.n	800742c <USB_EPStartXfer+0x1600>
 8007422:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007426:	3b01      	subs	r3, #1
 8007428:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800742c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29a      	uxth	r2, r3
 8007434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007438:	b29b      	uxth	r3, r3
 800743a:	029b      	lsls	r3, r3, #10
 800743c:	b29b      	uxth	r3, r3
 800743e:	4313      	orrs	r3, r2
 8007440:	b29b      	uxth	r3, r3
 8007442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800744a:	b29a      	uxth	r2, r3
 800744c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007450:	801a      	strh	r2, [r3, #0]
 8007452:	e05c      	b.n	800750e <USB_EPStartXfer+0x16e2>
 8007454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10c      	bne.n	8007476 <USB_EPStartXfer+0x164a>
 800745c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800746c:	b29a      	uxth	r2, r3
 800746e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007472:	801a      	strh	r2, [r3, #0]
 8007474:	e04b      	b.n	800750e <USB_EPStartXfer+0x16e2>
 8007476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747a:	085b      	lsrs	r3, r3, #1
 800747c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	d004      	beq.n	8007496 <USB_EPStartXfer+0x166a>
 800748c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007490:	3301      	adds	r3, #1
 8007492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	b29a      	uxth	r2, r3
 800749e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	029b      	lsls	r3, r3, #10
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	4313      	orrs	r3, r2
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074b0:	801a      	strh	r2, [r3, #0]
 80074b2:	e02c      	b.n	800750e <USB_EPStartXfer+0x16e2>
 80074b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	785b      	ldrb	r3, [r3, #1]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d124      	bne.n	800750e <USB_EPStartXfer+0x16e2>
 80074c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074da:	4413      	add	r3, r2
 80074dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	011a      	lsls	r2, r3, #4
 80074ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074f2:	4413      	add	r3, r2
 80074f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007500:	b29a      	uxth	r2, r3
 8007502:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007506:	801a      	strh	r2, [r3, #0]
 8007508:	e001      	b.n	800750e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e03a      	b.n	8007584 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800750e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007534:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007538:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800753c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007540:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007544:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007548:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800754c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007554:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	441a      	add	r2, r3
 800756a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800756e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800757a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800757e:	b29b      	uxth	r3, r3
 8007580:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800758e:	b480      	push	{r7}
 8007590:	b085      	sub	sp, #20
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d020      	beq.n	80075e2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075b6:	81bb      	strh	r3, [r7, #12]
 80075b8:	89bb      	ldrh	r3, [r7, #12]
 80075ba:	f083 0310 	eor.w	r3, r3, #16
 80075be:	81bb      	strh	r3, [r7, #12]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	441a      	add	r2, r3
 80075ca:	89bb      	ldrh	r3, [r7, #12]
 80075cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075dc:	b29b      	uxth	r3, r3
 80075de:	8013      	strh	r3, [r2, #0]
 80075e0:	e01f      	b.n	8007622 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075f8:	81fb      	strh	r3, [r7, #14]
 80075fa:	89fb      	ldrh	r3, [r7, #14]
 80075fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007600:	81fb      	strh	r3, [r7, #14]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	441a      	add	r2, r3
 800760c:	89fb      	ldrh	r3, [r7, #14]
 800760e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800761a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800761e:	b29b      	uxth	r3, r3
 8007620:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	bc80      	pop	{r7}
 800762c:	4770      	bx	lr

0800762e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800762e:	b480      	push	{r7}
 8007630:	b087      	sub	sp, #28
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	7b1b      	ldrb	r3, [r3, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 809d 	bne.w	800777c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	785b      	ldrb	r3, [r3, #1]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d04c      	beq.n	80076e4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	823b      	strh	r3, [r7, #16]
 8007658:	8a3b      	ldrh	r3, [r7, #16]
 800765a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01b      	beq.n	800769a <USB_EPClearStall+0x6c>
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007678:	81fb      	strh	r3, [r7, #14]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	441a      	add	r2, r3
 8007684:	89fb      	ldrh	r3, [r7, #14]
 8007686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800768a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800768e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007692:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007696:	b29b      	uxth	r3, r3
 8007698:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	78db      	ldrb	r3, [r3, #3]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d06c      	beq.n	800777c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076b8:	81bb      	strh	r3, [r7, #12]
 80076ba:	89bb      	ldrh	r3, [r7, #12]
 80076bc:	f083 0320 	eor.w	r3, r3, #32
 80076c0:	81bb      	strh	r3, [r7, #12]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	441a      	add	r2, r3
 80076cc:	89bb      	ldrh	r3, [r7, #12]
 80076ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076de:	b29b      	uxth	r3, r3
 80076e0:	8013      	strh	r3, [r2, #0]
 80076e2:	e04b      	b.n	800777c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	82fb      	strh	r3, [r7, #22]
 80076f2:	8afb      	ldrh	r3, [r7, #22]
 80076f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01b      	beq.n	8007734 <USB_EPClearStall+0x106>
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800770e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007712:	82bb      	strh	r3, [r7, #20]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	441a      	add	r2, r3
 800771e:	8abb      	ldrh	r3, [r7, #20]
 8007720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007728:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800772c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007730:	b29b      	uxth	r3, r3
 8007732:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	b29b      	uxth	r3, r3
 8007742:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800774a:	827b      	strh	r3, [r7, #18]
 800774c:	8a7b      	ldrh	r3, [r7, #18]
 800774e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007752:	827b      	strh	r3, [r7, #18]
 8007754:	8a7b      	ldrh	r3, [r7, #18]
 8007756:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800775a:	827b      	strh	r3, [r7, #18]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	441a      	add	r2, r3
 8007766:	8a7b      	ldrh	r3, [r7, #18]
 8007768:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800776c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007770:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007778:	b29b      	uxth	r3, r3
 800777a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	bc80      	pop	{r7}
 8007786:	4770      	bx	lr

08007788 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007794:	78fb      	ldrb	r3, [r7, #3]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d103      	bne.n	80077a2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2280      	movs	r2, #128	@ 0x80
 800779e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr

080077ae <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	bc80      	pop	{r7}
 80077c0:	4770      	bx	lr

080077c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bc80      	pop	{r7}
 80077d4:	4770      	bx	lr

080077d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80077e8:	68fb      	ldr	r3, [r7, #12]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr

080077f4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr

0800780a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800780a:	b480      	push	{r7}
 800780c:	b08b      	sub	sp, #44	@ 0x2c
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	4611      	mov	r1, r2
 8007816:	461a      	mov	r2, r3
 8007818:	460b      	mov	r3, r1
 800781a:	80fb      	strh	r3, [r7, #6]
 800781c:	4613      	mov	r3, r2
 800781e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007820:	88bb      	ldrh	r3, [r7, #4]
 8007822:	3301      	adds	r3, #1
 8007824:	085b      	lsrs	r3, r3, #1
 8007826:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007830:	88fb      	ldrh	r3, [r7, #6]
 8007832:	005a      	lsls	r2, r3, #1
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800783c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	627b      	str	r3, [r7, #36]	@ 0x24
 8007842:	e01e      	b.n	8007882 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	3301      	adds	r3, #1
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	b21a      	sxth	r2, r3
 8007854:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007858:	4313      	orrs	r3, r2
 800785a:	b21b      	sxth	r3, r3
 800785c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	8a7a      	ldrh	r2, [r7, #18]
 8007862:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	3302      	adds	r3, #2
 8007868:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	3302      	adds	r3, #2
 800786e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	3301      	adds	r3, #1
 8007874:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	3301      	adds	r3, #1
 800787a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787e:	3b01      	subs	r3, #1
 8007880:	627b      	str	r3, [r7, #36]	@ 0x24
 8007882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1dd      	bne.n	8007844 <USB_WritePMA+0x3a>
  }
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	372c      	adds	r7, #44	@ 0x2c
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr

08007894 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007894:	b480      	push	{r7}
 8007896:	b08b      	sub	sp, #44	@ 0x2c
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	4611      	mov	r1, r2
 80078a0:	461a      	mov	r2, r3
 80078a2:	460b      	mov	r3, r1
 80078a4:	80fb      	strh	r3, [r7, #6]
 80078a6:	4613      	mov	r3, r2
 80078a8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80078aa:	88bb      	ldrh	r3, [r7, #4]
 80078ac:	085b      	lsrs	r3, r3, #1
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078ba:	88fb      	ldrh	r3, [r7, #6]
 80078bc:	005a      	lsls	r2, r3, #1
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078c6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80078cc:	e01b      	b.n	8007906 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	3302      	adds	r3, #2
 80078da:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	3301      	adds	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	0a1b      	lsrs	r3, r3, #8
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	3301      	adds	r3, #1
 80078f8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	3302      	adds	r3, #2
 80078fe:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007902:	3b01      	subs	r3, #1
 8007904:	627b      	str	r3, [r7, #36]	@ 0x24
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e0      	bne.n	80078ce <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800790c:	88bb      	ldrh	r3, [r7, #4]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	b29b      	uxth	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d007      	beq.n	8007928 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	b2da      	uxtb	r2, r3
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	701a      	strb	r2, [r3, #0]
  }
}
 8007928:	bf00      	nop
 800792a:	372c      	adds	r7, #44	@ 0x2c
 800792c:	46bd      	mov	sp, r7
 800792e:	bc80      	pop	{r7}
 8007930:	4770      	bx	lr

08007932 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	460b      	mov	r3, r1
 800793c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	7c1b      	ldrb	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d115      	bne.n	8007976 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800794a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800794e:	2202      	movs	r2, #2
 8007950:	2181      	movs	r1, #129	@ 0x81
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f004 fc15 	bl	800c182 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800795e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007962:	2202      	movs	r2, #2
 8007964:	2101      	movs	r1, #1
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f004 fc0b 	bl	800c182 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007974:	e012      	b.n	800799c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007976:	2340      	movs	r3, #64	@ 0x40
 8007978:	2202      	movs	r2, #2
 800797a:	2181      	movs	r1, #129	@ 0x81
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f004 fc00 	bl	800c182 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007988:	2340      	movs	r3, #64	@ 0x40
 800798a:	2202      	movs	r2, #2
 800798c:	2101      	movs	r1, #1
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f004 fbf7 	bl	800c182 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800799c:	2308      	movs	r3, #8
 800799e:	2203      	movs	r2, #3
 80079a0:	2182      	movs	r1, #130	@ 0x82
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f004 fbed 	bl	800c182 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079ae:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80079b2:	f004 fd0d 	bl	800c3d0 <USBD_static_malloc>
 80079b6:	4602      	mov	r2, r0
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d102      	bne.n	80079ce <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80079c8:	2301      	movs	r3, #1
 80079ca:	73fb      	strb	r3, [r7, #15]
 80079cc:	e026      	b.n	8007a1c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079d4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	7c1b      	ldrb	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d109      	bne.n	8007a0c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a02:	2101      	movs	r1, #1
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f004 fcac 	bl	800c362 <USBD_LL_PrepareReceive>
 8007a0a:	e007      	b.n	8007a1c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a12:	2340      	movs	r3, #64	@ 0x40
 8007a14:	2101      	movs	r1, #1
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f004 fca3 	bl	800c362 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a36:	2181      	movs	r1, #129	@ 0x81
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f004 fbc8 	bl	800c1ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a44:	2101      	movs	r1, #1
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f004 fbc1 	bl	800c1ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a54:	2182      	movs	r1, #130	@ 0x82
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f004 fbb9 	bl	800c1ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00e      	beq.n	8007a8a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f004 fcb3 	bl	800c3e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aa4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d039      	beq.n	8007b32 <USBD_CDC_Setup+0x9e>
 8007abe:	2b20      	cmp	r3, #32
 8007ac0:	d17f      	bne.n	8007bc2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	88db      	ldrh	r3, [r3, #6]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d029      	beq.n	8007b1e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	b25b      	sxtb	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	da11      	bge.n	8007af8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007ae0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	88d2      	ldrh	r2, [r2, #6]
 8007ae6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007ae8:	6939      	ldr	r1, [r7, #16]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	88db      	ldrh	r3, [r3, #6]
 8007aee:	461a      	mov	r2, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 fa05 	bl	8008f00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007af6:	e06b      	b.n	8007bd0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	785a      	ldrb	r2, [r3, #1]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	88db      	ldrh	r3, [r3, #6]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007b0e:	6939      	ldr	r1, [r7, #16]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	88db      	ldrh	r3, [r3, #6]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 fa20 	bl	8008f5c <USBD_CtlPrepareRx>
      break;
 8007b1c:	e058      	b.n	8007bd0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	7850      	ldrb	r0, [r2, #1]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	4798      	blx	r3
      break;
 8007b30:	e04e      	b.n	8007bd0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	2b0b      	cmp	r3, #11
 8007b38:	d02e      	beq.n	8007b98 <USBD_CDC_Setup+0x104>
 8007b3a:	2b0b      	cmp	r3, #11
 8007b3c:	dc38      	bgt.n	8007bb0 <USBD_CDC_Setup+0x11c>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <USBD_CDC_Setup+0xb4>
 8007b42:	2b0a      	cmp	r3, #10
 8007b44:	d014      	beq.n	8007b70 <USBD_CDC_Setup+0xdc>
 8007b46:	e033      	b.n	8007bb0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d107      	bne.n	8007b62 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007b52:	f107 030c 	add.w	r3, r7, #12
 8007b56:	2202      	movs	r2, #2
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 f9d0 	bl	8008f00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b60:	e02e      	b.n	8007bc0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 f961 	bl	8008e2c <USBD_CtlError>
            ret = USBD_FAIL;
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b6e:	e027      	b.n	8007bc0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d107      	bne.n	8007b8a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b7a:	f107 030f 	add.w	r3, r7, #15
 8007b7e:	2201      	movs	r2, #1
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 f9bc 	bl	8008f00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b88:	e01a      	b.n	8007bc0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 f94d 	bl	8008e2c <USBD_CtlError>
            ret = USBD_FAIL;
 8007b92:	2302      	movs	r3, #2
 8007b94:	75fb      	strb	r3, [r7, #23]
          break;
 8007b96:	e013      	b.n	8007bc0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d00d      	beq.n	8007bbe <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 f941 	bl	8008e2c <USBD_CtlError>
            ret = USBD_FAIL;
 8007baa:	2302      	movs	r3, #2
 8007bac:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bae:	e006      	b.n	8007bbe <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 f93a 	bl	8008e2c <USBD_CtlError>
          ret = USBD_FAIL;
 8007bb8:	2302      	movs	r3, #2
 8007bba:	75fb      	strb	r3, [r7, #23]
          break;
 8007bbc:	e000      	b.n	8007bc0 <USBD_CDC_Setup+0x12c>
          break;
 8007bbe:	bf00      	nop
      }
      break;
 8007bc0:	e006      	b.n	8007bd0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 f931 	bl	8008e2c <USBD_CtlError>
      ret = USBD_FAIL;
 8007bca:	2302      	movs	r3, #2
 8007bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bce:	bf00      	nop
  }

  return ret;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bec:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007bf4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d03a      	beq.n	8007c76 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	440b      	add	r3, r1
 8007c0e:	331c      	adds	r3, #28
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d029      	beq.n	8007c6a <USBD_CDC_DataIn+0x90>
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	440b      	add	r3, r1
 8007c24:	331c      	adds	r3, #28
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	78f9      	ldrb	r1, [r7, #3]
 8007c2a:	68b8      	ldr	r0, [r7, #8]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	440b      	add	r3, r1
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	4403      	add	r3, r0
 8007c36:	3320      	adds	r3, #32
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c3e:	fb01 f303 	mul.w	r3, r1, r3
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d110      	bne.n	8007c6a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007c48:	78fa      	ldrb	r2, [r7, #3]
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	440b      	add	r3, r1
 8007c56:	331c      	adds	r3, #28
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c5c:	78f9      	ldrb	r1, [r7, #3]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	2200      	movs	r2, #0
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f004 fb5a 	bl	800c31c <USBD_LL_Transmit>
 8007c68:	e003      	b.n	8007c72 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	e000      	b.n	8007c78 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007c76:	2302      	movs	r3, #2
  }
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f004 fb85 	bl	800c3a8 <USBD_LL_GetRxDataSize>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00d      	beq.n	8007ccc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4798      	blx	r3

    return USBD_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e000      	b.n	8007cce <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007ccc:	2302      	movs	r3, #2
  }
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ce4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d014      	beq.n	8007d1a <USBD_CDC_EP0_RxReady+0x44>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007cf6:	2bff      	cmp	r3, #255	@ 0xff
 8007cf8:	d00f      	beq.n	8007d1a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007d08:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	22ff      	movs	r2, #255	@ 0xff
 8007d16:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2243      	movs	r2, #67	@ 0x43
 8007d30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007d32:	4b03      	ldr	r3, [pc, #12]	@ (8007d40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	20000098 	.word	0x20000098

08007d44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2243      	movs	r2, #67	@ 0x43
 8007d50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007d52:	4b03      	ldr	r3, [pc, #12]	@ (8007d60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bc80      	pop	{r7}
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	20000054 	.word	0x20000054

08007d64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2243      	movs	r2, #67	@ 0x43
 8007d70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007d72:	4b03      	ldr	r3, [pc, #12]	@ (8007d80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bc80      	pop	{r7}
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	200000dc 	.word	0x200000dc

08007d84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	220a      	movs	r2, #10
 8007d90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007d92:	4b03      	ldr	r3, [pc, #12]	@ (8007da0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bc80      	pop	{r7}
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000010 	.word	0x20000010

08007da4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007dae:	2302      	movs	r3, #2
 8007db0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bc80      	pop	{r7}
 8007dce:	4770      	bx	lr

08007dd0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007de4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007dee:	88fa      	ldrh	r2, [r7, #6]
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	371c      	adds	r7, #28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bc80      	pop	{r7}
 8007e00:	4770      	bx	lr

08007e02 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e12:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bc80      	pop	{r7}
 8007e26:	4770      	bx	lr

08007e28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d01c      	beq.n	8007e7c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d115      	bne.n	8007e78 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	2181      	movs	r1, #129	@ 0x81
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f004 fa54 	bl	800c31c <USBD_LL_Transmit>

      return USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	e002      	b.n	8007e7e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e000      	b.n	8007e7e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007e7c:	2302      	movs	r3, #2
  }
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e94:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d017      	beq.n	8007ed0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	7c1b      	ldrb	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d109      	bne.n	8007ebc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007eae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f004 fa54 	bl	800c362 <USBD_LL_PrepareReceive>
 8007eba:	e007      	b.n	8007ecc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ec2:	2340      	movs	r3, #64	@ 0x40
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f004 fa4b 	bl	800c362 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	e000      	b.n	8007ed2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007ed0:	2302      	movs	r3, #2
  }
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	e01a      	b.n	8007f28 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	79fa      	ldrb	r2, [r7, #7]
 8007f1e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f004 f8b9 	bl	800c098 <USBD_LL_Init>

  return USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d006      	beq.n	8007f52 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	73fb      	strb	r3, [r7, #15]
 8007f50:	e001      	b.n	8007f56 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007f52:	2302      	movs	r3, #2
 8007f54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr

08007f62 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f004 f8ee 	bl	800c14c <USBD_LL_Start>

  return USBD_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bc80      	pop	{r7}
 8007f8c:	4770      	bx	lr

08007f8e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00c      	beq.n	8007fc2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	78fa      	ldrb	r2, [r7, #3]
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	4798      	blx	r3
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	78fa      	ldrb	r2, [r7, #3]
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	4798      	blx	r3

  return USBD_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fed8 	bl	8008dba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008018:	461a      	mov	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	2b02      	cmp	r3, #2
 800802c:	d016      	beq.n	800805c <USBD_LL_SetupStage+0x6a>
 800802e:	2b02      	cmp	r3, #2
 8008030:	d81c      	bhi.n	800806c <USBD_LL_SetupStage+0x7a>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <USBD_LL_SetupStage+0x4a>
 8008036:	2b01      	cmp	r3, #1
 8008038:	d008      	beq.n	800804c <USBD_LL_SetupStage+0x5a>
 800803a:	e017      	b.n	800806c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f9cb 	bl	80083e0 <USBD_StdDevReq>
      break;
 800804a:	e01a      	b.n	8008082 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fa2d 	bl	80084b4 <USBD_StdItfReq>
      break;
 800805a:	e012      	b.n	8008082 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fa6d 	bl	8008544 <USBD_StdEPReq>
      break;
 800806a:	e00a      	b.n	8008082 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008072:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008076:	b2db      	uxtb	r3, r3
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f004 f8c6 	bl	800c20c <USBD_LL_StallEP>
      break;
 8008080:	bf00      	nop
  }

  return USBD_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	460b      	mov	r3, r1
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800809a:	7afb      	ldrb	r3, [r7, #11]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d14b      	bne.n	8008138 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80080a6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d134      	bne.n	800811c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d919      	bls.n	80080f2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	1ad2      	subs	r2, r2, r3
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d203      	bcs.n	80080e0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80080dc:	b29b      	uxth	r3, r3
 80080de:	e002      	b.n	80080e6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	461a      	mov	r2, r3
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 ff54 	bl	8008f98 <USBD_CtlContinueRx>
 80080f0:	e038      	b.n	8008164 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008104:	2b03      	cmp	r3, #3
 8008106:	d105      	bne.n	8008114 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 ff51 	bl	8008fbc <USBD_CtlSendStatus>
 800811a:	e023      	b.n	8008164 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008122:	2b05      	cmp	r3, #5
 8008124:	d11e      	bne.n	8008164 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800812e:	2100      	movs	r1, #0
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f004 f86b 	bl	800c20c <USBD_LL_StallEP>
 8008136:	e015      	b.n	8008164 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00d      	beq.n	8008160 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800814a:	2b03      	cmp	r3, #3
 800814c:	d108      	bne.n	8008160 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	7afa      	ldrb	r2, [r7, #11]
 8008158:	4611      	mov	r1, r2
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	4798      	blx	r3
 800815e:	e001      	b.n	8008164 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008160:	2302      	movs	r3, #2
 8008162:	e000      	b.n	8008166 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b086      	sub	sp, #24
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	460b      	mov	r3, r1
 8008178:	607a      	str	r2, [r7, #4]
 800817a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d17f      	bne.n	8008282 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3314      	adds	r3, #20
 8008186:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800818e:	2b02      	cmp	r3, #2
 8008190:	d15c      	bne.n	800824c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	429a      	cmp	r2, r3
 800819c:	d915      	bls.n	80081ca <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	1ad2      	subs	r2, r2, r3
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	461a      	mov	r2, r3
 80081b4:	6879      	ldr	r1, [r7, #4]
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 febe 	bl	8008f38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081bc:	2300      	movs	r3, #0
 80081be:	2200      	movs	r2, #0
 80081c0:	2100      	movs	r1, #0
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f004 f8cd 	bl	800c362 <USBD_LL_PrepareReceive>
 80081c8:	e04e      	b.n	8008268 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	6912      	ldr	r2, [r2, #16]
 80081d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80081d6:	fb01 f202 	mul.w	r2, r1, r2
 80081da:	1a9b      	subs	r3, r3, r2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d11c      	bne.n	800821a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d316      	bcc.n	800821a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d20f      	bcs.n	800821a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081fa:	2200      	movs	r2, #0
 80081fc:	2100      	movs	r1, #0
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 fe9a 	bl	8008f38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800820c:	2300      	movs	r3, #0
 800820e:	2200      	movs	r2, #0
 8008210:	2100      	movs	r1, #0
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f004 f8a5 	bl	800c362 <USBD_LL_PrepareReceive>
 8008218:	e026      	b.n	8008268 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800822c:	2b03      	cmp	r3, #3
 800822e:	d105      	bne.n	800823c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800823c:	2180      	movs	r1, #128	@ 0x80
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f003 ffe4 	bl	800c20c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 fecc 	bl	8008fe2 <USBD_CtlReceiveStatus>
 800824a:	e00d      	b.n	8008268 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008252:	2b04      	cmp	r3, #4
 8008254:	d004      	beq.n	8008260 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800825c:	2b00      	cmp	r3, #0
 800825e:	d103      	bne.n	8008268 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008260:	2180      	movs	r1, #128	@ 0x80
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f003 ffd2 	bl	800c20c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800826e:	2b01      	cmp	r3, #1
 8008270:	d11d      	bne.n	80082ae <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f7ff fe81 	bl	8007f7a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008280:	e015      	b.n	80082ae <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00d      	beq.n	80082aa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008294:	2b03      	cmp	r3, #3
 8008296:	d108      	bne.n	80082aa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	7afa      	ldrb	r2, [r7, #11]
 80082a2:	4611      	mov	r1, r2
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	4798      	blx	r3
 80082a8:	e001      	b.n	80082ae <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082aa:	2302      	movs	r3, #2
 80082ac:	e000      	b.n	80082b0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082c0:	2340      	movs	r3, #64	@ 0x40
 80082c2:	2200      	movs	r2, #0
 80082c4:	2100      	movs	r1, #0
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f003 ff5b 	bl	800c182 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2240      	movs	r2, #64	@ 0x40
 80082d8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082dc:	2340      	movs	r3, #64	@ 0x40
 80082de:	2200      	movs	r2, #0
 80082e0:	2180      	movs	r1, #128	@ 0x80
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f003 ff4d 	bl	800c182 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2240      	movs	r2, #64	@ 0x40
 80082f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d009      	beq.n	8008330 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6852      	ldr	r2, [r2, #4]
 8008328:	b2d2      	uxtb	r2, r2
 800832a:	4611      	mov	r1, r2
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4798      	blx	r3
  }

  return USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	460b      	mov	r3, r1
 8008344:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	78fa      	ldrb	r2, [r7, #3]
 800834a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	bc80      	pop	{r7}
 8008356:	4770      	bx	lr

08008358 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2204      	movs	r2, #4
 8008370:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	bc80      	pop	{r7}
 800837e:	4770      	bx	lr

08008380 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800838e:	2b04      	cmp	r3, #4
 8008390:	d105      	bne.n	800839e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr

080083aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d10b      	bne.n	80083d4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083f6:	2b40      	cmp	r3, #64	@ 0x40
 80083f8:	d005      	beq.n	8008406 <USBD_StdDevReq+0x26>
 80083fa:	2b40      	cmp	r3, #64	@ 0x40
 80083fc:	d84f      	bhi.n	800849e <USBD_StdDevReq+0xbe>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d009      	beq.n	8008416 <USBD_StdDevReq+0x36>
 8008402:	2b20      	cmp	r3, #32
 8008404:	d14b      	bne.n	800849e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	4798      	blx	r3
      break;
 8008414:	e048      	b.n	80084a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	2b09      	cmp	r3, #9
 800841c:	d839      	bhi.n	8008492 <USBD_StdDevReq+0xb2>
 800841e:	a201      	add	r2, pc, #4	@ (adr r2, 8008424 <USBD_StdDevReq+0x44>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008475 	.word	0x08008475
 8008428:	08008489 	.word	0x08008489
 800842c:	08008493 	.word	0x08008493
 8008430:	0800847f 	.word	0x0800847f
 8008434:	08008493 	.word	0x08008493
 8008438:	08008457 	.word	0x08008457
 800843c:	0800844d 	.word	0x0800844d
 8008440:	08008493 	.word	0x08008493
 8008444:	0800846b 	.word	0x0800846b
 8008448:	08008461 	.word	0x08008461
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f9dc 	bl	800880c <USBD_GetDescriptor>
          break;
 8008454:	e022      	b.n	800849c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fb3f 	bl	8008adc <USBD_SetAddress>
          break;
 800845e:	e01d      	b.n	800849c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fb7e 	bl	8008b64 <USBD_SetConfig>
          break;
 8008468:	e018      	b.n	800849c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fc07 	bl	8008c80 <USBD_GetConfig>
          break;
 8008472:	e013      	b.n	800849c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fc37 	bl	8008cea <USBD_GetStatus>
          break;
 800847c:	e00e      	b.n	800849c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fc65 	bl	8008d50 <USBD_SetFeature>
          break;
 8008486:	e009      	b.n	800849c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fc74 	bl	8008d78 <USBD_ClrFeature>
          break;
 8008490:	e004      	b.n	800849c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fcc9 	bl	8008e2c <USBD_CtlError>
          break;
 800849a:	bf00      	nop
      }
      break;
 800849c:	e004      	b.n	80084a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fcc3 	bl	8008e2c <USBD_CtlError>
      break;
 80084a6:	bf00      	nop
  }

  return ret;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop

080084b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084ca:	2b40      	cmp	r3, #64	@ 0x40
 80084cc:	d005      	beq.n	80084da <USBD_StdItfReq+0x26>
 80084ce:	2b40      	cmp	r3, #64	@ 0x40
 80084d0:	d82e      	bhi.n	8008530 <USBD_StdItfReq+0x7c>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <USBD_StdItfReq+0x26>
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d12a      	bne.n	8008530 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084e0:	3b01      	subs	r3, #1
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d81d      	bhi.n	8008522 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	889b      	ldrh	r3, [r3, #4]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d813      	bhi.n	8008518 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
 80084fe:	4603      	mov	r3, r0
 8008500:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	88db      	ldrh	r3, [r3, #6]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d110      	bne.n	800852c <USBD_StdItfReq+0x78>
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10d      	bne.n	800852c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fd53 	bl	8008fbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008516:	e009      	b.n	800852c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fc86 	bl	8008e2c <USBD_CtlError>
          break;
 8008520:	e004      	b.n	800852c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fc81 	bl	8008e2c <USBD_CtlError>
          break;
 800852a:	e000      	b.n	800852e <USBD_StdItfReq+0x7a>
          break;
 800852c:	bf00      	nop
      }
      break;
 800852e:	e004      	b.n	800853a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fc7a 	bl	8008e2c <USBD_CtlError>
      break;
 8008538:	bf00      	nop
  }

  return USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008560:	2b40      	cmp	r3, #64	@ 0x40
 8008562:	d007      	beq.n	8008574 <USBD_StdEPReq+0x30>
 8008564:	2b40      	cmp	r3, #64	@ 0x40
 8008566:	f200 8146 	bhi.w	80087f6 <USBD_StdEPReq+0x2b2>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <USBD_StdEPReq+0x40>
 800856e:	2b20      	cmp	r3, #32
 8008570:	f040 8141 	bne.w	80087f6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	4798      	blx	r3
      break;
 8008582:	e13d      	b.n	8008800 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800858c:	2b20      	cmp	r3, #32
 800858e:	d10a      	bne.n	80085a6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	e12d      	b.n	8008802 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	785b      	ldrb	r3, [r3, #1]
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d007      	beq.n	80085be <USBD_StdEPReq+0x7a>
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	f300 811b 	bgt.w	80087ea <USBD_StdEPReq+0x2a6>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d072      	beq.n	800869e <USBD_StdEPReq+0x15a>
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d03a      	beq.n	8008632 <USBD_StdEPReq+0xee>
 80085bc:	e115      	b.n	80087ea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d002      	beq.n	80085ce <USBD_StdEPReq+0x8a>
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d015      	beq.n	80085f8 <USBD_StdEPReq+0xb4>
 80085cc:	e02b      	b.n	8008626 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00c      	beq.n	80085ee <USBD_StdEPReq+0xaa>
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	2b80      	cmp	r3, #128	@ 0x80
 80085d8:	d009      	beq.n	80085ee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f003 fe14 	bl	800c20c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80085e4:	2180      	movs	r1, #128	@ 0x80
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f003 fe10 	bl	800c20c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085ec:	e020      	b.n	8008630 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fc1b 	bl	8008e2c <USBD_CtlError>
              break;
 80085f6:	e01b      	b.n	8008630 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10e      	bne.n	800861e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <USBD_StdEPReq+0xda>
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	2b80      	cmp	r3, #128	@ 0x80
 800860a:	d008      	beq.n	800861e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	88db      	ldrh	r3, [r3, #6]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d104      	bne.n	800861e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f003 fdf7 	bl	800c20c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fccc 	bl	8008fbc <USBD_CtlSendStatus>

              break;
 8008624:	e004      	b.n	8008630 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fbff 	bl	8008e2c <USBD_CtlError>
              break;
 800862e:	bf00      	nop
          }
          break;
 8008630:	e0e0      	b.n	80087f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008638:	2b02      	cmp	r3, #2
 800863a:	d002      	beq.n	8008642 <USBD_StdEPReq+0xfe>
 800863c:	2b03      	cmp	r3, #3
 800863e:	d015      	beq.n	800866c <USBD_StdEPReq+0x128>
 8008640:	e026      	b.n	8008690 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00c      	beq.n	8008662 <USBD_StdEPReq+0x11e>
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	2b80      	cmp	r3, #128	@ 0x80
 800864c:	d009      	beq.n	8008662 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f003 fdda 	bl	800c20c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008658:	2180      	movs	r1, #128	@ 0x80
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f003 fdd6 	bl	800c20c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008660:	e01c      	b.n	800869c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fbe1 	bl	8008e2c <USBD_CtlError>
              break;
 800866a:	e017      	b.n	800869c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	885b      	ldrh	r3, [r3, #2]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d112      	bne.n	800869a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800867a:	2b00      	cmp	r3, #0
 800867c:	d004      	beq.n	8008688 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f003 fde1 	bl	800c24a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fc97 	bl	8008fbc <USBD_CtlSendStatus>
              }
              break;
 800868e:	e004      	b.n	800869a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fbca 	bl	8008e2c <USBD_CtlError>
              break;
 8008698:	e000      	b.n	800869c <USBD_StdEPReq+0x158>
              break;
 800869a:	bf00      	nop
          }
          break;
 800869c:	e0aa      	b.n	80087f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d002      	beq.n	80086ae <USBD_StdEPReq+0x16a>
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d032      	beq.n	8008712 <USBD_StdEPReq+0x1ce>
 80086ac:	e097      	b.n	80087de <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d007      	beq.n	80086c4 <USBD_StdEPReq+0x180>
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b80      	cmp	r3, #128	@ 0x80
 80086b8:	d004      	beq.n	80086c4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fbb5 	bl	8008e2c <USBD_CtlError>
                break;
 80086c2:	e091      	b.n	80087e8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	da0b      	bge.n	80086e4 <USBD_StdEPReq+0x1a0>
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	3310      	adds	r3, #16
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	4413      	add	r3, r2
 80086e0:	3304      	adds	r3, #4
 80086e2:	e00b      	b.n	80086fc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ea:	4613      	mov	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	4413      	add	r3, r2
 80086fa:	3304      	adds	r3, #4
 80086fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2200      	movs	r2, #0
 8008702:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2202      	movs	r2, #2
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fbf8 	bl	8008f00 <USBD_CtlSendData>
              break;
 8008710:	e06a      	b.n	80087e8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008716:	2b00      	cmp	r3, #0
 8008718:	da11      	bge.n	800873e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	f003 020f 	and.w	r2, r3, #15
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	4613      	mov	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	440b      	add	r3, r1
 800872c:	3318      	adds	r3, #24
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d117      	bne.n	8008764 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fb78 	bl	8008e2c <USBD_CtlError>
                  break;
 800873c:	e054      	b.n	80087e8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	f003 020f 	and.w	r2, r3, #15
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4613      	mov	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d104      	bne.n	8008764 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fb65 	bl	8008e2c <USBD_CtlError>
                  break;
 8008762:	e041      	b.n	80087e8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008768:	2b00      	cmp	r3, #0
 800876a:	da0b      	bge.n	8008784 <USBD_StdEPReq+0x240>
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	3310      	adds	r3, #16
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	4413      	add	r3, r2
 8008780:	3304      	adds	r3, #4
 8008782:	e00b      	b.n	800879c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	4413      	add	r3, r2
 800879a:	3304      	adds	r3, #4
 800879c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800879e:	7bbb      	ldrb	r3, [r7, #14]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <USBD_StdEPReq+0x266>
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	2b80      	cmp	r3, #128	@ 0x80
 80087a8:	d103      	bne.n	80087b2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	e00e      	b.n	80087d0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f003 fd66 	bl	800c288 <USBD_LL_IsStallEP>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2201      	movs	r2, #1
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	e002      	b.n	80087d0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2202      	movs	r2, #2
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fb92 	bl	8008f00 <USBD_CtlSendData>
              break;
 80087dc:	e004      	b.n	80087e8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fb23 	bl	8008e2c <USBD_CtlError>
              break;
 80087e6:	bf00      	nop
          }
          break;
 80087e8:	e004      	b.n	80087f4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fb1d 	bl	8008e2c <USBD_CtlError>
          break;
 80087f2:	bf00      	nop
      }
      break;
 80087f4:	e004      	b.n	8008800 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fb17 	bl	8008e2c <USBD_CtlError>
      break;
 80087fe:	bf00      	nop
  }

  return ret;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
	...

0800880c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	885b      	ldrh	r3, [r3, #2]
 8008826:	0a1b      	lsrs	r3, r3, #8
 8008828:	b29b      	uxth	r3, r3
 800882a:	3b01      	subs	r3, #1
 800882c:	2b06      	cmp	r3, #6
 800882e:	f200 8128 	bhi.w	8008a82 <USBD_GetDescriptor+0x276>
 8008832:	a201      	add	r2, pc, #4	@ (adr r2, 8008838 <USBD_GetDescriptor+0x2c>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	08008855 	.word	0x08008855
 800883c:	0800886d 	.word	0x0800886d
 8008840:	080088ad 	.word	0x080088ad
 8008844:	08008a83 	.word	0x08008a83
 8008848:	08008a83 	.word	0x08008a83
 800884c:	08008a23 	.word	0x08008a23
 8008850:	08008a4f 	.word	0x08008a4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	7c12      	ldrb	r2, [r2, #16]
 8008860:	f107 0108 	add.w	r1, r7, #8
 8008864:	4610      	mov	r0, r2
 8008866:	4798      	blx	r3
 8008868:	60f8      	str	r0, [r7, #12]
      break;
 800886a:	e112      	b.n	8008a92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	7c1b      	ldrb	r3, [r3, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10d      	bne.n	8008890 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800887a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887c:	f107 0208 	add.w	r2, r7, #8
 8008880:	4610      	mov	r0, r2
 8008882:	4798      	blx	r3
 8008884:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3301      	adds	r3, #1
 800888a:	2202      	movs	r2, #2
 800888c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800888e:	e100      	b.n	8008a92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008898:	f107 0208 	add.w	r2, r7, #8
 800889c:	4610      	mov	r0, r2
 800889e:	4798      	blx	r3
 80088a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3301      	adds	r3, #1
 80088a6:	2202      	movs	r2, #2
 80088a8:	701a      	strb	r2, [r3, #0]
      break;
 80088aa:	e0f2      	b.n	8008a92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	885b      	ldrh	r3, [r3, #2]
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b05      	cmp	r3, #5
 80088b4:	f200 80ac 	bhi.w	8008a10 <USBD_GetDescriptor+0x204>
 80088b8:	a201      	add	r2, pc, #4	@ (adr r2, 80088c0 <USBD_GetDescriptor+0xb4>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	080088d9 	.word	0x080088d9
 80088c4:	0800890d 	.word	0x0800890d
 80088c8:	08008941 	.word	0x08008941
 80088cc:	08008975 	.word	0x08008975
 80088d0:	080089a9 	.word	0x080089a9
 80088d4:	080089dd 	.word	0x080089dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00b      	beq.n	80088fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	7c12      	ldrb	r2, [r2, #16]
 80088f0:	f107 0108 	add.w	r1, r7, #8
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088fa:	e091      	b.n	8008a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fa94 	bl	8008e2c <USBD_CtlError>
            err++;
 8008904:	7afb      	ldrb	r3, [r7, #11]
 8008906:	3301      	adds	r3, #1
 8008908:	72fb      	strb	r3, [r7, #11]
          break;
 800890a:	e089      	b.n	8008a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00b      	beq.n	8008930 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	7c12      	ldrb	r2, [r2, #16]
 8008924:	f107 0108 	add.w	r1, r7, #8
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800892e:	e077      	b.n	8008a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fa7a 	bl	8008e2c <USBD_CtlError>
            err++;
 8008938:	7afb      	ldrb	r3, [r7, #11]
 800893a:	3301      	adds	r3, #1
 800893c:	72fb      	strb	r3, [r7, #11]
          break;
 800893e:	e06f      	b.n	8008a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00b      	beq.n	8008964 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	7c12      	ldrb	r2, [r2, #16]
 8008958:	f107 0108 	add.w	r1, r7, #8
 800895c:	4610      	mov	r0, r2
 800895e:	4798      	blx	r3
 8008960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008962:	e05d      	b.n	8008a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fa60 	bl	8008e2c <USBD_CtlError>
            err++;
 800896c:	7afb      	ldrb	r3, [r7, #11]
 800896e:	3301      	adds	r3, #1
 8008970:	72fb      	strb	r3, [r7, #11]
          break;
 8008972:	e055      	b.n	8008a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00b      	beq.n	8008998 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	7c12      	ldrb	r2, [r2, #16]
 800898c:	f107 0108 	add.w	r1, r7, #8
 8008990:	4610      	mov	r0, r2
 8008992:	4798      	blx	r3
 8008994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008996:	e043      	b.n	8008a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fa46 	bl	8008e2c <USBD_CtlError>
            err++;
 80089a0:	7afb      	ldrb	r3, [r7, #11]
 80089a2:	3301      	adds	r3, #1
 80089a4:	72fb      	strb	r3, [r7, #11]
          break;
 80089a6:	e03b      	b.n	8008a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	7c12      	ldrb	r2, [r2, #16]
 80089c0:	f107 0108 	add.w	r1, r7, #8
 80089c4:	4610      	mov	r0, r2
 80089c6:	4798      	blx	r3
 80089c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ca:	e029      	b.n	8008a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa2c 	bl	8008e2c <USBD_CtlError>
            err++;
 80089d4:	7afb      	ldrb	r3, [r7, #11]
 80089d6:	3301      	adds	r3, #1
 80089d8:	72fb      	strb	r3, [r7, #11]
          break;
 80089da:	e021      	b.n	8008a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	7c12      	ldrb	r2, [r2, #16]
 80089f4:	f107 0108 	add.w	r1, r7, #8
 80089f8:	4610      	mov	r0, r2
 80089fa:	4798      	blx	r3
 80089fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089fe:	e00f      	b.n	8008a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa12 	bl	8008e2c <USBD_CtlError>
            err++;
 8008a08:	7afb      	ldrb	r3, [r7, #11]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a0e:	e007      	b.n	8008a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa0a 	bl	8008e2c <USBD_CtlError>
          err++;
 8008a18:	7afb      	ldrb	r3, [r7, #11]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008a1e:	e038      	b.n	8008a92 <USBD_GetDescriptor+0x286>
 8008a20:	e037      	b.n	8008a92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	7c1b      	ldrb	r3, [r3, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d109      	bne.n	8008a3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a32:	f107 0208 	add.w	r2, r7, #8
 8008a36:	4610      	mov	r0, r2
 8008a38:	4798      	blx	r3
 8008a3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a3c:	e029      	b.n	8008a92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f9f3 	bl	8008e2c <USBD_CtlError>
        err++;
 8008a46:	7afb      	ldrb	r3, [r7, #11]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a4c:	e021      	b.n	8008a92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	7c1b      	ldrb	r3, [r3, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10d      	bne.n	8008a72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a5e:	f107 0208 	add.w	r2, r7, #8
 8008a62:	4610      	mov	r0, r2
 8008a64:	4798      	blx	r3
 8008a66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	2207      	movs	r2, #7
 8008a6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a70:	e00f      	b.n	8008a92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f9d9 	bl	8008e2c <USBD_CtlError>
        err++;
 8008a7a:	7afb      	ldrb	r3, [r7, #11]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a80:	e007      	b.n	8008a92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f9d1 	bl	8008e2c <USBD_CtlError>
      err++;
 8008a8a:	7afb      	ldrb	r3, [r7, #11]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a90:	bf00      	nop
  }

  if (err != 0U)
 8008a92:	7afb      	ldrb	r3, [r7, #11]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d11c      	bne.n	8008ad2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008a98:	893b      	ldrh	r3, [r7, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d011      	beq.n	8008ac2 <USBD_GetDescriptor+0x2b6>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	88db      	ldrh	r3, [r3, #6]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00d      	beq.n	8008ac2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	88da      	ldrh	r2, [r3, #6]
 8008aaa:	893b      	ldrh	r3, [r7, #8]
 8008aac:	4293      	cmp	r3, r2
 8008aae:	bf28      	it	cs
 8008ab0:	4613      	movcs	r3, r2
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ab6:	893b      	ldrh	r3, [r7, #8]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	68f9      	ldr	r1, [r7, #12]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fa1f 	bl	8008f00 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	88db      	ldrh	r3, [r3, #6]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d104      	bne.n	8008ad4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fa76 	bl	8008fbc <USBD_CtlSendStatus>
 8008ad0:	e000      	b.n	8008ad4 <USBD_GetDescriptor+0x2c8>
    return;
 8008ad2:	bf00      	nop
    }
  }
}
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop

08008adc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	889b      	ldrh	r3, [r3, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d130      	bne.n	8008b50 <USBD_SetAddress+0x74>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	88db      	ldrh	r3, [r3, #6]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d12c      	bne.n	8008b50 <USBD_SetAddress+0x74>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	885b      	ldrh	r3, [r3, #2]
 8008afa:	2b7f      	cmp	r3, #127	@ 0x7f
 8008afc:	d828      	bhi.n	8008b50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	885b      	ldrh	r3, [r3, #2]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d104      	bne.n	8008b1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f988 	bl	8008e2c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b1c:	e01d      	b.n	8008b5a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	7bfa      	ldrb	r2, [r7, #15]
 8008b22:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f003 fbd7 	bl	800c2de <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fa43 	bl	8008fbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d004      	beq.n	8008b46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b44:	e009      	b.n	8008b5a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4e:	e004      	b.n	8008b5a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f96a 	bl	8008e2c <USBD_CtlError>
  }
}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	885b      	ldrh	r3, [r3, #2]
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	4b41      	ldr	r3, [pc, #260]	@ (8008c7c <USBD_SetConfig+0x118>)
 8008b76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b78:	4b40      	ldr	r3, [pc, #256]	@ (8008c7c <USBD_SetConfig+0x118>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d904      	bls.n	8008b8a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f952 	bl	8008e2c <USBD_CtlError>
 8008b88:	e075      	b.n	8008c76 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d002      	beq.n	8008b9a <USBD_SetConfig+0x36>
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d023      	beq.n	8008be0 <USBD_SetConfig+0x7c>
 8008b98:	e062      	b.n	8008c60 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008b9a:	4b38      	ldr	r3, [pc, #224]	@ (8008c7c <USBD_SetConfig+0x118>)
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d01a      	beq.n	8008bd8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008ba2:	4b36      	ldr	r3, [pc, #216]	@ (8008c7c <USBD_SetConfig+0x118>)
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2203      	movs	r2, #3
 8008bb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008bb4:	4b31      	ldr	r3, [pc, #196]	@ (8008c7c <USBD_SetConfig+0x118>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff f9e7 	bl	8007f8e <USBD_SetClassConfig>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d104      	bne.n	8008bd0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f92f 	bl	8008e2c <USBD_CtlError>
            return;
 8008bce:	e052      	b.n	8008c76 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f9f3 	bl	8008fbc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008bd6:	e04e      	b.n	8008c76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f9ef 	bl	8008fbc <USBD_CtlSendStatus>
        break;
 8008bde:	e04a      	b.n	8008c76 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008be0:	4b26      	ldr	r3, [pc, #152]	@ (8008c7c <USBD_SetConfig+0x118>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d112      	bne.n	8008c0e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008bf0:	4b22      	ldr	r3, [pc, #136]	@ (8008c7c <USBD_SetConfig+0x118>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008bfa:	4b20      	ldr	r3, [pc, #128]	@ (8008c7c <USBD_SetConfig+0x118>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff f9e3 	bl	8007fcc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f9d8 	bl	8008fbc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c0c:	e033      	b.n	8008c76 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008c7c <USBD_SetConfig+0x118>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d01d      	beq.n	8008c58 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff f9d1 	bl	8007fcc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008c2a:	4b14      	ldr	r3, [pc, #80]	@ (8008c7c <USBD_SetConfig+0x118>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c34:	4b11      	ldr	r3, [pc, #68]	@ (8008c7c <USBD_SetConfig+0x118>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff f9a7 	bl	8007f8e <USBD_SetClassConfig>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d104      	bne.n	8008c50 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f8ef 	bl	8008e2c <USBD_CtlError>
            return;
 8008c4e:	e012      	b.n	8008c76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f9b3 	bl	8008fbc <USBD_CtlSendStatus>
        break;
 8008c56:	e00e      	b.n	8008c76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f9af 	bl	8008fbc <USBD_CtlSendStatus>
        break;
 8008c5e:	e00a      	b.n	8008c76 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f8e2 	bl	8008e2c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008c68:	4b04      	ldr	r3, [pc, #16]	@ (8008c7c <USBD_SetConfig+0x118>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff f9ac 	bl	8007fcc <USBD_ClrClassConfig>
        break;
 8008c74:	bf00      	nop
    }
  }
}
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	200002bc 	.word	0x200002bc

08008c80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	88db      	ldrh	r3, [r3, #6]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d004      	beq.n	8008c9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f8c9 	bl	8008e2c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c9a:	e022      	b.n	8008ce2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	dc02      	bgt.n	8008cac <USBD_GetConfig+0x2c>
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	dc03      	bgt.n	8008cb2 <USBD_GetConfig+0x32>
 8008caa:	e015      	b.n	8008cd8 <USBD_GetConfig+0x58>
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d00b      	beq.n	8008cc8 <USBD_GetConfig+0x48>
 8008cb0:	e012      	b.n	8008cd8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3308      	adds	r3, #8
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f91d 	bl	8008f00 <USBD_CtlSendData>
        break;
 8008cc6:	e00c      	b.n	8008ce2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3304      	adds	r3, #4
 8008ccc:	2201      	movs	r2, #1
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f915 	bl	8008f00 <USBD_CtlSendData>
        break;
 8008cd6:	e004      	b.n	8008ce2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f8a6 	bl	8008e2c <USBD_CtlError>
        break;
 8008ce0:	bf00      	nop
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d81e      	bhi.n	8008d3e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	88db      	ldrh	r3, [r3, #6]
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d004      	beq.n	8008d12 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f88e 	bl	8008e2c <USBD_CtlError>
        break;
 8008d10:	e01a      	b.n	8008d48 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f043 0202 	orr.w	r2, r3, #2
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	330c      	adds	r3, #12
 8008d32:	2202      	movs	r2, #2
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f8e2 	bl	8008f00 <USBD_CtlSendData>
      break;
 8008d3c:	e004      	b.n	8008d48 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f873 	bl	8008e2c <USBD_CtlError>
      break;
 8008d46:	bf00      	nop
  }
}
 8008d48:	bf00      	nop
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	885b      	ldrh	r3, [r3, #2]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d106      	bne.n	8008d70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f926 	bl	8008fbc <USBD_CtlSendStatus>
  }
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d80b      	bhi.n	8008da6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	885b      	ldrh	r3, [r3, #2]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d10c      	bne.n	8008db0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f90c 	bl	8008fbc <USBD_CtlSendStatus>
      }
      break;
 8008da4:	e004      	b.n	8008db0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f83f 	bl	8008e2c <USBD_CtlError>
      break;
 8008dae:	e000      	b.n	8008db2 <USBD_ClrFeature+0x3a>
      break;
 8008db0:	bf00      	nop
  }
}
 8008db2:	bf00      	nop
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781a      	ldrb	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	785a      	ldrb	r2, [r3, #1]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	3302      	adds	r3, #2
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	3303      	adds	r3, #3
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	021b      	lsls	r3, r3, #8
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	4413      	add	r3, r2
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	3304      	adds	r3, #4
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	3305      	adds	r3, #5
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	021b      	lsls	r3, r3, #8
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	4413      	add	r3, r2
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	3306      	adds	r3, #6
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	3307      	adds	r3, #7
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	4413      	add	r3, r2
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	80da      	strh	r2, [r3, #6]

}
 8008e22:	bf00      	nop
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bc80      	pop	{r7}
 8008e2a:	4770      	bx	lr

08008e2c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008e36:	2180      	movs	r1, #128	@ 0x80
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f003 f9e7 	bl	800c20c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008e3e:	2100      	movs	r1, #0
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f003 f9e3 	bl	800c20c <USBD_LL_StallEP>
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b086      	sub	sp, #24
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	60b9      	str	r1, [r7, #8]
 8008e58:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d032      	beq.n	8008eca <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f000 f834 	bl	8008ed2 <USBD_GetLen>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	75fa      	strb	r2, [r7, #23]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4413      	add	r3, r2
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	7812      	ldrb	r2, [r2, #0]
 8008e88:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	75fa      	strb	r2, [r7, #23]
 8008e90:	461a      	mov	r2, r3
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	4413      	add	r3, r2
 8008e96:	2203      	movs	r2, #3
 8008e98:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e9a:	e012      	b.n	8008ec2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	60fa      	str	r2, [r7, #12]
 8008ea2:	7dfa      	ldrb	r2, [r7, #23]
 8008ea4:	1c51      	adds	r1, r2, #1
 8008ea6:	75f9      	strb	r1, [r7, #23]
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	440a      	add	r2, r1
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	75fa      	strb	r2, [r7, #23]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e8      	bne.n	8008e9c <USBD_GetString+0x4e>
    }
  }
}
 8008eca:	bf00      	nop
 8008ecc:	3718      	adds	r7, #24
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b085      	sub	sp, #20
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008ede:	e005      	b.n	8008eec <USBD_GetLen+0x1a>
  {
    len++;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1f5      	bne.n	8008ee0 <USBD_GetLen+0xe>
  }

  return len;
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bc80      	pop	{r7}
 8008efe:	4770      	bx	lr

08008f00 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2202      	movs	r2, #2
 8008f12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008f16:	88fa      	ldrh	r2, [r7, #6]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f1c:	88fa      	ldrh	r2, [r7, #6]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f22:	88fb      	ldrh	r3, [r7, #6]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	2100      	movs	r1, #0
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f003 f9f7 	bl	800c31c <USBD_LL_Transmit>

  return USBD_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	4613      	mov	r3, r2
 8008f44:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f003 f9e5 	bl	800c31c <USBD_LL_Transmit>

  return USBD_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	4613      	mov	r3, r2
 8008f68:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2203      	movs	r2, #3
 8008f6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008f72:	88fa      	ldrh	r2, [r7, #6]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008f7a:	88fa      	ldrh	r2, [r7, #6]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f82:	88fb      	ldrh	r3, [r7, #6]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	2100      	movs	r1, #0
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f003 f9ea 	bl	800c362 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fa6:	88fb      	ldrh	r3, [r7, #6]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	2100      	movs	r1, #0
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f003 f9d8 	bl	800c362 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2204      	movs	r2, #4
 8008fc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fcc:	2300      	movs	r3, #0
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f003 f9a2 	bl	800c31c <USBD_LL_Transmit>

  return USBD_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2205      	movs	r2, #5
 8008fee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f003 f9b2 	bl	800c362 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <__NVIC_SetPriority>:
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	6039      	str	r1, [r7, #0]
 8009012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009018:	2b00      	cmp	r3, #0
 800901a:	db0a      	blt.n	8009032 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	b2da      	uxtb	r2, r3
 8009020:	490c      	ldr	r1, [pc, #48]	@ (8009054 <__NVIC_SetPriority+0x4c>)
 8009022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009026:	0112      	lsls	r2, r2, #4
 8009028:	b2d2      	uxtb	r2, r2
 800902a:	440b      	add	r3, r1
 800902c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009030:	e00a      	b.n	8009048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	b2da      	uxtb	r2, r3
 8009036:	4908      	ldr	r1, [pc, #32]	@ (8009058 <__NVIC_SetPriority+0x50>)
 8009038:	79fb      	ldrb	r3, [r7, #7]
 800903a:	f003 030f 	and.w	r3, r3, #15
 800903e:	3b04      	subs	r3, #4
 8009040:	0112      	lsls	r2, r2, #4
 8009042:	b2d2      	uxtb	r2, r2
 8009044:	440b      	add	r3, r1
 8009046:	761a      	strb	r2, [r3, #24]
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	bc80      	pop	{r7}
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	e000e100 	.word	0xe000e100
 8009058:	e000ed00 	.word	0xe000ed00

0800905c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800905c:	b580      	push	{r7, lr}
 800905e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009060:	4b05      	ldr	r3, [pc, #20]	@ (8009078 <SysTick_Handler+0x1c>)
 8009062:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009064:	f001 fd38 	bl	800aad8 <xTaskGetSchedulerState>
 8009068:	4603      	mov	r3, r0
 800906a:	2b01      	cmp	r3, #1
 800906c:	d001      	beq.n	8009072 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800906e:	f002 fadb 	bl	800b628 <xPortSysTickHandler>
  }
}
 8009072:	bf00      	nop
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	e000e010 	.word	0xe000e010

0800907c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009080:	2100      	movs	r1, #0
 8009082:	f06f 0004 	mvn.w	r0, #4
 8009086:	f7ff ffbf 	bl	8009008 <__NVIC_SetPriority>
#endif
}
 800908a:	bf00      	nop
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009096:	f3ef 8305 	mrs	r3, IPSR
 800909a:	603b      	str	r3, [r7, #0]
  return(result);
 800909c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80090a2:	f06f 0305 	mvn.w	r3, #5
 80090a6:	607b      	str	r3, [r7, #4]
 80090a8:	e00c      	b.n	80090c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80090aa:	4b09      	ldr	r3, [pc, #36]	@ (80090d0 <osKernelInitialize+0x40>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d105      	bne.n	80090be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80090b2:	4b07      	ldr	r3, [pc, #28]	@ (80090d0 <osKernelInitialize+0x40>)
 80090b4:	2201      	movs	r2, #1
 80090b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	607b      	str	r3, [r7, #4]
 80090bc:	e002      	b.n	80090c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80090be:	f04f 33ff 	mov.w	r3, #4294967295
 80090c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80090c4:	687b      	ldr	r3, [r7, #4]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr
 80090d0:	200002c0 	.word	0x200002c0

080090d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090da:	f3ef 8305 	mrs	r3, IPSR
 80090de:	603b      	str	r3, [r7, #0]
  return(result);
 80090e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80090e6:	f06f 0305 	mvn.w	r3, #5
 80090ea:	607b      	str	r3, [r7, #4]
 80090ec:	e010      	b.n	8009110 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80090ee:	4b0b      	ldr	r3, [pc, #44]	@ (800911c <osKernelStart+0x48>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d109      	bne.n	800910a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80090f6:	f7ff ffc1 	bl	800907c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80090fa:	4b08      	ldr	r3, [pc, #32]	@ (800911c <osKernelStart+0x48>)
 80090fc:	2202      	movs	r2, #2
 80090fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009100:	f001 f88a 	bl	800a218 <vTaskStartScheduler>
      stat = osOK;
 8009104:	2300      	movs	r3, #0
 8009106:	607b      	str	r3, [r7, #4]
 8009108:	e002      	b.n	8009110 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800910a:	f04f 33ff 	mov.w	r3, #4294967295
 800910e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009110:	687b      	ldr	r3, [r7, #4]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	200002c0 	.word	0x200002c0

08009120 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009120:	b580      	push	{r7, lr}
 8009122:	b08e      	sub	sp, #56	@ 0x38
 8009124:	af04      	add	r7, sp, #16
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800912c:	2300      	movs	r3, #0
 800912e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009130:	f3ef 8305 	mrs	r3, IPSR
 8009134:	617b      	str	r3, [r7, #20]
  return(result);
 8009136:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009138:	2b00      	cmp	r3, #0
 800913a:	d17e      	bne.n	800923a <osThreadNew+0x11a>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d07b      	beq.n	800923a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009142:	2380      	movs	r3, #128	@ 0x80
 8009144:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009146:	2318      	movs	r3, #24
 8009148:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800914a:	2300      	movs	r3, #0
 800914c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800914e:	f04f 33ff 	mov.w	r3, #4294967295
 8009152:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d045      	beq.n	80091e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <osThreadNew+0x48>
        name = attr->name;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d008      	beq.n	800918e <osThreadNew+0x6e>
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	2b38      	cmp	r3, #56	@ 0x38
 8009180:	d805      	bhi.n	800918e <osThreadNew+0x6e>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <osThreadNew+0x72>
        return (NULL);
 800918e:	2300      	movs	r3, #0
 8009190:	e054      	b.n	800923c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	089b      	lsrs	r3, r3, #2
 80091a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00e      	beq.n	80091c8 <osThreadNew+0xa8>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	2ba7      	cmp	r3, #167	@ 0xa7
 80091b0:	d90a      	bls.n	80091c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d006      	beq.n	80091c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <osThreadNew+0xa8>
        mem = 1;
 80091c2:	2301      	movs	r3, #1
 80091c4:	61bb      	str	r3, [r7, #24]
 80091c6:	e010      	b.n	80091ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10c      	bne.n	80091ea <osThreadNew+0xca>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d108      	bne.n	80091ea <osThreadNew+0xca>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d104      	bne.n	80091ea <osThreadNew+0xca>
          mem = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	61bb      	str	r3, [r7, #24]
 80091e4:	e001      	b.n	80091ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d110      	bne.n	8009212 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80091f8:	9202      	str	r2, [sp, #8]
 80091fa:	9301      	str	r3, [sp, #4]
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6a3a      	ldr	r2, [r7, #32]
 8009204:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 fe12 	bl	8009e30 <xTaskCreateStatic>
 800920c:	4603      	mov	r3, r0
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	e013      	b.n	800923a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d110      	bne.n	800923a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	b29a      	uxth	r2, r3
 800921c:	f107 0310 	add.w	r3, r7, #16
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 fe60 	bl	8009ef0 <xTaskCreate>
 8009230:	4603      	mov	r3, r0
 8009232:	2b01      	cmp	r3, #1
 8009234:	d001      	beq.n	800923a <osThreadNew+0x11a>
            hTask = NULL;
 8009236:	2300      	movs	r3, #0
 8009238:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800923a:	693b      	ldr	r3, [r7, #16]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3728      	adds	r7, #40	@ 0x28
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800924c:	f3ef 8305 	mrs	r3, IPSR
 8009250:	60bb      	str	r3, [r7, #8]
  return(result);
 8009252:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <osDelay+0x1c>
    stat = osErrorISR;
 8009258:	f06f 0305 	mvn.w	r3, #5
 800925c:	60fb      	str	r3, [r7, #12]
 800925e:	e007      	b.n	8009270 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009260:	2300      	movs	r3, #0
 8009262:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <osDelay+0x2c>
      vTaskDelay(ticks);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 ff9e 	bl	800a1ac <vTaskDelay>
    }
  }

  return (stat);
 8009270:	68fb      	ldr	r3, [r7, #12]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4a06      	ldr	r2, [pc, #24]	@ (80092a4 <vApplicationGetIdleTaskMemory+0x28>)
 800928c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	4a05      	ldr	r2, [pc, #20]	@ (80092a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009292:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2280      	movs	r2, #128	@ 0x80
 8009298:	601a      	str	r2, [r3, #0]
}
 800929a:	bf00      	nop
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	bc80      	pop	{r7}
 80092a2:	4770      	bx	lr
 80092a4:	200002c4 	.word	0x200002c4
 80092a8:	2000036c 	.word	0x2000036c

080092ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	4a07      	ldr	r2, [pc, #28]	@ (80092d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80092bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	4a06      	ldr	r2, [pc, #24]	@ (80092dc <vApplicationGetTimerTaskMemory+0x30>)
 80092c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80092ca:	601a      	str	r2, [r3, #0]
}
 80092cc:	bf00      	nop
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bc80      	pop	{r7}
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	2000056c 	.word	0x2000056c
 80092dc:	20000614 	.word	0x20000614

080092e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f103 0208 	add.w	r2, r3, #8
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f04f 32ff 	mov.w	r2, #4294967295
 80092f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f103 0208 	add.w	r2, r3, #8
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f103 0208 	add.w	r2, r3, #8
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	bc80      	pop	{r7}
 800931c:	4770      	bx	lr

0800931e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800931e:	b480      	push	{r7}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr

08009336 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009336:	b480      	push	{r7}
 8009338:	b085      	sub	sp, #20
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	601a      	str	r2, [r3, #0]
}
 8009372:	bf00      	nop
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	bc80      	pop	{r7}
 800937a:	4770      	bx	lr

0800937c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009392:	d103      	bne.n	800939c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	60fb      	str	r3, [r7, #12]
 800939a:	e00c      	b.n	80093b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	3308      	adds	r3, #8
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	e002      	b.n	80093aa <vListInsert+0x2e>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d2f6      	bcs.n	80093a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	601a      	str	r2, [r3, #0]
}
 80093e2:	bf00      	nop
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bc80      	pop	{r7}
 80093ea:	4770      	bx	lr

080093ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	6892      	ldr	r2, [r2, #8]
 8009402:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6852      	ldr	r2, [r2, #4]
 800940c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	429a      	cmp	r2, r3
 8009416:	d103      	bne.n	8009420 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	1e5a      	subs	r2, r3, #1
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	bc80      	pop	{r7}
 800943c:	4770      	bx	lr
	...

08009440 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10b      	bne.n	800946c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009466:	bf00      	nop
 8009468:	bf00      	nop
 800946a:	e7fd      	b.n	8009468 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800946c:	f002 f85e 	bl	800b52c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009478:	68f9      	ldr	r1, [r7, #12]
 800947a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800947c:	fb01 f303 	mul.w	r3, r1, r3
 8009480:	441a      	add	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800949c:	3b01      	subs	r3, #1
 800949e:	68f9      	ldr	r1, [r7, #12]
 80094a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80094a2:	fb01 f303 	mul.w	r3, r1, r3
 80094a6:	441a      	add	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	22ff      	movs	r2, #255	@ 0xff
 80094b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	22ff      	movs	r2, #255	@ 0xff
 80094b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d114      	bne.n	80094ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d01a      	beq.n	8009500 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3310      	adds	r3, #16
 80094ce:	4618      	mov	r0, r3
 80094d0:	f001 f93c 	bl	800a74c <xTaskRemoveFromEventList>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d012      	beq.n	8009500 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80094da:	4b0d      	ldr	r3, [pc, #52]	@ (8009510 <xQueueGenericReset+0xd0>)
 80094dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094e0:	601a      	str	r2, [r3, #0]
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	e009      	b.n	8009500 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3310      	adds	r3, #16
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7ff fef5 	bl	80092e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3324      	adds	r3, #36	@ 0x24
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7ff fef0 	bl	80092e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009500:	f002 f844 	bl	800b58c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009504:	2301      	movs	r3, #1
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	e000ed04 	.word	0xe000ed04

08009514 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08e      	sub	sp, #56	@ 0x38
 8009518:	af02      	add	r7, sp, #8
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10b      	bne.n	8009540 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800953a:	bf00      	nop
 800953c:	bf00      	nop
 800953e:	e7fd      	b.n	800953c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10b      	bne.n	800955e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009558:	bf00      	nop
 800955a:	bf00      	nop
 800955c:	e7fd      	b.n	800955a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d002      	beq.n	800956a <xQueueGenericCreateStatic+0x56>
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <xQueueGenericCreateStatic+0x5a>
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <xQueueGenericCreateStatic+0x5c>
 800956e:	2300      	movs	r3, #0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10b      	bne.n	800958c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	623b      	str	r3, [r7, #32]
}
 8009586:	bf00      	nop
 8009588:	bf00      	nop
 800958a:	e7fd      	b.n	8009588 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <xQueueGenericCreateStatic+0x84>
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d101      	bne.n	800959c <xQueueGenericCreateStatic+0x88>
 8009598:	2301      	movs	r3, #1
 800959a:	e000      	b.n	800959e <xQueueGenericCreateStatic+0x8a>
 800959c:	2300      	movs	r3, #0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	61fb      	str	r3, [r7, #28]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095ba:	2350      	movs	r3, #80	@ 0x50
 80095bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2b50      	cmp	r3, #80	@ 0x50
 80095c2:	d00b      	beq.n	80095dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80095c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	61bb      	str	r3, [r7, #24]
}
 80095d6:	bf00      	nop
 80095d8:	bf00      	nop
 80095da:	e7fd      	b.n	80095d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80095e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00d      	beq.n	8009604 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80095f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	68b9      	ldr	r1, [r7, #8]
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 f805 	bl	800960e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009606:	4618      	mov	r0, r3
 8009608:	3730      	adds	r7, #48	@ 0x30
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b084      	sub	sp, #16
 8009612:	af00      	add	r7, sp, #0
 8009614:	60f8      	str	r0, [r7, #12]
 8009616:	60b9      	str	r1, [r7, #8]
 8009618:	607a      	str	r2, [r7, #4]
 800961a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d103      	bne.n	800962a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	69ba      	ldr	r2, [r7, #24]
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	e002      	b.n	8009630 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800963c:	2101      	movs	r1, #1
 800963e:	69b8      	ldr	r0, [r7, #24]
 8009640:	f7ff fefe 	bl	8009440 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	78fa      	ldrb	r2, [r7, #3]
 8009648:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b08e      	sub	sp, #56	@ 0x38
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009662:	2300      	movs	r3, #0
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10b      	bne.n	8009688 <xQueueGenericSend+0x34>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009682:	bf00      	nop
 8009684:	bf00      	nop
 8009686:	e7fd      	b.n	8009684 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d103      	bne.n	8009696 <xQueueGenericSend+0x42>
 800968e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <xQueueGenericSend+0x46>
 8009696:	2301      	movs	r3, #1
 8009698:	e000      	b.n	800969c <xQueueGenericSend+0x48>
 800969a:	2300      	movs	r3, #0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10b      	bne.n	80096b8 <xQueueGenericSend+0x64>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
 80096b6:	e7fd      	b.n	80096b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d103      	bne.n	80096c6 <xQueueGenericSend+0x72>
 80096be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d101      	bne.n	80096ca <xQueueGenericSend+0x76>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e000      	b.n	80096cc <xQueueGenericSend+0x78>
 80096ca:	2300      	movs	r3, #0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10b      	bne.n	80096e8 <xQueueGenericSend+0x94>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	623b      	str	r3, [r7, #32]
}
 80096e2:	bf00      	nop
 80096e4:	bf00      	nop
 80096e6:	e7fd      	b.n	80096e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096e8:	f001 f9f6 	bl	800aad8 <xTaskGetSchedulerState>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d102      	bne.n	80096f8 <xQueueGenericSend+0xa4>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d101      	bne.n	80096fc <xQueueGenericSend+0xa8>
 80096f8:	2301      	movs	r3, #1
 80096fa:	e000      	b.n	80096fe <xQueueGenericSend+0xaa>
 80096fc:	2300      	movs	r3, #0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10b      	bne.n	800971a <xQueueGenericSend+0xc6>
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	61fb      	str	r3, [r7, #28]
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop
 8009718:	e7fd      	b.n	8009716 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800971a:	f001 ff07 	bl	800b52c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800971e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009726:	429a      	cmp	r2, r3
 8009728:	d302      	bcc.n	8009730 <xQueueGenericSend+0xdc>
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2b02      	cmp	r3, #2
 800972e:	d129      	bne.n	8009784 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	68b9      	ldr	r1, [r7, #8]
 8009734:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009736:	f000 fa0f 	bl	8009b58 <prvCopyDataToQueue>
 800973a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800973c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009740:	2b00      	cmp	r3, #0
 8009742:	d010      	beq.n	8009766 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009746:	3324      	adds	r3, #36	@ 0x24
 8009748:	4618      	mov	r0, r3
 800974a:	f000 ffff 	bl	800a74c <xTaskRemoveFromEventList>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d013      	beq.n	800977c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009754:	4b3f      	ldr	r3, [pc, #252]	@ (8009854 <xQueueGenericSend+0x200>)
 8009756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	e00a      	b.n	800977c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009768:	2b00      	cmp	r3, #0
 800976a:	d007      	beq.n	800977c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800976c:	4b39      	ldr	r3, [pc, #228]	@ (8009854 <xQueueGenericSend+0x200>)
 800976e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800977c:	f001 ff06 	bl	800b58c <vPortExitCritical>
				return pdPASS;
 8009780:	2301      	movs	r3, #1
 8009782:	e063      	b.n	800984c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d103      	bne.n	8009792 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800978a:	f001 feff 	bl	800b58c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800978e:	2300      	movs	r3, #0
 8009790:	e05c      	b.n	800984c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009794:	2b00      	cmp	r3, #0
 8009796:	d106      	bne.n	80097a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009798:	f107 0314 	add.w	r3, r7, #20
 800979c:	4618      	mov	r0, r3
 800979e:	f001 f839 	bl	800a814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097a2:	2301      	movs	r3, #1
 80097a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097a6:	f001 fef1 	bl	800b58c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097aa:	f000 fda5 	bl	800a2f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097ae:	f001 febd 	bl	800b52c <vPortEnterCritical>
 80097b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097b8:	b25b      	sxtb	r3, r3
 80097ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097be:	d103      	bne.n	80097c8 <xQueueGenericSend+0x174>
 80097c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097ce:	b25b      	sxtb	r3, r3
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d103      	bne.n	80097de <xQueueGenericSend+0x18a>
 80097d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097de:	f001 fed5 	bl	800b58c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097e2:	1d3a      	adds	r2, r7, #4
 80097e4:	f107 0314 	add.w	r3, r7, #20
 80097e8:	4611      	mov	r1, r2
 80097ea:	4618      	mov	r0, r3
 80097ec:	f001 f828 	bl	800a840 <xTaskCheckForTimeOut>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d124      	bne.n	8009840 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80097f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097f8:	f000 faa6 	bl	8009d48 <prvIsQueueFull>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d018      	beq.n	8009834 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009804:	3310      	adds	r3, #16
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	4611      	mov	r1, r2
 800980a:	4618      	mov	r0, r3
 800980c:	f000 ff4c 	bl	800a6a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009810:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009812:	f000 fa31 	bl	8009c78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009816:	f000 fd7d 	bl	800a314 <xTaskResumeAll>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	f47f af7c 	bne.w	800971a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009822:	4b0c      	ldr	r3, [pc, #48]	@ (8009854 <xQueueGenericSend+0x200>)
 8009824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	e772      	b.n	800971a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009836:	f000 fa1f 	bl	8009c78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800983a:	f000 fd6b 	bl	800a314 <xTaskResumeAll>
 800983e:	e76c      	b.n	800971a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009842:	f000 fa19 	bl	8009c78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009846:	f000 fd65 	bl	800a314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800984a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800984c:	4618      	mov	r0, r3
 800984e:	3738      	adds	r7, #56	@ 0x38
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	e000ed04 	.word	0xe000ed04

08009858 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b090      	sub	sp, #64	@ 0x40
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800986a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10b      	bne.n	8009888 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009882:	bf00      	nop
 8009884:	bf00      	nop
 8009886:	e7fd      	b.n	8009884 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d103      	bne.n	8009896 <xQueueGenericSendFromISR+0x3e>
 800988e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <xQueueGenericSendFromISR+0x42>
 8009896:	2301      	movs	r3, #1
 8009898:	e000      	b.n	800989c <xQueueGenericSendFromISR+0x44>
 800989a:	2300      	movs	r3, #0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10b      	bne.n	80098b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80098b2:	bf00      	nop
 80098b4:	bf00      	nop
 80098b6:	e7fd      	b.n	80098b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d103      	bne.n	80098c6 <xQueueGenericSendFromISR+0x6e>
 80098be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d101      	bne.n	80098ca <xQueueGenericSendFromISR+0x72>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e000      	b.n	80098cc <xQueueGenericSendFromISR+0x74>
 80098ca:	2300      	movs	r3, #0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10b      	bne.n	80098e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	623b      	str	r3, [r7, #32]
}
 80098e2:	bf00      	nop
 80098e4:	bf00      	nop
 80098e6:	e7fd      	b.n	80098e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098e8:	f001 fee2 	bl	800b6b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80098ec:	f3ef 8211 	mrs	r2, BASEPRI
 80098f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	61fa      	str	r2, [r7, #28]
 8009902:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009904:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009906:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009910:	429a      	cmp	r2, r3
 8009912:	d302      	bcc.n	800991a <xQueueGenericSendFromISR+0xc2>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b02      	cmp	r3, #2
 8009918:	d12f      	bne.n	800997a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800991a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009920:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009928:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	68b9      	ldr	r1, [r7, #8]
 800992e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009930:	f000 f912 	bl	8009b58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009934:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993c:	d112      	bne.n	8009964 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800993e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009942:	2b00      	cmp	r3, #0
 8009944:	d016      	beq.n	8009974 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009948:	3324      	adds	r3, #36	@ 0x24
 800994a:	4618      	mov	r0, r3
 800994c:	f000 fefe 	bl	800a74c <xTaskRemoveFromEventList>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00e      	beq.n	8009974 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00b      	beq.n	8009974 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	e007      	b.n	8009974 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009964:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009968:	3301      	adds	r3, #1
 800996a:	b2db      	uxtb	r3, r3
 800996c:	b25a      	sxtb	r2, r3
 800996e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009974:	2301      	movs	r3, #1
 8009976:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009978:	e001      	b.n	800997e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800997a:	2300      	movs	r3, #0
 800997c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800997e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009980:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009988:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800998a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800998c:	4618      	mov	r0, r3
 800998e:	3740      	adds	r7, #64	@ 0x40
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08c      	sub	sp, #48	@ 0x30
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80099a0:	2300      	movs	r3, #0
 80099a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80099a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10b      	bne.n	80099c6 <xQueueReceive+0x32>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	623b      	str	r3, [r7, #32]
}
 80099c0:	bf00      	nop
 80099c2:	bf00      	nop
 80099c4:	e7fd      	b.n	80099c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d103      	bne.n	80099d4 <xQueueReceive+0x40>
 80099cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d101      	bne.n	80099d8 <xQueueReceive+0x44>
 80099d4:	2301      	movs	r3, #1
 80099d6:	e000      	b.n	80099da <xQueueReceive+0x46>
 80099d8:	2300      	movs	r3, #0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10b      	bne.n	80099f6 <xQueueReceive+0x62>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	61fb      	str	r3, [r7, #28]
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	e7fd      	b.n	80099f2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099f6:	f001 f86f 	bl	800aad8 <xTaskGetSchedulerState>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d102      	bne.n	8009a06 <xQueueReceive+0x72>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <xQueueReceive+0x76>
 8009a06:	2301      	movs	r3, #1
 8009a08:	e000      	b.n	8009a0c <xQueueReceive+0x78>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10b      	bne.n	8009a28 <xQueueReceive+0x94>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	61bb      	str	r3, [r7, #24]
}
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	e7fd      	b.n	8009a24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a28:	f001 fd80 	bl	800b52c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d01f      	beq.n	8009a78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a3c:	f000 f8f6 	bl	8009c2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a42:	1e5a      	subs	r2, r3, #1
 8009a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00f      	beq.n	8009a70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a52:	3310      	adds	r3, #16
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 fe79 	bl	800a74c <xTaskRemoveFromEventList>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d007      	beq.n	8009a70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a60:	4b3c      	ldr	r3, [pc, #240]	@ (8009b54 <xQueueReceive+0x1c0>)
 8009a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a70:	f001 fd8c 	bl	800b58c <vPortExitCritical>
				return pdPASS;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e069      	b.n	8009b4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d103      	bne.n	8009a86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a7e:	f001 fd85 	bl	800b58c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a82:	2300      	movs	r3, #0
 8009a84:	e062      	b.n	8009b4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d106      	bne.n	8009a9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a8c:	f107 0310 	add.w	r3, r7, #16
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 febf 	bl	800a814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a96:	2301      	movs	r3, #1
 8009a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a9a:	f001 fd77 	bl	800b58c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a9e:	f000 fc2b 	bl	800a2f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009aa2:	f001 fd43 	bl	800b52c <vPortEnterCritical>
 8009aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009aac:	b25b      	sxtb	r3, r3
 8009aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab2:	d103      	bne.n	8009abc <xQueueReceive+0x128>
 8009ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009abe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ac2:	b25b      	sxtb	r3, r3
 8009ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac8:	d103      	bne.n	8009ad2 <xQueueReceive+0x13e>
 8009aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ad2:	f001 fd5b 	bl	800b58c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ad6:	1d3a      	adds	r2, r7, #4
 8009ad8:	f107 0310 	add.w	r3, r7, #16
 8009adc:	4611      	mov	r1, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 feae 	bl	800a840 <xTaskCheckForTimeOut>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d123      	bne.n	8009b32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009aec:	f000 f916 	bl	8009d1c <prvIsQueueEmpty>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d017      	beq.n	8009b26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af8:	3324      	adds	r3, #36	@ 0x24
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	4611      	mov	r1, r2
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 fdd2 	bl	800a6a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b06:	f000 f8b7 	bl	8009c78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b0a:	f000 fc03 	bl	800a314 <xTaskResumeAll>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d189      	bne.n	8009a28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009b14:	4b0f      	ldr	r3, [pc, #60]	@ (8009b54 <xQueueReceive+0x1c0>)
 8009b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	e780      	b.n	8009a28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b28:	f000 f8a6 	bl	8009c78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b2c:	f000 fbf2 	bl	800a314 <xTaskResumeAll>
 8009b30:	e77a      	b.n	8009a28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b34:	f000 f8a0 	bl	8009c78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b38:	f000 fbec 	bl	800a314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b3e:	f000 f8ed 	bl	8009d1c <prvIsQueueEmpty>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f43f af6f 	beq.w	8009a28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3730      	adds	r7, #48	@ 0x30
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	e000ed04 	.word	0xe000ed04

08009b58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b64:	2300      	movs	r3, #0
 8009b66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10d      	bne.n	8009b92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d14d      	bne.n	8009c1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 ffc6 	bl	800ab14 <xTaskPriorityDisinherit>
 8009b88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	609a      	str	r2, [r3, #8]
 8009b90:	e043      	b.n	8009c1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d119      	bne.n	8009bcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6858      	ldr	r0, [r3, #4]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	68b9      	ldr	r1, [r7, #8]
 8009ba4:	f002 ff3b 	bl	800ca1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bb0:	441a      	add	r2, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d32b      	bcc.n	8009c1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	605a      	str	r2, [r3, #4]
 8009bca:	e026      	b.n	8009c1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	68d8      	ldr	r0, [r3, #12]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	68b9      	ldr	r1, [r7, #8]
 8009bd8:	f002 ff21 	bl	800ca1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	68da      	ldr	r2, [r3, #12]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009be4:	425b      	negs	r3, r3
 8009be6:	441a      	add	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	68da      	ldr	r2, [r3, #12]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d207      	bcs.n	8009c08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	689a      	ldr	r2, [r3, #8]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c00:	425b      	negs	r3, r3
 8009c02:	441a      	add	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d105      	bne.n	8009c1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	3b01      	subs	r3, #1
 8009c18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	1c5a      	adds	r2, r3, #1
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009c22:	697b      	ldr	r3, [r7, #20]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3718      	adds	r7, #24
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d018      	beq.n	8009c70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68da      	ldr	r2, [r3, #12]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c46:	441a      	add	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68da      	ldr	r2, [r3, #12]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d303      	bcc.n	8009c60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68d9      	ldr	r1, [r3, #12]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c68:	461a      	mov	r2, r3
 8009c6a:	6838      	ldr	r0, [r7, #0]
 8009c6c:	f002 fed7 	bl	800ca1e <memcpy>
	}
}
 8009c70:	bf00      	nop
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c80:	f001 fc54 	bl	800b52c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c8c:	e011      	b.n	8009cb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d012      	beq.n	8009cbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	3324      	adds	r3, #36	@ 0x24
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fd56 	bl	800a74c <xTaskRemoveFromEventList>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ca6:	f000 fe2f 	bl	800a908 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	dce9      	bgt.n	8009c8e <prvUnlockQueue+0x16>
 8009cba:	e000      	b.n	8009cbe <prvUnlockQueue+0x46>
					break;
 8009cbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	22ff      	movs	r2, #255	@ 0xff
 8009cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009cc6:	f001 fc61 	bl	800b58c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009cca:	f001 fc2f 	bl	800b52c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009cd6:	e011      	b.n	8009cfc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d012      	beq.n	8009d06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	3310      	adds	r3, #16
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 fd31 	bl	800a74c <xTaskRemoveFromEventList>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009cf0:	f000 fe0a 	bl	800a908 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	dce9      	bgt.n	8009cd8 <prvUnlockQueue+0x60>
 8009d04:	e000      	b.n	8009d08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	22ff      	movs	r2, #255	@ 0xff
 8009d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009d10:	f001 fc3c 	bl	800b58c <vPortExitCritical>
}
 8009d14:	bf00      	nop
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d24:	f001 fc02 	bl	800b52c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d102      	bne.n	8009d36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d30:	2301      	movs	r3, #1
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	e001      	b.n	8009d3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d36:	2300      	movs	r3, #0
 8009d38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d3a:	f001 fc27 	bl	800b58c <vPortExitCritical>

	return xReturn;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d50:	f001 fbec 	bl	800b52c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d102      	bne.n	8009d66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009d60:	2301      	movs	r3, #1
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	e001      	b.n	8009d6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009d66:	2300      	movs	r3, #0
 8009d68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d6a:	f001 fc0f 	bl	800b58c <vPortExitCritical>

	return xReturn;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d82:	2300      	movs	r3, #0
 8009d84:	60fb      	str	r3, [r7, #12]
 8009d86:	e014      	b.n	8009db2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d88:	4a0e      	ldr	r2, [pc, #56]	@ (8009dc4 <vQueueAddToRegistry+0x4c>)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10b      	bne.n	8009dac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d94:	490b      	ldr	r1, [pc, #44]	@ (8009dc4 <vQueueAddToRegistry+0x4c>)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	683a      	ldr	r2, [r7, #0]
 8009d9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d9e:	4a09      	ldr	r2, [pc, #36]	@ (8009dc4 <vQueueAddToRegistry+0x4c>)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	00db      	lsls	r3, r3, #3
 8009da4:	4413      	add	r3, r2
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009daa:	e006      	b.n	8009dba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3301      	adds	r3, #1
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2b07      	cmp	r3, #7
 8009db6:	d9e7      	bls.n	8009d88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009db8:	bf00      	nop
 8009dba:	bf00      	nop
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bc80      	pop	{r7}
 8009dc2:	4770      	bx	lr
 8009dc4:	20000a14 	.word	0x20000a14

08009dc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009dd8:	f001 fba8 	bl	800b52c <vPortEnterCritical>
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009de2:	b25b      	sxtb	r3, r3
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de8:	d103      	bne.n	8009df2 <vQueueWaitForMessageRestricted+0x2a>
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009df8:	b25b      	sxtb	r3, r3
 8009dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dfe:	d103      	bne.n	8009e08 <vQueueWaitForMessageRestricted+0x40>
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e08:	f001 fbc0 	bl	800b58c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d106      	bne.n	8009e22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	3324      	adds	r3, #36	@ 0x24
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	68b9      	ldr	r1, [r7, #8]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 fc69 	bl	800a6f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e22:	6978      	ldr	r0, [r7, #20]
 8009e24:	f7ff ff28 	bl	8009c78 <prvUnlockQueue>
	}
 8009e28:	bf00      	nop
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b08e      	sub	sp, #56	@ 0x38
 8009e34:	af04      	add	r7, sp, #16
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10b      	bne.n	8009e5c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	623b      	str	r3, [r7, #32]
}
 8009e56:	bf00      	nop
 8009e58:	bf00      	nop
 8009e5a:	e7fd      	b.n	8009e58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10b      	bne.n	8009e7a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	61fb      	str	r3, [r7, #28]
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	e7fd      	b.n	8009e76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e7a:	23a8      	movs	r3, #168	@ 0xa8
 8009e7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	2ba8      	cmp	r3, #168	@ 0xa8
 8009e82:	d00b      	beq.n	8009e9c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	61bb      	str	r3, [r7, #24]
}
 8009e96:	bf00      	nop
 8009e98:	bf00      	nop
 8009e9a:	e7fd      	b.n	8009e98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d01e      	beq.n	8009ee2 <xTaskCreateStatic+0xb2>
 8009ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d01b      	beq.n	8009ee2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009eb2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	9303      	str	r3, [sp, #12]
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec2:	9302      	str	r3, [sp, #8]
 8009ec4:	f107 0314 	add.w	r3, r7, #20
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	68b9      	ldr	r1, [r7, #8]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f000 f851 	bl	8009f7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009eda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009edc:	f000 f8f6 	bl	800a0cc <prvAddNewTaskToReadyList>
 8009ee0:	e001      	b.n	8009ee6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ee6:	697b      	ldr	r3, [r7, #20]
	}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3728      	adds	r7, #40	@ 0x28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08c      	sub	sp, #48	@ 0x30
 8009ef4:	af04      	add	r7, sp, #16
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	603b      	str	r3, [r7, #0]
 8009efc:	4613      	mov	r3, r2
 8009efe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f00:	88fb      	ldrh	r3, [r7, #6]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4618      	mov	r0, r3
 8009f06:	f001 fc13 	bl	800b730 <pvPortMalloc>
 8009f0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00e      	beq.n	8009f30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f12:	20a8      	movs	r0, #168	@ 0xa8
 8009f14:	f001 fc0c 	bl	800b730 <pvPortMalloc>
 8009f18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d003      	beq.n	8009f28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f26:	e005      	b.n	8009f34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f28:	6978      	ldr	r0, [r7, #20]
 8009f2a:	f001 fccf 	bl	800b8cc <vPortFree>
 8009f2e:	e001      	b.n	8009f34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f30:	2300      	movs	r3, #0
 8009f32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d017      	beq.n	8009f6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f42:	88fa      	ldrh	r2, [r7, #6]
 8009f44:	2300      	movs	r3, #0
 8009f46:	9303      	str	r3, [sp, #12]
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	9302      	str	r3, [sp, #8]
 8009f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f4e:	9301      	str	r3, [sp, #4]
 8009f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f000 f80f 	bl	8009f7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f5e:	69f8      	ldr	r0, [r7, #28]
 8009f60:	f000 f8b4 	bl	800a0cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f64:	2301      	movs	r3, #1
 8009f66:	61bb      	str	r3, [r7, #24]
 8009f68:	e002      	b.n	8009f70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f70:	69bb      	ldr	r3, [r7, #24]
	}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3720      	adds	r7, #32
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b088      	sub	sp, #32
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	461a      	mov	r2, r3
 8009f94:	21a5      	movs	r1, #165	@ 0xa5
 8009f96:	f002 fc71 	bl	800c87c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	f023 0307 	bic.w	r3, r3, #7
 8009fb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	f003 0307 	and.w	r3, r3, #7
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00b      	beq.n	8009fd6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	617b      	str	r3, [r7, #20]
}
 8009fd0:	bf00      	nop
 8009fd2:	bf00      	nop
 8009fd4:	e7fd      	b.n	8009fd2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d01f      	beq.n	800a01c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fdc:	2300      	movs	r3, #0
 8009fde:	61fb      	str	r3, [r7, #28]
 8009fe0:	e012      	b.n	800a008 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	7819      	ldrb	r1, [r3, #0]
 8009fea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	4413      	add	r3, r2
 8009ff0:	3334      	adds	r3, #52	@ 0x34
 8009ff2:	460a      	mov	r2, r1
 8009ff4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d006      	beq.n	800a010 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	3301      	adds	r3, #1
 800a006:	61fb      	str	r3, [r7, #28]
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	2b0f      	cmp	r3, #15
 800a00c:	d9e9      	bls.n	8009fe2 <prvInitialiseNewTask+0x66>
 800a00e:	e000      	b.n	800a012 <prvInitialiseNewTask+0x96>
			{
				break;
 800a010:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a01a:	e003      	b.n	800a024 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a026:	2b37      	cmp	r3, #55	@ 0x37
 800a028:	d901      	bls.n	800a02e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a02a:	2337      	movs	r3, #55	@ 0x37
 800a02c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a030:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a032:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a036:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a038:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03c:	2200      	movs	r2, #0
 800a03e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a042:	3304      	adds	r3, #4
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff f96a 	bl	800931e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04c:	3318      	adds	r3, #24
 800a04e:	4618      	mov	r0, r3
 800a050:	f7ff f965 	bl	800931e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a058:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a062:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a068:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06c:	2200      	movs	r2, #0
 800a06e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a074:	2200      	movs	r2, #0
 800a076:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07c:	3354      	adds	r3, #84	@ 0x54
 800a07e:	224c      	movs	r2, #76	@ 0x4c
 800a080:	2100      	movs	r1, #0
 800a082:	4618      	mov	r0, r3
 800a084:	f002 fbfa 	bl	800c87c <memset>
 800a088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08a:	4a0d      	ldr	r2, [pc, #52]	@ (800a0c0 <prvInitialiseNewTask+0x144>)
 800a08c:	659a      	str	r2, [r3, #88]	@ 0x58
 800a08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a090:	4a0c      	ldr	r2, [pc, #48]	@ (800a0c4 <prvInitialiseNewTask+0x148>)
 800a092:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a096:	4a0c      	ldr	r2, [pc, #48]	@ (800a0c8 <prvInitialiseNewTask+0x14c>)
 800a098:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	68f9      	ldr	r1, [r7, #12]
 800a09e:	69b8      	ldr	r0, [r7, #24]
 800a0a0:	f001 f954 	bl	800b34c <pxPortInitialiseStack>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0b6:	bf00      	nop
 800a0b8:	3720      	adds	r7, #32
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20002e64 	.word	0x20002e64
 800a0c4:	20002ecc 	.word	0x20002ecc
 800a0c8:	20002f34 	.word	0x20002f34

0800a0cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a0d4:	f001 fa2a 	bl	800b52c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a0d8:	4b2d      	ldr	r3, [pc, #180]	@ (800a190 <prvAddNewTaskToReadyList+0xc4>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	4a2c      	ldr	r2, [pc, #176]	@ (800a190 <prvAddNewTaskToReadyList+0xc4>)
 800a0e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a0e2:	4b2c      	ldr	r3, [pc, #176]	@ (800a194 <prvAddNewTaskToReadyList+0xc8>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d109      	bne.n	800a0fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0ea:	4a2a      	ldr	r2, [pc, #168]	@ (800a194 <prvAddNewTaskToReadyList+0xc8>)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0f0:	4b27      	ldr	r3, [pc, #156]	@ (800a190 <prvAddNewTaskToReadyList+0xc4>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d110      	bne.n	800a11a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a0f8:	f000 fc2a 	bl	800a950 <prvInitialiseTaskLists>
 800a0fc:	e00d      	b.n	800a11a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a0fe:	4b26      	ldr	r3, [pc, #152]	@ (800a198 <prvAddNewTaskToReadyList+0xcc>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d109      	bne.n	800a11a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a106:	4b23      	ldr	r3, [pc, #140]	@ (800a194 <prvAddNewTaskToReadyList+0xc8>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a110:	429a      	cmp	r2, r3
 800a112:	d802      	bhi.n	800a11a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a114:	4a1f      	ldr	r2, [pc, #124]	@ (800a194 <prvAddNewTaskToReadyList+0xc8>)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a11a:	4b20      	ldr	r3, [pc, #128]	@ (800a19c <prvAddNewTaskToReadyList+0xd0>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3301      	adds	r3, #1
 800a120:	4a1e      	ldr	r2, [pc, #120]	@ (800a19c <prvAddNewTaskToReadyList+0xd0>)
 800a122:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a124:	4b1d      	ldr	r3, [pc, #116]	@ (800a19c <prvAddNewTaskToReadyList+0xd0>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a130:	4b1b      	ldr	r3, [pc, #108]	@ (800a1a0 <prvAddNewTaskToReadyList+0xd4>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	429a      	cmp	r2, r3
 800a136:	d903      	bls.n	800a140 <prvAddNewTaskToReadyList+0x74>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a13c:	4a18      	ldr	r2, [pc, #96]	@ (800a1a0 <prvAddNewTaskToReadyList+0xd4>)
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4a15      	ldr	r2, [pc, #84]	@ (800a1a4 <prvAddNewTaskToReadyList+0xd8>)
 800a14e:	441a      	add	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	3304      	adds	r3, #4
 800a154:	4619      	mov	r1, r3
 800a156:	4610      	mov	r0, r2
 800a158:	f7ff f8ed 	bl	8009336 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a15c:	f001 fa16 	bl	800b58c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a160:	4b0d      	ldr	r3, [pc, #52]	@ (800a198 <prvAddNewTaskToReadyList+0xcc>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00e      	beq.n	800a186 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a168:	4b0a      	ldr	r3, [pc, #40]	@ (800a194 <prvAddNewTaskToReadyList+0xc8>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a172:	429a      	cmp	r2, r3
 800a174:	d207      	bcs.n	800a186 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a176:	4b0c      	ldr	r3, [pc, #48]	@ (800a1a8 <prvAddNewTaskToReadyList+0xdc>)
 800a178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a186:	bf00      	nop
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	20000f28 	.word	0x20000f28
 800a194:	20000a54 	.word	0x20000a54
 800a198:	20000f34 	.word	0x20000f34
 800a19c:	20000f44 	.word	0x20000f44
 800a1a0:	20000f30 	.word	0x20000f30
 800a1a4:	20000a58 	.word	0x20000a58
 800a1a8:	e000ed04 	.word	0xe000ed04

0800a1ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d018      	beq.n	800a1f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1be:	4b14      	ldr	r3, [pc, #80]	@ (800a210 <vTaskDelay+0x64>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00b      	beq.n	800a1de <vTaskDelay+0x32>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	60bb      	str	r3, [r7, #8]
}
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
 800a1dc:	e7fd      	b.n	800a1da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a1de:	f000 f88b 	bl	800a2f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fd05 	bl	800abf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1ea:	f000 f893 	bl	800a314 <xTaskResumeAll>
 800a1ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d107      	bne.n	800a206 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a1f6:	4b07      	ldr	r3, [pc, #28]	@ (800a214 <vTaskDelay+0x68>)
 800a1f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a206:	bf00      	nop
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	20000f50 	.word	0x20000f50
 800a214:	e000ed04 	.word	0xe000ed04

0800a218 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08a      	sub	sp, #40	@ 0x28
 800a21c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a21e:	2300      	movs	r3, #0
 800a220:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a222:	2300      	movs	r3, #0
 800a224:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a226:	463a      	mov	r2, r7
 800a228:	1d39      	adds	r1, r7, #4
 800a22a:	f107 0308 	add.w	r3, r7, #8
 800a22e:	4618      	mov	r0, r3
 800a230:	f7ff f824 	bl	800927c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	9202      	str	r2, [sp, #8]
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	2300      	movs	r3, #0
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	2300      	movs	r3, #0
 800a244:	460a      	mov	r2, r1
 800a246:	4924      	ldr	r1, [pc, #144]	@ (800a2d8 <vTaskStartScheduler+0xc0>)
 800a248:	4824      	ldr	r0, [pc, #144]	@ (800a2dc <vTaskStartScheduler+0xc4>)
 800a24a:	f7ff fdf1 	bl	8009e30 <xTaskCreateStatic>
 800a24e:	4603      	mov	r3, r0
 800a250:	4a23      	ldr	r2, [pc, #140]	@ (800a2e0 <vTaskStartScheduler+0xc8>)
 800a252:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a254:	4b22      	ldr	r3, [pc, #136]	@ (800a2e0 <vTaskStartScheduler+0xc8>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a25c:	2301      	movs	r3, #1
 800a25e:	617b      	str	r3, [r7, #20]
 800a260:	e001      	b.n	800a266 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a262:	2300      	movs	r3, #0
 800a264:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d102      	bne.n	800a272 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a26c:	f000 fd16 	bl	800ac9c <xTimerCreateTimerTask>
 800a270:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d11b      	bne.n	800a2b0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	613b      	str	r3, [r7, #16]
}
 800a28a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a28c:	4b15      	ldr	r3, [pc, #84]	@ (800a2e4 <vTaskStartScheduler+0xcc>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3354      	adds	r3, #84	@ 0x54
 800a292:	4a15      	ldr	r2, [pc, #84]	@ (800a2e8 <vTaskStartScheduler+0xd0>)
 800a294:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a296:	4b15      	ldr	r3, [pc, #84]	@ (800a2ec <vTaskStartScheduler+0xd4>)
 800a298:	f04f 32ff 	mov.w	r2, #4294967295
 800a29c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a29e:	4b14      	ldr	r3, [pc, #80]	@ (800a2f0 <vTaskStartScheduler+0xd8>)
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2a4:	4b13      	ldr	r3, [pc, #76]	@ (800a2f4 <vTaskStartScheduler+0xdc>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2aa:	f001 f8cd 	bl	800b448 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2ae:	e00f      	b.n	800a2d0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b6:	d10b      	bne.n	800a2d0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	60fb      	str	r3, [r7, #12]
}
 800a2ca:	bf00      	nop
 800a2cc:	bf00      	nop
 800a2ce:	e7fd      	b.n	800a2cc <vTaskStartScheduler+0xb4>
}
 800a2d0:	bf00      	nop
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	0800d4d0 	.word	0x0800d4d0
 800a2dc:	0800a921 	.word	0x0800a921
 800a2e0:	20000f4c 	.word	0x20000f4c
 800a2e4:	20000a54 	.word	0x20000a54
 800a2e8:	20000190 	.word	0x20000190
 800a2ec:	20000f48 	.word	0x20000f48
 800a2f0:	20000f34 	.word	0x20000f34
 800a2f4:	20000f2c 	.word	0x20000f2c

0800a2f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2fc:	4b04      	ldr	r3, [pc, #16]	@ (800a310 <vTaskSuspendAll+0x18>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3301      	adds	r3, #1
 800a302:	4a03      	ldr	r2, [pc, #12]	@ (800a310 <vTaskSuspendAll+0x18>)
 800a304:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a306:	bf00      	nop
 800a308:	46bd      	mov	sp, r7
 800a30a:	bc80      	pop	{r7}
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	20000f50 	.word	0x20000f50

0800a314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a31e:	2300      	movs	r3, #0
 800a320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a322:	4b42      	ldr	r3, [pc, #264]	@ (800a42c <xTaskResumeAll+0x118>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10b      	bne.n	800a342 <xTaskResumeAll+0x2e>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	603b      	str	r3, [r7, #0]
}
 800a33c:	bf00      	nop
 800a33e:	bf00      	nop
 800a340:	e7fd      	b.n	800a33e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a342:	f001 f8f3 	bl	800b52c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a346:	4b39      	ldr	r3, [pc, #228]	@ (800a42c <xTaskResumeAll+0x118>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	4a37      	ldr	r2, [pc, #220]	@ (800a42c <xTaskResumeAll+0x118>)
 800a34e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a350:	4b36      	ldr	r3, [pc, #216]	@ (800a42c <xTaskResumeAll+0x118>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d162      	bne.n	800a41e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a358:	4b35      	ldr	r3, [pc, #212]	@ (800a430 <xTaskResumeAll+0x11c>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d05e      	beq.n	800a41e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a360:	e02f      	b.n	800a3c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a362:	4b34      	ldr	r3, [pc, #208]	@ (800a434 <xTaskResumeAll+0x120>)
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3318      	adds	r3, #24
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff f83c 	bl	80093ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	3304      	adds	r3, #4
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff f837 	bl	80093ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a382:	4b2d      	ldr	r3, [pc, #180]	@ (800a438 <xTaskResumeAll+0x124>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d903      	bls.n	800a392 <xTaskResumeAll+0x7e>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38e:	4a2a      	ldr	r2, [pc, #168]	@ (800a438 <xTaskResumeAll+0x124>)
 800a390:	6013      	str	r3, [r2, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a396:	4613      	mov	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4a27      	ldr	r2, [pc, #156]	@ (800a43c <xTaskResumeAll+0x128>)
 800a3a0:	441a      	add	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	f7fe ffc4 	bl	8009336 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b2:	4b23      	ldr	r3, [pc, #140]	@ (800a440 <xTaskResumeAll+0x12c>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d302      	bcc.n	800a3c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a3bc:	4b21      	ldr	r3, [pc, #132]	@ (800a444 <xTaskResumeAll+0x130>)
 800a3be:	2201      	movs	r2, #1
 800a3c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3c2:	4b1c      	ldr	r3, [pc, #112]	@ (800a434 <xTaskResumeAll+0x120>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1cb      	bne.n	800a362 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3d0:	f000 fb62 	bl	800aa98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a3d4:	4b1c      	ldr	r3, [pc, #112]	@ (800a448 <xTaskResumeAll+0x134>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d010      	beq.n	800a402 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3e0:	f000 f844 	bl	800a46c <xTaskIncrementTick>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d002      	beq.n	800a3f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a3ea:	4b16      	ldr	r3, [pc, #88]	@ (800a444 <xTaskResumeAll+0x130>)
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1f1      	bne.n	800a3e0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a3fc:	4b12      	ldr	r3, [pc, #72]	@ (800a448 <xTaskResumeAll+0x134>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a402:	4b10      	ldr	r3, [pc, #64]	@ (800a444 <xTaskResumeAll+0x130>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d009      	beq.n	800a41e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a40a:	2301      	movs	r3, #1
 800a40c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a40e:	4b0f      	ldr	r3, [pc, #60]	@ (800a44c <xTaskResumeAll+0x138>)
 800a410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a414:	601a      	str	r2, [r3, #0]
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a41e:	f001 f8b5 	bl	800b58c <vPortExitCritical>

	return xAlreadyYielded;
 800a422:	68bb      	ldr	r3, [r7, #8]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	20000f50 	.word	0x20000f50
 800a430:	20000f28 	.word	0x20000f28
 800a434:	20000ee8 	.word	0x20000ee8
 800a438:	20000f30 	.word	0x20000f30
 800a43c:	20000a58 	.word	0x20000a58
 800a440:	20000a54 	.word	0x20000a54
 800a444:	20000f3c 	.word	0x20000f3c
 800a448:	20000f38 	.word	0x20000f38
 800a44c:	e000ed04 	.word	0xe000ed04

0800a450 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a456:	4b04      	ldr	r3, [pc, #16]	@ (800a468 <xTaskGetTickCount+0x18>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a45c:	687b      	ldr	r3, [r7, #4]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	bc80      	pop	{r7}
 800a466:	4770      	bx	lr
 800a468:	20000f2c 	.word	0x20000f2c

0800a46c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a476:	4b4f      	ldr	r3, [pc, #316]	@ (800a5b4 <xTaskIncrementTick+0x148>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f040 8090 	bne.w	800a5a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a480:	4b4d      	ldr	r3, [pc, #308]	@ (800a5b8 <xTaskIncrementTick+0x14c>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3301      	adds	r3, #1
 800a486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a488:	4a4b      	ldr	r2, [pc, #300]	@ (800a5b8 <xTaskIncrementTick+0x14c>)
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d121      	bne.n	800a4d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a494:	4b49      	ldr	r3, [pc, #292]	@ (800a5bc <xTaskIncrementTick+0x150>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00b      	beq.n	800a4b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	603b      	str	r3, [r7, #0]
}
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
 800a4b4:	e7fd      	b.n	800a4b2 <xTaskIncrementTick+0x46>
 800a4b6:	4b41      	ldr	r3, [pc, #260]	@ (800a5bc <xTaskIncrementTick+0x150>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	4b40      	ldr	r3, [pc, #256]	@ (800a5c0 <xTaskIncrementTick+0x154>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a3e      	ldr	r2, [pc, #248]	@ (800a5bc <xTaskIncrementTick+0x150>)
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	4a3e      	ldr	r2, [pc, #248]	@ (800a5c0 <xTaskIncrementTick+0x154>)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	4b3e      	ldr	r3, [pc, #248]	@ (800a5c4 <xTaskIncrementTick+0x158>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	4a3c      	ldr	r2, [pc, #240]	@ (800a5c4 <xTaskIncrementTick+0x158>)
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	f000 fae0 	bl	800aa98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4d8:	4b3b      	ldr	r3, [pc, #236]	@ (800a5c8 <xTaskIncrementTick+0x15c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d349      	bcc.n	800a576 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4e2:	4b36      	ldr	r3, [pc, #216]	@ (800a5bc <xTaskIncrementTick+0x150>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d104      	bne.n	800a4f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ec:	4b36      	ldr	r3, [pc, #216]	@ (800a5c8 <xTaskIncrementTick+0x15c>)
 800a4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f2:	601a      	str	r2, [r3, #0]
					break;
 800a4f4:	e03f      	b.n	800a576 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4f6:	4b31      	ldr	r3, [pc, #196]	@ (800a5bc <xTaskIncrementTick+0x150>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d203      	bcs.n	800a516 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a50e:	4a2e      	ldr	r2, [pc, #184]	@ (800a5c8 <xTaskIncrementTick+0x15c>)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a514:	e02f      	b.n	800a576 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	3304      	adds	r3, #4
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe ff66 	bl	80093ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a524:	2b00      	cmp	r3, #0
 800a526:	d004      	beq.n	800a532 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	3318      	adds	r3, #24
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe ff5d 	bl	80093ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a536:	4b25      	ldr	r3, [pc, #148]	@ (800a5cc <xTaskIncrementTick+0x160>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d903      	bls.n	800a546 <xTaskIncrementTick+0xda>
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a542:	4a22      	ldr	r2, [pc, #136]	@ (800a5cc <xTaskIncrementTick+0x160>)
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a54a:	4613      	mov	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4413      	add	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4a1f      	ldr	r2, [pc, #124]	@ (800a5d0 <xTaskIncrementTick+0x164>)
 800a554:	441a      	add	r2, r3
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	3304      	adds	r3, #4
 800a55a:	4619      	mov	r1, r3
 800a55c:	4610      	mov	r0, r2
 800a55e:	f7fe feea 	bl	8009336 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a566:	4b1b      	ldr	r3, [pc, #108]	@ (800a5d4 <xTaskIncrementTick+0x168>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d3b8      	bcc.n	800a4e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a570:	2301      	movs	r3, #1
 800a572:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a574:	e7b5      	b.n	800a4e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a576:	4b17      	ldr	r3, [pc, #92]	@ (800a5d4 <xTaskIncrementTick+0x168>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a57c:	4914      	ldr	r1, [pc, #80]	@ (800a5d0 <xTaskIncrementTick+0x164>)
 800a57e:	4613      	mov	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	440b      	add	r3, r1
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d901      	bls.n	800a592 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a58e:	2301      	movs	r3, #1
 800a590:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a592:	4b11      	ldr	r3, [pc, #68]	@ (800a5d8 <xTaskIncrementTick+0x16c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d007      	beq.n	800a5aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a59a:	2301      	movs	r3, #1
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	e004      	b.n	800a5aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a5a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a5dc <xTaskIncrementTick+0x170>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	4a0d      	ldr	r2, [pc, #52]	@ (800a5dc <xTaskIncrementTick+0x170>)
 800a5a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a5aa:	697b      	ldr	r3, [r7, #20]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3718      	adds	r7, #24
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	20000f50 	.word	0x20000f50
 800a5b8:	20000f2c 	.word	0x20000f2c
 800a5bc:	20000ee0 	.word	0x20000ee0
 800a5c0:	20000ee4 	.word	0x20000ee4
 800a5c4:	20000f40 	.word	0x20000f40
 800a5c8:	20000f48 	.word	0x20000f48
 800a5cc:	20000f30 	.word	0x20000f30
 800a5d0:	20000a58 	.word	0x20000a58
 800a5d4:	20000a54 	.word	0x20000a54
 800a5d8:	20000f3c 	.word	0x20000f3c
 800a5dc:	20000f38 	.word	0x20000f38

0800a5e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5e6:	4b2a      	ldr	r3, [pc, #168]	@ (800a690 <vTaskSwitchContext+0xb0>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5ee:	4b29      	ldr	r3, [pc, #164]	@ (800a694 <vTaskSwitchContext+0xb4>)
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5f4:	e047      	b.n	800a686 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a5f6:	4b27      	ldr	r3, [pc, #156]	@ (800a694 <vTaskSwitchContext+0xb4>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5fc:	4b26      	ldr	r3, [pc, #152]	@ (800a698 <vTaskSwitchContext+0xb8>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	60fb      	str	r3, [r7, #12]
 800a602:	e011      	b.n	800a628 <vTaskSwitchContext+0x48>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10b      	bne.n	800a622 <vTaskSwitchContext+0x42>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	607b      	str	r3, [r7, #4]
}
 800a61c:	bf00      	nop
 800a61e:	bf00      	nop
 800a620:	e7fd      	b.n	800a61e <vTaskSwitchContext+0x3e>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3b01      	subs	r3, #1
 800a626:	60fb      	str	r3, [r7, #12]
 800a628:	491c      	ldr	r1, [pc, #112]	@ (800a69c <vTaskSwitchContext+0xbc>)
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	440b      	add	r3, r1
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d0e3      	beq.n	800a604 <vTaskSwitchContext+0x24>
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	4613      	mov	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4a15      	ldr	r2, [pc, #84]	@ (800a69c <vTaskSwitchContext+0xbc>)
 800a648:	4413      	add	r3, r2
 800a64a:	60bb      	str	r3, [r7, #8]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	685a      	ldr	r2, [r3, #4]
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	605a      	str	r2, [r3, #4]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	3308      	adds	r3, #8
 800a65e:	429a      	cmp	r2, r3
 800a660:	d104      	bne.n	800a66c <vTaskSwitchContext+0x8c>
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	605a      	str	r2, [r3, #4]
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	4a0b      	ldr	r2, [pc, #44]	@ (800a6a0 <vTaskSwitchContext+0xc0>)
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	4a08      	ldr	r2, [pc, #32]	@ (800a698 <vTaskSwitchContext+0xb8>)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a67c:	4b08      	ldr	r3, [pc, #32]	@ (800a6a0 <vTaskSwitchContext+0xc0>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	3354      	adds	r3, #84	@ 0x54
 800a682:	4a08      	ldr	r2, [pc, #32]	@ (800a6a4 <vTaskSwitchContext+0xc4>)
 800a684:	6013      	str	r3, [r2, #0]
}
 800a686:	bf00      	nop
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bc80      	pop	{r7}
 800a68e:	4770      	bx	lr
 800a690:	20000f50 	.word	0x20000f50
 800a694:	20000f3c 	.word	0x20000f3c
 800a698:	20000f30 	.word	0x20000f30
 800a69c:	20000a58 	.word	0x20000a58
 800a6a0:	20000a54 	.word	0x20000a54
 800a6a4:	20000190 	.word	0x20000190

0800a6a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10b      	bne.n	800a6d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6bc:	f383 8811 	msr	BASEPRI, r3
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	60fb      	str	r3, [r7, #12]
}
 800a6ca:	bf00      	nop
 800a6cc:	bf00      	nop
 800a6ce:	e7fd      	b.n	800a6cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6d0:	4b07      	ldr	r3, [pc, #28]	@ (800a6f0 <vTaskPlaceOnEventList+0x48>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3318      	adds	r3, #24
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7fe fe4f 	bl	800937c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6de:	2101      	movs	r1, #1
 800a6e0:	6838      	ldr	r0, [r7, #0]
 800a6e2:	f000 fa87 	bl	800abf4 <prvAddCurrentTaskToDelayedList>
}
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20000a54 	.word	0x20000a54

0800a6f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10b      	bne.n	800a71e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	617b      	str	r3, [r7, #20]
}
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
 800a71c:	e7fd      	b.n	800a71a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a71e:	4b0a      	ldr	r3, [pc, #40]	@ (800a748 <vTaskPlaceOnEventListRestricted+0x54>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3318      	adds	r3, #24
 800a724:	4619      	mov	r1, r3
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7fe fe05 	bl	8009336 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d002      	beq.n	800a738 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a732:	f04f 33ff 	mov.w	r3, #4294967295
 800a736:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a738:	6879      	ldr	r1, [r7, #4]
 800a73a:	68b8      	ldr	r0, [r7, #8]
 800a73c:	f000 fa5a 	bl	800abf4 <prvAddCurrentTaskToDelayedList>
	}
 800a740:	bf00      	nop
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	20000a54 	.word	0x20000a54

0800a74c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d10b      	bne.n	800a77a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	60fb      	str	r3, [r7, #12]
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop
 800a778:	e7fd      	b.n	800a776 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	3318      	adds	r3, #24
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe fe34 	bl	80093ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a784:	4b1d      	ldr	r3, [pc, #116]	@ (800a7fc <xTaskRemoveFromEventList+0xb0>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d11d      	bne.n	800a7c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	3304      	adds	r3, #4
 800a790:	4618      	mov	r0, r3
 800a792:	f7fe fe2b 	bl	80093ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a79a:	4b19      	ldr	r3, [pc, #100]	@ (800a800 <xTaskRemoveFromEventList+0xb4>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d903      	bls.n	800a7aa <xTaskRemoveFromEventList+0x5e>
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a6:	4a16      	ldr	r2, [pc, #88]	@ (800a800 <xTaskRemoveFromEventList+0xb4>)
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4a13      	ldr	r2, [pc, #76]	@ (800a804 <xTaskRemoveFromEventList+0xb8>)
 800a7b8:	441a      	add	r2, r3
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	3304      	adds	r3, #4
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	f7fe fdb8 	bl	8009336 <vListInsertEnd>
 800a7c6:	e005      	b.n	800a7d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	3318      	adds	r3, #24
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	480e      	ldr	r0, [pc, #56]	@ (800a808 <xTaskRemoveFromEventList+0xbc>)
 800a7d0:	f7fe fdb1 	bl	8009336 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a80c <xTaskRemoveFromEventList+0xc0>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d905      	bls.n	800a7ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a810 <xTaskRemoveFromEventList+0xc4>)
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	e001      	b.n	800a7f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7f2:	697b      	ldr	r3, [r7, #20]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	20000f50 	.word	0x20000f50
 800a800:	20000f30 	.word	0x20000f30
 800a804:	20000a58 	.word	0x20000a58
 800a808:	20000ee8 	.word	0x20000ee8
 800a80c:	20000a54 	.word	0x20000a54
 800a810:	20000f3c 	.word	0x20000f3c

0800a814 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a81c:	4b06      	ldr	r3, [pc, #24]	@ (800a838 <vTaskInternalSetTimeOutState+0x24>)
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a824:	4b05      	ldr	r3, [pc, #20]	@ (800a83c <vTaskInternalSetTimeOutState+0x28>)
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	605a      	str	r2, [r3, #4]
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	bc80      	pop	{r7}
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	20000f40 	.word	0x20000f40
 800a83c:	20000f2c 	.word	0x20000f2c

0800a840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10b      	bne.n	800a868 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	613b      	str	r3, [r7, #16]
}
 800a862:	bf00      	nop
 800a864:	bf00      	nop
 800a866:	e7fd      	b.n	800a864 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10b      	bne.n	800a886 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	60fb      	str	r3, [r7, #12]
}
 800a880:	bf00      	nop
 800a882:	bf00      	nop
 800a884:	e7fd      	b.n	800a882 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a886:	f000 fe51 	bl	800b52c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a88a:	4b1d      	ldr	r3, [pc, #116]	@ (800a900 <xTaskCheckForTimeOut+0xc0>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	69ba      	ldr	r2, [r7, #24]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a2:	d102      	bne.n	800a8aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	61fb      	str	r3, [r7, #28]
 800a8a8:	e023      	b.n	800a8f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	4b15      	ldr	r3, [pc, #84]	@ (800a904 <xTaskCheckForTimeOut+0xc4>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d007      	beq.n	800a8c6 <xTaskCheckForTimeOut+0x86>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	69ba      	ldr	r2, [r7, #24]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d302      	bcc.n	800a8c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	61fb      	str	r3, [r7, #28]
 800a8c4:	e015      	b.n	800a8f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	697a      	ldr	r2, [r7, #20]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d20b      	bcs.n	800a8e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	1ad2      	subs	r2, r2, r3
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7ff ff99 	bl	800a814 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	61fb      	str	r3, [r7, #28]
 800a8e6:	e004      	b.n	800a8f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8f2:	f000 fe4b 	bl	800b58c <vPortExitCritical>

	return xReturn;
 800a8f6:	69fb      	ldr	r3, [r7, #28]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3720      	adds	r7, #32
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20000f2c 	.word	0x20000f2c
 800a904:	20000f40 	.word	0x20000f40

0800a908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a908:	b480      	push	{r7}
 800a90a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a90c:	4b03      	ldr	r3, [pc, #12]	@ (800a91c <vTaskMissedYield+0x14>)
 800a90e:	2201      	movs	r2, #1
 800a910:	601a      	str	r2, [r3, #0]
}
 800a912:	bf00      	nop
 800a914:	46bd      	mov	sp, r7
 800a916:	bc80      	pop	{r7}
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	20000f3c 	.word	0x20000f3c

0800a920 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a928:	f000 f852 	bl	800a9d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a92c:	4b06      	ldr	r3, [pc, #24]	@ (800a948 <prvIdleTask+0x28>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d9f9      	bls.n	800a928 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a934:	4b05      	ldr	r3, [pc, #20]	@ (800a94c <prvIdleTask+0x2c>)
 800a936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a944:	e7f0      	b.n	800a928 <prvIdleTask+0x8>
 800a946:	bf00      	nop
 800a948:	20000a58 	.word	0x20000a58
 800a94c:	e000ed04 	.word	0xe000ed04

0800a950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a956:	2300      	movs	r3, #0
 800a958:	607b      	str	r3, [r7, #4]
 800a95a:	e00c      	b.n	800a976 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	4613      	mov	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4a12      	ldr	r2, [pc, #72]	@ (800a9b0 <prvInitialiseTaskLists+0x60>)
 800a968:	4413      	add	r3, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fe fcb8 	bl	80092e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3301      	adds	r3, #1
 800a974:	607b      	str	r3, [r7, #4]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b37      	cmp	r3, #55	@ 0x37
 800a97a:	d9ef      	bls.n	800a95c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a97c:	480d      	ldr	r0, [pc, #52]	@ (800a9b4 <prvInitialiseTaskLists+0x64>)
 800a97e:	f7fe fcaf 	bl	80092e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a982:	480d      	ldr	r0, [pc, #52]	@ (800a9b8 <prvInitialiseTaskLists+0x68>)
 800a984:	f7fe fcac 	bl	80092e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a988:	480c      	ldr	r0, [pc, #48]	@ (800a9bc <prvInitialiseTaskLists+0x6c>)
 800a98a:	f7fe fca9 	bl	80092e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a98e:	480c      	ldr	r0, [pc, #48]	@ (800a9c0 <prvInitialiseTaskLists+0x70>)
 800a990:	f7fe fca6 	bl	80092e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a994:	480b      	ldr	r0, [pc, #44]	@ (800a9c4 <prvInitialiseTaskLists+0x74>)
 800a996:	f7fe fca3 	bl	80092e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a99a:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c8 <prvInitialiseTaskLists+0x78>)
 800a99c:	4a05      	ldr	r2, [pc, #20]	@ (800a9b4 <prvInitialiseTaskLists+0x64>)
 800a99e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a9cc <prvInitialiseTaskLists+0x7c>)
 800a9a2:	4a05      	ldr	r2, [pc, #20]	@ (800a9b8 <prvInitialiseTaskLists+0x68>)
 800a9a4:	601a      	str	r2, [r3, #0]
}
 800a9a6:	bf00      	nop
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20000a58 	.word	0x20000a58
 800a9b4:	20000eb8 	.word	0x20000eb8
 800a9b8:	20000ecc 	.word	0x20000ecc
 800a9bc:	20000ee8 	.word	0x20000ee8
 800a9c0:	20000efc 	.word	0x20000efc
 800a9c4:	20000f14 	.word	0x20000f14
 800a9c8:	20000ee0 	.word	0x20000ee0
 800a9cc:	20000ee4 	.word	0x20000ee4

0800a9d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9d6:	e019      	b.n	800aa0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9d8:	f000 fda8 	bl	800b52c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9dc:	4b10      	ldr	r3, [pc, #64]	@ (800aa20 <prvCheckTasksWaitingTermination+0x50>)
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fe fcff 	bl	80093ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800aa24 <prvCheckTasksWaitingTermination+0x54>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	4a0b      	ldr	r2, [pc, #44]	@ (800aa24 <prvCheckTasksWaitingTermination+0x54>)
 800a9f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9f8:	4b0b      	ldr	r3, [pc, #44]	@ (800aa28 <prvCheckTasksWaitingTermination+0x58>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	4a0a      	ldr	r2, [pc, #40]	@ (800aa28 <prvCheckTasksWaitingTermination+0x58>)
 800aa00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa02:	f000 fdc3 	bl	800b58c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f810 	bl	800aa2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa0c:	4b06      	ldr	r3, [pc, #24]	@ (800aa28 <prvCheckTasksWaitingTermination+0x58>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1e1      	bne.n	800a9d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa14:	bf00      	nop
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20000efc 	.word	0x20000efc
 800aa24:	20000f28 	.word	0x20000f28
 800aa28:	20000f10 	.word	0x20000f10

0800aa2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3354      	adds	r3, #84	@ 0x54
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f001 ff37 	bl	800c8ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d108      	bne.n	800aa5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 ff3d 	bl	800b8cc <vPortFree>
				vPortFree( pxTCB );
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 ff3a 	bl	800b8cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa58:	e019      	b.n	800aa8e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d103      	bne.n	800aa6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 ff31 	bl	800b8cc <vPortFree>
	}
 800aa6a:	e010      	b.n	800aa8e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d00b      	beq.n	800aa8e <prvDeleteTCB+0x62>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	60fb      	str	r3, [r7, #12]
}
 800aa88:	bf00      	nop
 800aa8a:	bf00      	nop
 800aa8c:	e7fd      	b.n	800aa8a <prvDeleteTCB+0x5e>
	}
 800aa8e:	bf00      	nop
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa9e:	4b0c      	ldr	r3, [pc, #48]	@ (800aad0 <prvResetNextTaskUnblockTime+0x38>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d104      	bne.n	800aab2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aaa8:	4b0a      	ldr	r3, [pc, #40]	@ (800aad4 <prvResetNextTaskUnblockTime+0x3c>)
 800aaaa:	f04f 32ff 	mov.w	r2, #4294967295
 800aaae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aab0:	e008      	b.n	800aac4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab2:	4b07      	ldr	r3, [pc, #28]	@ (800aad0 <prvResetNextTaskUnblockTime+0x38>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	4a04      	ldr	r2, [pc, #16]	@ (800aad4 <prvResetNextTaskUnblockTime+0x3c>)
 800aac2:	6013      	str	r3, [r2, #0]
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bc80      	pop	{r7}
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	20000ee0 	.word	0x20000ee0
 800aad4:	20000f48 	.word	0x20000f48

0800aad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aade:	4b0b      	ldr	r3, [pc, #44]	@ (800ab0c <xTaskGetSchedulerState+0x34>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d102      	bne.n	800aaec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aae6:	2301      	movs	r3, #1
 800aae8:	607b      	str	r3, [r7, #4]
 800aaea:	e008      	b.n	800aafe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaec:	4b08      	ldr	r3, [pc, #32]	@ (800ab10 <xTaskGetSchedulerState+0x38>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d102      	bne.n	800aafa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	607b      	str	r3, [r7, #4]
 800aaf8:	e001      	b.n	800aafe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aafa:	2300      	movs	r3, #0
 800aafc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aafe:	687b      	ldr	r3, [r7, #4]
	}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bc80      	pop	{r7}
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	20000f34 	.word	0x20000f34
 800ab10:	20000f50 	.word	0x20000f50

0800ab14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab20:	2300      	movs	r3, #0
 800ab22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d058      	beq.n	800abdc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab2a:	4b2f      	ldr	r3, [pc, #188]	@ (800abe8 <xTaskPriorityDisinherit+0xd4>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d00b      	beq.n	800ab4c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	60fb      	str	r3, [r7, #12]
}
 800ab46:	bf00      	nop
 800ab48:	bf00      	nop
 800ab4a:	e7fd      	b.n	800ab48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10b      	bne.n	800ab6c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	60bb      	str	r3, [r7, #8]
}
 800ab66:	bf00      	nop
 800ab68:	bf00      	nop
 800ab6a:	e7fd      	b.n	800ab68 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab70:	1e5a      	subs	r2, r3, #1
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d02c      	beq.n	800abdc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d128      	bne.n	800abdc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fc2c 	bl	80093ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abac:	4b0f      	ldr	r3, [pc, #60]	@ (800abec <xTaskPriorityDisinherit+0xd8>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d903      	bls.n	800abbc <xTaskPriorityDisinherit+0xa8>
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb8:	4a0c      	ldr	r2, [pc, #48]	@ (800abec <xTaskPriorityDisinherit+0xd8>)
 800abba:	6013      	str	r3, [r2, #0]
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4a09      	ldr	r2, [pc, #36]	@ (800abf0 <xTaskPriorityDisinherit+0xdc>)
 800abca:	441a      	add	r2, r3
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	3304      	adds	r3, #4
 800abd0:	4619      	mov	r1, r3
 800abd2:	4610      	mov	r0, r2
 800abd4:	f7fe fbaf 	bl	8009336 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800abd8:	2301      	movs	r3, #1
 800abda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abdc:	697b      	ldr	r3, [r7, #20]
	}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20000a54 	.word	0x20000a54
 800abec:	20000f30 	.word	0x20000f30
 800abf0:	20000a58 	.word	0x20000a58

0800abf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abfe:	4b21      	ldr	r3, [pc, #132]	@ (800ac84 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac04:	4b20      	ldr	r3, [pc, #128]	@ (800ac88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	3304      	adds	r3, #4
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe fbee 	bl	80093ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac16:	d10a      	bne.n	800ac2e <prvAddCurrentTaskToDelayedList+0x3a>
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d007      	beq.n	800ac2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ac88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	3304      	adds	r3, #4
 800ac24:	4619      	mov	r1, r3
 800ac26:	4819      	ldr	r0, [pc, #100]	@ (800ac8c <prvAddCurrentTaskToDelayedList+0x98>)
 800ac28:	f7fe fb85 	bl	8009336 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac2c:	e026      	b.n	800ac7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4413      	add	r3, r2
 800ac34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac36:	4b14      	ldr	r3, [pc, #80]	@ (800ac88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d209      	bcs.n	800ac5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac46:	4b12      	ldr	r3, [pc, #72]	@ (800ac90 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ac88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	3304      	adds	r3, #4
 800ac50:	4619      	mov	r1, r3
 800ac52:	4610      	mov	r0, r2
 800ac54:	f7fe fb92 	bl	800937c <vListInsert>
}
 800ac58:	e010      	b.n	800ac7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac5a:	4b0e      	ldr	r3, [pc, #56]	@ (800ac94 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3304      	adds	r3, #4
 800ac64:	4619      	mov	r1, r3
 800ac66:	4610      	mov	r0, r2
 800ac68:	f7fe fb88 	bl	800937c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d202      	bcs.n	800ac7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac76:	4a08      	ldr	r2, [pc, #32]	@ (800ac98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	6013      	str	r3, [r2, #0]
}
 800ac7c:	bf00      	nop
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	20000f2c 	.word	0x20000f2c
 800ac88:	20000a54 	.word	0x20000a54
 800ac8c:	20000f14 	.word	0x20000f14
 800ac90:	20000ee4 	.word	0x20000ee4
 800ac94:	20000ee0 	.word	0x20000ee0
 800ac98:	20000f48 	.word	0x20000f48

0800ac9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08a      	sub	sp, #40	@ 0x28
 800aca0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aca2:	2300      	movs	r3, #0
 800aca4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aca6:	f000 fb11 	bl	800b2cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800acaa:	4b1d      	ldr	r3, [pc, #116]	@ (800ad20 <xTimerCreateTimerTask+0x84>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d021      	beq.n	800acf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800acb2:	2300      	movs	r3, #0
 800acb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800acb6:	2300      	movs	r3, #0
 800acb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800acba:	1d3a      	adds	r2, r7, #4
 800acbc:	f107 0108 	add.w	r1, r7, #8
 800acc0:	f107 030c 	add.w	r3, r7, #12
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fe faf1 	bl	80092ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800acca:	6879      	ldr	r1, [r7, #4]
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	9202      	str	r2, [sp, #8]
 800acd2:	9301      	str	r3, [sp, #4]
 800acd4:	2302      	movs	r3, #2
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	2300      	movs	r3, #0
 800acda:	460a      	mov	r2, r1
 800acdc:	4911      	ldr	r1, [pc, #68]	@ (800ad24 <xTimerCreateTimerTask+0x88>)
 800acde:	4812      	ldr	r0, [pc, #72]	@ (800ad28 <xTimerCreateTimerTask+0x8c>)
 800ace0:	f7ff f8a6 	bl	8009e30 <xTaskCreateStatic>
 800ace4:	4603      	mov	r3, r0
 800ace6:	4a11      	ldr	r2, [pc, #68]	@ (800ad2c <xTimerCreateTimerTask+0x90>)
 800ace8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800acea:	4b10      	ldr	r3, [pc, #64]	@ (800ad2c <xTimerCreateTimerTask+0x90>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800acf2:	2301      	movs	r3, #1
 800acf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10b      	bne.n	800ad14 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	613b      	str	r3, [r7, #16]
}
 800ad0e:	bf00      	nop
 800ad10:	bf00      	nop
 800ad12:	e7fd      	b.n	800ad10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad14:	697b      	ldr	r3, [r7, #20]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20000f84 	.word	0x20000f84
 800ad24:	0800d4d8 	.word	0x0800d4d8
 800ad28:	0800ae69 	.word	0x0800ae69
 800ad2c:	20000f88 	.word	0x20000f88

0800ad30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b08a      	sub	sp, #40	@ 0x28
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10b      	bne.n	800ad60 <xTimerGenericCommand+0x30>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	623b      	str	r3, [r7, #32]
}
 800ad5a:	bf00      	nop
 800ad5c:	bf00      	nop
 800ad5e:	e7fd      	b.n	800ad5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad60:	4b19      	ldr	r3, [pc, #100]	@ (800adc8 <xTimerGenericCommand+0x98>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d02a      	beq.n	800adbe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	2b05      	cmp	r3, #5
 800ad78:	dc18      	bgt.n	800adac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad7a:	f7ff fead 	bl	800aad8 <xTaskGetSchedulerState>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d109      	bne.n	800ad98 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad84:	4b10      	ldr	r3, [pc, #64]	@ (800adc8 <xTimerGenericCommand+0x98>)
 800ad86:	6818      	ldr	r0, [r3, #0]
 800ad88:	f107 0110 	add.w	r1, r7, #16
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad90:	f7fe fc60 	bl	8009654 <xQueueGenericSend>
 800ad94:	6278      	str	r0, [r7, #36]	@ 0x24
 800ad96:	e012      	b.n	800adbe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad98:	4b0b      	ldr	r3, [pc, #44]	@ (800adc8 <xTimerGenericCommand+0x98>)
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	f107 0110 	add.w	r1, r7, #16
 800ada0:	2300      	movs	r3, #0
 800ada2:	2200      	movs	r2, #0
 800ada4:	f7fe fc56 	bl	8009654 <xQueueGenericSend>
 800ada8:	6278      	str	r0, [r7, #36]	@ 0x24
 800adaa:	e008      	b.n	800adbe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800adac:	4b06      	ldr	r3, [pc, #24]	@ (800adc8 <xTimerGenericCommand+0x98>)
 800adae:	6818      	ldr	r0, [r3, #0]
 800adb0:	f107 0110 	add.w	r1, r7, #16
 800adb4:	2300      	movs	r3, #0
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	f7fe fd4e 	bl	8009858 <xQueueGenericSendFromISR>
 800adbc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800adbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3728      	adds	r7, #40	@ 0x28
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20000f84 	.word	0x20000f84

0800adcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af02      	add	r7, sp, #8
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add6:	4b23      	ldr	r3, [pc, #140]	@ (800ae64 <prvProcessExpiredTimer+0x98>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	3304      	adds	r3, #4
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fe fb01 	bl	80093ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d023      	beq.n	800ae40 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	699a      	ldr	r2, [r3, #24]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	18d1      	adds	r1, r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	6978      	ldr	r0, [r7, #20]
 800ae06:	f000 f8d3 	bl	800afb0 <prvInsertTimerInActiveList>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d020      	beq.n	800ae52 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae10:	2300      	movs	r3, #0
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	2300      	movs	r3, #0
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	2100      	movs	r1, #0
 800ae1a:	6978      	ldr	r0, [r7, #20]
 800ae1c:	f7ff ff88 	bl	800ad30 <xTimerGenericCommand>
 800ae20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d114      	bne.n	800ae52 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ae28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae2c:	f383 8811 	msr	BASEPRI, r3
 800ae30:	f3bf 8f6f 	isb	sy
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	60fb      	str	r3, [r7, #12]
}
 800ae3a:	bf00      	nop
 800ae3c:	bf00      	nop
 800ae3e:	e7fd      	b.n	800ae3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae46:	f023 0301 	bic.w	r3, r3, #1
 800ae4a:	b2da      	uxtb	r2, r3
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	6a1b      	ldr	r3, [r3, #32]
 800ae56:	6978      	ldr	r0, [r7, #20]
 800ae58:	4798      	blx	r3
}
 800ae5a:	bf00      	nop
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20000f7c 	.word	0x20000f7c

0800ae68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae70:	f107 0308 	add.w	r3, r7, #8
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 f859 	bl	800af2c <prvGetNextExpireTime>
 800ae7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	4619      	mov	r1, r3
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 f805 	bl	800ae90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae86:	f000 f8d5 	bl	800b034 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae8a:	bf00      	nop
 800ae8c:	e7f0      	b.n	800ae70 <prvTimerTask+0x8>
	...

0800ae90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae9a:	f7ff fa2d 	bl	800a2f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae9e:	f107 0308 	add.w	r3, r7, #8
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 f864 	bl	800af70 <prvSampleTimeNow>
 800aea8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d130      	bne.n	800af12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10a      	bne.n	800aecc <prvProcessTimerOrBlockTask+0x3c>
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d806      	bhi.n	800aecc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aebe:	f7ff fa29 	bl	800a314 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aec2:	68f9      	ldr	r1, [r7, #12]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff ff81 	bl	800adcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aeca:	e024      	b.n	800af16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d008      	beq.n	800aee4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aed2:	4b13      	ldr	r3, [pc, #76]	@ (800af20 <prvProcessTimerOrBlockTask+0x90>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <prvProcessTimerOrBlockTask+0x50>
 800aedc:	2301      	movs	r3, #1
 800aede:	e000      	b.n	800aee2 <prvProcessTimerOrBlockTask+0x52>
 800aee0:	2300      	movs	r3, #0
 800aee2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aee4:	4b0f      	ldr	r3, [pc, #60]	@ (800af24 <prvProcessTimerOrBlockTask+0x94>)
 800aee6:	6818      	ldr	r0, [r3, #0]
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	1ad3      	subs	r3, r2, r3
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	4619      	mov	r1, r3
 800aef2:	f7fe ff69 	bl	8009dc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aef6:	f7ff fa0d 	bl	800a314 <xTaskResumeAll>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10a      	bne.n	800af16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af00:	4b09      	ldr	r3, [pc, #36]	@ (800af28 <prvProcessTimerOrBlockTask+0x98>)
 800af02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af06:	601a      	str	r2, [r3, #0]
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	f3bf 8f6f 	isb	sy
}
 800af10:	e001      	b.n	800af16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af12:	f7ff f9ff 	bl	800a314 <xTaskResumeAll>
}
 800af16:	bf00      	nop
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	20000f80 	.word	0x20000f80
 800af24:	20000f84 	.word	0x20000f84
 800af28:	e000ed04 	.word	0xe000ed04

0800af2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af34:	4b0d      	ldr	r3, [pc, #52]	@ (800af6c <prvGetNextExpireTime+0x40>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <prvGetNextExpireTime+0x16>
 800af3e:	2201      	movs	r2, #1
 800af40:	e000      	b.n	800af44 <prvGetNextExpireTime+0x18>
 800af42:	2200      	movs	r2, #0
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d105      	bne.n	800af5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af50:	4b06      	ldr	r3, [pc, #24]	@ (800af6c <prvGetNextExpireTime+0x40>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	60fb      	str	r3, [r7, #12]
 800af5a:	e001      	b.n	800af60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af5c:	2300      	movs	r3, #0
 800af5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af60:	68fb      	ldr	r3, [r7, #12]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3714      	adds	r7, #20
 800af66:	46bd      	mov	sp, r7
 800af68:	bc80      	pop	{r7}
 800af6a:	4770      	bx	lr
 800af6c:	20000f7c 	.word	0x20000f7c

0800af70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af78:	f7ff fa6a 	bl	800a450 <xTaskGetTickCount>
 800af7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af7e:	4b0b      	ldr	r3, [pc, #44]	@ (800afac <prvSampleTimeNow+0x3c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	429a      	cmp	r2, r3
 800af86:	d205      	bcs.n	800af94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af88:	f000 f93a 	bl	800b200 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	e002      	b.n	800af9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af9a:	4a04      	ldr	r2, [pc, #16]	@ (800afac <prvSampleTimeNow+0x3c>)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800afa0:	68fb      	ldr	r3, [r7, #12]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	20000f8c 	.word	0x20000f8c

0800afb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800afbe:	2300      	movs	r3, #0
 800afc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800afce:	68ba      	ldr	r2, [r7, #8]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d812      	bhi.n	800affc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	1ad2      	subs	r2, r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d302      	bcc.n	800afea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800afe4:	2301      	movs	r3, #1
 800afe6:	617b      	str	r3, [r7, #20]
 800afe8:	e01b      	b.n	800b022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800afea:	4b10      	ldr	r3, [pc, #64]	@ (800b02c <prvInsertTimerInActiveList+0x7c>)
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3304      	adds	r3, #4
 800aff2:	4619      	mov	r1, r3
 800aff4:	4610      	mov	r0, r2
 800aff6:	f7fe f9c1 	bl	800937c <vListInsert>
 800affa:	e012      	b.n	800b022 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	429a      	cmp	r2, r3
 800b002:	d206      	bcs.n	800b012 <prvInsertTimerInActiveList+0x62>
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d302      	bcc.n	800b012 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b00c:	2301      	movs	r3, #1
 800b00e:	617b      	str	r3, [r7, #20]
 800b010:	e007      	b.n	800b022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b012:	4b07      	ldr	r3, [pc, #28]	@ (800b030 <prvInsertTimerInActiveList+0x80>)
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	3304      	adds	r3, #4
 800b01a:	4619      	mov	r1, r3
 800b01c:	4610      	mov	r0, r2
 800b01e:	f7fe f9ad 	bl	800937c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b022:	697b      	ldr	r3, [r7, #20]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3718      	adds	r7, #24
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	20000f80 	.word	0x20000f80
 800b030:	20000f7c 	.word	0x20000f7c

0800b034 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b08e      	sub	sp, #56	@ 0x38
 800b038:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b03a:	e0ce      	b.n	800b1da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	da19      	bge.n	800b076 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b042:	1d3b      	adds	r3, r7, #4
 800b044:	3304      	adds	r3, #4
 800b046:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10b      	bne.n	800b066 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	61fb      	str	r3, [r7, #28]
}
 800b060:	bf00      	nop
 800b062:	bf00      	nop
 800b064:	e7fd      	b.n	800b062 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b06c:	6850      	ldr	r0, [r2, #4]
 800b06e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b070:	6892      	ldr	r2, [r2, #8]
 800b072:	4611      	mov	r1, r2
 800b074:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f2c0 80ae 	blt.w	800b1da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d004      	beq.n	800b094 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08c:	3304      	adds	r3, #4
 800b08e:	4618      	mov	r0, r3
 800b090:	f7fe f9ac 	bl	80093ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b094:	463b      	mov	r3, r7
 800b096:	4618      	mov	r0, r3
 800b098:	f7ff ff6a 	bl	800af70 <prvSampleTimeNow>
 800b09c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2b09      	cmp	r3, #9
 800b0a2:	f200 8097 	bhi.w	800b1d4 <prvProcessReceivedCommands+0x1a0>
 800b0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0ac <prvProcessReceivedCommands+0x78>)
 800b0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ac:	0800b0d5 	.word	0x0800b0d5
 800b0b0:	0800b0d5 	.word	0x0800b0d5
 800b0b4:	0800b0d5 	.word	0x0800b0d5
 800b0b8:	0800b14b 	.word	0x0800b14b
 800b0bc:	0800b15f 	.word	0x0800b15f
 800b0c0:	0800b1ab 	.word	0x0800b1ab
 800b0c4:	0800b0d5 	.word	0x0800b0d5
 800b0c8:	0800b0d5 	.word	0x0800b0d5
 800b0cc:	0800b14b 	.word	0x0800b14b
 800b0d0:	0800b15f 	.word	0x0800b15f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0da:	f043 0301 	orr.w	r3, r3, #1
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b0e6:	68ba      	ldr	r2, [r7, #8]
 800b0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	18d1      	adds	r1, r2, r3
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0f4:	f7ff ff5c 	bl	800afb0 <prvInsertTimerInActiveList>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d06c      	beq.n	800b1d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b104:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b00      	cmp	r3, #0
 800b112:	d061      	beq.n	800b1d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	441a      	add	r2, r3
 800b11c:	2300      	movs	r3, #0
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	2300      	movs	r3, #0
 800b122:	2100      	movs	r1, #0
 800b124:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b126:	f7ff fe03 	bl	800ad30 <xTimerGenericCommand>
 800b12a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d152      	bne.n	800b1d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b136:	f383 8811 	msr	BASEPRI, r3
 800b13a:	f3bf 8f6f 	isb	sy
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	61bb      	str	r3, [r7, #24]
}
 800b144:	bf00      	nop
 800b146:	bf00      	nop
 800b148:	e7fd      	b.n	800b146 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b150:	f023 0301 	bic.w	r3, r3, #1
 800b154:	b2da      	uxtb	r2, r3
 800b156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b158:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b15c:	e03d      	b.n	800b1da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b160:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b164:	f043 0301 	orr.w	r3, r3, #1
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b16c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b174:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10b      	bne.n	800b196 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	617b      	str	r3, [r7, #20]
}
 800b190:	bf00      	nop
 800b192:	bf00      	nop
 800b194:	e7fd      	b.n	800b192 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b198:	699a      	ldr	r2, [r3, #24]
 800b19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19c:	18d1      	adds	r1, r2, r3
 800b19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1a4:	f7ff ff04 	bl	800afb0 <prvInsertTimerInActiveList>
					break;
 800b1a8:	e017      	b.n	800b1da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1b0:	f003 0302 	and.w	r3, r3, #2
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d103      	bne.n	800b1c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b1b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1ba:	f000 fb87 	bl	800b8cc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b1be:	e00c      	b.n	800b1da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1c6:	f023 0301 	bic.w	r3, r3, #1
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b1d2:	e002      	b.n	800b1da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b1d4:	bf00      	nop
 800b1d6:	e000      	b.n	800b1da <prvProcessReceivedCommands+0x1a6>
					break;
 800b1d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1da:	4b08      	ldr	r3, [pc, #32]	@ (800b1fc <prvProcessReceivedCommands+0x1c8>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	1d39      	adds	r1, r7, #4
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fe fbd6 	bl	8009994 <xQueueReceive>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f47f af26 	bne.w	800b03c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b1f0:	bf00      	nop
 800b1f2:	bf00      	nop
 800b1f4:	3730      	adds	r7, #48	@ 0x30
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20000f84 	.word	0x20000f84

0800b200 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b088      	sub	sp, #32
 800b204:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b206:	e049      	b.n	800b29c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b208:	4b2e      	ldr	r3, [pc, #184]	@ (800b2c4 <prvSwitchTimerLists+0xc4>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b212:	4b2c      	ldr	r3, [pc, #176]	@ (800b2c4 <prvSwitchTimerLists+0xc4>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	3304      	adds	r3, #4
 800b220:	4618      	mov	r0, r3
 800b222:	f7fe f8e3 	bl	80093ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d02f      	beq.n	800b29c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	693a      	ldr	r2, [r7, #16]
 800b242:	4413      	add	r3, r2
 800b244:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d90e      	bls.n	800b26c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b25a:	4b1a      	ldr	r3, [pc, #104]	@ (800b2c4 <prvSwitchTimerLists+0xc4>)
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3304      	adds	r3, #4
 800b262:	4619      	mov	r1, r3
 800b264:	4610      	mov	r0, r2
 800b266:	f7fe f889 	bl	800937c <vListInsert>
 800b26a:	e017      	b.n	800b29c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b26c:	2300      	movs	r3, #0
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	2300      	movs	r3, #0
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	2100      	movs	r1, #0
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f7ff fd5a 	bl	800ad30 <xTimerGenericCommand>
 800b27c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d10b      	bne.n	800b29c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	603b      	str	r3, [r7, #0]
}
 800b296:	bf00      	nop
 800b298:	bf00      	nop
 800b29a:	e7fd      	b.n	800b298 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b29c:	4b09      	ldr	r3, [pc, #36]	@ (800b2c4 <prvSwitchTimerLists+0xc4>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1b0      	bne.n	800b208 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b2a6:	4b07      	ldr	r3, [pc, #28]	@ (800b2c4 <prvSwitchTimerLists+0xc4>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b2ac:	4b06      	ldr	r3, [pc, #24]	@ (800b2c8 <prvSwitchTimerLists+0xc8>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a04      	ldr	r2, [pc, #16]	@ (800b2c4 <prvSwitchTimerLists+0xc4>)
 800b2b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b2b4:	4a04      	ldr	r2, [pc, #16]	@ (800b2c8 <prvSwitchTimerLists+0xc8>)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	6013      	str	r3, [r2, #0]
}
 800b2ba:	bf00      	nop
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20000f7c 	.word	0x20000f7c
 800b2c8:	20000f80 	.word	0x20000f80

0800b2cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b2d2:	f000 f92b 	bl	800b52c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b2d6:	4b15      	ldr	r3, [pc, #84]	@ (800b32c <prvCheckForValidListAndQueue+0x60>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d120      	bne.n	800b320 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b2de:	4814      	ldr	r0, [pc, #80]	@ (800b330 <prvCheckForValidListAndQueue+0x64>)
 800b2e0:	f7fd fffe 	bl	80092e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b2e4:	4813      	ldr	r0, [pc, #76]	@ (800b334 <prvCheckForValidListAndQueue+0x68>)
 800b2e6:	f7fd fffb 	bl	80092e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b2ea:	4b13      	ldr	r3, [pc, #76]	@ (800b338 <prvCheckForValidListAndQueue+0x6c>)
 800b2ec:	4a10      	ldr	r2, [pc, #64]	@ (800b330 <prvCheckForValidListAndQueue+0x64>)
 800b2ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b2f0:	4b12      	ldr	r3, [pc, #72]	@ (800b33c <prvCheckForValidListAndQueue+0x70>)
 800b2f2:	4a10      	ldr	r2, [pc, #64]	@ (800b334 <prvCheckForValidListAndQueue+0x68>)
 800b2f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	4b11      	ldr	r3, [pc, #68]	@ (800b340 <prvCheckForValidListAndQueue+0x74>)
 800b2fc:	4a11      	ldr	r2, [pc, #68]	@ (800b344 <prvCheckForValidListAndQueue+0x78>)
 800b2fe:	2110      	movs	r1, #16
 800b300:	200a      	movs	r0, #10
 800b302:	f7fe f907 	bl	8009514 <xQueueGenericCreateStatic>
 800b306:	4603      	mov	r3, r0
 800b308:	4a08      	ldr	r2, [pc, #32]	@ (800b32c <prvCheckForValidListAndQueue+0x60>)
 800b30a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b30c:	4b07      	ldr	r3, [pc, #28]	@ (800b32c <prvCheckForValidListAndQueue+0x60>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d005      	beq.n	800b320 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b314:	4b05      	ldr	r3, [pc, #20]	@ (800b32c <prvCheckForValidListAndQueue+0x60>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	490b      	ldr	r1, [pc, #44]	@ (800b348 <prvCheckForValidListAndQueue+0x7c>)
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe fd2c 	bl	8009d78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b320:	f000 f934 	bl	800b58c <vPortExitCritical>
}
 800b324:	bf00      	nop
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	20000f84 	.word	0x20000f84
 800b330:	20000f54 	.word	0x20000f54
 800b334:	20000f68 	.word	0x20000f68
 800b338:	20000f7c 	.word	0x20000f7c
 800b33c:	20000f80 	.word	0x20000f80
 800b340:	20001030 	.word	0x20001030
 800b344:	20000f90 	.word	0x20000f90
 800b348:	0800d4e0 	.word	0x0800d4e0

0800b34c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	3b04      	subs	r3, #4
 800b35c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	3b04      	subs	r3, #4
 800b36a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	f023 0201 	bic.w	r2, r3, #1
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3b04      	subs	r3, #4
 800b37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b37c:	4a08      	ldr	r2, [pc, #32]	@ (800b3a0 <pxPortInitialiseStack+0x54>)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3b14      	subs	r3, #20
 800b386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3b20      	subs	r3, #32
 800b392:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b394:	68fb      	ldr	r3, [r7, #12]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3714      	adds	r7, #20
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bc80      	pop	{r7}
 800b39e:	4770      	bx	lr
 800b3a0:	0800b3a5 	.word	0x0800b3a5

0800b3a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3ae:	4b12      	ldr	r3, [pc, #72]	@ (800b3f8 <prvTaskExitError+0x54>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b6:	d00b      	beq.n	800b3d0 <prvTaskExitError+0x2c>
	__asm volatile
 800b3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3bc:	f383 8811 	msr	BASEPRI, r3
 800b3c0:	f3bf 8f6f 	isb	sy
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	60fb      	str	r3, [r7, #12]
}
 800b3ca:	bf00      	nop
 800b3cc:	bf00      	nop
 800b3ce:	e7fd      	b.n	800b3cc <prvTaskExitError+0x28>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	60bb      	str	r3, [r7, #8]
}
 800b3e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3e4:	bf00      	nop
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d0fc      	beq.n	800b3e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3ec:	bf00      	nop
 800b3ee:	bf00      	nop
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bc80      	pop	{r7}
 800b3f6:	4770      	bx	lr
 800b3f8:	20000120 	.word	0x20000120
 800b3fc:	00000000 	.word	0x00000000

0800b400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b400:	4b07      	ldr	r3, [pc, #28]	@ (800b420 <pxCurrentTCBConst2>)
 800b402:	6819      	ldr	r1, [r3, #0]
 800b404:	6808      	ldr	r0, [r1, #0]
 800b406:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b40a:	f380 8809 	msr	PSP, r0
 800b40e:	f3bf 8f6f 	isb	sy
 800b412:	f04f 0000 	mov.w	r0, #0
 800b416:	f380 8811 	msr	BASEPRI, r0
 800b41a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b41e:	4770      	bx	lr

0800b420 <pxCurrentTCBConst2>:
 800b420:	20000a54 	.word	0x20000a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b424:	bf00      	nop
 800b426:	bf00      	nop

0800b428 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b428:	4806      	ldr	r0, [pc, #24]	@ (800b444 <prvPortStartFirstTask+0x1c>)
 800b42a:	6800      	ldr	r0, [r0, #0]
 800b42c:	6800      	ldr	r0, [r0, #0]
 800b42e:	f380 8808 	msr	MSP, r0
 800b432:	b662      	cpsie	i
 800b434:	b661      	cpsie	f
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	f3bf 8f6f 	isb	sy
 800b43e:	df00      	svc	0
 800b440:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b442:	bf00      	nop
 800b444:	e000ed08 	.word	0xe000ed08

0800b448 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b44e:	4b32      	ldr	r3, [pc, #200]	@ (800b518 <xPortStartScheduler+0xd0>)
 800b450:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	b2db      	uxtb	r3, r3
 800b458:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	22ff      	movs	r2, #255	@ 0xff
 800b45e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	b2db      	uxtb	r3, r3
 800b466:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b468:	78fb      	ldrb	r3, [r7, #3]
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b470:	b2da      	uxtb	r2, r3
 800b472:	4b2a      	ldr	r3, [pc, #168]	@ (800b51c <xPortStartScheduler+0xd4>)
 800b474:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b476:	4b2a      	ldr	r3, [pc, #168]	@ (800b520 <xPortStartScheduler+0xd8>)
 800b478:	2207      	movs	r2, #7
 800b47a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b47c:	e009      	b.n	800b492 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b47e:	4b28      	ldr	r3, [pc, #160]	@ (800b520 <xPortStartScheduler+0xd8>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3b01      	subs	r3, #1
 800b484:	4a26      	ldr	r2, [pc, #152]	@ (800b520 <xPortStartScheduler+0xd8>)
 800b486:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b488:	78fb      	ldrb	r3, [r7, #3]
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	005b      	lsls	r3, r3, #1
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b492:	78fb      	ldrb	r3, [r7, #3]
 800b494:	b2db      	uxtb	r3, r3
 800b496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b49a:	2b80      	cmp	r3, #128	@ 0x80
 800b49c:	d0ef      	beq.n	800b47e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b49e:	4b20      	ldr	r3, [pc, #128]	@ (800b520 <xPortStartScheduler+0xd8>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f1c3 0307 	rsb	r3, r3, #7
 800b4a6:	2b04      	cmp	r3, #4
 800b4a8:	d00b      	beq.n	800b4c2 <xPortStartScheduler+0x7a>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	60bb      	str	r3, [r7, #8]
}
 800b4bc:	bf00      	nop
 800b4be:	bf00      	nop
 800b4c0:	e7fd      	b.n	800b4be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4c2:	4b17      	ldr	r3, [pc, #92]	@ (800b520 <xPortStartScheduler+0xd8>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	021b      	lsls	r3, r3, #8
 800b4c8:	4a15      	ldr	r2, [pc, #84]	@ (800b520 <xPortStartScheduler+0xd8>)
 800b4ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4cc:	4b14      	ldr	r3, [pc, #80]	@ (800b520 <xPortStartScheduler+0xd8>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b4d4:	4a12      	ldr	r2, [pc, #72]	@ (800b520 <xPortStartScheduler+0xd8>)
 800b4d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	b2da      	uxtb	r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4e0:	4b10      	ldr	r3, [pc, #64]	@ (800b524 <xPortStartScheduler+0xdc>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a0f      	ldr	r2, [pc, #60]	@ (800b524 <xPortStartScheduler+0xdc>)
 800b4e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b4ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b524 <xPortStartScheduler+0xdc>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a0c      	ldr	r2, [pc, #48]	@ (800b524 <xPortStartScheduler+0xdc>)
 800b4f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b4f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4f8:	f000 f8b8 	bl	800b66c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b528 <xPortStartScheduler+0xe0>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b502:	f7ff ff91 	bl	800b428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b506:	f7ff f86b 	bl	800a5e0 <vTaskSwitchContext>
	prvTaskExitError();
 800b50a:	f7ff ff4b 	bl	800b3a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	e000e400 	.word	0xe000e400
 800b51c:	20001080 	.word	0x20001080
 800b520:	20001084 	.word	0x20001084
 800b524:	e000ed20 	.word	0xe000ed20
 800b528:	20000120 	.word	0x20000120

0800b52c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	607b      	str	r3, [r7, #4]
}
 800b544:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b546:	4b0f      	ldr	r3, [pc, #60]	@ (800b584 <vPortEnterCritical+0x58>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3301      	adds	r3, #1
 800b54c:	4a0d      	ldr	r2, [pc, #52]	@ (800b584 <vPortEnterCritical+0x58>)
 800b54e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b550:	4b0c      	ldr	r3, [pc, #48]	@ (800b584 <vPortEnterCritical+0x58>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d110      	bne.n	800b57a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b558:	4b0b      	ldr	r3, [pc, #44]	@ (800b588 <vPortEnterCritical+0x5c>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00b      	beq.n	800b57a <vPortEnterCritical+0x4e>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	603b      	str	r3, [r7, #0]
}
 800b574:	bf00      	nop
 800b576:	bf00      	nop
 800b578:	e7fd      	b.n	800b576 <vPortEnterCritical+0x4a>
	}
}
 800b57a:	bf00      	nop
 800b57c:	370c      	adds	r7, #12
 800b57e:	46bd      	mov	sp, r7
 800b580:	bc80      	pop	{r7}
 800b582:	4770      	bx	lr
 800b584:	20000120 	.word	0x20000120
 800b588:	e000ed04 	.word	0xe000ed04

0800b58c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b592:	4b12      	ldr	r3, [pc, #72]	@ (800b5dc <vPortExitCritical+0x50>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10b      	bne.n	800b5b2 <vPortExitCritical+0x26>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	607b      	str	r3, [r7, #4]
}
 800b5ac:	bf00      	nop
 800b5ae:	bf00      	nop
 800b5b0:	e7fd      	b.n	800b5ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b5dc <vPortExitCritical+0x50>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	4a08      	ldr	r2, [pc, #32]	@ (800b5dc <vPortExitCritical+0x50>)
 800b5ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5bc:	4b07      	ldr	r3, [pc, #28]	@ (800b5dc <vPortExitCritical+0x50>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d105      	bne.n	800b5d0 <vPortExitCritical+0x44>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	f383 8811 	msr	BASEPRI, r3
}
 800b5ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bc80      	pop	{r7}
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	20000120 	.word	0x20000120

0800b5e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5e0:	f3ef 8009 	mrs	r0, PSP
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	4b0d      	ldr	r3, [pc, #52]	@ (800b620 <pxCurrentTCBConst>)
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b5f0:	6010      	str	r0, [r2, #0]
 800b5f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b5f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b5fa:	f380 8811 	msr	BASEPRI, r0
 800b5fe:	f7fe ffef 	bl	800a5e0 <vTaskSwitchContext>
 800b602:	f04f 0000 	mov.w	r0, #0
 800b606:	f380 8811 	msr	BASEPRI, r0
 800b60a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b60e:	6819      	ldr	r1, [r3, #0]
 800b610:	6808      	ldr	r0, [r1, #0]
 800b612:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b616:	f380 8809 	msr	PSP, r0
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	4770      	bx	lr

0800b620 <pxCurrentTCBConst>:
 800b620:	20000a54 	.word	0x20000a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b624:	bf00      	nop
 800b626:	bf00      	nop

0800b628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	607b      	str	r3, [r7, #4]
}
 800b640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b642:	f7fe ff13 	bl	800a46c <xTaskIncrementTick>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d003      	beq.n	800b654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b64c:	4b06      	ldr	r3, [pc, #24]	@ (800b668 <xPortSysTickHandler+0x40>)
 800b64e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	2300      	movs	r3, #0
 800b656:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	f383 8811 	msr	BASEPRI, r3
}
 800b65e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b660:	bf00      	nop
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	e000ed04 	.word	0xe000ed04

0800b66c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b66c:	b480      	push	{r7}
 800b66e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b670:	4b0a      	ldr	r3, [pc, #40]	@ (800b69c <vPortSetupTimerInterrupt+0x30>)
 800b672:	2200      	movs	r2, #0
 800b674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b676:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a0 <vPortSetupTimerInterrupt+0x34>)
 800b678:	2200      	movs	r2, #0
 800b67a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b67c:	4b09      	ldr	r3, [pc, #36]	@ (800b6a4 <vPortSetupTimerInterrupt+0x38>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a09      	ldr	r2, [pc, #36]	@ (800b6a8 <vPortSetupTimerInterrupt+0x3c>)
 800b682:	fba2 2303 	umull	r2, r3, r2, r3
 800b686:	099b      	lsrs	r3, r3, #6
 800b688:	4a08      	ldr	r2, [pc, #32]	@ (800b6ac <vPortSetupTimerInterrupt+0x40>)
 800b68a:	3b01      	subs	r3, #1
 800b68c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b68e:	4b03      	ldr	r3, [pc, #12]	@ (800b69c <vPortSetupTimerInterrupt+0x30>)
 800b690:	2207      	movs	r2, #7
 800b692:	601a      	str	r2, [r3, #0]
}
 800b694:	bf00      	nop
 800b696:	46bd      	mov	sp, r7
 800b698:	bc80      	pop	{r7}
 800b69a:	4770      	bx	lr
 800b69c:	e000e010 	.word	0xe000e010
 800b6a0:	e000e018 	.word	0xe000e018
 800b6a4:	20000004 	.word	0x20000004
 800b6a8:	10624dd3 	.word	0x10624dd3
 800b6ac:	e000e014 	.word	0xe000e014

0800b6b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6b6:	f3ef 8305 	mrs	r3, IPSR
 800b6ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2b0f      	cmp	r3, #15
 800b6c0:	d915      	bls.n	800b6ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6c2:	4a17      	ldr	r2, [pc, #92]	@ (800b720 <vPortValidateInterruptPriority+0x70>)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b6cc:	4b15      	ldr	r3, [pc, #84]	@ (800b724 <vPortValidateInterruptPriority+0x74>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	7afa      	ldrb	r2, [r7, #11]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d20b      	bcs.n	800b6ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6da:	f383 8811 	msr	BASEPRI, r3
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f3bf 8f4f 	dsb	sy
 800b6e6:	607b      	str	r3, [r7, #4]
}
 800b6e8:	bf00      	nop
 800b6ea:	bf00      	nop
 800b6ec:	e7fd      	b.n	800b6ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b728 <vPortValidateInterruptPriority+0x78>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b72c <vPortValidateInterruptPriority+0x7c>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d90b      	bls.n	800b716 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	603b      	str	r3, [r7, #0]
}
 800b710:	bf00      	nop
 800b712:	bf00      	nop
 800b714:	e7fd      	b.n	800b712 <vPortValidateInterruptPriority+0x62>
	}
 800b716:	bf00      	nop
 800b718:	3714      	adds	r7, #20
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bc80      	pop	{r7}
 800b71e:	4770      	bx	lr
 800b720:	e000e3f0 	.word	0xe000e3f0
 800b724:	20001080 	.word	0x20001080
 800b728:	e000ed0c 	.word	0xe000ed0c
 800b72c:	20001084 	.word	0x20001084

0800b730 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b08a      	sub	sp, #40	@ 0x28
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b738:	2300      	movs	r3, #0
 800b73a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b73c:	f7fe fddc 	bl	800a2f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b740:	4b5c      	ldr	r3, [pc, #368]	@ (800b8b4 <pvPortMalloc+0x184>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d101      	bne.n	800b74c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b748:	f000 f924 	bl	800b994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b74c:	4b5a      	ldr	r3, [pc, #360]	@ (800b8b8 <pvPortMalloc+0x188>)
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4013      	ands	r3, r2
 800b754:	2b00      	cmp	r3, #0
 800b756:	f040 8095 	bne.w	800b884 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d01e      	beq.n	800b79e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b760:	2208      	movs	r2, #8
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4413      	add	r3, r2
 800b766:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f003 0307 	and.w	r3, r3, #7
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d015      	beq.n	800b79e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f023 0307 	bic.w	r3, r3, #7
 800b778:	3308      	adds	r3, #8
 800b77a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f003 0307 	and.w	r3, r3, #7
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00b      	beq.n	800b79e <pvPortMalloc+0x6e>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	617b      	str	r3, [r7, #20]
}
 800b798:	bf00      	nop
 800b79a:	bf00      	nop
 800b79c:	e7fd      	b.n	800b79a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d06f      	beq.n	800b884 <pvPortMalloc+0x154>
 800b7a4:	4b45      	ldr	r3, [pc, #276]	@ (800b8bc <pvPortMalloc+0x18c>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d86a      	bhi.n	800b884 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7ae:	4b44      	ldr	r3, [pc, #272]	@ (800b8c0 <pvPortMalloc+0x190>)
 800b7b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7b2:	4b43      	ldr	r3, [pc, #268]	@ (800b8c0 <pvPortMalloc+0x190>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7b8:	e004      	b.n	800b7c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d903      	bls.n	800b7d6 <pvPortMalloc+0xa6>
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1f1      	bne.n	800b7ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b7d6:	4b37      	ldr	r3, [pc, #220]	@ (800b8b4 <pvPortMalloc+0x184>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d051      	beq.n	800b884 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b7e0:	6a3b      	ldr	r3, [r7, #32]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2208      	movs	r2, #8
 800b7e6:	4413      	add	r3, r2
 800b7e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	6a3b      	ldr	r3, [r7, #32]
 800b7f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f4:	685a      	ldr	r2, [r3, #4]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	1ad2      	subs	r2, r2, r3
 800b7fa:	2308      	movs	r3, #8
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d920      	bls.n	800b844 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4413      	add	r3, r2
 800b808:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	f003 0307 	and.w	r3, r3, #7
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00b      	beq.n	800b82c <pvPortMalloc+0xfc>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b818:	f383 8811 	msr	BASEPRI, r3
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	613b      	str	r3, [r7, #16]
}
 800b826:	bf00      	nop
 800b828:	bf00      	nop
 800b82a:	e7fd      	b.n	800b828 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82e:	685a      	ldr	r2, [r3, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	1ad2      	subs	r2, r2, r3
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b83e:	69b8      	ldr	r0, [r7, #24]
 800b840:	f000 f90a 	bl	800ba58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b844:	4b1d      	ldr	r3, [pc, #116]	@ (800b8bc <pvPortMalloc+0x18c>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	4a1b      	ldr	r2, [pc, #108]	@ (800b8bc <pvPortMalloc+0x18c>)
 800b850:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b852:	4b1a      	ldr	r3, [pc, #104]	@ (800b8bc <pvPortMalloc+0x18c>)
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	4b1b      	ldr	r3, [pc, #108]	@ (800b8c4 <pvPortMalloc+0x194>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d203      	bcs.n	800b866 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b85e:	4b17      	ldr	r3, [pc, #92]	@ (800b8bc <pvPortMalloc+0x18c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a18      	ldr	r2, [pc, #96]	@ (800b8c4 <pvPortMalloc+0x194>)
 800b864:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b868:	685a      	ldr	r2, [r3, #4]
 800b86a:	4b13      	ldr	r3, [pc, #76]	@ (800b8b8 <pvPortMalloc+0x188>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	431a      	orrs	r2, r3
 800b870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b872:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b876:	2200      	movs	r2, #0
 800b878:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b87a:	4b13      	ldr	r3, [pc, #76]	@ (800b8c8 <pvPortMalloc+0x198>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3301      	adds	r3, #1
 800b880:	4a11      	ldr	r2, [pc, #68]	@ (800b8c8 <pvPortMalloc+0x198>)
 800b882:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b884:	f7fe fd46 	bl	800a314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	f003 0307 	and.w	r3, r3, #7
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00b      	beq.n	800b8aa <pvPortMalloc+0x17a>
	__asm volatile
 800b892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	60fb      	str	r3, [r7, #12]
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop
 800b8a8:	e7fd      	b.n	800b8a6 <pvPortMalloc+0x176>
	return pvReturn;
 800b8aa:	69fb      	ldr	r3, [r7, #28]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3728      	adds	r7, #40	@ 0x28
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	20001c90 	.word	0x20001c90
 800b8b8:	20001ca4 	.word	0x20001ca4
 800b8bc:	20001c94 	.word	0x20001c94
 800b8c0:	20001c88 	.word	0x20001c88
 800b8c4:	20001c98 	.word	0x20001c98
 800b8c8:	20001c9c 	.word	0x20001c9c

0800b8cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d04f      	beq.n	800b97e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b8de:	2308      	movs	r3, #8
 800b8e0:	425b      	negs	r3, r3
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	685a      	ldr	r2, [r3, #4]
 800b8f0:	4b25      	ldr	r3, [pc, #148]	@ (800b988 <vPortFree+0xbc>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4013      	ands	r3, r2
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10b      	bne.n	800b912 <vPortFree+0x46>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	60fb      	str	r3, [r7, #12]
}
 800b90c:	bf00      	nop
 800b90e:	bf00      	nop
 800b910:	e7fd      	b.n	800b90e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00b      	beq.n	800b932 <vPortFree+0x66>
	__asm volatile
 800b91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	60bb      	str	r3, [r7, #8]
}
 800b92c:	bf00      	nop
 800b92e:	bf00      	nop
 800b930:	e7fd      	b.n	800b92e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	4b14      	ldr	r3, [pc, #80]	@ (800b988 <vPortFree+0xbc>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4013      	ands	r3, r2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d01e      	beq.n	800b97e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d11a      	bne.n	800b97e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	4b0e      	ldr	r3, [pc, #56]	@ (800b988 <vPortFree+0xbc>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	43db      	mvns	r3, r3
 800b952:	401a      	ands	r2, r3
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b958:	f7fe fcce 	bl	800a2f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	4b0a      	ldr	r3, [pc, #40]	@ (800b98c <vPortFree+0xc0>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4413      	add	r3, r2
 800b966:	4a09      	ldr	r2, [pc, #36]	@ (800b98c <vPortFree+0xc0>)
 800b968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b96a:	6938      	ldr	r0, [r7, #16]
 800b96c:	f000 f874 	bl	800ba58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b970:	4b07      	ldr	r3, [pc, #28]	@ (800b990 <vPortFree+0xc4>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3301      	adds	r3, #1
 800b976:	4a06      	ldr	r2, [pc, #24]	@ (800b990 <vPortFree+0xc4>)
 800b978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b97a:	f7fe fccb 	bl	800a314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b97e:	bf00      	nop
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	20001ca4 	.word	0x20001ca4
 800b98c:	20001c94 	.word	0x20001c94
 800b990:	20001ca0 	.word	0x20001ca0

0800b994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b99a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b99e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9a0:	4b27      	ldr	r3, [pc, #156]	@ (800ba40 <prvHeapInit+0xac>)
 800b9a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f003 0307 	and.w	r3, r3, #7
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00c      	beq.n	800b9c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3307      	adds	r3, #7
 800b9b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f023 0307 	bic.w	r3, r3, #7
 800b9ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	4a1f      	ldr	r2, [pc, #124]	@ (800ba40 <prvHeapInit+0xac>)
 800b9c4:	4413      	add	r3, r2
 800b9c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9cc:	4a1d      	ldr	r2, [pc, #116]	@ (800ba44 <prvHeapInit+0xb0>)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9d2:	4b1c      	ldr	r3, [pc, #112]	@ (800ba44 <prvHeapInit+0xb0>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	4413      	add	r3, r2
 800b9de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9e0:	2208      	movs	r2, #8
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	1a9b      	subs	r3, r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f023 0307 	bic.w	r3, r3, #7
 800b9ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	4a15      	ldr	r2, [pc, #84]	@ (800ba48 <prvHeapInit+0xb4>)
 800b9f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b9f6:	4b14      	ldr	r3, [pc, #80]	@ (800ba48 <prvHeapInit+0xb4>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b9fe:	4b12      	ldr	r3, [pc, #72]	@ (800ba48 <prvHeapInit+0xb4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2200      	movs	r2, #0
 800ba04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	1ad2      	subs	r2, r2, r3
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba14:	4b0c      	ldr	r3, [pc, #48]	@ (800ba48 <prvHeapInit+0xb4>)
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	4a0a      	ldr	r2, [pc, #40]	@ (800ba4c <prvHeapInit+0xb8>)
 800ba22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	4a09      	ldr	r2, [pc, #36]	@ (800ba50 <prvHeapInit+0xbc>)
 800ba2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba2c:	4b09      	ldr	r3, [pc, #36]	@ (800ba54 <prvHeapInit+0xc0>)
 800ba2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ba32:	601a      	str	r2, [r3, #0]
}
 800ba34:	bf00      	nop
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bc80      	pop	{r7}
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	20001088 	.word	0x20001088
 800ba44:	20001c88 	.word	0x20001c88
 800ba48:	20001c90 	.word	0x20001c90
 800ba4c:	20001c98 	.word	0x20001c98
 800ba50:	20001c94 	.word	0x20001c94
 800ba54:	20001ca4 	.word	0x20001ca4

0800ba58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba60:	4b27      	ldr	r3, [pc, #156]	@ (800bb00 <prvInsertBlockIntoFreeList+0xa8>)
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	e002      	b.n	800ba6c <prvInsertBlockIntoFreeList+0x14>
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d8f7      	bhi.n	800ba66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	4413      	add	r3, r2
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d108      	bne.n	800ba9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	441a      	add	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	441a      	add	r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d118      	bne.n	800bae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	4b14      	ldr	r3, [pc, #80]	@ (800bb04 <prvInsertBlockIntoFreeList+0xac>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d00d      	beq.n	800bad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	685a      	ldr	r2, [r3, #4]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	441a      	add	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	e008      	b.n	800bae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bad6:	4b0b      	ldr	r3, [pc, #44]	@ (800bb04 <prvInsertBlockIntoFreeList+0xac>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	e003      	b.n	800bae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	429a      	cmp	r2, r3
 800baee:	d002      	beq.n	800baf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800baf6:	bf00      	nop
 800baf8:	3714      	adds	r7, #20
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bc80      	pop	{r7}
 800bafe:	4770      	bx	lr
 800bb00:	20001c88 	.word	0x20001c88
 800bb04:	20001c90 	.word	0x20001c90

0800bb08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4912      	ldr	r1, [pc, #72]	@ (800bb58 <MX_USB_DEVICE_Init+0x50>)
 800bb10:	4812      	ldr	r0, [pc, #72]	@ (800bb5c <MX_USB_DEVICE_Init+0x54>)
 800bb12:	f7fc f9e2 	bl	8007eda <USBD_Init>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb1c:	f7f5 f8ec 	bl	8000cf8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb20:	490f      	ldr	r1, [pc, #60]	@ (800bb60 <MX_USB_DEVICE_Init+0x58>)
 800bb22:	480e      	ldr	r0, [pc, #56]	@ (800bb5c <MX_USB_DEVICE_Init+0x54>)
 800bb24:	f7fc fa04 	bl	8007f30 <USBD_RegisterClass>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb2e:	f7f5 f8e3 	bl	8000cf8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb32:	490c      	ldr	r1, [pc, #48]	@ (800bb64 <MX_USB_DEVICE_Init+0x5c>)
 800bb34:	4809      	ldr	r0, [pc, #36]	@ (800bb5c <MX_USB_DEVICE_Init+0x54>)
 800bb36:	f7fc f935 	bl	8007da4 <USBD_CDC_RegisterInterface>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d001      	beq.n	800bb44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb40:	f7f5 f8da 	bl	8000cf8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb44:	4805      	ldr	r0, [pc, #20]	@ (800bb5c <MX_USB_DEVICE_Init+0x54>)
 800bb46:	f7fc fa0c 	bl	8007f62 <USBD_Start>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb50:	f7f5 f8d2 	bl	8000cf8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb54:	bf00      	nop
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	20000134 	.word	0x20000134
 800bb5c:	20001ca8 	.word	0x20001ca8
 800bb60:	2000001c 	.word	0x2000001c
 800bb64:	20000124 	.word	0x20000124

0800bb68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	4905      	ldr	r1, [pc, #20]	@ (800bb84 <CDC_Init_FS+0x1c>)
 800bb70:	4805      	ldr	r0, [pc, #20]	@ (800bb88 <CDC_Init_FS+0x20>)
 800bb72:	f7fc f92d 	bl	8007dd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb76:	4905      	ldr	r1, [pc, #20]	@ (800bb8c <CDC_Init_FS+0x24>)
 800bb78:	4803      	ldr	r0, [pc, #12]	@ (800bb88 <CDC_Init_FS+0x20>)
 800bb7a:	f7fc f942 	bl	8007e02 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	2000236c 	.word	0x2000236c
 800bb88:	20001ca8 	.word	0x20001ca8
 800bb8c:	20001f6c 	.word	0x20001f6c

0800bb90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb90:	b480      	push	{r7}
 800bb92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bc80      	pop	{r7}
 800bb9c:	4770      	bx	lr
	...

0800bba0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	4603      	mov	r3, r0
 800bba8:	6039      	str	r1, [r7, #0]
 800bbaa:	71fb      	strb	r3, [r7, #7]
 800bbac:	4613      	mov	r3, r2
 800bbae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bbb0:	79fb      	ldrb	r3, [r7, #7]
 800bbb2:	2b23      	cmp	r3, #35	@ 0x23
 800bbb4:	d84a      	bhi.n	800bc4c <CDC_Control_FS+0xac>
 800bbb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbbc <CDC_Control_FS+0x1c>)
 800bbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbbc:	0800bc4d 	.word	0x0800bc4d
 800bbc0:	0800bc4d 	.word	0x0800bc4d
 800bbc4:	0800bc4d 	.word	0x0800bc4d
 800bbc8:	0800bc4d 	.word	0x0800bc4d
 800bbcc:	0800bc4d 	.word	0x0800bc4d
 800bbd0:	0800bc4d 	.word	0x0800bc4d
 800bbd4:	0800bc4d 	.word	0x0800bc4d
 800bbd8:	0800bc4d 	.word	0x0800bc4d
 800bbdc:	0800bc4d 	.word	0x0800bc4d
 800bbe0:	0800bc4d 	.word	0x0800bc4d
 800bbe4:	0800bc4d 	.word	0x0800bc4d
 800bbe8:	0800bc4d 	.word	0x0800bc4d
 800bbec:	0800bc4d 	.word	0x0800bc4d
 800bbf0:	0800bc4d 	.word	0x0800bc4d
 800bbf4:	0800bc4d 	.word	0x0800bc4d
 800bbf8:	0800bc4d 	.word	0x0800bc4d
 800bbfc:	0800bc4d 	.word	0x0800bc4d
 800bc00:	0800bc4d 	.word	0x0800bc4d
 800bc04:	0800bc4d 	.word	0x0800bc4d
 800bc08:	0800bc4d 	.word	0x0800bc4d
 800bc0c:	0800bc4d 	.word	0x0800bc4d
 800bc10:	0800bc4d 	.word	0x0800bc4d
 800bc14:	0800bc4d 	.word	0x0800bc4d
 800bc18:	0800bc4d 	.word	0x0800bc4d
 800bc1c:	0800bc4d 	.word	0x0800bc4d
 800bc20:	0800bc4d 	.word	0x0800bc4d
 800bc24:	0800bc4d 	.word	0x0800bc4d
 800bc28:	0800bc4d 	.word	0x0800bc4d
 800bc2c:	0800bc4d 	.word	0x0800bc4d
 800bc30:	0800bc4d 	.word	0x0800bc4d
 800bc34:	0800bc4d 	.word	0x0800bc4d
 800bc38:	0800bc4d 	.word	0x0800bc4d
 800bc3c:	0800bc4d 	.word	0x0800bc4d
 800bc40:	0800bc4d 	.word	0x0800bc4d
 800bc44:	0800bc4d 	.word	0x0800bc4d
 800bc48:	0800bc4d 	.word	0x0800bc4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc4c:	bf00      	nop
  }

  return (USBD_OK);
 800bc4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bc80      	pop	{r7}
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop

0800bc5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc66:	6879      	ldr	r1, [r7, #4]
 800bc68:	480d      	ldr	r0, [pc, #52]	@ (800bca0 <CDC_Receive_FS+0x44>)
 800bc6a:	f7fc f8ca 	bl	8007e02 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc6e:	480c      	ldr	r0, [pc, #48]	@ (800bca0 <CDC_Receive_FS+0x44>)
 800bc70:	f7fc f909 	bl	8007e86 <USBD_CDC_ReceivePacket>

  if (*Buf >= 1 && *Buf <= 5) {
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <CDC_Receive_FS+0x38>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	2b05      	cmp	r3, #5
 800bc82:	d807      	bhi.n	800bc94 <CDC_Receive_FS+0x38>
	    period_task_1 = *Buf;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	781a      	ldrb	r2, [r3, #0]
 800bc88:	4b06      	ldr	r3, [pc, #24]	@ (800bca4 <CDC_Receive_FS+0x48>)
 800bc8a:	701a      	strb	r2, [r3, #0]

	    period_task_2 = *Buf;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	781a      	ldrb	r2, [r3, #0]
 800bc90:	4b05      	ldr	r3, [pc, #20]	@ (800bca8 <CDC_Receive_FS+0x4c>)
 800bc92:	701a      	strb	r2, [r3, #0]



//    printf("Received: %d\n", len);

  return (USBD_OK);
 800bc94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	20001ca8 	.word	0x20001ca8
 800bca4:	20000000 	.word	0x20000000
 800bca8:	20000001 	.word	0x20000001

0800bcac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bcbc:	4b0d      	ldr	r3, [pc, #52]	@ (800bcf4 <CDC_Transmit_FS+0x48>)
 800bcbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d001      	beq.n	800bcd2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e00b      	b.n	800bcea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bcd2:	887b      	ldrh	r3, [r7, #2]
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	6879      	ldr	r1, [r7, #4]
 800bcd8:	4806      	ldr	r0, [pc, #24]	@ (800bcf4 <CDC_Transmit_FS+0x48>)
 800bcda:	f7fc f879 	bl	8007dd0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bcde:	4805      	ldr	r0, [pc, #20]	@ (800bcf4 <CDC_Transmit_FS+0x48>)
 800bce0:	f7fc f8a2 	bl	8007e28 <USBD_CDC_TransmitPacket>
 800bce4:	4603      	mov	r3, r0
 800bce6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20001ca8 	.word	0x20001ca8

0800bcf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	6039      	str	r1, [r7, #0]
 800bd02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	2212      	movs	r2, #18
 800bd08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd0a:	4b03      	ldr	r3, [pc, #12]	@ (800bd18 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bc80      	pop	{r7}
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	20000150 	.word	0x20000150

0800bd1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	6039      	str	r1, [r7, #0]
 800bd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	2204      	movs	r2, #4
 800bd2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd2e:	4b03      	ldr	r3, [pc, #12]	@ (800bd3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bc80      	pop	{r7}
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	20000164 	.word	0x20000164

0800bd40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	4603      	mov	r3, r0
 800bd48:	6039      	str	r1, [r7, #0]
 800bd4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d105      	bne.n	800bd5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	4907      	ldr	r1, [pc, #28]	@ (800bd74 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd56:	4808      	ldr	r0, [pc, #32]	@ (800bd78 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd58:	f7fd f879 	bl	8008e4e <USBD_GetString>
 800bd5c:	e004      	b.n	800bd68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	4904      	ldr	r1, [pc, #16]	@ (800bd74 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd62:	4805      	ldr	r0, [pc, #20]	@ (800bd78 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd64:	f7fd f873 	bl	8008e4e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd68:	4b02      	ldr	r3, [pc, #8]	@ (800bd74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	2000276c 	.word	0x2000276c
 800bd78:	0800d4e8 	.word	0x0800d4e8

0800bd7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	4603      	mov	r3, r0
 800bd84:	6039      	str	r1, [r7, #0]
 800bd86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd88:	683a      	ldr	r2, [r7, #0]
 800bd8a:	4904      	ldr	r1, [pc, #16]	@ (800bd9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd8c:	4804      	ldr	r0, [pc, #16]	@ (800bda0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd8e:	f7fd f85e 	bl	8008e4e <USBD_GetString>
  return USBD_StrDesc;
 800bd92:	4b02      	ldr	r3, [pc, #8]	@ (800bd9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	2000276c 	.word	0x2000276c
 800bda0:	0800d500 	.word	0x0800d500

0800bda4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	4603      	mov	r3, r0
 800bdac:	6039      	str	r1, [r7, #0]
 800bdae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	221a      	movs	r2, #26
 800bdb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bdb6:	f000 f843 	bl	800be40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bdba:	4b02      	ldr	r3, [pc, #8]	@ (800bdc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	20000168 	.word	0x20000168

0800bdc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	6039      	str	r1, [r7, #0]
 800bdd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bdd4:	79fb      	ldrb	r3, [r7, #7]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d105      	bne.n	800bde6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	4907      	ldr	r1, [pc, #28]	@ (800bdfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdde:	4808      	ldr	r0, [pc, #32]	@ (800be00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bde0:	f7fd f835 	bl	8008e4e <USBD_GetString>
 800bde4:	e004      	b.n	800bdf0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	4904      	ldr	r1, [pc, #16]	@ (800bdfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdea:	4805      	ldr	r0, [pc, #20]	@ (800be00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bdec:	f7fd f82f 	bl	8008e4e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdf0:	4b02      	ldr	r3, [pc, #8]	@ (800bdfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	2000276c 	.word	0x2000276c
 800be00:	0800d514 	.word	0x0800d514

0800be04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	4603      	mov	r3, r0
 800be0c:	6039      	str	r1, [r7, #0]
 800be0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be10:	79fb      	ldrb	r3, [r7, #7]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d105      	bne.n	800be22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be16:	683a      	ldr	r2, [r7, #0]
 800be18:	4907      	ldr	r1, [pc, #28]	@ (800be38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be1a:	4808      	ldr	r0, [pc, #32]	@ (800be3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be1c:	f7fd f817 	bl	8008e4e <USBD_GetString>
 800be20:	e004      	b.n	800be2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	4904      	ldr	r1, [pc, #16]	@ (800be38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be26:	4805      	ldr	r0, [pc, #20]	@ (800be3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be28:	f7fd f811 	bl	8008e4e <USBD_GetString>
  }
  return USBD_StrDesc;
 800be2c:	4b02      	ldr	r3, [pc, #8]	@ (800be38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	2000276c 	.word	0x2000276c
 800be3c:	0800d520 	.word	0x0800d520

0800be40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be46:	4b0f      	ldr	r3, [pc, #60]	@ (800be84 <Get_SerialNum+0x44>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be4c:	4b0e      	ldr	r3, [pc, #56]	@ (800be88 <Get_SerialNum+0x48>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be52:	4b0e      	ldr	r3, [pc, #56]	@ (800be8c <Get_SerialNum+0x4c>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4413      	add	r3, r2
 800be5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d009      	beq.n	800be7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be66:	2208      	movs	r2, #8
 800be68:	4909      	ldr	r1, [pc, #36]	@ (800be90 <Get_SerialNum+0x50>)
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f000 f814 	bl	800be98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be70:	2204      	movs	r2, #4
 800be72:	4908      	ldr	r1, [pc, #32]	@ (800be94 <Get_SerialNum+0x54>)
 800be74:	68b8      	ldr	r0, [r7, #8]
 800be76:	f000 f80f 	bl	800be98 <IntToUnicode>
  }
}
 800be7a:	bf00      	nop
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	1ffff7e8 	.word	0x1ffff7e8
 800be88:	1ffff7ec 	.word	0x1ffff7ec
 800be8c:	1ffff7f0 	.word	0x1ffff7f0
 800be90:	2000016a 	.word	0x2000016a
 800be94:	2000017a 	.word	0x2000017a

0800be98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be98:	b480      	push	{r7}
 800be9a:	b087      	sub	sp, #28
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	4613      	mov	r3, r2
 800bea4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bea6:	2300      	movs	r3, #0
 800bea8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800beaa:	2300      	movs	r3, #0
 800beac:	75fb      	strb	r3, [r7, #23]
 800beae:	e027      	b.n	800bf00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	0f1b      	lsrs	r3, r3, #28
 800beb4:	2b09      	cmp	r3, #9
 800beb6:	d80b      	bhi.n	800bed0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	0f1b      	lsrs	r3, r3, #28
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	7dfb      	ldrb	r3, [r7, #23]
 800bec0:	005b      	lsls	r3, r3, #1
 800bec2:	4619      	mov	r1, r3
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	440b      	add	r3, r1
 800bec8:	3230      	adds	r2, #48	@ 0x30
 800beca:	b2d2      	uxtb	r2, r2
 800becc:	701a      	strb	r2, [r3, #0]
 800bece:	e00a      	b.n	800bee6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	0f1b      	lsrs	r3, r3, #28
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	7dfb      	ldrb	r3, [r7, #23]
 800bed8:	005b      	lsls	r3, r3, #1
 800beda:	4619      	mov	r1, r3
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	440b      	add	r3, r1
 800bee0:	3237      	adds	r2, #55	@ 0x37
 800bee2:	b2d2      	uxtb	r2, r2
 800bee4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	011b      	lsls	r3, r3, #4
 800beea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800beec:	7dfb      	ldrb	r3, [r7, #23]
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	3301      	adds	r3, #1
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	4413      	add	r3, r2
 800bef6:	2200      	movs	r2, #0
 800bef8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800befa:	7dfb      	ldrb	r3, [r7, #23]
 800befc:	3301      	adds	r3, #1
 800befe:	75fb      	strb	r3, [r7, #23]
 800bf00:	7dfa      	ldrb	r2, [r7, #23]
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d3d3      	bcc.n	800beb0 <IntToUnicode+0x18>
  }
}
 800bf08:	bf00      	nop
 800bf0a:	bf00      	nop
 800bf0c:	371c      	adds	r7, #28
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bc80      	pop	{r7}
 800bf12:	4770      	bx	lr

0800bf14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a0d      	ldr	r2, [pc, #52]	@ (800bf58 <HAL_PCD_MspInit+0x44>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d113      	bne.n	800bf4e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bf26:	4b0d      	ldr	r3, [pc, #52]	@ (800bf5c <HAL_PCD_MspInit+0x48>)
 800bf28:	69db      	ldr	r3, [r3, #28]
 800bf2a:	4a0c      	ldr	r2, [pc, #48]	@ (800bf5c <HAL_PCD_MspInit+0x48>)
 800bf2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bf30:	61d3      	str	r3, [r2, #28]
 800bf32:	4b0a      	ldr	r3, [pc, #40]	@ (800bf5c <HAL_PCD_MspInit+0x48>)
 800bf34:	69db      	ldr	r3, [r3, #28]
 800bf36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf3a:	60fb      	str	r3, [r7, #12]
 800bf3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800bf3e:	2200      	movs	r2, #0
 800bf40:	2105      	movs	r1, #5
 800bf42:	2014      	movs	r0, #20
 800bf44:	f7f5 f9cb 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bf48:	2014      	movs	r0, #20
 800bf4a:	f7f5 f9e4 	bl	8001316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bf4e:	bf00      	nop
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	40005c00 	.word	0x40005c00
 800bf5c:	40021000 	.word	0x40021000

0800bf60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800bf74:	4619      	mov	r1, r3
 800bf76:	4610      	mov	r0, r2
 800bf78:	f7fc f83b 	bl	8007ff2 <USBD_LL_SetupStage>
}
 800bf7c:	bf00      	nop
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800bf96:	78fa      	ldrb	r2, [r7, #3]
 800bf98:	6879      	ldr	r1, [r7, #4]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	00db      	lsls	r3, r3, #3
 800bfa2:	440b      	add	r3, r1
 800bfa4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	78fb      	ldrb	r3, [r7, #3]
 800bfac:	4619      	mov	r1, r3
 800bfae:	f7fc f86d 	bl	800808c <USBD_LL_DataOutStage>
}
 800bfb2:	bf00      	nop
 800bfb4:	3708      	adds	r7, #8
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b082      	sub	sp, #8
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800bfcc:	78fa      	ldrb	r2, [r7, #3]
 800bfce:	6879      	ldr	r1, [r7, #4]
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	4413      	add	r3, r2
 800bfd6:	00db      	lsls	r3, r3, #3
 800bfd8:	440b      	add	r3, r1
 800bfda:	3324      	adds	r3, #36	@ 0x24
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	78fb      	ldrb	r3, [r7, #3]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	f7fc f8c4 	bl	800816e <USBD_LL_DataInStage>
}
 800bfe6:	bf00      	nop
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b082      	sub	sp, #8
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7fc f9d4 	bl	80083aa <USBD_LL_SOF>
}
 800c002:	bf00      	nop
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b084      	sub	sp, #16
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c012:	2301      	movs	r3, #1
 800c014:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	799b      	ldrb	r3, [r3, #6]
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d001      	beq.n	800c022 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c01e:	f7f4 fe6b 	bl	8000cf8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c028:	7bfa      	ldrb	r2, [r7, #15]
 800c02a:	4611      	mov	r1, r2
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fc f984 	bl	800833a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c038:	4618      	mov	r0, r3
 800c03a:	f7fc f93d 	bl	80082b8 <USBD_LL_Reset>
}
 800c03e:	bf00      	nop
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c056:	4618      	mov	r0, r3
 800c058:	f7fc f97e 	bl	8008358 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	7a9b      	ldrb	r3, [r3, #10]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d005      	beq.n	800c070 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c064:	4b04      	ldr	r3, [pc, #16]	@ (800c078 <HAL_PCD_SuspendCallback+0x30>)
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	4a03      	ldr	r2, [pc, #12]	@ (800c078 <HAL_PCD_SuspendCallback+0x30>)
 800c06a:	f043 0306 	orr.w	r3, r3, #6
 800c06e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c070:	bf00      	nop
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	e000ed00 	.word	0xe000ed00

0800c07c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fc f978 	bl	8008380 <USBD_LL_Resume>
}
 800c090:	bf00      	nop
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c0a0:	4a28      	ldr	r2, [pc, #160]	@ (800c144 <USBD_LL_Init+0xac>)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a26      	ldr	r2, [pc, #152]	@ (800c144 <USBD_LL_Init+0xac>)
 800c0ac:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c0b0:	4b24      	ldr	r3, [pc, #144]	@ (800c144 <USBD_LL_Init+0xac>)
 800c0b2:	4a25      	ldr	r2, [pc, #148]	@ (800c148 <USBD_LL_Init+0xb0>)
 800c0b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c0b6:	4b23      	ldr	r3, [pc, #140]	@ (800c144 <USBD_LL_Init+0xac>)
 800c0b8:	2208      	movs	r2, #8
 800c0ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c0bc:	4b21      	ldr	r3, [pc, #132]	@ (800c144 <USBD_LL_Init+0xac>)
 800c0be:	2202      	movs	r2, #2
 800c0c0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c0c2:	4b20      	ldr	r3, [pc, #128]	@ (800c144 <USBD_LL_Init+0xac>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c0c8:	4b1e      	ldr	r3, [pc, #120]	@ (800c144 <USBD_LL_Init+0xac>)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c0ce:	4b1d      	ldr	r3, [pc, #116]	@ (800c144 <USBD_LL_Init+0xac>)
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c0d4:	481b      	ldr	r0, [pc, #108]	@ (800c144 <USBD_LL_Init+0xac>)
 800c0d6:	f7f6 fc02 	bl	80028de <HAL_PCD_Init>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d001      	beq.n	800c0e4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c0e0:	f7f4 fe0a 	bl	8000cf8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c0ea:	2318      	movs	r3, #24
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	f7f8 f913 	bl	800431a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c0fa:	2358      	movs	r3, #88	@ 0x58
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	2180      	movs	r1, #128	@ 0x80
 800c100:	f7f8 f90b 	bl	800431a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c10a:	23c0      	movs	r3, #192	@ 0xc0
 800c10c:	2200      	movs	r2, #0
 800c10e:	2181      	movs	r1, #129	@ 0x81
 800c110:	f7f8 f903 	bl	800431a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c11a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c11e:	2200      	movs	r2, #0
 800c120:	2101      	movs	r1, #1
 800c122:	f7f8 f8fa 	bl	800431a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c12c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c130:	2200      	movs	r2, #0
 800c132:	2182      	movs	r1, #130	@ 0x82
 800c134:	f7f8 f8f1 	bl	800431a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	2000296c 	.word	0x2000296c
 800c148:	40005c00 	.word	0x40005c00

0800c14c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c154:	2300      	movs	r3, #0
 800c156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c158:	2300      	movs	r3, #0
 800c15a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c162:	4618      	mov	r0, r3
 800c164:	f7f6 fcb1 	bl	8002aca <HAL_PCD_Start>
 800c168:	4603      	mov	r3, r0
 800c16a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 f94e 	bl	800c410 <USBD_Get_USB_Status>
 800c174:	4603      	mov	r3, r0
 800c176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c178:	7bbb      	ldrb	r3, [r7, #14]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b084      	sub	sp, #16
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
 800c18a:	4608      	mov	r0, r1
 800c18c:	4611      	mov	r1, r2
 800c18e:	461a      	mov	r2, r3
 800c190:	4603      	mov	r3, r0
 800c192:	70fb      	strb	r3, [r7, #3]
 800c194:	460b      	mov	r3, r1
 800c196:	70bb      	strb	r3, [r7, #2]
 800c198:	4613      	mov	r3, r2
 800c19a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c19c:	2300      	movs	r3, #0
 800c19e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c1aa:	78bb      	ldrb	r3, [r7, #2]
 800c1ac:	883a      	ldrh	r2, [r7, #0]
 800c1ae:	78f9      	ldrb	r1, [r7, #3]
 800c1b0:	f7f6 fe05 	bl	8002dbe <HAL_PCD_EP_Open>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 f928 	bl	800c410 <USBD_Get_USB_Status>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b084      	sub	sp, #16
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c1e8:	78fa      	ldrb	r2, [r7, #3]
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7f6 fe43 	bl	8002e78 <HAL_PCD_EP_Close>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1f6:	7bfb      	ldrb	r3, [r7, #15]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f000 f909 	bl	800c410 <USBD_Get_USB_Status>
 800c1fe:	4603      	mov	r3, r0
 800c200:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c202:	7bbb      	ldrb	r3, [r7, #14]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c226:	78fa      	ldrb	r2, [r7, #3]
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7f6 feeb 	bl	8003006 <HAL_PCD_EP_SetStall>
 800c230:	4603      	mov	r3, r0
 800c232:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c234:	7bfb      	ldrb	r3, [r7, #15]
 800c236:	4618      	mov	r0, r3
 800c238:	f000 f8ea 	bl	800c410 <USBD_Get_USB_Status>
 800c23c:	4603      	mov	r3, r0
 800c23e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c240:	7bbb      	ldrb	r3, [r7, #14]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	460b      	mov	r3, r1
 800c254:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c25a:	2300      	movs	r3, #0
 800c25c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c264:	78fa      	ldrb	r2, [r7, #3]
 800c266:	4611      	mov	r1, r2
 800c268:	4618      	mov	r0, r3
 800c26a:	f7f6 ff2c 	bl	80030c6 <HAL_PCD_EP_ClrStall>
 800c26e:	4603      	mov	r3, r0
 800c270:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c272:	7bfb      	ldrb	r3, [r7, #15]
 800c274:	4618      	mov	r0, r3
 800c276:	f000 f8cb 	bl	800c410 <USBD_Get_USB_Status>
 800c27a:	4603      	mov	r3, r0
 800c27c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c27e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	460b      	mov	r3, r1
 800c292:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c29a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c29c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	da0b      	bge.n	800c2bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2a4:	78fb      	ldrb	r3, [r7, #3]
 800c2a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2aa:	68f9      	ldr	r1, [r7, #12]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	00db      	lsls	r3, r3, #3
 800c2b4:	440b      	add	r3, r1
 800c2b6:	3312      	adds	r3, #18
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	e00b      	b.n	800c2d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2c2:	68f9      	ldr	r1, [r7, #12]
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	4413      	add	r3, r2
 800c2ca:	00db      	lsls	r3, r3, #3
 800c2cc:	440b      	add	r3, r1
 800c2ce:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c2d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bc80      	pop	{r7}
 800c2dc:	4770      	bx	lr

0800c2de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b084      	sub	sp, #16
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c2f8:	78fa      	ldrb	r2, [r7, #3]
 800c2fa:	4611      	mov	r1, r2
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7f6 fd3a 	bl	8002d76 <HAL_PCD_SetAddress>
 800c302:	4603      	mov	r3, r0
 800c304:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c306:	7bfb      	ldrb	r3, [r7, #15]
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 f881 	bl	800c410 <USBD_Get_USB_Status>
 800c30e:	4603      	mov	r3, r0
 800c310:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c312:	7bbb      	ldrb	r3, [r7, #14]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	607a      	str	r2, [r7, #4]
 800c326:	461a      	mov	r2, r3
 800c328:	460b      	mov	r3, r1
 800c32a:	72fb      	strb	r3, [r7, #11]
 800c32c:	4613      	mov	r3, r2
 800c32e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c33e:	893b      	ldrh	r3, [r7, #8]
 800c340:	7af9      	ldrb	r1, [r7, #11]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	f7f6 fe28 	bl	8002f98 <HAL_PCD_EP_Transmit>
 800c348:	4603      	mov	r3, r0
 800c34a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c34c:	7dfb      	ldrb	r3, [r7, #23]
 800c34e:	4618      	mov	r0, r3
 800c350:	f000 f85e 	bl	800c410 <USBD_Get_USB_Status>
 800c354:	4603      	mov	r3, r0
 800c356:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c358:	7dbb      	ldrb	r3, [r7, #22]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3718      	adds	r7, #24
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b086      	sub	sp, #24
 800c366:	af00      	add	r7, sp, #0
 800c368:	60f8      	str	r0, [r7, #12]
 800c36a:	607a      	str	r2, [r7, #4]
 800c36c:	461a      	mov	r2, r3
 800c36e:	460b      	mov	r3, r1
 800c370:	72fb      	strb	r3, [r7, #11]
 800c372:	4613      	mov	r3, r2
 800c374:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c37a:	2300      	movs	r3, #0
 800c37c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c384:	893b      	ldrh	r3, [r7, #8]
 800c386:	7af9      	ldrb	r1, [r7, #11]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	f7f6 fdbd 	bl	8002f08 <HAL_PCD_EP_Receive>
 800c38e:	4603      	mov	r3, r0
 800c390:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c392:	7dfb      	ldrb	r3, [r7, #23]
 800c394:	4618      	mov	r0, r3
 800c396:	f000 f83b 	bl	800c410 <USBD_Get_USB_Status>
 800c39a:	4603      	mov	r3, r0
 800c39c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c39e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3718      	adds	r7, #24
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c3ba:	78fa      	ldrb	r2, [r7, #3]
 800c3bc:	4611      	mov	r1, r2
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7f6 fdd3 	bl	8002f6a <HAL_PCD_EP_GetRxCount>
 800c3c4:	4603      	mov	r3, r0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
	...

0800c3d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c3d8:	4b02      	ldr	r3, [pc, #8]	@ (800c3e4 <USBD_static_malloc+0x14>)
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bc80      	pop	{r7}
 800c3e2:	4770      	bx	lr
 800c3e4:	20002c44 	.word	0x20002c44

0800c3e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]

}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bc80      	pop	{r7}
 800c3f8:	4770      	bx	lr

0800c3fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3fa:	b480      	push	{r7}
 800c3fc:	b083      	sub	sp, #12
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	460b      	mov	r3, r1
 800c404:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c406:	bf00      	nop
 800c408:	370c      	adds	r7, #12
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bc80      	pop	{r7}
 800c40e:	4770      	bx	lr

0800c410 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	4603      	mov	r3, r0
 800c418:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c41a:	2300      	movs	r3, #0
 800c41c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c41e:	79fb      	ldrb	r3, [r7, #7]
 800c420:	2b03      	cmp	r3, #3
 800c422:	d817      	bhi.n	800c454 <USBD_Get_USB_Status+0x44>
 800c424:	a201      	add	r2, pc, #4	@ (adr r2, 800c42c <USBD_Get_USB_Status+0x1c>)
 800c426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42a:	bf00      	nop
 800c42c:	0800c43d 	.word	0x0800c43d
 800c430:	0800c443 	.word	0x0800c443
 800c434:	0800c449 	.word	0x0800c449
 800c438:	0800c44f 	.word	0x0800c44f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	73fb      	strb	r3, [r7, #15]
    break;
 800c440:	e00b      	b.n	800c45a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c442:	2302      	movs	r3, #2
 800c444:	73fb      	strb	r3, [r7, #15]
    break;
 800c446:	e008      	b.n	800c45a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c448:	2301      	movs	r3, #1
 800c44a:	73fb      	strb	r3, [r7, #15]
    break;
 800c44c:	e005      	b.n	800c45a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c44e:	2302      	movs	r3, #2
 800c450:	73fb      	strb	r3, [r7, #15]
    break;
 800c452:	e002      	b.n	800c45a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c454:	2302      	movs	r3, #2
 800c456:	73fb      	strb	r3, [r7, #15]
    break;
 800c458:	bf00      	nop
  }
  return usb_status;
 800c45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3714      	adds	r7, #20
 800c460:	46bd      	mov	sp, r7
 800c462:	bc80      	pop	{r7}
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop

0800c468 <std>:
 800c468:	2300      	movs	r3, #0
 800c46a:	b510      	push	{r4, lr}
 800c46c:	4604      	mov	r4, r0
 800c46e:	e9c0 3300 	strd	r3, r3, [r0]
 800c472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c476:	6083      	str	r3, [r0, #8]
 800c478:	8181      	strh	r1, [r0, #12]
 800c47a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c47c:	81c2      	strh	r2, [r0, #14]
 800c47e:	6183      	str	r3, [r0, #24]
 800c480:	4619      	mov	r1, r3
 800c482:	2208      	movs	r2, #8
 800c484:	305c      	adds	r0, #92	@ 0x5c
 800c486:	f000 f9f9 	bl	800c87c <memset>
 800c48a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4c0 <std+0x58>)
 800c48c:	6224      	str	r4, [r4, #32]
 800c48e:	6263      	str	r3, [r4, #36]	@ 0x24
 800c490:	4b0c      	ldr	r3, [pc, #48]	@ (800c4c4 <std+0x5c>)
 800c492:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c494:	4b0c      	ldr	r3, [pc, #48]	@ (800c4c8 <std+0x60>)
 800c496:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c498:	4b0c      	ldr	r3, [pc, #48]	@ (800c4cc <std+0x64>)
 800c49a:	6323      	str	r3, [r4, #48]	@ 0x30
 800c49c:	4b0c      	ldr	r3, [pc, #48]	@ (800c4d0 <std+0x68>)
 800c49e:	429c      	cmp	r4, r3
 800c4a0:	d006      	beq.n	800c4b0 <std+0x48>
 800c4a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c4a6:	4294      	cmp	r4, r2
 800c4a8:	d002      	beq.n	800c4b0 <std+0x48>
 800c4aa:	33d0      	adds	r3, #208	@ 0xd0
 800c4ac:	429c      	cmp	r4, r3
 800c4ae:	d105      	bne.n	800c4bc <std+0x54>
 800c4b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4b8:	f000 baae 	b.w	800ca18 <__retarget_lock_init_recursive>
 800c4bc:	bd10      	pop	{r4, pc}
 800c4be:	bf00      	nop
 800c4c0:	0800c6cd 	.word	0x0800c6cd
 800c4c4:	0800c6ef 	.word	0x0800c6ef
 800c4c8:	0800c727 	.word	0x0800c727
 800c4cc:	0800c74b 	.word	0x0800c74b
 800c4d0:	20002e64 	.word	0x20002e64

0800c4d4 <stdio_exit_handler>:
 800c4d4:	4a02      	ldr	r2, [pc, #8]	@ (800c4e0 <stdio_exit_handler+0xc>)
 800c4d6:	4903      	ldr	r1, [pc, #12]	@ (800c4e4 <stdio_exit_handler+0x10>)
 800c4d8:	4803      	ldr	r0, [pc, #12]	@ (800c4e8 <stdio_exit_handler+0x14>)
 800c4da:	f000 b869 	b.w	800c5b0 <_fwalk_sglue>
 800c4de:	bf00      	nop
 800c4e0:	20000184 	.word	0x20000184
 800c4e4:	0800d2cd 	.word	0x0800d2cd
 800c4e8:	20000194 	.word	0x20000194

0800c4ec <cleanup_stdio>:
 800c4ec:	6841      	ldr	r1, [r0, #4]
 800c4ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c520 <cleanup_stdio+0x34>)
 800c4f0:	b510      	push	{r4, lr}
 800c4f2:	4299      	cmp	r1, r3
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	d001      	beq.n	800c4fc <cleanup_stdio+0x10>
 800c4f8:	f000 fee8 	bl	800d2cc <_fflush_r>
 800c4fc:	68a1      	ldr	r1, [r4, #8]
 800c4fe:	4b09      	ldr	r3, [pc, #36]	@ (800c524 <cleanup_stdio+0x38>)
 800c500:	4299      	cmp	r1, r3
 800c502:	d002      	beq.n	800c50a <cleanup_stdio+0x1e>
 800c504:	4620      	mov	r0, r4
 800c506:	f000 fee1 	bl	800d2cc <_fflush_r>
 800c50a:	68e1      	ldr	r1, [r4, #12]
 800c50c:	4b06      	ldr	r3, [pc, #24]	@ (800c528 <cleanup_stdio+0x3c>)
 800c50e:	4299      	cmp	r1, r3
 800c510:	d004      	beq.n	800c51c <cleanup_stdio+0x30>
 800c512:	4620      	mov	r0, r4
 800c514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c518:	f000 bed8 	b.w	800d2cc <_fflush_r>
 800c51c:	bd10      	pop	{r4, pc}
 800c51e:	bf00      	nop
 800c520:	20002e64 	.word	0x20002e64
 800c524:	20002ecc 	.word	0x20002ecc
 800c528:	20002f34 	.word	0x20002f34

0800c52c <global_stdio_init.part.0>:
 800c52c:	b510      	push	{r4, lr}
 800c52e:	4b0b      	ldr	r3, [pc, #44]	@ (800c55c <global_stdio_init.part.0+0x30>)
 800c530:	4c0b      	ldr	r4, [pc, #44]	@ (800c560 <global_stdio_init.part.0+0x34>)
 800c532:	4a0c      	ldr	r2, [pc, #48]	@ (800c564 <global_stdio_init.part.0+0x38>)
 800c534:	4620      	mov	r0, r4
 800c536:	601a      	str	r2, [r3, #0]
 800c538:	2104      	movs	r1, #4
 800c53a:	2200      	movs	r2, #0
 800c53c:	f7ff ff94 	bl	800c468 <std>
 800c540:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c544:	2201      	movs	r2, #1
 800c546:	2109      	movs	r1, #9
 800c548:	f7ff ff8e 	bl	800c468 <std>
 800c54c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c550:	2202      	movs	r2, #2
 800c552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c556:	2112      	movs	r1, #18
 800c558:	f7ff bf86 	b.w	800c468 <std>
 800c55c:	20002f9c 	.word	0x20002f9c
 800c560:	20002e64 	.word	0x20002e64
 800c564:	0800c4d5 	.word	0x0800c4d5

0800c568 <__sfp_lock_acquire>:
 800c568:	4801      	ldr	r0, [pc, #4]	@ (800c570 <__sfp_lock_acquire+0x8>)
 800c56a:	f000 ba56 	b.w	800ca1a <__retarget_lock_acquire_recursive>
 800c56e:	bf00      	nop
 800c570:	20002fa5 	.word	0x20002fa5

0800c574 <__sfp_lock_release>:
 800c574:	4801      	ldr	r0, [pc, #4]	@ (800c57c <__sfp_lock_release+0x8>)
 800c576:	f000 ba51 	b.w	800ca1c <__retarget_lock_release_recursive>
 800c57a:	bf00      	nop
 800c57c:	20002fa5 	.word	0x20002fa5

0800c580 <__sinit>:
 800c580:	b510      	push	{r4, lr}
 800c582:	4604      	mov	r4, r0
 800c584:	f7ff fff0 	bl	800c568 <__sfp_lock_acquire>
 800c588:	6a23      	ldr	r3, [r4, #32]
 800c58a:	b11b      	cbz	r3, 800c594 <__sinit+0x14>
 800c58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c590:	f7ff bff0 	b.w	800c574 <__sfp_lock_release>
 800c594:	4b04      	ldr	r3, [pc, #16]	@ (800c5a8 <__sinit+0x28>)
 800c596:	6223      	str	r3, [r4, #32]
 800c598:	4b04      	ldr	r3, [pc, #16]	@ (800c5ac <__sinit+0x2c>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1f5      	bne.n	800c58c <__sinit+0xc>
 800c5a0:	f7ff ffc4 	bl	800c52c <global_stdio_init.part.0>
 800c5a4:	e7f2      	b.n	800c58c <__sinit+0xc>
 800c5a6:	bf00      	nop
 800c5a8:	0800c4ed 	.word	0x0800c4ed
 800c5ac:	20002f9c 	.word	0x20002f9c

0800c5b0 <_fwalk_sglue>:
 800c5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5b4:	4607      	mov	r7, r0
 800c5b6:	4688      	mov	r8, r1
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	2600      	movs	r6, #0
 800c5bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5c0:	f1b9 0901 	subs.w	r9, r9, #1
 800c5c4:	d505      	bpl.n	800c5d2 <_fwalk_sglue+0x22>
 800c5c6:	6824      	ldr	r4, [r4, #0]
 800c5c8:	2c00      	cmp	r4, #0
 800c5ca:	d1f7      	bne.n	800c5bc <_fwalk_sglue+0xc>
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5d2:	89ab      	ldrh	r3, [r5, #12]
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d907      	bls.n	800c5e8 <_fwalk_sglue+0x38>
 800c5d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	d003      	beq.n	800c5e8 <_fwalk_sglue+0x38>
 800c5e0:	4629      	mov	r1, r5
 800c5e2:	4638      	mov	r0, r7
 800c5e4:	47c0      	blx	r8
 800c5e6:	4306      	orrs	r6, r0
 800c5e8:	3568      	adds	r5, #104	@ 0x68
 800c5ea:	e7e9      	b.n	800c5c0 <_fwalk_sglue+0x10>

0800c5ec <iprintf>:
 800c5ec:	b40f      	push	{r0, r1, r2, r3}
 800c5ee:	b507      	push	{r0, r1, r2, lr}
 800c5f0:	4906      	ldr	r1, [pc, #24]	@ (800c60c <iprintf+0x20>)
 800c5f2:	ab04      	add	r3, sp, #16
 800c5f4:	6808      	ldr	r0, [r1, #0]
 800c5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5fa:	6881      	ldr	r1, [r0, #8]
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	f000 fb3b 	bl	800cc78 <_vfiprintf_r>
 800c602:	b003      	add	sp, #12
 800c604:	f85d eb04 	ldr.w	lr, [sp], #4
 800c608:	b004      	add	sp, #16
 800c60a:	4770      	bx	lr
 800c60c:	20000190 	.word	0x20000190

0800c610 <_puts_r>:
 800c610:	6a03      	ldr	r3, [r0, #32]
 800c612:	b570      	push	{r4, r5, r6, lr}
 800c614:	4605      	mov	r5, r0
 800c616:	460e      	mov	r6, r1
 800c618:	6884      	ldr	r4, [r0, #8]
 800c61a:	b90b      	cbnz	r3, 800c620 <_puts_r+0x10>
 800c61c:	f7ff ffb0 	bl	800c580 <__sinit>
 800c620:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c622:	07db      	lsls	r3, r3, #31
 800c624:	d405      	bmi.n	800c632 <_puts_r+0x22>
 800c626:	89a3      	ldrh	r3, [r4, #12]
 800c628:	0598      	lsls	r0, r3, #22
 800c62a:	d402      	bmi.n	800c632 <_puts_r+0x22>
 800c62c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c62e:	f000 f9f4 	bl	800ca1a <__retarget_lock_acquire_recursive>
 800c632:	89a3      	ldrh	r3, [r4, #12]
 800c634:	0719      	lsls	r1, r3, #28
 800c636:	d502      	bpl.n	800c63e <_puts_r+0x2e>
 800c638:	6923      	ldr	r3, [r4, #16]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d135      	bne.n	800c6aa <_puts_r+0x9a>
 800c63e:	4621      	mov	r1, r4
 800c640:	4628      	mov	r0, r5
 800c642:	f000 f8c5 	bl	800c7d0 <__swsetup_r>
 800c646:	b380      	cbz	r0, 800c6aa <_puts_r+0x9a>
 800c648:	f04f 35ff 	mov.w	r5, #4294967295
 800c64c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c64e:	07da      	lsls	r2, r3, #31
 800c650:	d405      	bmi.n	800c65e <_puts_r+0x4e>
 800c652:	89a3      	ldrh	r3, [r4, #12]
 800c654:	059b      	lsls	r3, r3, #22
 800c656:	d402      	bmi.n	800c65e <_puts_r+0x4e>
 800c658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c65a:	f000 f9df 	bl	800ca1c <__retarget_lock_release_recursive>
 800c65e:	4628      	mov	r0, r5
 800c660:	bd70      	pop	{r4, r5, r6, pc}
 800c662:	2b00      	cmp	r3, #0
 800c664:	da04      	bge.n	800c670 <_puts_r+0x60>
 800c666:	69a2      	ldr	r2, [r4, #24]
 800c668:	429a      	cmp	r2, r3
 800c66a:	dc17      	bgt.n	800c69c <_puts_r+0x8c>
 800c66c:	290a      	cmp	r1, #10
 800c66e:	d015      	beq.n	800c69c <_puts_r+0x8c>
 800c670:	6823      	ldr	r3, [r4, #0]
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	6022      	str	r2, [r4, #0]
 800c676:	7019      	strb	r1, [r3, #0]
 800c678:	68a3      	ldr	r3, [r4, #8]
 800c67a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c67e:	3b01      	subs	r3, #1
 800c680:	60a3      	str	r3, [r4, #8]
 800c682:	2900      	cmp	r1, #0
 800c684:	d1ed      	bne.n	800c662 <_puts_r+0x52>
 800c686:	2b00      	cmp	r3, #0
 800c688:	da11      	bge.n	800c6ae <_puts_r+0x9e>
 800c68a:	4622      	mov	r2, r4
 800c68c:	210a      	movs	r1, #10
 800c68e:	4628      	mov	r0, r5
 800c690:	f000 f85f 	bl	800c752 <__swbuf_r>
 800c694:	3001      	adds	r0, #1
 800c696:	d0d7      	beq.n	800c648 <_puts_r+0x38>
 800c698:	250a      	movs	r5, #10
 800c69a:	e7d7      	b.n	800c64c <_puts_r+0x3c>
 800c69c:	4622      	mov	r2, r4
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f000 f857 	bl	800c752 <__swbuf_r>
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	d1e7      	bne.n	800c678 <_puts_r+0x68>
 800c6a8:	e7ce      	b.n	800c648 <_puts_r+0x38>
 800c6aa:	3e01      	subs	r6, #1
 800c6ac:	e7e4      	b.n	800c678 <_puts_r+0x68>
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	1c5a      	adds	r2, r3, #1
 800c6b2:	6022      	str	r2, [r4, #0]
 800c6b4:	220a      	movs	r2, #10
 800c6b6:	701a      	strb	r2, [r3, #0]
 800c6b8:	e7ee      	b.n	800c698 <_puts_r+0x88>
	...

0800c6bc <puts>:
 800c6bc:	4b02      	ldr	r3, [pc, #8]	@ (800c6c8 <puts+0xc>)
 800c6be:	4601      	mov	r1, r0
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	f7ff bfa5 	b.w	800c610 <_puts_r>
 800c6c6:	bf00      	nop
 800c6c8:	20000190 	.word	0x20000190

0800c6cc <__sread>:
 800c6cc:	b510      	push	{r4, lr}
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d4:	f000 f952 	bl	800c97c <_read_r>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	bfab      	itete	ge
 800c6dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6de:	89a3      	ldrhlt	r3, [r4, #12]
 800c6e0:	181b      	addge	r3, r3, r0
 800c6e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6e6:	bfac      	ite	ge
 800c6e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6ea:	81a3      	strhlt	r3, [r4, #12]
 800c6ec:	bd10      	pop	{r4, pc}

0800c6ee <__swrite>:
 800c6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f2:	461f      	mov	r7, r3
 800c6f4:	898b      	ldrh	r3, [r1, #12]
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	05db      	lsls	r3, r3, #23
 800c6fa:	460c      	mov	r4, r1
 800c6fc:	4616      	mov	r6, r2
 800c6fe:	d505      	bpl.n	800c70c <__swrite+0x1e>
 800c700:	2302      	movs	r3, #2
 800c702:	2200      	movs	r2, #0
 800c704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c708:	f000 f926 	bl	800c958 <_lseek_r>
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	4632      	mov	r2, r6
 800c710:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c714:	81a3      	strh	r3, [r4, #12]
 800c716:	4628      	mov	r0, r5
 800c718:	463b      	mov	r3, r7
 800c71a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c722:	f000 b93d 	b.w	800c9a0 <_write_r>

0800c726 <__sseek>:
 800c726:	b510      	push	{r4, lr}
 800c728:	460c      	mov	r4, r1
 800c72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c72e:	f000 f913 	bl	800c958 <_lseek_r>
 800c732:	1c43      	adds	r3, r0, #1
 800c734:	89a3      	ldrh	r3, [r4, #12]
 800c736:	bf15      	itete	ne
 800c738:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c73a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c73e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c742:	81a3      	strheq	r3, [r4, #12]
 800c744:	bf18      	it	ne
 800c746:	81a3      	strhne	r3, [r4, #12]
 800c748:	bd10      	pop	{r4, pc}

0800c74a <__sclose>:
 800c74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c74e:	f000 b89d 	b.w	800c88c <_close_r>

0800c752 <__swbuf_r>:
 800c752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c754:	460e      	mov	r6, r1
 800c756:	4614      	mov	r4, r2
 800c758:	4605      	mov	r5, r0
 800c75a:	b118      	cbz	r0, 800c764 <__swbuf_r+0x12>
 800c75c:	6a03      	ldr	r3, [r0, #32]
 800c75e:	b90b      	cbnz	r3, 800c764 <__swbuf_r+0x12>
 800c760:	f7ff ff0e 	bl	800c580 <__sinit>
 800c764:	69a3      	ldr	r3, [r4, #24]
 800c766:	60a3      	str	r3, [r4, #8]
 800c768:	89a3      	ldrh	r3, [r4, #12]
 800c76a:	071a      	lsls	r2, r3, #28
 800c76c:	d501      	bpl.n	800c772 <__swbuf_r+0x20>
 800c76e:	6923      	ldr	r3, [r4, #16]
 800c770:	b943      	cbnz	r3, 800c784 <__swbuf_r+0x32>
 800c772:	4621      	mov	r1, r4
 800c774:	4628      	mov	r0, r5
 800c776:	f000 f82b 	bl	800c7d0 <__swsetup_r>
 800c77a:	b118      	cbz	r0, 800c784 <__swbuf_r+0x32>
 800c77c:	f04f 37ff 	mov.w	r7, #4294967295
 800c780:	4638      	mov	r0, r7
 800c782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c784:	6823      	ldr	r3, [r4, #0]
 800c786:	6922      	ldr	r2, [r4, #16]
 800c788:	b2f6      	uxtb	r6, r6
 800c78a:	1a98      	subs	r0, r3, r2
 800c78c:	6963      	ldr	r3, [r4, #20]
 800c78e:	4637      	mov	r7, r6
 800c790:	4283      	cmp	r3, r0
 800c792:	dc05      	bgt.n	800c7a0 <__swbuf_r+0x4e>
 800c794:	4621      	mov	r1, r4
 800c796:	4628      	mov	r0, r5
 800c798:	f000 fd98 	bl	800d2cc <_fflush_r>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d1ed      	bne.n	800c77c <__swbuf_r+0x2a>
 800c7a0:	68a3      	ldr	r3, [r4, #8]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	60a3      	str	r3, [r4, #8]
 800c7a6:	6823      	ldr	r3, [r4, #0]
 800c7a8:	1c5a      	adds	r2, r3, #1
 800c7aa:	6022      	str	r2, [r4, #0]
 800c7ac:	701e      	strb	r6, [r3, #0]
 800c7ae:	6962      	ldr	r2, [r4, #20]
 800c7b0:	1c43      	adds	r3, r0, #1
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d004      	beq.n	800c7c0 <__swbuf_r+0x6e>
 800c7b6:	89a3      	ldrh	r3, [r4, #12]
 800c7b8:	07db      	lsls	r3, r3, #31
 800c7ba:	d5e1      	bpl.n	800c780 <__swbuf_r+0x2e>
 800c7bc:	2e0a      	cmp	r6, #10
 800c7be:	d1df      	bne.n	800c780 <__swbuf_r+0x2e>
 800c7c0:	4621      	mov	r1, r4
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	f000 fd82 	bl	800d2cc <_fflush_r>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d0d9      	beq.n	800c780 <__swbuf_r+0x2e>
 800c7cc:	e7d6      	b.n	800c77c <__swbuf_r+0x2a>
	...

0800c7d0 <__swsetup_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4b29      	ldr	r3, [pc, #164]	@ (800c878 <__swsetup_r+0xa8>)
 800c7d4:	4605      	mov	r5, r0
 800c7d6:	6818      	ldr	r0, [r3, #0]
 800c7d8:	460c      	mov	r4, r1
 800c7da:	b118      	cbz	r0, 800c7e4 <__swsetup_r+0x14>
 800c7dc:	6a03      	ldr	r3, [r0, #32]
 800c7de:	b90b      	cbnz	r3, 800c7e4 <__swsetup_r+0x14>
 800c7e0:	f7ff fece 	bl	800c580 <__sinit>
 800c7e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7e8:	0719      	lsls	r1, r3, #28
 800c7ea:	d422      	bmi.n	800c832 <__swsetup_r+0x62>
 800c7ec:	06da      	lsls	r2, r3, #27
 800c7ee:	d407      	bmi.n	800c800 <__swsetup_r+0x30>
 800c7f0:	2209      	movs	r2, #9
 800c7f2:	602a      	str	r2, [r5, #0]
 800c7f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7fc:	81a3      	strh	r3, [r4, #12]
 800c7fe:	e033      	b.n	800c868 <__swsetup_r+0x98>
 800c800:	0758      	lsls	r0, r3, #29
 800c802:	d512      	bpl.n	800c82a <__swsetup_r+0x5a>
 800c804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c806:	b141      	cbz	r1, 800c81a <__swsetup_r+0x4a>
 800c808:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c80c:	4299      	cmp	r1, r3
 800c80e:	d002      	beq.n	800c816 <__swsetup_r+0x46>
 800c810:	4628      	mov	r0, r5
 800c812:	f000 f913 	bl	800ca3c <_free_r>
 800c816:	2300      	movs	r3, #0
 800c818:	6363      	str	r3, [r4, #52]	@ 0x34
 800c81a:	89a3      	ldrh	r3, [r4, #12]
 800c81c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c820:	81a3      	strh	r3, [r4, #12]
 800c822:	2300      	movs	r3, #0
 800c824:	6063      	str	r3, [r4, #4]
 800c826:	6923      	ldr	r3, [r4, #16]
 800c828:	6023      	str	r3, [r4, #0]
 800c82a:	89a3      	ldrh	r3, [r4, #12]
 800c82c:	f043 0308 	orr.w	r3, r3, #8
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	6923      	ldr	r3, [r4, #16]
 800c834:	b94b      	cbnz	r3, 800c84a <__swsetup_r+0x7a>
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c83c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c840:	d003      	beq.n	800c84a <__swsetup_r+0x7a>
 800c842:	4621      	mov	r1, r4
 800c844:	4628      	mov	r0, r5
 800c846:	f000 fd8e 	bl	800d366 <__smakebuf_r>
 800c84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c84e:	f013 0201 	ands.w	r2, r3, #1
 800c852:	d00a      	beq.n	800c86a <__swsetup_r+0x9a>
 800c854:	2200      	movs	r2, #0
 800c856:	60a2      	str	r2, [r4, #8]
 800c858:	6962      	ldr	r2, [r4, #20]
 800c85a:	4252      	negs	r2, r2
 800c85c:	61a2      	str	r2, [r4, #24]
 800c85e:	6922      	ldr	r2, [r4, #16]
 800c860:	b942      	cbnz	r2, 800c874 <__swsetup_r+0xa4>
 800c862:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c866:	d1c5      	bne.n	800c7f4 <__swsetup_r+0x24>
 800c868:	bd38      	pop	{r3, r4, r5, pc}
 800c86a:	0799      	lsls	r1, r3, #30
 800c86c:	bf58      	it	pl
 800c86e:	6962      	ldrpl	r2, [r4, #20]
 800c870:	60a2      	str	r2, [r4, #8]
 800c872:	e7f4      	b.n	800c85e <__swsetup_r+0x8e>
 800c874:	2000      	movs	r0, #0
 800c876:	e7f7      	b.n	800c868 <__swsetup_r+0x98>
 800c878:	20000190 	.word	0x20000190

0800c87c <memset>:
 800c87c:	4603      	mov	r3, r0
 800c87e:	4402      	add	r2, r0
 800c880:	4293      	cmp	r3, r2
 800c882:	d100      	bne.n	800c886 <memset+0xa>
 800c884:	4770      	bx	lr
 800c886:	f803 1b01 	strb.w	r1, [r3], #1
 800c88a:	e7f9      	b.n	800c880 <memset+0x4>

0800c88c <_close_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	2300      	movs	r3, #0
 800c890:	4d05      	ldr	r5, [pc, #20]	@ (800c8a8 <_close_r+0x1c>)
 800c892:	4604      	mov	r4, r0
 800c894:	4608      	mov	r0, r1
 800c896:	602b      	str	r3, [r5, #0]
 800c898:	f7f4 fb83 	bl	8000fa2 <_close>
 800c89c:	1c43      	adds	r3, r0, #1
 800c89e:	d102      	bne.n	800c8a6 <_close_r+0x1a>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	b103      	cbz	r3, 800c8a6 <_close_r+0x1a>
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	bd38      	pop	{r3, r4, r5, pc}
 800c8a8:	20002fa0 	.word	0x20002fa0

0800c8ac <_reclaim_reent>:
 800c8ac:	4b29      	ldr	r3, [pc, #164]	@ (800c954 <_reclaim_reent+0xa8>)
 800c8ae:	b570      	push	{r4, r5, r6, lr}
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	4283      	cmp	r3, r0
 800c8b6:	d04b      	beq.n	800c950 <_reclaim_reent+0xa4>
 800c8b8:	69c3      	ldr	r3, [r0, #28]
 800c8ba:	b1ab      	cbz	r3, 800c8e8 <_reclaim_reent+0x3c>
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	b16b      	cbz	r3, 800c8dc <_reclaim_reent+0x30>
 800c8c0:	2500      	movs	r5, #0
 800c8c2:	69e3      	ldr	r3, [r4, #28]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	5959      	ldr	r1, [r3, r5]
 800c8c8:	2900      	cmp	r1, #0
 800c8ca:	d13b      	bne.n	800c944 <_reclaim_reent+0x98>
 800c8cc:	3504      	adds	r5, #4
 800c8ce:	2d80      	cmp	r5, #128	@ 0x80
 800c8d0:	d1f7      	bne.n	800c8c2 <_reclaim_reent+0x16>
 800c8d2:	69e3      	ldr	r3, [r4, #28]
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	68d9      	ldr	r1, [r3, #12]
 800c8d8:	f000 f8b0 	bl	800ca3c <_free_r>
 800c8dc:	69e3      	ldr	r3, [r4, #28]
 800c8de:	6819      	ldr	r1, [r3, #0]
 800c8e0:	b111      	cbz	r1, 800c8e8 <_reclaim_reent+0x3c>
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f000 f8aa 	bl	800ca3c <_free_r>
 800c8e8:	6961      	ldr	r1, [r4, #20]
 800c8ea:	b111      	cbz	r1, 800c8f2 <_reclaim_reent+0x46>
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f000 f8a5 	bl	800ca3c <_free_r>
 800c8f2:	69e1      	ldr	r1, [r4, #28]
 800c8f4:	b111      	cbz	r1, 800c8fc <_reclaim_reent+0x50>
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f000 f8a0 	bl	800ca3c <_free_r>
 800c8fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c8fe:	b111      	cbz	r1, 800c906 <_reclaim_reent+0x5a>
 800c900:	4620      	mov	r0, r4
 800c902:	f000 f89b 	bl	800ca3c <_free_r>
 800c906:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c908:	b111      	cbz	r1, 800c910 <_reclaim_reent+0x64>
 800c90a:	4620      	mov	r0, r4
 800c90c:	f000 f896 	bl	800ca3c <_free_r>
 800c910:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c912:	b111      	cbz	r1, 800c91a <_reclaim_reent+0x6e>
 800c914:	4620      	mov	r0, r4
 800c916:	f000 f891 	bl	800ca3c <_free_r>
 800c91a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c91c:	b111      	cbz	r1, 800c924 <_reclaim_reent+0x78>
 800c91e:	4620      	mov	r0, r4
 800c920:	f000 f88c 	bl	800ca3c <_free_r>
 800c924:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c926:	b111      	cbz	r1, 800c92e <_reclaim_reent+0x82>
 800c928:	4620      	mov	r0, r4
 800c92a:	f000 f887 	bl	800ca3c <_free_r>
 800c92e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c930:	b111      	cbz	r1, 800c938 <_reclaim_reent+0x8c>
 800c932:	4620      	mov	r0, r4
 800c934:	f000 f882 	bl	800ca3c <_free_r>
 800c938:	6a23      	ldr	r3, [r4, #32]
 800c93a:	b14b      	cbz	r3, 800c950 <_reclaim_reent+0xa4>
 800c93c:	4620      	mov	r0, r4
 800c93e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c942:	4718      	bx	r3
 800c944:	680e      	ldr	r6, [r1, #0]
 800c946:	4620      	mov	r0, r4
 800c948:	f000 f878 	bl	800ca3c <_free_r>
 800c94c:	4631      	mov	r1, r6
 800c94e:	e7bb      	b.n	800c8c8 <_reclaim_reent+0x1c>
 800c950:	bd70      	pop	{r4, r5, r6, pc}
 800c952:	bf00      	nop
 800c954:	20000190 	.word	0x20000190

0800c958 <_lseek_r>:
 800c958:	b538      	push	{r3, r4, r5, lr}
 800c95a:	4604      	mov	r4, r0
 800c95c:	4608      	mov	r0, r1
 800c95e:	4611      	mov	r1, r2
 800c960:	2200      	movs	r2, #0
 800c962:	4d05      	ldr	r5, [pc, #20]	@ (800c978 <_lseek_r+0x20>)
 800c964:	602a      	str	r2, [r5, #0]
 800c966:	461a      	mov	r2, r3
 800c968:	f7f4 fb3f 	bl	8000fea <_lseek>
 800c96c:	1c43      	adds	r3, r0, #1
 800c96e:	d102      	bne.n	800c976 <_lseek_r+0x1e>
 800c970:	682b      	ldr	r3, [r5, #0]
 800c972:	b103      	cbz	r3, 800c976 <_lseek_r+0x1e>
 800c974:	6023      	str	r3, [r4, #0]
 800c976:	bd38      	pop	{r3, r4, r5, pc}
 800c978:	20002fa0 	.word	0x20002fa0

0800c97c <_read_r>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	4604      	mov	r4, r0
 800c980:	4608      	mov	r0, r1
 800c982:	4611      	mov	r1, r2
 800c984:	2200      	movs	r2, #0
 800c986:	4d05      	ldr	r5, [pc, #20]	@ (800c99c <_read_r+0x20>)
 800c988:	602a      	str	r2, [r5, #0]
 800c98a:	461a      	mov	r2, r3
 800c98c:	f7f4 fad0 	bl	8000f30 <_read>
 800c990:	1c43      	adds	r3, r0, #1
 800c992:	d102      	bne.n	800c99a <_read_r+0x1e>
 800c994:	682b      	ldr	r3, [r5, #0]
 800c996:	b103      	cbz	r3, 800c99a <_read_r+0x1e>
 800c998:	6023      	str	r3, [r4, #0]
 800c99a:	bd38      	pop	{r3, r4, r5, pc}
 800c99c:	20002fa0 	.word	0x20002fa0

0800c9a0 <_write_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	4608      	mov	r0, r1
 800c9a6:	4611      	mov	r1, r2
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	4d05      	ldr	r5, [pc, #20]	@ (800c9c0 <_write_r+0x20>)
 800c9ac:	602a      	str	r2, [r5, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	f7f4 fadb 	bl	8000f6a <_write>
 800c9b4:	1c43      	adds	r3, r0, #1
 800c9b6:	d102      	bne.n	800c9be <_write_r+0x1e>
 800c9b8:	682b      	ldr	r3, [r5, #0]
 800c9ba:	b103      	cbz	r3, 800c9be <_write_r+0x1e>
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	bd38      	pop	{r3, r4, r5, pc}
 800c9c0:	20002fa0 	.word	0x20002fa0

0800c9c4 <__errno>:
 800c9c4:	4b01      	ldr	r3, [pc, #4]	@ (800c9cc <__errno+0x8>)
 800c9c6:	6818      	ldr	r0, [r3, #0]
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	20000190 	.word	0x20000190

0800c9d0 <__libc_init_array>:
 800c9d0:	b570      	push	{r4, r5, r6, lr}
 800c9d2:	2600      	movs	r6, #0
 800c9d4:	4d0c      	ldr	r5, [pc, #48]	@ (800ca08 <__libc_init_array+0x38>)
 800c9d6:	4c0d      	ldr	r4, [pc, #52]	@ (800ca0c <__libc_init_array+0x3c>)
 800c9d8:	1b64      	subs	r4, r4, r5
 800c9da:	10a4      	asrs	r4, r4, #2
 800c9dc:	42a6      	cmp	r6, r4
 800c9de:	d109      	bne.n	800c9f4 <__libc_init_array+0x24>
 800c9e0:	f000 fd3e 	bl	800d460 <_init>
 800c9e4:	2600      	movs	r6, #0
 800c9e6:	4d0a      	ldr	r5, [pc, #40]	@ (800ca10 <__libc_init_array+0x40>)
 800c9e8:	4c0a      	ldr	r4, [pc, #40]	@ (800ca14 <__libc_init_array+0x44>)
 800c9ea:	1b64      	subs	r4, r4, r5
 800c9ec:	10a4      	asrs	r4, r4, #2
 800c9ee:	42a6      	cmp	r6, r4
 800c9f0:	d105      	bne.n	800c9fe <__libc_init_array+0x2e>
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}
 800c9f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9f8:	4798      	blx	r3
 800c9fa:	3601      	adds	r6, #1
 800c9fc:	e7ee      	b.n	800c9dc <__libc_init_array+0xc>
 800c9fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca02:	4798      	blx	r3
 800ca04:	3601      	adds	r6, #1
 800ca06:	e7f2      	b.n	800c9ee <__libc_init_array+0x1e>
 800ca08:	0800d5d8 	.word	0x0800d5d8
 800ca0c:	0800d5d8 	.word	0x0800d5d8
 800ca10:	0800d5d8 	.word	0x0800d5d8
 800ca14:	0800d5dc 	.word	0x0800d5dc

0800ca18 <__retarget_lock_init_recursive>:
 800ca18:	4770      	bx	lr

0800ca1a <__retarget_lock_acquire_recursive>:
 800ca1a:	4770      	bx	lr

0800ca1c <__retarget_lock_release_recursive>:
 800ca1c:	4770      	bx	lr

0800ca1e <memcpy>:
 800ca1e:	440a      	add	r2, r1
 800ca20:	4291      	cmp	r1, r2
 800ca22:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca26:	d100      	bne.n	800ca2a <memcpy+0xc>
 800ca28:	4770      	bx	lr
 800ca2a:	b510      	push	{r4, lr}
 800ca2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca30:	4291      	cmp	r1, r2
 800ca32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca36:	d1f9      	bne.n	800ca2c <memcpy+0xe>
 800ca38:	bd10      	pop	{r4, pc}
	...

0800ca3c <_free_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4605      	mov	r5, r0
 800ca40:	2900      	cmp	r1, #0
 800ca42:	d040      	beq.n	800cac6 <_free_r+0x8a>
 800ca44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca48:	1f0c      	subs	r4, r1, #4
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	bfb8      	it	lt
 800ca4e:	18e4      	addlt	r4, r4, r3
 800ca50:	f000 f8de 	bl	800cc10 <__malloc_lock>
 800ca54:	4a1c      	ldr	r2, [pc, #112]	@ (800cac8 <_free_r+0x8c>)
 800ca56:	6813      	ldr	r3, [r2, #0]
 800ca58:	b933      	cbnz	r3, 800ca68 <_free_r+0x2c>
 800ca5a:	6063      	str	r3, [r4, #4]
 800ca5c:	6014      	str	r4, [r2, #0]
 800ca5e:	4628      	mov	r0, r5
 800ca60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca64:	f000 b8da 	b.w	800cc1c <__malloc_unlock>
 800ca68:	42a3      	cmp	r3, r4
 800ca6a:	d908      	bls.n	800ca7e <_free_r+0x42>
 800ca6c:	6820      	ldr	r0, [r4, #0]
 800ca6e:	1821      	adds	r1, r4, r0
 800ca70:	428b      	cmp	r3, r1
 800ca72:	bf01      	itttt	eq
 800ca74:	6819      	ldreq	r1, [r3, #0]
 800ca76:	685b      	ldreq	r3, [r3, #4]
 800ca78:	1809      	addeq	r1, r1, r0
 800ca7a:	6021      	streq	r1, [r4, #0]
 800ca7c:	e7ed      	b.n	800ca5a <_free_r+0x1e>
 800ca7e:	461a      	mov	r2, r3
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	b10b      	cbz	r3, 800ca88 <_free_r+0x4c>
 800ca84:	42a3      	cmp	r3, r4
 800ca86:	d9fa      	bls.n	800ca7e <_free_r+0x42>
 800ca88:	6811      	ldr	r1, [r2, #0]
 800ca8a:	1850      	adds	r0, r2, r1
 800ca8c:	42a0      	cmp	r0, r4
 800ca8e:	d10b      	bne.n	800caa8 <_free_r+0x6c>
 800ca90:	6820      	ldr	r0, [r4, #0]
 800ca92:	4401      	add	r1, r0
 800ca94:	1850      	adds	r0, r2, r1
 800ca96:	4283      	cmp	r3, r0
 800ca98:	6011      	str	r1, [r2, #0]
 800ca9a:	d1e0      	bne.n	800ca5e <_free_r+0x22>
 800ca9c:	6818      	ldr	r0, [r3, #0]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	4408      	add	r0, r1
 800caa2:	6010      	str	r0, [r2, #0]
 800caa4:	6053      	str	r3, [r2, #4]
 800caa6:	e7da      	b.n	800ca5e <_free_r+0x22>
 800caa8:	d902      	bls.n	800cab0 <_free_r+0x74>
 800caaa:	230c      	movs	r3, #12
 800caac:	602b      	str	r3, [r5, #0]
 800caae:	e7d6      	b.n	800ca5e <_free_r+0x22>
 800cab0:	6820      	ldr	r0, [r4, #0]
 800cab2:	1821      	adds	r1, r4, r0
 800cab4:	428b      	cmp	r3, r1
 800cab6:	bf01      	itttt	eq
 800cab8:	6819      	ldreq	r1, [r3, #0]
 800caba:	685b      	ldreq	r3, [r3, #4]
 800cabc:	1809      	addeq	r1, r1, r0
 800cabe:	6021      	streq	r1, [r4, #0]
 800cac0:	6063      	str	r3, [r4, #4]
 800cac2:	6054      	str	r4, [r2, #4]
 800cac4:	e7cb      	b.n	800ca5e <_free_r+0x22>
 800cac6:	bd38      	pop	{r3, r4, r5, pc}
 800cac8:	20002fac 	.word	0x20002fac

0800cacc <sbrk_aligned>:
 800cacc:	b570      	push	{r4, r5, r6, lr}
 800cace:	4e0f      	ldr	r6, [pc, #60]	@ (800cb0c <sbrk_aligned+0x40>)
 800cad0:	460c      	mov	r4, r1
 800cad2:	6831      	ldr	r1, [r6, #0]
 800cad4:	4605      	mov	r5, r0
 800cad6:	b911      	cbnz	r1, 800cade <sbrk_aligned+0x12>
 800cad8:	f000 fca4 	bl	800d424 <_sbrk_r>
 800cadc:	6030      	str	r0, [r6, #0]
 800cade:	4621      	mov	r1, r4
 800cae0:	4628      	mov	r0, r5
 800cae2:	f000 fc9f 	bl	800d424 <_sbrk_r>
 800cae6:	1c43      	adds	r3, r0, #1
 800cae8:	d103      	bne.n	800caf2 <sbrk_aligned+0x26>
 800caea:	f04f 34ff 	mov.w	r4, #4294967295
 800caee:	4620      	mov	r0, r4
 800caf0:	bd70      	pop	{r4, r5, r6, pc}
 800caf2:	1cc4      	adds	r4, r0, #3
 800caf4:	f024 0403 	bic.w	r4, r4, #3
 800caf8:	42a0      	cmp	r0, r4
 800cafa:	d0f8      	beq.n	800caee <sbrk_aligned+0x22>
 800cafc:	1a21      	subs	r1, r4, r0
 800cafe:	4628      	mov	r0, r5
 800cb00:	f000 fc90 	bl	800d424 <_sbrk_r>
 800cb04:	3001      	adds	r0, #1
 800cb06:	d1f2      	bne.n	800caee <sbrk_aligned+0x22>
 800cb08:	e7ef      	b.n	800caea <sbrk_aligned+0x1e>
 800cb0a:	bf00      	nop
 800cb0c:	20002fa8 	.word	0x20002fa8

0800cb10 <_malloc_r>:
 800cb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb14:	1ccd      	adds	r5, r1, #3
 800cb16:	f025 0503 	bic.w	r5, r5, #3
 800cb1a:	3508      	adds	r5, #8
 800cb1c:	2d0c      	cmp	r5, #12
 800cb1e:	bf38      	it	cc
 800cb20:	250c      	movcc	r5, #12
 800cb22:	2d00      	cmp	r5, #0
 800cb24:	4606      	mov	r6, r0
 800cb26:	db01      	blt.n	800cb2c <_malloc_r+0x1c>
 800cb28:	42a9      	cmp	r1, r5
 800cb2a:	d904      	bls.n	800cb36 <_malloc_r+0x26>
 800cb2c:	230c      	movs	r3, #12
 800cb2e:	6033      	str	r3, [r6, #0]
 800cb30:	2000      	movs	r0, #0
 800cb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc0c <_malloc_r+0xfc>
 800cb3a:	f000 f869 	bl	800cc10 <__malloc_lock>
 800cb3e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb42:	461c      	mov	r4, r3
 800cb44:	bb44      	cbnz	r4, 800cb98 <_malloc_r+0x88>
 800cb46:	4629      	mov	r1, r5
 800cb48:	4630      	mov	r0, r6
 800cb4a:	f7ff ffbf 	bl	800cacc <sbrk_aligned>
 800cb4e:	1c43      	adds	r3, r0, #1
 800cb50:	4604      	mov	r4, r0
 800cb52:	d158      	bne.n	800cc06 <_malloc_r+0xf6>
 800cb54:	f8d8 4000 	ldr.w	r4, [r8]
 800cb58:	4627      	mov	r7, r4
 800cb5a:	2f00      	cmp	r7, #0
 800cb5c:	d143      	bne.n	800cbe6 <_malloc_r+0xd6>
 800cb5e:	2c00      	cmp	r4, #0
 800cb60:	d04b      	beq.n	800cbfa <_malloc_r+0xea>
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	4639      	mov	r1, r7
 800cb66:	4630      	mov	r0, r6
 800cb68:	eb04 0903 	add.w	r9, r4, r3
 800cb6c:	f000 fc5a 	bl	800d424 <_sbrk_r>
 800cb70:	4581      	cmp	r9, r0
 800cb72:	d142      	bne.n	800cbfa <_malloc_r+0xea>
 800cb74:	6821      	ldr	r1, [r4, #0]
 800cb76:	4630      	mov	r0, r6
 800cb78:	1a6d      	subs	r5, r5, r1
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	f7ff ffa6 	bl	800cacc <sbrk_aligned>
 800cb80:	3001      	adds	r0, #1
 800cb82:	d03a      	beq.n	800cbfa <_malloc_r+0xea>
 800cb84:	6823      	ldr	r3, [r4, #0]
 800cb86:	442b      	add	r3, r5
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb8e:	685a      	ldr	r2, [r3, #4]
 800cb90:	bb62      	cbnz	r2, 800cbec <_malloc_r+0xdc>
 800cb92:	f8c8 7000 	str.w	r7, [r8]
 800cb96:	e00f      	b.n	800cbb8 <_malloc_r+0xa8>
 800cb98:	6822      	ldr	r2, [r4, #0]
 800cb9a:	1b52      	subs	r2, r2, r5
 800cb9c:	d420      	bmi.n	800cbe0 <_malloc_r+0xd0>
 800cb9e:	2a0b      	cmp	r2, #11
 800cba0:	d917      	bls.n	800cbd2 <_malloc_r+0xc2>
 800cba2:	1961      	adds	r1, r4, r5
 800cba4:	42a3      	cmp	r3, r4
 800cba6:	6025      	str	r5, [r4, #0]
 800cba8:	bf18      	it	ne
 800cbaa:	6059      	strne	r1, [r3, #4]
 800cbac:	6863      	ldr	r3, [r4, #4]
 800cbae:	bf08      	it	eq
 800cbb0:	f8c8 1000 	streq.w	r1, [r8]
 800cbb4:	5162      	str	r2, [r4, r5]
 800cbb6:	604b      	str	r3, [r1, #4]
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f000 f82f 	bl	800cc1c <__malloc_unlock>
 800cbbe:	f104 000b 	add.w	r0, r4, #11
 800cbc2:	1d23      	adds	r3, r4, #4
 800cbc4:	f020 0007 	bic.w	r0, r0, #7
 800cbc8:	1ac2      	subs	r2, r0, r3
 800cbca:	bf1c      	itt	ne
 800cbcc:	1a1b      	subne	r3, r3, r0
 800cbce:	50a3      	strne	r3, [r4, r2]
 800cbd0:	e7af      	b.n	800cb32 <_malloc_r+0x22>
 800cbd2:	6862      	ldr	r2, [r4, #4]
 800cbd4:	42a3      	cmp	r3, r4
 800cbd6:	bf0c      	ite	eq
 800cbd8:	f8c8 2000 	streq.w	r2, [r8]
 800cbdc:	605a      	strne	r2, [r3, #4]
 800cbde:	e7eb      	b.n	800cbb8 <_malloc_r+0xa8>
 800cbe0:	4623      	mov	r3, r4
 800cbe2:	6864      	ldr	r4, [r4, #4]
 800cbe4:	e7ae      	b.n	800cb44 <_malloc_r+0x34>
 800cbe6:	463c      	mov	r4, r7
 800cbe8:	687f      	ldr	r7, [r7, #4]
 800cbea:	e7b6      	b.n	800cb5a <_malloc_r+0x4a>
 800cbec:	461a      	mov	r2, r3
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	42a3      	cmp	r3, r4
 800cbf2:	d1fb      	bne.n	800cbec <_malloc_r+0xdc>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	6053      	str	r3, [r2, #4]
 800cbf8:	e7de      	b.n	800cbb8 <_malloc_r+0xa8>
 800cbfa:	230c      	movs	r3, #12
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	6033      	str	r3, [r6, #0]
 800cc00:	f000 f80c 	bl	800cc1c <__malloc_unlock>
 800cc04:	e794      	b.n	800cb30 <_malloc_r+0x20>
 800cc06:	6005      	str	r5, [r0, #0]
 800cc08:	e7d6      	b.n	800cbb8 <_malloc_r+0xa8>
 800cc0a:	bf00      	nop
 800cc0c:	20002fac 	.word	0x20002fac

0800cc10 <__malloc_lock>:
 800cc10:	4801      	ldr	r0, [pc, #4]	@ (800cc18 <__malloc_lock+0x8>)
 800cc12:	f7ff bf02 	b.w	800ca1a <__retarget_lock_acquire_recursive>
 800cc16:	bf00      	nop
 800cc18:	20002fa4 	.word	0x20002fa4

0800cc1c <__malloc_unlock>:
 800cc1c:	4801      	ldr	r0, [pc, #4]	@ (800cc24 <__malloc_unlock+0x8>)
 800cc1e:	f7ff befd 	b.w	800ca1c <__retarget_lock_release_recursive>
 800cc22:	bf00      	nop
 800cc24:	20002fa4 	.word	0x20002fa4

0800cc28 <__sfputc_r>:
 800cc28:	6893      	ldr	r3, [r2, #8]
 800cc2a:	b410      	push	{r4}
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	6093      	str	r3, [r2, #8]
 800cc32:	da07      	bge.n	800cc44 <__sfputc_r+0x1c>
 800cc34:	6994      	ldr	r4, [r2, #24]
 800cc36:	42a3      	cmp	r3, r4
 800cc38:	db01      	blt.n	800cc3e <__sfputc_r+0x16>
 800cc3a:	290a      	cmp	r1, #10
 800cc3c:	d102      	bne.n	800cc44 <__sfputc_r+0x1c>
 800cc3e:	bc10      	pop	{r4}
 800cc40:	f7ff bd87 	b.w	800c752 <__swbuf_r>
 800cc44:	6813      	ldr	r3, [r2, #0]
 800cc46:	1c58      	adds	r0, r3, #1
 800cc48:	6010      	str	r0, [r2, #0]
 800cc4a:	7019      	strb	r1, [r3, #0]
 800cc4c:	4608      	mov	r0, r1
 800cc4e:	bc10      	pop	{r4}
 800cc50:	4770      	bx	lr

0800cc52 <__sfputs_r>:
 800cc52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc54:	4606      	mov	r6, r0
 800cc56:	460f      	mov	r7, r1
 800cc58:	4614      	mov	r4, r2
 800cc5a:	18d5      	adds	r5, r2, r3
 800cc5c:	42ac      	cmp	r4, r5
 800cc5e:	d101      	bne.n	800cc64 <__sfputs_r+0x12>
 800cc60:	2000      	movs	r0, #0
 800cc62:	e007      	b.n	800cc74 <__sfputs_r+0x22>
 800cc64:	463a      	mov	r2, r7
 800cc66:	4630      	mov	r0, r6
 800cc68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc6c:	f7ff ffdc 	bl	800cc28 <__sfputc_r>
 800cc70:	1c43      	adds	r3, r0, #1
 800cc72:	d1f3      	bne.n	800cc5c <__sfputs_r+0xa>
 800cc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc78 <_vfiprintf_r>:
 800cc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7c:	460d      	mov	r5, r1
 800cc7e:	4614      	mov	r4, r2
 800cc80:	4698      	mov	r8, r3
 800cc82:	4606      	mov	r6, r0
 800cc84:	b09d      	sub	sp, #116	@ 0x74
 800cc86:	b118      	cbz	r0, 800cc90 <_vfiprintf_r+0x18>
 800cc88:	6a03      	ldr	r3, [r0, #32]
 800cc8a:	b90b      	cbnz	r3, 800cc90 <_vfiprintf_r+0x18>
 800cc8c:	f7ff fc78 	bl	800c580 <__sinit>
 800cc90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc92:	07d9      	lsls	r1, r3, #31
 800cc94:	d405      	bmi.n	800cca2 <_vfiprintf_r+0x2a>
 800cc96:	89ab      	ldrh	r3, [r5, #12]
 800cc98:	059a      	lsls	r2, r3, #22
 800cc9a:	d402      	bmi.n	800cca2 <_vfiprintf_r+0x2a>
 800cc9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc9e:	f7ff febc 	bl	800ca1a <__retarget_lock_acquire_recursive>
 800cca2:	89ab      	ldrh	r3, [r5, #12]
 800cca4:	071b      	lsls	r3, r3, #28
 800cca6:	d501      	bpl.n	800ccac <_vfiprintf_r+0x34>
 800cca8:	692b      	ldr	r3, [r5, #16]
 800ccaa:	b99b      	cbnz	r3, 800ccd4 <_vfiprintf_r+0x5c>
 800ccac:	4629      	mov	r1, r5
 800ccae:	4630      	mov	r0, r6
 800ccb0:	f7ff fd8e 	bl	800c7d0 <__swsetup_r>
 800ccb4:	b170      	cbz	r0, 800ccd4 <_vfiprintf_r+0x5c>
 800ccb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccb8:	07dc      	lsls	r4, r3, #31
 800ccba:	d504      	bpl.n	800ccc6 <_vfiprintf_r+0x4e>
 800ccbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc0:	b01d      	add	sp, #116	@ 0x74
 800ccc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc6:	89ab      	ldrh	r3, [r5, #12]
 800ccc8:	0598      	lsls	r0, r3, #22
 800ccca:	d4f7      	bmi.n	800ccbc <_vfiprintf_r+0x44>
 800cccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccce:	f7ff fea5 	bl	800ca1c <__retarget_lock_release_recursive>
 800ccd2:	e7f3      	b.n	800ccbc <_vfiprintf_r+0x44>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccd8:	2320      	movs	r3, #32
 800ccda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccde:	2330      	movs	r3, #48	@ 0x30
 800cce0:	f04f 0901 	mov.w	r9, #1
 800cce4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cce8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ce94 <_vfiprintf_r+0x21c>
 800ccec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccf0:	4623      	mov	r3, r4
 800ccf2:	469a      	mov	sl, r3
 800ccf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccf8:	b10a      	cbz	r2, 800ccfe <_vfiprintf_r+0x86>
 800ccfa:	2a25      	cmp	r2, #37	@ 0x25
 800ccfc:	d1f9      	bne.n	800ccf2 <_vfiprintf_r+0x7a>
 800ccfe:	ebba 0b04 	subs.w	fp, sl, r4
 800cd02:	d00b      	beq.n	800cd1c <_vfiprintf_r+0xa4>
 800cd04:	465b      	mov	r3, fp
 800cd06:	4622      	mov	r2, r4
 800cd08:	4629      	mov	r1, r5
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	f7ff ffa1 	bl	800cc52 <__sfputs_r>
 800cd10:	3001      	adds	r0, #1
 800cd12:	f000 80a7 	beq.w	800ce64 <_vfiprintf_r+0x1ec>
 800cd16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd18:	445a      	add	r2, fp
 800cd1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd1c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f000 809f 	beq.w	800ce64 <_vfiprintf_r+0x1ec>
 800cd26:	2300      	movs	r3, #0
 800cd28:	f04f 32ff 	mov.w	r2, #4294967295
 800cd2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd30:	f10a 0a01 	add.w	sl, sl, #1
 800cd34:	9304      	str	r3, [sp, #16]
 800cd36:	9307      	str	r3, [sp, #28]
 800cd38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd3e:	4654      	mov	r4, sl
 800cd40:	2205      	movs	r2, #5
 800cd42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd46:	4853      	ldr	r0, [pc, #332]	@ (800ce94 <_vfiprintf_r+0x21c>)
 800cd48:	f000 fb7c 	bl	800d444 <memchr>
 800cd4c:	9a04      	ldr	r2, [sp, #16]
 800cd4e:	b9d8      	cbnz	r0, 800cd88 <_vfiprintf_r+0x110>
 800cd50:	06d1      	lsls	r1, r2, #27
 800cd52:	bf44      	itt	mi
 800cd54:	2320      	movmi	r3, #32
 800cd56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd5a:	0713      	lsls	r3, r2, #28
 800cd5c:	bf44      	itt	mi
 800cd5e:	232b      	movmi	r3, #43	@ 0x2b
 800cd60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd64:	f89a 3000 	ldrb.w	r3, [sl]
 800cd68:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd6a:	d015      	beq.n	800cd98 <_vfiprintf_r+0x120>
 800cd6c:	4654      	mov	r4, sl
 800cd6e:	2000      	movs	r0, #0
 800cd70:	f04f 0c0a 	mov.w	ip, #10
 800cd74:	9a07      	ldr	r2, [sp, #28]
 800cd76:	4621      	mov	r1, r4
 800cd78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd7c:	3b30      	subs	r3, #48	@ 0x30
 800cd7e:	2b09      	cmp	r3, #9
 800cd80:	d94b      	bls.n	800ce1a <_vfiprintf_r+0x1a2>
 800cd82:	b1b0      	cbz	r0, 800cdb2 <_vfiprintf_r+0x13a>
 800cd84:	9207      	str	r2, [sp, #28]
 800cd86:	e014      	b.n	800cdb2 <_vfiprintf_r+0x13a>
 800cd88:	eba0 0308 	sub.w	r3, r0, r8
 800cd8c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd90:	4313      	orrs	r3, r2
 800cd92:	46a2      	mov	sl, r4
 800cd94:	9304      	str	r3, [sp, #16]
 800cd96:	e7d2      	b.n	800cd3e <_vfiprintf_r+0xc6>
 800cd98:	9b03      	ldr	r3, [sp, #12]
 800cd9a:	1d19      	adds	r1, r3, #4
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	9103      	str	r1, [sp, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	bfbb      	ittet	lt
 800cda4:	425b      	neglt	r3, r3
 800cda6:	f042 0202 	orrlt.w	r2, r2, #2
 800cdaa:	9307      	strge	r3, [sp, #28]
 800cdac:	9307      	strlt	r3, [sp, #28]
 800cdae:	bfb8      	it	lt
 800cdb0:	9204      	strlt	r2, [sp, #16]
 800cdb2:	7823      	ldrb	r3, [r4, #0]
 800cdb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdb6:	d10a      	bne.n	800cdce <_vfiprintf_r+0x156>
 800cdb8:	7863      	ldrb	r3, [r4, #1]
 800cdba:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdbc:	d132      	bne.n	800ce24 <_vfiprintf_r+0x1ac>
 800cdbe:	9b03      	ldr	r3, [sp, #12]
 800cdc0:	3402      	adds	r4, #2
 800cdc2:	1d1a      	adds	r2, r3, #4
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	9203      	str	r2, [sp, #12]
 800cdc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cdcc:	9305      	str	r3, [sp, #20]
 800cdce:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ce98 <_vfiprintf_r+0x220>
 800cdd2:	2203      	movs	r2, #3
 800cdd4:	4650      	mov	r0, sl
 800cdd6:	7821      	ldrb	r1, [r4, #0]
 800cdd8:	f000 fb34 	bl	800d444 <memchr>
 800cddc:	b138      	cbz	r0, 800cdee <_vfiprintf_r+0x176>
 800cdde:	2240      	movs	r2, #64	@ 0x40
 800cde0:	9b04      	ldr	r3, [sp, #16]
 800cde2:	eba0 000a 	sub.w	r0, r0, sl
 800cde6:	4082      	lsls	r2, r0
 800cde8:	4313      	orrs	r3, r2
 800cdea:	3401      	adds	r4, #1
 800cdec:	9304      	str	r3, [sp, #16]
 800cdee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf2:	2206      	movs	r2, #6
 800cdf4:	4829      	ldr	r0, [pc, #164]	@ (800ce9c <_vfiprintf_r+0x224>)
 800cdf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cdfa:	f000 fb23 	bl	800d444 <memchr>
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d03f      	beq.n	800ce82 <_vfiprintf_r+0x20a>
 800ce02:	4b27      	ldr	r3, [pc, #156]	@ (800cea0 <_vfiprintf_r+0x228>)
 800ce04:	bb1b      	cbnz	r3, 800ce4e <_vfiprintf_r+0x1d6>
 800ce06:	9b03      	ldr	r3, [sp, #12]
 800ce08:	3307      	adds	r3, #7
 800ce0a:	f023 0307 	bic.w	r3, r3, #7
 800ce0e:	3308      	adds	r3, #8
 800ce10:	9303      	str	r3, [sp, #12]
 800ce12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce14:	443b      	add	r3, r7
 800ce16:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce18:	e76a      	b.n	800ccf0 <_vfiprintf_r+0x78>
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	2001      	movs	r0, #1
 800ce1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce22:	e7a8      	b.n	800cd76 <_vfiprintf_r+0xfe>
 800ce24:	2300      	movs	r3, #0
 800ce26:	f04f 0c0a 	mov.w	ip, #10
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	3401      	adds	r4, #1
 800ce2e:	9305      	str	r3, [sp, #20]
 800ce30:	4620      	mov	r0, r4
 800ce32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce36:	3a30      	subs	r2, #48	@ 0x30
 800ce38:	2a09      	cmp	r2, #9
 800ce3a:	d903      	bls.n	800ce44 <_vfiprintf_r+0x1cc>
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d0c6      	beq.n	800cdce <_vfiprintf_r+0x156>
 800ce40:	9105      	str	r1, [sp, #20]
 800ce42:	e7c4      	b.n	800cdce <_vfiprintf_r+0x156>
 800ce44:	4604      	mov	r4, r0
 800ce46:	2301      	movs	r3, #1
 800ce48:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce4c:	e7f0      	b.n	800ce30 <_vfiprintf_r+0x1b8>
 800ce4e:	ab03      	add	r3, sp, #12
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	462a      	mov	r2, r5
 800ce54:	4630      	mov	r0, r6
 800ce56:	4b13      	ldr	r3, [pc, #76]	@ (800cea4 <_vfiprintf_r+0x22c>)
 800ce58:	a904      	add	r1, sp, #16
 800ce5a:	f3af 8000 	nop.w
 800ce5e:	4607      	mov	r7, r0
 800ce60:	1c78      	adds	r0, r7, #1
 800ce62:	d1d6      	bne.n	800ce12 <_vfiprintf_r+0x19a>
 800ce64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce66:	07d9      	lsls	r1, r3, #31
 800ce68:	d405      	bmi.n	800ce76 <_vfiprintf_r+0x1fe>
 800ce6a:	89ab      	ldrh	r3, [r5, #12]
 800ce6c:	059a      	lsls	r2, r3, #22
 800ce6e:	d402      	bmi.n	800ce76 <_vfiprintf_r+0x1fe>
 800ce70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce72:	f7ff fdd3 	bl	800ca1c <__retarget_lock_release_recursive>
 800ce76:	89ab      	ldrh	r3, [r5, #12]
 800ce78:	065b      	lsls	r3, r3, #25
 800ce7a:	f53f af1f 	bmi.w	800ccbc <_vfiprintf_r+0x44>
 800ce7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce80:	e71e      	b.n	800ccc0 <_vfiprintf_r+0x48>
 800ce82:	ab03      	add	r3, sp, #12
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	462a      	mov	r2, r5
 800ce88:	4630      	mov	r0, r6
 800ce8a:	4b06      	ldr	r3, [pc, #24]	@ (800cea4 <_vfiprintf_r+0x22c>)
 800ce8c:	a904      	add	r1, sp, #16
 800ce8e:	f000 f87d 	bl	800cf8c <_printf_i>
 800ce92:	e7e4      	b.n	800ce5e <_vfiprintf_r+0x1e6>
 800ce94:	0800d5a2 	.word	0x0800d5a2
 800ce98:	0800d5a8 	.word	0x0800d5a8
 800ce9c:	0800d5ac 	.word	0x0800d5ac
 800cea0:	00000000 	.word	0x00000000
 800cea4:	0800cc53 	.word	0x0800cc53

0800cea8 <_printf_common>:
 800cea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceac:	4616      	mov	r6, r2
 800ceae:	4698      	mov	r8, r3
 800ceb0:	688a      	ldr	r2, [r1, #8]
 800ceb2:	690b      	ldr	r3, [r1, #16]
 800ceb4:	4607      	mov	r7, r0
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	bfb8      	it	lt
 800ceba:	4613      	movlt	r3, r2
 800cebc:	6033      	str	r3, [r6, #0]
 800cebe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cec2:	460c      	mov	r4, r1
 800cec4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cec8:	b10a      	cbz	r2, 800cece <_printf_common+0x26>
 800ceca:	3301      	adds	r3, #1
 800cecc:	6033      	str	r3, [r6, #0]
 800cece:	6823      	ldr	r3, [r4, #0]
 800ced0:	0699      	lsls	r1, r3, #26
 800ced2:	bf42      	ittt	mi
 800ced4:	6833      	ldrmi	r3, [r6, #0]
 800ced6:	3302      	addmi	r3, #2
 800ced8:	6033      	strmi	r3, [r6, #0]
 800ceda:	6825      	ldr	r5, [r4, #0]
 800cedc:	f015 0506 	ands.w	r5, r5, #6
 800cee0:	d106      	bne.n	800cef0 <_printf_common+0x48>
 800cee2:	f104 0a19 	add.w	sl, r4, #25
 800cee6:	68e3      	ldr	r3, [r4, #12]
 800cee8:	6832      	ldr	r2, [r6, #0]
 800ceea:	1a9b      	subs	r3, r3, r2
 800ceec:	42ab      	cmp	r3, r5
 800ceee:	dc2b      	bgt.n	800cf48 <_printf_common+0xa0>
 800cef0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cef4:	6822      	ldr	r2, [r4, #0]
 800cef6:	3b00      	subs	r3, #0
 800cef8:	bf18      	it	ne
 800cefa:	2301      	movne	r3, #1
 800cefc:	0692      	lsls	r2, r2, #26
 800cefe:	d430      	bmi.n	800cf62 <_printf_common+0xba>
 800cf00:	4641      	mov	r1, r8
 800cf02:	4638      	mov	r0, r7
 800cf04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cf08:	47c8      	blx	r9
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	d023      	beq.n	800cf56 <_printf_common+0xae>
 800cf0e:	6823      	ldr	r3, [r4, #0]
 800cf10:	6922      	ldr	r2, [r4, #16]
 800cf12:	f003 0306 	and.w	r3, r3, #6
 800cf16:	2b04      	cmp	r3, #4
 800cf18:	bf14      	ite	ne
 800cf1a:	2500      	movne	r5, #0
 800cf1c:	6833      	ldreq	r3, [r6, #0]
 800cf1e:	f04f 0600 	mov.w	r6, #0
 800cf22:	bf08      	it	eq
 800cf24:	68e5      	ldreq	r5, [r4, #12]
 800cf26:	f104 041a 	add.w	r4, r4, #26
 800cf2a:	bf08      	it	eq
 800cf2c:	1aed      	subeq	r5, r5, r3
 800cf2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cf32:	bf08      	it	eq
 800cf34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	bfc4      	itt	gt
 800cf3c:	1a9b      	subgt	r3, r3, r2
 800cf3e:	18ed      	addgt	r5, r5, r3
 800cf40:	42b5      	cmp	r5, r6
 800cf42:	d11a      	bne.n	800cf7a <_printf_common+0xd2>
 800cf44:	2000      	movs	r0, #0
 800cf46:	e008      	b.n	800cf5a <_printf_common+0xb2>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	4652      	mov	r2, sl
 800cf4c:	4641      	mov	r1, r8
 800cf4e:	4638      	mov	r0, r7
 800cf50:	47c8      	blx	r9
 800cf52:	3001      	adds	r0, #1
 800cf54:	d103      	bne.n	800cf5e <_printf_common+0xb6>
 800cf56:	f04f 30ff 	mov.w	r0, #4294967295
 800cf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf5e:	3501      	adds	r5, #1
 800cf60:	e7c1      	b.n	800cee6 <_printf_common+0x3e>
 800cf62:	2030      	movs	r0, #48	@ 0x30
 800cf64:	18e1      	adds	r1, r4, r3
 800cf66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf6a:	1c5a      	adds	r2, r3, #1
 800cf6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cf70:	4422      	add	r2, r4
 800cf72:	3302      	adds	r3, #2
 800cf74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cf78:	e7c2      	b.n	800cf00 <_printf_common+0x58>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	4622      	mov	r2, r4
 800cf7e:	4641      	mov	r1, r8
 800cf80:	4638      	mov	r0, r7
 800cf82:	47c8      	blx	r9
 800cf84:	3001      	adds	r0, #1
 800cf86:	d0e6      	beq.n	800cf56 <_printf_common+0xae>
 800cf88:	3601      	adds	r6, #1
 800cf8a:	e7d9      	b.n	800cf40 <_printf_common+0x98>

0800cf8c <_printf_i>:
 800cf8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf90:	7e0f      	ldrb	r7, [r1, #24]
 800cf92:	4691      	mov	r9, r2
 800cf94:	2f78      	cmp	r7, #120	@ 0x78
 800cf96:	4680      	mov	r8, r0
 800cf98:	460c      	mov	r4, r1
 800cf9a:	469a      	mov	sl, r3
 800cf9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cf9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cfa2:	d807      	bhi.n	800cfb4 <_printf_i+0x28>
 800cfa4:	2f62      	cmp	r7, #98	@ 0x62
 800cfa6:	d80a      	bhi.n	800cfbe <_printf_i+0x32>
 800cfa8:	2f00      	cmp	r7, #0
 800cfaa:	f000 80d3 	beq.w	800d154 <_printf_i+0x1c8>
 800cfae:	2f58      	cmp	r7, #88	@ 0x58
 800cfb0:	f000 80ba 	beq.w	800d128 <_printf_i+0x19c>
 800cfb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cfbc:	e03a      	b.n	800d034 <_printf_i+0xa8>
 800cfbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cfc2:	2b15      	cmp	r3, #21
 800cfc4:	d8f6      	bhi.n	800cfb4 <_printf_i+0x28>
 800cfc6:	a101      	add	r1, pc, #4	@ (adr r1, 800cfcc <_printf_i+0x40>)
 800cfc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfcc:	0800d025 	.word	0x0800d025
 800cfd0:	0800d039 	.word	0x0800d039
 800cfd4:	0800cfb5 	.word	0x0800cfb5
 800cfd8:	0800cfb5 	.word	0x0800cfb5
 800cfdc:	0800cfb5 	.word	0x0800cfb5
 800cfe0:	0800cfb5 	.word	0x0800cfb5
 800cfe4:	0800d039 	.word	0x0800d039
 800cfe8:	0800cfb5 	.word	0x0800cfb5
 800cfec:	0800cfb5 	.word	0x0800cfb5
 800cff0:	0800cfb5 	.word	0x0800cfb5
 800cff4:	0800cfb5 	.word	0x0800cfb5
 800cff8:	0800d13b 	.word	0x0800d13b
 800cffc:	0800d063 	.word	0x0800d063
 800d000:	0800d0f5 	.word	0x0800d0f5
 800d004:	0800cfb5 	.word	0x0800cfb5
 800d008:	0800cfb5 	.word	0x0800cfb5
 800d00c:	0800d15d 	.word	0x0800d15d
 800d010:	0800cfb5 	.word	0x0800cfb5
 800d014:	0800d063 	.word	0x0800d063
 800d018:	0800cfb5 	.word	0x0800cfb5
 800d01c:	0800cfb5 	.word	0x0800cfb5
 800d020:	0800d0fd 	.word	0x0800d0fd
 800d024:	6833      	ldr	r3, [r6, #0]
 800d026:	1d1a      	adds	r2, r3, #4
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	6032      	str	r2, [r6, #0]
 800d02c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d030:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d034:	2301      	movs	r3, #1
 800d036:	e09e      	b.n	800d176 <_printf_i+0x1ea>
 800d038:	6833      	ldr	r3, [r6, #0]
 800d03a:	6820      	ldr	r0, [r4, #0]
 800d03c:	1d19      	adds	r1, r3, #4
 800d03e:	6031      	str	r1, [r6, #0]
 800d040:	0606      	lsls	r6, r0, #24
 800d042:	d501      	bpl.n	800d048 <_printf_i+0xbc>
 800d044:	681d      	ldr	r5, [r3, #0]
 800d046:	e003      	b.n	800d050 <_printf_i+0xc4>
 800d048:	0645      	lsls	r5, r0, #25
 800d04a:	d5fb      	bpl.n	800d044 <_printf_i+0xb8>
 800d04c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d050:	2d00      	cmp	r5, #0
 800d052:	da03      	bge.n	800d05c <_printf_i+0xd0>
 800d054:	232d      	movs	r3, #45	@ 0x2d
 800d056:	426d      	negs	r5, r5
 800d058:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d05c:	230a      	movs	r3, #10
 800d05e:	4859      	ldr	r0, [pc, #356]	@ (800d1c4 <_printf_i+0x238>)
 800d060:	e011      	b.n	800d086 <_printf_i+0xfa>
 800d062:	6821      	ldr	r1, [r4, #0]
 800d064:	6833      	ldr	r3, [r6, #0]
 800d066:	0608      	lsls	r0, r1, #24
 800d068:	f853 5b04 	ldr.w	r5, [r3], #4
 800d06c:	d402      	bmi.n	800d074 <_printf_i+0xe8>
 800d06e:	0649      	lsls	r1, r1, #25
 800d070:	bf48      	it	mi
 800d072:	b2ad      	uxthmi	r5, r5
 800d074:	2f6f      	cmp	r7, #111	@ 0x6f
 800d076:	6033      	str	r3, [r6, #0]
 800d078:	bf14      	ite	ne
 800d07a:	230a      	movne	r3, #10
 800d07c:	2308      	moveq	r3, #8
 800d07e:	4851      	ldr	r0, [pc, #324]	@ (800d1c4 <_printf_i+0x238>)
 800d080:	2100      	movs	r1, #0
 800d082:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d086:	6866      	ldr	r6, [r4, #4]
 800d088:	2e00      	cmp	r6, #0
 800d08a:	bfa8      	it	ge
 800d08c:	6821      	ldrge	r1, [r4, #0]
 800d08e:	60a6      	str	r6, [r4, #8]
 800d090:	bfa4      	itt	ge
 800d092:	f021 0104 	bicge.w	r1, r1, #4
 800d096:	6021      	strge	r1, [r4, #0]
 800d098:	b90d      	cbnz	r5, 800d09e <_printf_i+0x112>
 800d09a:	2e00      	cmp	r6, #0
 800d09c:	d04b      	beq.n	800d136 <_printf_i+0x1aa>
 800d09e:	4616      	mov	r6, r2
 800d0a0:	fbb5 f1f3 	udiv	r1, r5, r3
 800d0a4:	fb03 5711 	mls	r7, r3, r1, r5
 800d0a8:	5dc7      	ldrb	r7, [r0, r7]
 800d0aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d0ae:	462f      	mov	r7, r5
 800d0b0:	42bb      	cmp	r3, r7
 800d0b2:	460d      	mov	r5, r1
 800d0b4:	d9f4      	bls.n	800d0a0 <_printf_i+0x114>
 800d0b6:	2b08      	cmp	r3, #8
 800d0b8:	d10b      	bne.n	800d0d2 <_printf_i+0x146>
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	07df      	lsls	r7, r3, #31
 800d0be:	d508      	bpl.n	800d0d2 <_printf_i+0x146>
 800d0c0:	6923      	ldr	r3, [r4, #16]
 800d0c2:	6861      	ldr	r1, [r4, #4]
 800d0c4:	4299      	cmp	r1, r3
 800d0c6:	bfde      	ittt	le
 800d0c8:	2330      	movle	r3, #48	@ 0x30
 800d0ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d0ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d0d2:	1b92      	subs	r2, r2, r6
 800d0d4:	6122      	str	r2, [r4, #16]
 800d0d6:	464b      	mov	r3, r9
 800d0d8:	4621      	mov	r1, r4
 800d0da:	4640      	mov	r0, r8
 800d0dc:	f8cd a000 	str.w	sl, [sp]
 800d0e0:	aa03      	add	r2, sp, #12
 800d0e2:	f7ff fee1 	bl	800cea8 <_printf_common>
 800d0e6:	3001      	adds	r0, #1
 800d0e8:	d14a      	bne.n	800d180 <_printf_i+0x1f4>
 800d0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ee:	b004      	add	sp, #16
 800d0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0f4:	6823      	ldr	r3, [r4, #0]
 800d0f6:	f043 0320 	orr.w	r3, r3, #32
 800d0fa:	6023      	str	r3, [r4, #0]
 800d0fc:	2778      	movs	r7, #120	@ 0x78
 800d0fe:	4832      	ldr	r0, [pc, #200]	@ (800d1c8 <_printf_i+0x23c>)
 800d100:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d104:	6823      	ldr	r3, [r4, #0]
 800d106:	6831      	ldr	r1, [r6, #0]
 800d108:	061f      	lsls	r7, r3, #24
 800d10a:	f851 5b04 	ldr.w	r5, [r1], #4
 800d10e:	d402      	bmi.n	800d116 <_printf_i+0x18a>
 800d110:	065f      	lsls	r7, r3, #25
 800d112:	bf48      	it	mi
 800d114:	b2ad      	uxthmi	r5, r5
 800d116:	6031      	str	r1, [r6, #0]
 800d118:	07d9      	lsls	r1, r3, #31
 800d11a:	bf44      	itt	mi
 800d11c:	f043 0320 	orrmi.w	r3, r3, #32
 800d120:	6023      	strmi	r3, [r4, #0]
 800d122:	b11d      	cbz	r5, 800d12c <_printf_i+0x1a0>
 800d124:	2310      	movs	r3, #16
 800d126:	e7ab      	b.n	800d080 <_printf_i+0xf4>
 800d128:	4826      	ldr	r0, [pc, #152]	@ (800d1c4 <_printf_i+0x238>)
 800d12a:	e7e9      	b.n	800d100 <_printf_i+0x174>
 800d12c:	6823      	ldr	r3, [r4, #0]
 800d12e:	f023 0320 	bic.w	r3, r3, #32
 800d132:	6023      	str	r3, [r4, #0]
 800d134:	e7f6      	b.n	800d124 <_printf_i+0x198>
 800d136:	4616      	mov	r6, r2
 800d138:	e7bd      	b.n	800d0b6 <_printf_i+0x12a>
 800d13a:	6833      	ldr	r3, [r6, #0]
 800d13c:	6825      	ldr	r5, [r4, #0]
 800d13e:	1d18      	adds	r0, r3, #4
 800d140:	6961      	ldr	r1, [r4, #20]
 800d142:	6030      	str	r0, [r6, #0]
 800d144:	062e      	lsls	r6, r5, #24
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	d501      	bpl.n	800d14e <_printf_i+0x1c2>
 800d14a:	6019      	str	r1, [r3, #0]
 800d14c:	e002      	b.n	800d154 <_printf_i+0x1c8>
 800d14e:	0668      	lsls	r0, r5, #25
 800d150:	d5fb      	bpl.n	800d14a <_printf_i+0x1be>
 800d152:	8019      	strh	r1, [r3, #0]
 800d154:	2300      	movs	r3, #0
 800d156:	4616      	mov	r6, r2
 800d158:	6123      	str	r3, [r4, #16]
 800d15a:	e7bc      	b.n	800d0d6 <_printf_i+0x14a>
 800d15c:	6833      	ldr	r3, [r6, #0]
 800d15e:	2100      	movs	r1, #0
 800d160:	1d1a      	adds	r2, r3, #4
 800d162:	6032      	str	r2, [r6, #0]
 800d164:	681e      	ldr	r6, [r3, #0]
 800d166:	6862      	ldr	r2, [r4, #4]
 800d168:	4630      	mov	r0, r6
 800d16a:	f000 f96b 	bl	800d444 <memchr>
 800d16e:	b108      	cbz	r0, 800d174 <_printf_i+0x1e8>
 800d170:	1b80      	subs	r0, r0, r6
 800d172:	6060      	str	r0, [r4, #4]
 800d174:	6863      	ldr	r3, [r4, #4]
 800d176:	6123      	str	r3, [r4, #16]
 800d178:	2300      	movs	r3, #0
 800d17a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d17e:	e7aa      	b.n	800d0d6 <_printf_i+0x14a>
 800d180:	4632      	mov	r2, r6
 800d182:	4649      	mov	r1, r9
 800d184:	4640      	mov	r0, r8
 800d186:	6923      	ldr	r3, [r4, #16]
 800d188:	47d0      	blx	sl
 800d18a:	3001      	adds	r0, #1
 800d18c:	d0ad      	beq.n	800d0ea <_printf_i+0x15e>
 800d18e:	6823      	ldr	r3, [r4, #0]
 800d190:	079b      	lsls	r3, r3, #30
 800d192:	d413      	bmi.n	800d1bc <_printf_i+0x230>
 800d194:	68e0      	ldr	r0, [r4, #12]
 800d196:	9b03      	ldr	r3, [sp, #12]
 800d198:	4298      	cmp	r0, r3
 800d19a:	bfb8      	it	lt
 800d19c:	4618      	movlt	r0, r3
 800d19e:	e7a6      	b.n	800d0ee <_printf_i+0x162>
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	4632      	mov	r2, r6
 800d1a4:	4649      	mov	r1, r9
 800d1a6:	4640      	mov	r0, r8
 800d1a8:	47d0      	blx	sl
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	d09d      	beq.n	800d0ea <_printf_i+0x15e>
 800d1ae:	3501      	adds	r5, #1
 800d1b0:	68e3      	ldr	r3, [r4, #12]
 800d1b2:	9903      	ldr	r1, [sp, #12]
 800d1b4:	1a5b      	subs	r3, r3, r1
 800d1b6:	42ab      	cmp	r3, r5
 800d1b8:	dcf2      	bgt.n	800d1a0 <_printf_i+0x214>
 800d1ba:	e7eb      	b.n	800d194 <_printf_i+0x208>
 800d1bc:	2500      	movs	r5, #0
 800d1be:	f104 0619 	add.w	r6, r4, #25
 800d1c2:	e7f5      	b.n	800d1b0 <_printf_i+0x224>
 800d1c4:	0800d5b3 	.word	0x0800d5b3
 800d1c8:	0800d5c4 	.word	0x0800d5c4

0800d1cc <__sflush_r>:
 800d1cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d2:	0716      	lsls	r6, r2, #28
 800d1d4:	4605      	mov	r5, r0
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	d454      	bmi.n	800d284 <__sflush_r+0xb8>
 800d1da:	684b      	ldr	r3, [r1, #4]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	dc02      	bgt.n	800d1e6 <__sflush_r+0x1a>
 800d1e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	dd48      	ble.n	800d278 <__sflush_r+0xac>
 800d1e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1e8:	2e00      	cmp	r6, #0
 800d1ea:	d045      	beq.n	800d278 <__sflush_r+0xac>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1f2:	682f      	ldr	r7, [r5, #0]
 800d1f4:	6a21      	ldr	r1, [r4, #32]
 800d1f6:	602b      	str	r3, [r5, #0]
 800d1f8:	d030      	beq.n	800d25c <__sflush_r+0x90>
 800d1fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1fc:	89a3      	ldrh	r3, [r4, #12]
 800d1fe:	0759      	lsls	r1, r3, #29
 800d200:	d505      	bpl.n	800d20e <__sflush_r+0x42>
 800d202:	6863      	ldr	r3, [r4, #4]
 800d204:	1ad2      	subs	r2, r2, r3
 800d206:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d208:	b10b      	cbz	r3, 800d20e <__sflush_r+0x42>
 800d20a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d20c:	1ad2      	subs	r2, r2, r3
 800d20e:	2300      	movs	r3, #0
 800d210:	4628      	mov	r0, r5
 800d212:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d214:	6a21      	ldr	r1, [r4, #32]
 800d216:	47b0      	blx	r6
 800d218:	1c43      	adds	r3, r0, #1
 800d21a:	89a3      	ldrh	r3, [r4, #12]
 800d21c:	d106      	bne.n	800d22c <__sflush_r+0x60>
 800d21e:	6829      	ldr	r1, [r5, #0]
 800d220:	291d      	cmp	r1, #29
 800d222:	d82b      	bhi.n	800d27c <__sflush_r+0xb0>
 800d224:	4a28      	ldr	r2, [pc, #160]	@ (800d2c8 <__sflush_r+0xfc>)
 800d226:	410a      	asrs	r2, r1
 800d228:	07d6      	lsls	r6, r2, #31
 800d22a:	d427      	bmi.n	800d27c <__sflush_r+0xb0>
 800d22c:	2200      	movs	r2, #0
 800d22e:	6062      	str	r2, [r4, #4]
 800d230:	6922      	ldr	r2, [r4, #16]
 800d232:	04d9      	lsls	r1, r3, #19
 800d234:	6022      	str	r2, [r4, #0]
 800d236:	d504      	bpl.n	800d242 <__sflush_r+0x76>
 800d238:	1c42      	adds	r2, r0, #1
 800d23a:	d101      	bne.n	800d240 <__sflush_r+0x74>
 800d23c:	682b      	ldr	r3, [r5, #0]
 800d23e:	b903      	cbnz	r3, 800d242 <__sflush_r+0x76>
 800d240:	6560      	str	r0, [r4, #84]	@ 0x54
 800d242:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d244:	602f      	str	r7, [r5, #0]
 800d246:	b1b9      	cbz	r1, 800d278 <__sflush_r+0xac>
 800d248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d24c:	4299      	cmp	r1, r3
 800d24e:	d002      	beq.n	800d256 <__sflush_r+0x8a>
 800d250:	4628      	mov	r0, r5
 800d252:	f7ff fbf3 	bl	800ca3c <_free_r>
 800d256:	2300      	movs	r3, #0
 800d258:	6363      	str	r3, [r4, #52]	@ 0x34
 800d25a:	e00d      	b.n	800d278 <__sflush_r+0xac>
 800d25c:	2301      	movs	r3, #1
 800d25e:	4628      	mov	r0, r5
 800d260:	47b0      	blx	r6
 800d262:	4602      	mov	r2, r0
 800d264:	1c50      	adds	r0, r2, #1
 800d266:	d1c9      	bne.n	800d1fc <__sflush_r+0x30>
 800d268:	682b      	ldr	r3, [r5, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d0c6      	beq.n	800d1fc <__sflush_r+0x30>
 800d26e:	2b1d      	cmp	r3, #29
 800d270:	d001      	beq.n	800d276 <__sflush_r+0xaa>
 800d272:	2b16      	cmp	r3, #22
 800d274:	d11d      	bne.n	800d2b2 <__sflush_r+0xe6>
 800d276:	602f      	str	r7, [r5, #0]
 800d278:	2000      	movs	r0, #0
 800d27a:	e021      	b.n	800d2c0 <__sflush_r+0xf4>
 800d27c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d280:	b21b      	sxth	r3, r3
 800d282:	e01a      	b.n	800d2ba <__sflush_r+0xee>
 800d284:	690f      	ldr	r7, [r1, #16]
 800d286:	2f00      	cmp	r7, #0
 800d288:	d0f6      	beq.n	800d278 <__sflush_r+0xac>
 800d28a:	0793      	lsls	r3, r2, #30
 800d28c:	bf18      	it	ne
 800d28e:	2300      	movne	r3, #0
 800d290:	680e      	ldr	r6, [r1, #0]
 800d292:	bf08      	it	eq
 800d294:	694b      	ldreq	r3, [r1, #20]
 800d296:	1bf6      	subs	r6, r6, r7
 800d298:	600f      	str	r7, [r1, #0]
 800d29a:	608b      	str	r3, [r1, #8]
 800d29c:	2e00      	cmp	r6, #0
 800d29e:	ddeb      	ble.n	800d278 <__sflush_r+0xac>
 800d2a0:	4633      	mov	r3, r6
 800d2a2:	463a      	mov	r2, r7
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	6a21      	ldr	r1, [r4, #32]
 800d2a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d2ac:	47e0      	blx	ip
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	dc07      	bgt.n	800d2c2 <__sflush_r+0xf6>
 800d2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d2be:	81a3      	strh	r3, [r4, #12]
 800d2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2c2:	4407      	add	r7, r0
 800d2c4:	1a36      	subs	r6, r6, r0
 800d2c6:	e7e9      	b.n	800d29c <__sflush_r+0xd0>
 800d2c8:	dfbffffe 	.word	0xdfbffffe

0800d2cc <_fflush_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	690b      	ldr	r3, [r1, #16]
 800d2d0:	4605      	mov	r5, r0
 800d2d2:	460c      	mov	r4, r1
 800d2d4:	b913      	cbnz	r3, 800d2dc <_fflush_r+0x10>
 800d2d6:	2500      	movs	r5, #0
 800d2d8:	4628      	mov	r0, r5
 800d2da:	bd38      	pop	{r3, r4, r5, pc}
 800d2dc:	b118      	cbz	r0, 800d2e6 <_fflush_r+0x1a>
 800d2de:	6a03      	ldr	r3, [r0, #32]
 800d2e0:	b90b      	cbnz	r3, 800d2e6 <_fflush_r+0x1a>
 800d2e2:	f7ff f94d 	bl	800c580 <__sinit>
 800d2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d0f3      	beq.n	800d2d6 <_fflush_r+0xa>
 800d2ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2f0:	07d0      	lsls	r0, r2, #31
 800d2f2:	d404      	bmi.n	800d2fe <_fflush_r+0x32>
 800d2f4:	0599      	lsls	r1, r3, #22
 800d2f6:	d402      	bmi.n	800d2fe <_fflush_r+0x32>
 800d2f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2fa:	f7ff fb8e 	bl	800ca1a <__retarget_lock_acquire_recursive>
 800d2fe:	4628      	mov	r0, r5
 800d300:	4621      	mov	r1, r4
 800d302:	f7ff ff63 	bl	800d1cc <__sflush_r>
 800d306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d308:	4605      	mov	r5, r0
 800d30a:	07da      	lsls	r2, r3, #31
 800d30c:	d4e4      	bmi.n	800d2d8 <_fflush_r+0xc>
 800d30e:	89a3      	ldrh	r3, [r4, #12]
 800d310:	059b      	lsls	r3, r3, #22
 800d312:	d4e1      	bmi.n	800d2d8 <_fflush_r+0xc>
 800d314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d316:	f7ff fb81 	bl	800ca1c <__retarget_lock_release_recursive>
 800d31a:	e7dd      	b.n	800d2d8 <_fflush_r+0xc>

0800d31c <__swhatbuf_r>:
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	460c      	mov	r4, r1
 800d320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d324:	4615      	mov	r5, r2
 800d326:	2900      	cmp	r1, #0
 800d328:	461e      	mov	r6, r3
 800d32a:	b096      	sub	sp, #88	@ 0x58
 800d32c:	da0c      	bge.n	800d348 <__swhatbuf_r+0x2c>
 800d32e:	89a3      	ldrh	r3, [r4, #12]
 800d330:	2100      	movs	r1, #0
 800d332:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d336:	bf14      	ite	ne
 800d338:	2340      	movne	r3, #64	@ 0x40
 800d33a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d33e:	2000      	movs	r0, #0
 800d340:	6031      	str	r1, [r6, #0]
 800d342:	602b      	str	r3, [r5, #0]
 800d344:	b016      	add	sp, #88	@ 0x58
 800d346:	bd70      	pop	{r4, r5, r6, pc}
 800d348:	466a      	mov	r2, sp
 800d34a:	f000 f849 	bl	800d3e0 <_fstat_r>
 800d34e:	2800      	cmp	r0, #0
 800d350:	dbed      	blt.n	800d32e <__swhatbuf_r+0x12>
 800d352:	9901      	ldr	r1, [sp, #4]
 800d354:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d358:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d35c:	4259      	negs	r1, r3
 800d35e:	4159      	adcs	r1, r3
 800d360:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d364:	e7eb      	b.n	800d33e <__swhatbuf_r+0x22>

0800d366 <__smakebuf_r>:
 800d366:	898b      	ldrh	r3, [r1, #12]
 800d368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d36a:	079d      	lsls	r5, r3, #30
 800d36c:	4606      	mov	r6, r0
 800d36e:	460c      	mov	r4, r1
 800d370:	d507      	bpl.n	800d382 <__smakebuf_r+0x1c>
 800d372:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d376:	6023      	str	r3, [r4, #0]
 800d378:	6123      	str	r3, [r4, #16]
 800d37a:	2301      	movs	r3, #1
 800d37c:	6163      	str	r3, [r4, #20]
 800d37e:	b003      	add	sp, #12
 800d380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d382:	466a      	mov	r2, sp
 800d384:	ab01      	add	r3, sp, #4
 800d386:	f7ff ffc9 	bl	800d31c <__swhatbuf_r>
 800d38a:	9f00      	ldr	r7, [sp, #0]
 800d38c:	4605      	mov	r5, r0
 800d38e:	4639      	mov	r1, r7
 800d390:	4630      	mov	r0, r6
 800d392:	f7ff fbbd 	bl	800cb10 <_malloc_r>
 800d396:	b948      	cbnz	r0, 800d3ac <__smakebuf_r+0x46>
 800d398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d39c:	059a      	lsls	r2, r3, #22
 800d39e:	d4ee      	bmi.n	800d37e <__smakebuf_r+0x18>
 800d3a0:	f023 0303 	bic.w	r3, r3, #3
 800d3a4:	f043 0302 	orr.w	r3, r3, #2
 800d3a8:	81a3      	strh	r3, [r4, #12]
 800d3aa:	e7e2      	b.n	800d372 <__smakebuf_r+0xc>
 800d3ac:	89a3      	ldrh	r3, [r4, #12]
 800d3ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d3b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3b6:	81a3      	strh	r3, [r4, #12]
 800d3b8:	9b01      	ldr	r3, [sp, #4]
 800d3ba:	6020      	str	r0, [r4, #0]
 800d3bc:	b15b      	cbz	r3, 800d3d6 <__smakebuf_r+0x70>
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3c4:	f000 f81e 	bl	800d404 <_isatty_r>
 800d3c8:	b128      	cbz	r0, 800d3d6 <__smakebuf_r+0x70>
 800d3ca:	89a3      	ldrh	r3, [r4, #12]
 800d3cc:	f023 0303 	bic.w	r3, r3, #3
 800d3d0:	f043 0301 	orr.w	r3, r3, #1
 800d3d4:	81a3      	strh	r3, [r4, #12]
 800d3d6:	89a3      	ldrh	r3, [r4, #12]
 800d3d8:	431d      	orrs	r5, r3
 800d3da:	81a5      	strh	r5, [r4, #12]
 800d3dc:	e7cf      	b.n	800d37e <__smakebuf_r+0x18>
	...

0800d3e0 <_fstat_r>:
 800d3e0:	b538      	push	{r3, r4, r5, lr}
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	4d06      	ldr	r5, [pc, #24]	@ (800d400 <_fstat_r+0x20>)
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	4608      	mov	r0, r1
 800d3ea:	4611      	mov	r1, r2
 800d3ec:	602b      	str	r3, [r5, #0]
 800d3ee:	f7f3 fde3 	bl	8000fb8 <_fstat>
 800d3f2:	1c43      	adds	r3, r0, #1
 800d3f4:	d102      	bne.n	800d3fc <_fstat_r+0x1c>
 800d3f6:	682b      	ldr	r3, [r5, #0]
 800d3f8:	b103      	cbz	r3, 800d3fc <_fstat_r+0x1c>
 800d3fa:	6023      	str	r3, [r4, #0]
 800d3fc:	bd38      	pop	{r3, r4, r5, pc}
 800d3fe:	bf00      	nop
 800d400:	20002fa0 	.word	0x20002fa0

0800d404 <_isatty_r>:
 800d404:	b538      	push	{r3, r4, r5, lr}
 800d406:	2300      	movs	r3, #0
 800d408:	4d05      	ldr	r5, [pc, #20]	@ (800d420 <_isatty_r+0x1c>)
 800d40a:	4604      	mov	r4, r0
 800d40c:	4608      	mov	r0, r1
 800d40e:	602b      	str	r3, [r5, #0]
 800d410:	f7f3 fde1 	bl	8000fd6 <_isatty>
 800d414:	1c43      	adds	r3, r0, #1
 800d416:	d102      	bne.n	800d41e <_isatty_r+0x1a>
 800d418:	682b      	ldr	r3, [r5, #0]
 800d41a:	b103      	cbz	r3, 800d41e <_isatty_r+0x1a>
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	bd38      	pop	{r3, r4, r5, pc}
 800d420:	20002fa0 	.word	0x20002fa0

0800d424 <_sbrk_r>:
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	2300      	movs	r3, #0
 800d428:	4d05      	ldr	r5, [pc, #20]	@ (800d440 <_sbrk_r+0x1c>)
 800d42a:	4604      	mov	r4, r0
 800d42c:	4608      	mov	r0, r1
 800d42e:	602b      	str	r3, [r5, #0]
 800d430:	f7f3 fde8 	bl	8001004 <_sbrk>
 800d434:	1c43      	adds	r3, r0, #1
 800d436:	d102      	bne.n	800d43e <_sbrk_r+0x1a>
 800d438:	682b      	ldr	r3, [r5, #0]
 800d43a:	b103      	cbz	r3, 800d43e <_sbrk_r+0x1a>
 800d43c:	6023      	str	r3, [r4, #0]
 800d43e:	bd38      	pop	{r3, r4, r5, pc}
 800d440:	20002fa0 	.word	0x20002fa0

0800d444 <memchr>:
 800d444:	4603      	mov	r3, r0
 800d446:	b510      	push	{r4, lr}
 800d448:	b2c9      	uxtb	r1, r1
 800d44a:	4402      	add	r2, r0
 800d44c:	4293      	cmp	r3, r2
 800d44e:	4618      	mov	r0, r3
 800d450:	d101      	bne.n	800d456 <memchr+0x12>
 800d452:	2000      	movs	r0, #0
 800d454:	e003      	b.n	800d45e <memchr+0x1a>
 800d456:	7804      	ldrb	r4, [r0, #0]
 800d458:	3301      	adds	r3, #1
 800d45a:	428c      	cmp	r4, r1
 800d45c:	d1f6      	bne.n	800d44c <memchr+0x8>
 800d45e:	bd10      	pop	{r4, pc}

0800d460 <_init>:
 800d460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d462:	bf00      	nop
 800d464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d466:	bc08      	pop	{r3}
 800d468:	469e      	mov	lr, r3
 800d46a:	4770      	bx	lr

0800d46c <_fini>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	bf00      	nop
 800d470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d472:	bc08      	pop	{r3}
 800d474:	469e      	mov	lr, r3
 800d476:	4770      	bx	lr
