
scheduler1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6ec  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800c800  0800c800  0000d800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbf0  0800cbf0  0000e350  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbf0  0800cbf0  0000dbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbf8  0800cbf8  0000e350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbf8  0800cbf8  0000dbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cbfc  0800cbfc  0000dbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  0800cc00  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a0  20000350  0800cf50  0000e350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016f0  0800cf50  0000e6f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc1e  00000000  00000000  0000e379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031db  00000000  00000000  0001df97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00021178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac0  00000000  00000000  00021fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9cb  00000000  00000000  00022a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a87  00000000  00000000  0003d463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008995a  00000000  00000000  00050eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da844  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b2c  00000000  00000000  000da888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000df3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c7e4 	.word	0x0800c7e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800c7e4 	.word	0x0800c7e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <DelayMicro>:
#include "dht22.h"
//--------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <DelayMicro+0x34>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <DelayMicro+0x38>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	0ddb      	lsrs	r3, r3, #23
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8001098:	bf00      	nop
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	1e5a      	subs	r2, r3, #1
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1fa      	bne.n	800109a <DelayMicro+0x1e>
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	ee9bfab5 	.word	0xee9bfab5

080010b8 <dht22_init>:

//--------------------------------------------------
void dht22_init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};	
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_DeInit(data_port, data_pin);
 80010ca:	2104      	movs	r1, #4
 80010cc:	480e      	ldr	r0, [pc, #56]	@ (8001108 <dht22_init+0x50>)
 80010ce:	f000 ffa7 	bl	8002020 <HAL_GPIO_DeInit>
  GPIO_InitStruct.Pin = data_pin;
 80010d2:	2304      	movs	r3, #4
 80010d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010d6:	2311      	movs	r3, #17
 80010d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(data_port, &GPIO_InitStruct);
 80010e2:	463b      	mov	r3, r7
 80010e4:	4619      	mov	r1, r3
 80010e6:	4808      	ldr	r0, [pc, #32]	@ (8001108 <dht22_init+0x50>)
 80010e8:	f000 fe16 	bl	8001d18 <HAL_GPIO_Init>
	///////////////////////////////////////////////////////
  HAL_Delay(1000);
 80010ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010f0:	f000 fce0 	bl	8001ab4 <HAL_Delay>
  HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2104      	movs	r1, #4
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <dht22_init+0x50>)
 80010fa:	f001 f864 	bl	80021c6 <HAL_GPIO_WritePin>

}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40010800 	.word	0x40010800

0800110c <DHT22_GetTemp_Humidity>:

uint8_t DHT22_GetTemp_Humidity(float *Temp, float *Humidity)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
	uint8_t dataArray[6], myChecksum;
	uint16_t Temp16, Humid16;
	uint8_t i, j = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2104      	movs	r1, #4
 800111e:	485e      	ldr	r0, [pc, #376]	@ (8001298 <DHT22_GetTemp_Humidity+0x18c>)
 8001120:	f001 f851 	bl	80021c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2104      	movs	r1, #4
 8001128:	485b      	ldr	r0, [pc, #364]	@ (8001298 <DHT22_GetTemp_Humidity+0x18c>)
 800112a:	f001 f84c 	bl	80021c6 <HAL_GPIO_WritePin>
	DelayMicro(100000);
 800112e:	485b      	ldr	r0, [pc, #364]	@ (800129c <DHT22_GetTemp_Humidity+0x190>)
 8001130:	f7ff ffa4 	bl	800107c <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2104      	movs	r1, #4
 8001138:	4857      	ldr	r0, [pc, #348]	@ (8001298 <DHT22_GetTemp_Humidity+0x18c>)
 800113a:	f001 f844 	bl	80021c6 <HAL_GPIO_WritePin>
	DelayMicro(18000);
 800113e:	f244 6050 	movw	r0, #18000	@ 0x4650
 8001142:	f7ff ff9b 	bl	800107c <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);	
 8001146:	2201      	movs	r2, #1
 8001148:	2104      	movs	r1, #4
 800114a:	4853      	ldr	r0, [pc, #332]	@ (8001298 <DHT22_GetTemp_Humidity+0x18c>)
 800114c:	f001 f83b 	bl	80021c6 <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40 	
 8001150:	2027      	movs	r0, #39	@ 0x27
 8001152:	f7ff ff93 	bl	800107c <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 8001156:	2104      	movs	r1, #4
 8001158:	484f      	ldr	r0, [pc, #316]	@ (8001298 <DHT22_GetTemp_Humidity+0x18c>)
 800115a:	f001 f81d 	bl	8002198 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <DHT22_GetTemp_Humidity+0x5c>
	{
		return 0;
 8001164:	2300      	movs	r3, #0
 8001166:	e093      	b.n	8001290 <DHT22_GetTemp_Humidity+0x184>
	}
	DelayMicro(80);
 8001168:	2050      	movs	r0, #80	@ 0x50
 800116a:	f7ff ff87 	bl	800107c <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 800116e:	2104      	movs	r1, #4
 8001170:	4849      	ldr	r0, [pc, #292]	@ (8001298 <DHT22_GetTemp_Humidity+0x18c>)
 8001172:	f001 f811 	bl	8002198 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <DHT22_GetTemp_Humidity+0x74>
	{
		return 0;
 800117c:	2300      	movs	r3, #0
 800117e:	e087      	b.n	8001290 <DHT22_GetTemp_Humidity+0x184>
	}
	DelayMicro(80);
 8001180:	2050      	movs	r0, #80	@ 0x50
 8001182:	f7ff ff7b 	bl	800107c <DelayMicro>

	for (j=0; j<5; j++)
 8001186:	2300      	movs	r3, #0
 8001188:	757b      	strb	r3, [r7, #21]
 800118a:	e040      	b.n	800120e <DHT22_GetTemp_Humidity+0x102>
	{
		dataArray[j]=0;
 800118c:	7d7b      	ldrb	r3, [r7, #21]
 800118e:	3318      	adds	r3, #24
 8001190:	443b      	add	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(i=0; i<8; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	75bb      	strb	r3, [r7, #22]
 800119c:	e031      	b.n	8001202 <DHT22_GetTemp_Humidity+0xf6>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);	
 800119e:	bf00      	nop
 80011a0:	2104      	movs	r1, #4
 80011a2:	483d      	ldr	r0, [pc, #244]	@ (8001298 <DHT22_GetTemp_Humidity+0x18c>)
 80011a4:	f000 fff8 	bl	8002198 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f8      	beq.n	80011a0 <DHT22_GetTemp_Humidity+0x94>
			DelayMicro(30);
 80011ae:	201e      	movs	r0, #30
 80011b0:	f7ff ff64 	bl	800107c <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 80011b4:	2104      	movs	r1, #4
 80011b6:	4838      	ldr	r0, [pc, #224]	@ (8001298 <DHT22_GetTemp_Humidity+0x18c>)
 80011b8:	f000 ffee 	bl	8002198 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d014      	beq.n	80011ec <DHT22_GetTemp_Humidity+0xe0>
				dataArray[j] |= (1<<(7-i));
 80011c2:	7d7b      	ldrb	r3, [r7, #21]
 80011c4:	3318      	adds	r3, #24
 80011c6:	443b      	add	r3, r7
 80011c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011cc:	b25a      	sxtb	r2, r3
 80011ce:	7dbb      	ldrb	r3, [r7, #22]
 80011d0:	f1c3 0307 	rsb	r3, r3, #7
 80011d4:	2101      	movs	r1, #1
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b25a      	sxtb	r2, r3
 80011e0:	7d7b      	ldrb	r3, [r7, #21]
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	3318      	adds	r3, #24
 80011e6:	443b      	add	r3, r7
 80011e8:	f803 2c10 	strb.w	r2, [r3, #-16]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);				
 80011ec:	bf00      	nop
 80011ee:	2104      	movs	r1, #4
 80011f0:	4829      	ldr	r0, [pc, #164]	@ (8001298 <DHT22_GetTemp_Humidity+0x18c>)
 80011f2:	f000 ffd1 	bl	8002198 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d0f8      	beq.n	80011ee <DHT22_GetTemp_Humidity+0xe2>
		for(i=0; i<8; i++)
 80011fc:	7dbb      	ldrb	r3, [r7, #22]
 80011fe:	3301      	adds	r3, #1
 8001200:	75bb      	strb	r3, [r7, #22]
 8001202:	7dbb      	ldrb	r3, [r7, #22]
 8001204:	2b07      	cmp	r3, #7
 8001206:	d9ca      	bls.n	800119e <DHT22_GetTemp_Humidity+0x92>
	for (j=0; j<5; j++)
 8001208:	7d7b      	ldrb	r3, [r7, #21]
 800120a:	3301      	adds	r3, #1
 800120c:	757b      	strb	r3, [r7, #21]
 800120e:	7d7b      	ldrb	r3, [r7, #21]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d9bb      	bls.n	800118c <DHT22_GetTemp_Humidity+0x80>
		}
	}
	myChecksum = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++) 
 8001218:	2300      	movs	r3, #0
 800121a:	753b      	strb	r3, [r7, #20]
 800121c:	e00a      	b.n	8001234 <DHT22_GetTemp_Humidity+0x128>
	{
		myChecksum += dataArray[k];
 800121e:	7d3b      	ldrb	r3, [r7, #20]
 8001220:	3318      	adds	r3, #24
 8001222:	443b      	add	r3, r7
 8001224:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	4413      	add	r3, r2
 800122c:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++) 
 800122e:	7d3b      	ldrb	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	753b      	strb	r3, [r7, #20]
 8001234:	7d3b      	ldrb	r3, [r7, #20]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d9f1      	bls.n	800121e <DHT22_GetTemp_Humidity+0x112>
	}

		Temp16 = (dataArray[2] <<8) | dataArray[3];
 800123a:	7abb      	ldrb	r3, [r7, #10]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7afb      	ldrb	r3, [r7, #11]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21b      	sxth	r3, r3
 8001248:	827b      	strh	r3, [r7, #18]
		Humid16 = (dataArray[0] <<8) | dataArray[1];
 800124a:	7a3b      	ldrb	r3, [r7, #8]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7a7b      	ldrb	r3, [r7, #9]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21b      	sxth	r3, r3
 8001258:	823b      	strh	r3, [r7, #16]
		
		*Temp = Temp16/10.0f;
 800125a:	8a7b      	ldrh	r3, [r7, #18]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fccd 	bl	8000bfc <__aeabi_i2f>
 8001262:	4603      	mov	r3, r0
 8001264:	490e      	ldr	r1, [pc, #56]	@ (80012a0 <DHT22_GetTemp_Humidity+0x194>)
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fdd0 	bl	8000e0c <__aeabi_fdiv>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	601a      	str	r2, [r3, #0]
		*Humidity = Humid16/10.0f;
 8001274:	8a3b      	ldrh	r3, [r7, #16]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fcc0 	bl	8000bfc <__aeabi_i2f>
 800127c:	4603      	mov	r3, r0
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <DHT22_GetTemp_Humidity+0x194>)
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fdc3 	bl	8000e0c <__aeabi_fdiv>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	601a      	str	r2, [r3, #0]
		return 1;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40010800 	.word	0x40010800
 800129c:	000186a0 	.word	0x000186a0
 80012a0:	41200000 	.word	0x41200000

080012a4 <__io_putchar>:
// ************** DEFINE ****************

/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    while (CDC_Transmit_FS((uint8_t *)&ch, 1) == USBD_BUSY);
 80012ac:	bf00      	nop
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2101      	movs	r1, #1
 80012b2:	4618      	mov	r0, r3
 80012b4:	f008 f9d6 	bl	8009664 <CDC_Transmit_FS>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d0f7      	beq.n	80012ae <__io_putchar+0xa>
    return ch;
 80012be:	687b      	ldr	r3, [r7, #4]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <MPU6050_Init>:
 * Reference to initialized common hi2c1 variable in main.c
 *
 * */
extern I2C_HandleTypeDef hi2c1;

inline void MPU6050_Init (void){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af04      	add	r7, sp, #16
	uint8_t check,Data;
	// check the sensor ID (SEE WHO AM I DATASHEET)
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80012ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	2301      	movs	r3, #1
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	1dfb      	adds	r3, r7, #7
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	2275      	movs	r2, #117	@ 0x75
 80012e0:	21d0      	movs	r1, #208	@ 0xd0
 80012e2:	4823      	ldr	r0, [pc, #140]	@ (8001370 <MPU6050_Init+0xa8>)
 80012e4:	f001 f9c6 	bl	8002674 <HAL_I2C_Mem_Read>
	if (check == 104) // the sensor is present
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	2b68      	cmp	r3, #104	@ 0x68
 80012ec:	d13b      	bne.n	8001366 <MPU6050_Init+0x9e>
	{
		// setting PWR Registers
		Data = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80012f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2301      	movs	r3, #1
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	1dbb      	adds	r3, r7, #6
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2301      	movs	r3, #1
 8001302:	226b      	movs	r2, #107	@ 0x6b
 8001304:	21d0      	movs	r1, #208	@ 0xd0
 8001306:	481a      	ldr	r0, [pc, #104]	@ (8001370 <MPU6050_Init+0xa8>)
 8001308:	f001 f8ba 	bl	8002480 <HAL_I2C_Mem_Write>
		// var sample rate with SMPLRT_DIV_REG
		Data = 0x07;
 800130c:	2307      	movs	r3, #7
 800130e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001310:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001314:	9302      	str	r3, [sp, #8]
 8001316:	2301      	movs	r3, #1
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	1dbb      	adds	r3, r7, #6
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	2219      	movs	r2, #25
 8001322:	21d0      	movs	r1, #208	@ 0xd0
 8001324:	4812      	ldr	r0, [pc, #72]	@ (8001370 <MPU6050_Init+0xa8>)
 8001326:	f001 f8ab 	bl	8002480 <HAL_I2C_Mem_Write>
		// var accelerometer config with ACCEL_CONFIG_REG
		Data = 0x00;
 800132a:	2300      	movs	r3, #0
 800132c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800132e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	2301      	movs	r3, #1
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	1dbb      	adds	r3, r7, #6
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	221c      	movs	r2, #28
 8001340:	21d0      	movs	r1, #208	@ 0xd0
 8001342:	480b      	ldr	r0, [pc, #44]	@ (8001370 <MPU6050_Init+0xa8>)
 8001344:	f001 f89c 	bl	8002480 <HAL_I2C_Mem_Write>
		// var Gyro config with GYRO_CONFIG_REG
		Data = 0x00;
 8001348:	2300      	movs	r3, #0
 800134a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800134c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2301      	movs	r3, #1
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	1dbb      	adds	r3, r7, #6
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2301      	movs	r3, #1
 800135c:	221b      	movs	r2, #27
 800135e:	21d0      	movs	r1, #208	@ 0xd0
 8001360:	4803      	ldr	r0, [pc, #12]	@ (8001370 <MPU6050_Init+0xa8>)
 8001362:	f001 f88d 	bl	8002480 <HAL_I2C_Mem_Write>
	}
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000380 	.word	0x20000380

08001374 <MPU6050_Read_Accel>:


inline void MPU6050_Read_Accel ( void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 800137a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137e:	9302      	str	r3, [sp, #8]
 8001380:	2306      	movs	r3, #6
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	463b      	mov	r3, r7
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2301      	movs	r3, #1
 800138a:	223b      	movs	r2, #59	@ 0x3b
 800138c:	21d0      	movs	r1, #208	@ 0xd0
 800138e:	4829      	ldr	r0, [pc, #164]	@ (8001434 <MPU6050_Read_Accel+0xc0>)
 8001390:	f001 f970 	bl	8002674 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001394:	783b      	ldrb	r3, [r7, #0]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b21a      	sxth	r2, r3
 800139a:	787b      	ldrb	r3, [r7, #1]
 800139c:	b21b      	sxth	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	4b25      	ldr	r3, [pc, #148]	@ (8001438 <MPU6050_Read_Accel+0xc4>)
 80013a4:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80013a6:	78bb      	ldrb	r3, [r7, #2]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	4b21      	ldr	r3, [pc, #132]	@ (800143c <MPU6050_Read_Accel+0xc8>)
 80013b6:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80013b8:	793b      	ldrb	r3, [r7, #4]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b21a      	sxth	r2, r3
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001440 <MPU6050_Read_Accel+0xcc>)
 80013c8:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = (float)Accel_X_RAW/16384.0;
 80013ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <MPU6050_Read_Accel+0xc4>)
 80013cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fc13 	bl	8000bfc <__aeabi_i2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fd15 	bl	8000e0c <__aeabi_fdiv>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MPU6050_Read_Accel+0xd0>)
 80013e8:	601a      	str	r2, [r3, #0]
	Ay = (float)Accel_Y_RAW/16384.0;
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <MPU6050_Read_Accel+0xc8>)
 80013ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fc03 	bl	8000bfc <__aeabi_i2f>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fd05 	bl	8000e0c <__aeabi_fdiv>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <MPU6050_Read_Accel+0xd4>)
 8001408:	601a      	str	r2, [r3, #0]
	Az = (float)Accel_Z_RAW/16384.0;
 800140a:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <MPU6050_Read_Accel+0xcc>)
 800140c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fbf3 	bl	8000bfc <__aeabi_i2f>
 8001416:	4603      	mov	r3, r0
 8001418:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fcf5 	bl	8000e0c <__aeabi_fdiv>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MPU6050_Read_Accel+0xd8>)
 8001428:	601a      	str	r2, [r3, #0]
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000380 	.word	0x20000380
 8001438:	2000036c 	.word	0x2000036c
 800143c:	2000036e 	.word	0x2000036e
 8001440:	20000370 	.word	0x20000370
 8001444:	20000374 	.word	0x20000374
 8001448:	20000378 	.word	0x20000378
 800144c:	2000037c 	.word	0x2000037c

08001450 <Task_DHT>:

/* USER CODE BEGIN PV */
float temp = 0, humid = 0;
uint8_t period_sec = 1;
//uint8_t FLAG_period_change = 0;
void Task_DHT(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	  DHT22_GetTemp_Humidity(&temp, &humid);
 8001456:	490e      	ldr	r1, [pc, #56]	@ (8001490 <Task_DHT+0x40>)
 8001458:	480e      	ldr	r0, [pc, #56]	@ (8001494 <Task_DHT+0x44>)
 800145a:	f7ff fe57 	bl	800110c <DHT22_GetTemp_Humidity>

	  	  int intPart = (int)floorf(temp);
 800145e:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <Task_DHT+0x44>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f00b f97c 	bl	800c760 <floorf>
 8001468:	4603      	mov	r3, r0
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fde0 	bl	8001030 <__aeabi_f2iz>
 8001470:	4603      	mov	r3, r0
 8001472:	607b      	str	r3, [r7, #4]
	  //
	  	  printf("t=%f\n", temp);
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <Task_DHT+0x44>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ffd5 	bl	8000428 <__aeabi_f2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4805      	ldr	r0, [pc, #20]	@ (8001498 <Task_DHT+0x48>)
 8001484:	f009 f9ea 	bl	800a85c <iprintf>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200003d8 	.word	0x200003d8
 8001494:	200003d4 	.word	0x200003d4
 8001498:	0800c800 	.word	0x0800c800

0800149c <Task_MPU>:

void Task_MPU(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	//	  	  MPU6050_Read_Accel();
		MPU6050_Read_Accel();
 80014a0:	f7ff ff68 	bl	8001374 <MPU6050_Read_Accel>
		  //	  intPart = (int)floorf(Ax * 100);
 	  printf("Ax=%f\n",  Ax);
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <Task_MPU+0x20>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ffbd 	bl	8000428 <__aeabi_f2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4803      	ldr	r0, [pc, #12]	@ (80014c0 <Task_MPU+0x24>)
 80014b4:	f009 f9d2 	bl	800a85c <iprintf>

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000374 	.word	0x20000374
 80014c0:	0800c808 	.word	0x0800c808

080014c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ca:	f000 fa91 	bl	80019f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ce:	f000 f827 	bl	8001520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d2:	f000 f8af 	bl	8001634 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80014d6:	f008 f807 	bl	80094e8 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80014da:	f000 f87d 	bl	80015d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


//  MPU6050_Init();
  dht22_init();
 80014de:	f7ff fdeb 	bl	80010b8 <dht22_init>



 MPU6050_Init();
 80014e2:	f7ff fef1 	bl	80012c8 <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (uint8_t i = 0; i < NUMBER_OF_TASKS; i++ ) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	e007      	b.n	80014fc <main+0x38>
		  Task_Arr[i]();
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <main+0x54>)
 80014f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f4:	4798      	blx	r3
	  for (uint8_t i = 0; i < NUMBER_OF_TASKS; i++ ) {
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	3301      	adds	r3, #1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d9f4      	bls.n	80014ec <main+0x28>
//	  if (FLAG_period_change == 1) {
//		  printf("Period updated: %d seconds\n", period_sec);
//		  FLAG_period_change = 0;
//	  }
//	  	  printf("Current period: %d\n", period_sec);
	     HAL_Delay(1000 * period_sec);
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <main+0x58>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f000 facf 	bl	8001ab4 <HAL_Delay>
	  for (uint8_t i = 0; i < NUMBER_OF_TASKS; i++ ) {
 8001516:	e7e6      	b.n	80014e6 <main+0x22>
 8001518:	20000004 	.word	0x20000004
 800151c:	20000000 	.word	0x20000000

08001520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b094      	sub	sp, #80	@ 0x50
 8001524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001526:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152a:	2228      	movs	r2, #40	@ 0x28
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f009 f9e9 	bl	800a906 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001550:	2301      	movs	r3, #1
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155e:	2301      	movs	r3, #1
 8001560:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001562:	2302      	movs	r3, #2
 8001564:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001566:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800156a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800156c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001570:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001572:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fc04 	bl	8004d84 <HAL_RCC_OscConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001582:	f000 f89b 	bl	80016bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001586:	230f      	movs	r3, #15
 8001588:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158a:	2302      	movs	r3, #2
 800158c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001596:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2101      	movs	r1, #1
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 fe70 	bl	8005288 <HAL_RCC_ClockConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015ae:	f000 f885 	bl	80016bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015b2:	2310      	movs	r3, #16
 80015b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80015b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015ba:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 ffdc 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015ca:	f000 f877 	bl	80016bc <Error_Handler>
  }
}
 80015ce:	bf00      	nop
 80015d0:	3750      	adds	r7, #80	@ 0x50
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_I2C1_Init+0x50>)
 80015de:	4a13      	ldr	r2, [pc, #76]	@ (800162c <MX_I2C1_Init+0x54>)
 80015e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_I2C1_Init+0x50>)
 80015e4:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <MX_I2C1_Init+0x58>)
 80015e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_I2C1_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_I2C1_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_I2C1_Init+0x50>)
 80015f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <MX_I2C1_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_I2C1_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_I2C1_Init+0x50>)
 8001616:	f000 fdef 	bl	80021f8 <HAL_I2C_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001620:	f000 f84c 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000380 	.word	0x20000380
 800162c:	40005400 	.word	0x40005400
 8001630:	000186a0 	.word	0x000186a0

08001634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001648:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <MX_GPIO_Init+0x7c>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a18      	ldr	r2, [pc, #96]	@ (80016b0 <MX_GPIO_Init+0x7c>)
 800164e:	f043 0320 	orr.w	r3, r3, #32
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <MX_GPIO_Init+0x7c>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <MX_GPIO_Init+0x7c>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <MX_GPIO_Init+0x7c>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <MX_GPIO_Init+0x7c>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <MX_GPIO_Init+0x7c>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a0c      	ldr	r2, [pc, #48]	@ (80016b0 <MX_GPIO_Init+0x7c>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <MX_GPIO_Init+0x7c>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : data_Pin */
  GPIO_InitStruct.Pin = data_Pin;
 8001690:	2304      	movs	r3, #4
 8001692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <MX_GPIO_Init+0x80>)
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001698:	2301      	movs	r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(data_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4619      	mov	r1, r3
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_GPIO_Init+0x84>)
 80016a4:	f000 fb38 	bl	8001d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	10110000 	.word	0x10110000
 80016b8:	40010800 	.word	0x40010800

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <Error_Handler+0x8>

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_MspInit+0x5c>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	4a14      	ldr	r2, [pc, #80]	@ (8001724 <HAL_MspInit+0x5c>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6193      	str	r3, [r2, #24]
 80016da:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_MspInit+0x5c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_MspInit+0x5c>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001724 <HAL_MspInit+0x5c>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <HAL_MspInit+0x5c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <HAL_MspInit+0x60>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <HAL_MspInit+0x60>)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000
 8001728:	40010000 	.word	0x40010000

0800172c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a15      	ldr	r2, [pc, #84]	@ (800179c <HAL_I2C_MspInit+0x70>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d123      	bne.n	8001794 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <HAL_I2C_MspInit+0x74>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a13      	ldr	r2, [pc, #76]	@ (80017a0 <HAL_I2C_MspInit+0x74>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <HAL_I2C_MspInit+0x74>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001764:	23c0      	movs	r3, #192	@ 0xc0
 8001766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001768:	2312      	movs	r3, #18
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	480b      	ldr	r0, [pc, #44]	@ (80017a4 <HAL_I2C_MspInit+0x78>)
 8001778:	f000 face 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <HAL_I2C_MspInit+0x74>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	4a07      	ldr	r2, [pc, #28]	@ (80017a0 <HAL_I2C_MspInit+0x74>)
 8001782:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001786:	61d3      	str	r3, [r2, #28]
 8001788:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <HAL_I2C_MspInit+0x74>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40005400 	.word	0x40005400
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010c00 	.word	0x40010c00

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <NMI_Handler+0x4>

080017b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <MemManage_Handler+0x4>

080017c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <UsageFault_Handler+0x4>

080017d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f8:	f000 f940 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001804:	4802      	ldr	r0, [pc, #8]	@ (8001810 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001806:	f001 fe78 	bl	80034fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200010ac 	.word	0x200010ac

08001814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <_kill>:

int _kill(int pid, int sig)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800182c:	f009 f8be 	bl	800a9ac <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	2216      	movs	r2, #22
 8001834:	601a      	str	r2, [r3, #0]
  return -1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_exit>:

void _exit (int status)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800184a:	f04f 31ff 	mov.w	r1, #4294967295
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffe7 	bl	8001822 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <_exit+0x12>

08001858 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e00a      	b.n	8001880 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800186a:	f3af 8000 	nop.w
 800186e:	4601      	mov	r1, r0
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	60ba      	str	r2, [r7, #8]
 8001876:	b2ca      	uxtb	r2, r1
 8001878:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3301      	adds	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	dbf0      	blt.n	800186a <_read+0x12>
  }

  return len;
 8001888:	687b      	ldr	r3, [r7, #4]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e009      	b.n	80018b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	60ba      	str	r2, [r7, #8]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fcf9 	bl	80012a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf1      	blt.n	80018a4 <_write+0x12>
  }
  return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_close>:

int _close(int file)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018f0:	605a      	str	r2, [r3, #4]
  return 0;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <_isatty>:

int _isatty(int file)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
	...

0800192c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001934:	4a14      	ldr	r2, [pc, #80]	@ (8001988 <_sbrk+0x5c>)
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <_sbrk+0x60>)
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001940:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <_sbrk+0x64>)
 800194a:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <_sbrk+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	429a      	cmp	r2, r3
 800195a:	d207      	bcs.n	800196c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800195c:	f009 f826 	bl	800a9ac <__errno>
 8001960:	4603      	mov	r3, r0
 8001962:	220c      	movs	r2, #12
 8001964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	e009      	b.n	8001980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001972:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <_sbrk+0x64>)
 800197c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20005000 	.word	0x20005000
 800198c:	00000400 	.word	0x00000400
 8001990:	200003dc 	.word	0x200003dc
 8001994:	200016f0 	.word	0x200016f0

08001998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a4:	f7ff fff8 	bl	8001998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480b      	ldr	r0, [pc, #44]	@ (80019d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019aa:	490c      	ldr	r1, [pc, #48]	@ (80019dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019ac:	4a0c      	ldr	r2, [pc, #48]	@ (80019e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a09      	ldr	r2, [pc, #36]	@ (80019e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019c0:	4c09      	ldr	r4, [pc, #36]	@ (80019e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ce:	f008 fff3 	bl	800a9b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d2:	f7ff fd77 	bl	80014c4 <main>
  bx lr
 80019d6:	4770      	bx	lr
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019dc:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 80019e0:	0800cc00 	.word	0x0800cc00
  ldr r2, =_sbss
 80019e4:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80019e8:	200016f0 	.word	0x200016f0

080019ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC1_2_IRQHandler>
	...

080019f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <HAL_Init+0x28>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <HAL_Init+0x28>)
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 f947 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	200f      	movs	r0, #15
 8001a08:	f000 f808 	bl	8001a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fe5c 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40022000 	.word	0x40022000

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a24:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_InitTick+0x54>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <HAL_InitTick+0x58>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f95f 	bl	8001cfe <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 f927 	bl	8001caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	@ (8001a78 <HAL_InitTick+0x5c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2000000c 	.word	0x2000000c
 8001a74:	20000014 	.word	0x20000014
 8001a78:	20000010 	.word	0x20000010

08001a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_IncTick+0x1c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_IncTick+0x20>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a03      	ldr	r2, [pc, #12]	@ (8001a9c <HAL_IncTick+0x20>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	20000014 	.word	0x20000014
 8001a9c:	200003e0 	.word	0x200003e0

08001aa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b02      	ldr	r3, [pc, #8]	@ (8001ab0 <HAL_GetTick+0x10>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	200003e0 	.word	0x200003e0

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff fff0 	bl	8001aa0 <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d005      	beq.n	8001ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_Delay+0x44>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ada:	bf00      	nop
 8001adc:	f7ff ffe0 	bl	8001aa0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8f7      	bhi.n	8001adc <HAL_Delay+0x28>
  {
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000014 	.word	0x20000014

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4906      	ldr	r1, [pc, #24]	@ (8001b94 <__NVIC_EnableIRQ+0x34>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	@ (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	@ (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	@ 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	@ 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff90 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff2d 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff42 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff90 	bl	8001bec <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5f 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff35 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa2 	bl	8001c50 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b08b      	sub	sp, #44	@ 0x2c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e169      	b.n	8002000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 8158 	bne.w	8001ffa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a9a      	ldr	r2, [pc, #616]	@ (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d05e      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d54:	4a98      	ldr	r2, [pc, #608]	@ (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d875      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d5a:	4a98      	ldr	r2, [pc, #608]	@ (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d058      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d60:	4a96      	ldr	r2, [pc, #600]	@ (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d86f      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d66:	4a96      	ldr	r2, [pc, #600]	@ (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d052      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d6c:	4a94      	ldr	r2, [pc, #592]	@ (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d869      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d72:	4a94      	ldr	r2, [pc, #592]	@ (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d04c      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d78:	4a92      	ldr	r2, [pc, #584]	@ (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d863      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a92      	ldr	r2, [pc, #584]	@ (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d046      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d84:	4a90      	ldr	r2, [pc, #576]	@ (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d85d      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d82a      	bhi.n	8001de4 <HAL_GPIO_Init+0xcc>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d859      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d92:	a201      	add	r2, pc, #4	@ (adr r2, 8001d98 <HAL_GPIO_Init+0x80>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001e13 	.word	0x08001e13
 8001d9c:	08001ded 	.word	0x08001ded
 8001da0:	08001dff 	.word	0x08001dff
 8001da4:	08001e41 	.word	0x08001e41
 8001da8:	08001e47 	.word	0x08001e47
 8001dac:	08001e47 	.word	0x08001e47
 8001db0:	08001e47 	.word	0x08001e47
 8001db4:	08001e47 	.word	0x08001e47
 8001db8:	08001e47 	.word	0x08001e47
 8001dbc:	08001e47 	.word	0x08001e47
 8001dc0:	08001e47 	.word	0x08001e47
 8001dc4:	08001e47 	.word	0x08001e47
 8001dc8:	08001e47 	.word	0x08001e47
 8001dcc:	08001e47 	.word	0x08001e47
 8001dd0:	08001e47 	.word	0x08001e47
 8001dd4:	08001e47 	.word	0x08001e47
 8001dd8:	08001e47 	.word	0x08001e47
 8001ddc:	08001df5 	.word	0x08001df5
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	4a79      	ldr	r2, [pc, #484]	@ (8001fcc <HAL_GPIO_Init+0x2b4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dea:	e02c      	b.n	8001e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e029      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	623b      	str	r3, [r7, #32]
          break;
 8001dfc:	e024      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	3308      	adds	r3, #8
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e01f      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	330c      	adds	r3, #12
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e01a      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e013      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	611a      	str	r2, [r3, #16]
          break;
 8001e32:	e009      	b.n	8001e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	615a      	str	r2, [r3, #20]
          break;
 8001e3e:	e003      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          break;
 8001e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	@ 0xff
 8001e4c:	d801      	bhi.n	8001e52 <HAL_GPIO_Init+0x13a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	e001      	b.n	8001e56 <HAL_GPIO_Init+0x13e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2bff      	cmp	r3, #255	@ 0xff
 8001e5c:	d802      	bhi.n	8001e64 <HAL_GPIO_Init+0x14c>
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x152>
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	3b08      	subs	r3, #8
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	210f      	movs	r1, #15
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	6a39      	ldr	r1, [r7, #32]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80b1 	beq.w	8001ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e98:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb0:	4a48      	ldr	r2, [pc, #288]	@ (8001fd4 <HAL_GPIO_Init+0x2bc>)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a40      	ldr	r2, [pc, #256]	@ (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d013      	beq.n	8001f04 <HAL_GPIO_Init+0x1ec>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3f      	ldr	r2, [pc, #252]	@ (8001fdc <HAL_GPIO_Init+0x2c4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00d      	beq.n	8001f00 <HAL_GPIO_Init+0x1e8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3e      	ldr	r2, [pc, #248]	@ (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d007      	beq.n	8001efc <HAL_GPIO_Init+0x1e4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a3d      	ldr	r2, [pc, #244]	@ (8001fe4 <HAL_GPIO_Init+0x2cc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_GPIO_Init+0x1e0>
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e006      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e004      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001f04:	2300      	movs	r3, #0
 8001f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f08:	f002 0203 	and.w	r2, r2, #3
 8001f0c:	0092      	lsls	r2, r2, #2
 8001f0e:	4093      	lsls	r3, r2
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f16:	492f      	ldr	r1, [pc, #188]	@ (8001fd4 <HAL_GPIO_Init+0x2bc>)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f30:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	492c      	ldr	r1, [pc, #176]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4928      	ldr	r1, [pc, #160]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f58:	4b23      	ldr	r3, [pc, #140]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	4922      	ldr	r1, [pc, #136]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f66:	4b20      	ldr	r3, [pc, #128]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	491e      	ldr	r1, [pc, #120]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4918      	ldr	r1, [pc, #96]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f8e:	4b16      	ldr	r3, [pc, #88]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4914      	ldr	r1, [pc, #80]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d021      	beq.n	8001fec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	490e      	ldr	r1, [pc, #56]	@ (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
 8001fb4:	e021      	b.n	8001ffa <HAL_GPIO_Init+0x2e2>
 8001fb6:	bf00      	nop
 8001fb8:	10320000 	.word	0x10320000
 8001fbc:	10310000 	.word	0x10310000
 8001fc0:	10220000 	.word	0x10220000
 8001fc4:	10210000 	.word	0x10210000
 8001fc8:	10120000 	.word	0x10120000
 8001fcc:	10110000 	.word	0x10110000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40010800 	.word	0x40010800
 8001fdc:	40010c00 	.word	0x40010c00
 8001fe0:	40011000 	.word	0x40011000
 8001fe4:	40011400 	.word	0x40011400
 8001fe8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fec:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	4909      	ldr	r1, [pc, #36]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	f47f ae8e 	bne.w	8001d2c <HAL_GPIO_Init+0x14>
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	372c      	adds	r7, #44	@ 0x2c
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	@ 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800202e:	e09a      	b.n	8002166 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002030:	2201      	movs	r2, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 808d 	beq.w	8002160 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002046:	4a4e      	ldr	r2, [pc, #312]	@ (8002180 <HAL_GPIO_DeInit+0x160>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a46      	ldr	r2, [pc, #280]	@ (8002184 <HAL_GPIO_DeInit+0x164>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d013      	beq.n	8002098 <HAL_GPIO_DeInit+0x78>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a45      	ldr	r2, [pc, #276]	@ (8002188 <HAL_GPIO_DeInit+0x168>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00d      	beq.n	8002094 <HAL_GPIO_DeInit+0x74>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a44      	ldr	r2, [pc, #272]	@ (800218c <HAL_GPIO_DeInit+0x16c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d007      	beq.n	8002090 <HAL_GPIO_DeInit+0x70>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a43      	ldr	r2, [pc, #268]	@ (8002190 <HAL_GPIO_DeInit+0x170>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d101      	bne.n	800208c <HAL_GPIO_DeInit+0x6c>
 8002088:	2303      	movs	r3, #3
 800208a:	e006      	b.n	800209a <HAL_GPIO_DeInit+0x7a>
 800208c:	2304      	movs	r3, #4
 800208e:	e004      	b.n	800209a <HAL_GPIO_DeInit+0x7a>
 8002090:	2302      	movs	r3, #2
 8002092:	e002      	b.n	800209a <HAL_GPIO_DeInit+0x7a>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_GPIO_DeInit+0x7a>
 8002098:	2300      	movs	r3, #0
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	f002 0203 	and.w	r2, r2, #3
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	4093      	lsls	r3, r2
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d132      	bne.n	8002110 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80020aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002194 <HAL_GPIO_DeInit+0x174>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4938      	ldr	r1, [pc, #224]	@ (8002194 <HAL_GPIO_DeInit+0x174>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80020b8:	4b36      	ldr	r3, [pc, #216]	@ (8002194 <HAL_GPIO_DeInit+0x174>)
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	43db      	mvns	r3, r3
 80020c0:	4934      	ldr	r1, [pc, #208]	@ (8002194 <HAL_GPIO_DeInit+0x174>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80020c6:	4b33      	ldr	r3, [pc, #204]	@ (8002194 <HAL_GPIO_DeInit+0x174>)
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	4931      	ldr	r1, [pc, #196]	@ (8002194 <HAL_GPIO_DeInit+0x174>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80020d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002194 <HAL_GPIO_DeInit+0x174>)
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	43db      	mvns	r3, r3
 80020dc:	492d      	ldr	r1, [pc, #180]	@ (8002194 <HAL_GPIO_DeInit+0x174>)
 80020de:	4013      	ands	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80020f2:	4a23      	ldr	r2, [pc, #140]	@ (8002180 <HAL_GPIO_DeInit+0x160>)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	43da      	mvns	r2, r3
 8002102:	481f      	ldr	r0, [pc, #124]	@ (8002180 <HAL_GPIO_DeInit+0x160>)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	400a      	ands	r2, r1
 800210a:	3302      	adds	r3, #2
 800210c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2bff      	cmp	r3, #255	@ 0xff
 8002114:	d801      	bhi.n	800211a <HAL_GPIO_DeInit+0xfa>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	e001      	b.n	800211e <HAL_GPIO_DeInit+0xfe>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3304      	adds	r3, #4
 800211e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2bff      	cmp	r3, #255	@ 0xff
 8002124:	d802      	bhi.n	800212c <HAL_GPIO_DeInit+0x10c>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	e002      	b.n	8002132 <HAL_GPIO_DeInit+0x112>
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	3b08      	subs	r3, #8
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	210f      	movs	r1, #15
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	2104      	movs	r1, #4
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	431a      	orrs	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	401a      	ands	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	3301      	adds	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	f47f af5e 	bne.w	8002030 <HAL_GPIO_DeInit+0x10>
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3724      	adds	r7, #36	@ 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40010000 	.word	0x40010000
 8002184:	40010800 	.word	0x40010800
 8002188:	40010c00 	.word	0x40010c00
 800218c:	40011000 	.word	0x40011000
 8002190:	40011400 	.word	0x40011400
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e001      	b.n	80021ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	807b      	strh	r3, [r7, #2]
 80021d2:	4613      	mov	r3, r2
 80021d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d6:	787b      	ldrb	r3, [r7, #1]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021dc:	887a      	ldrh	r2, [r7, #2]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021e2:	e003      	b.n	80021ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	041a      	lsls	r2, r3, #16
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	611a      	str	r2, [r3, #16]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e12b      	b.n	8002462 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d106      	bne.n	8002224 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fa84 	bl	800172c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2224      	movs	r2, #36	@ 0x24
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800224a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800225a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800225c:	f003 f95c 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8002260:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4a81      	ldr	r2, [pc, #516]	@ (800246c <HAL_I2C_Init+0x274>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d807      	bhi.n	800227c <HAL_I2C_Init+0x84>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a80      	ldr	r2, [pc, #512]	@ (8002470 <HAL_I2C_Init+0x278>)
 8002270:	4293      	cmp	r3, r2
 8002272:	bf94      	ite	ls
 8002274:	2301      	movls	r3, #1
 8002276:	2300      	movhi	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e006      	b.n	800228a <HAL_I2C_Init+0x92>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4a7d      	ldr	r2, [pc, #500]	@ (8002474 <HAL_I2C_Init+0x27c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	bf94      	ite	ls
 8002284:	2301      	movls	r3, #1
 8002286:	2300      	movhi	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0e7      	b.n	8002462 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a78      	ldr	r2, [pc, #480]	@ (8002478 <HAL_I2C_Init+0x280>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0c9b      	lsrs	r3, r3, #18
 800229c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4a6a      	ldr	r2, [pc, #424]	@ (800246c <HAL_I2C_Init+0x274>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d802      	bhi.n	80022cc <HAL_I2C_Init+0xd4>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3301      	adds	r3, #1
 80022ca:	e009      	b.n	80022e0 <HAL_I2C_Init+0xe8>
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	4a69      	ldr	r2, [pc, #420]	@ (800247c <HAL_I2C_Init+0x284>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	3301      	adds	r3, #1
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	430b      	orrs	r3, r1
 80022e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	495c      	ldr	r1, [pc, #368]	@ (800246c <HAL_I2C_Init+0x274>)
 80022fc:	428b      	cmp	r3, r1
 80022fe:	d819      	bhi.n	8002334 <HAL_I2C_Init+0x13c>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1e59      	subs	r1, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fbb1 f3f3 	udiv	r3, r1, r3
 800230e:	1c59      	adds	r1, r3, #1
 8002310:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002314:	400b      	ands	r3, r1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_I2C_Init+0x138>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1e59      	subs	r1, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fbb1 f3f3 	udiv	r3, r1, r3
 8002328:	3301      	adds	r3, #1
 800232a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232e:	e051      	b.n	80023d4 <HAL_I2C_Init+0x1dc>
 8002330:	2304      	movs	r3, #4
 8002332:	e04f      	b.n	80023d4 <HAL_I2C_Init+0x1dc>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d111      	bne.n	8002360 <HAL_I2C_Init+0x168>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e58      	subs	r0, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	440b      	add	r3, r1
 800234a:	fbb0 f3f3 	udiv	r3, r0, r3
 800234e:	3301      	adds	r3, #1
 8002350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	e012      	b.n	8002386 <HAL_I2C_Init+0x18e>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e58      	subs	r0, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	0099      	lsls	r1, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	fbb0 f3f3 	udiv	r3, r0, r3
 8002376:	3301      	adds	r3, #1
 8002378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_Init+0x196>
 800238a:	2301      	movs	r3, #1
 800238c:	e022      	b.n	80023d4 <HAL_I2C_Init+0x1dc>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10e      	bne.n	80023b4 <HAL_I2C_Init+0x1bc>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1e58      	subs	r0, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6859      	ldr	r1, [r3, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	440b      	add	r3, r1
 80023a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a8:	3301      	adds	r3, #1
 80023aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023b2:	e00f      	b.n	80023d4 <HAL_I2C_Init+0x1dc>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1e58      	subs	r0, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	0099      	lsls	r1, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	6809      	ldr	r1, [r1, #0]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002402:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6911      	ldr	r1, [r2, #16]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68d2      	ldr	r2, [r2, #12]
 800240e:	4311      	orrs	r1, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	430b      	orrs	r3, r1
 8002416:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	000186a0 	.word	0x000186a0
 8002470:	001e847f 	.word	0x001e847f
 8002474:	003d08ff 	.word	0x003d08ff
 8002478:	431bde83 	.word	0x431bde83
 800247c:	10624dd3 	.word	0x10624dd3

08002480 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	4608      	mov	r0, r1
 800248a:	4611      	mov	r1, r2
 800248c:	461a      	mov	r2, r3
 800248e:	4603      	mov	r3, r0
 8002490:	817b      	strh	r3, [r7, #10]
 8002492:	460b      	mov	r3, r1
 8002494:	813b      	strh	r3, [r7, #8]
 8002496:	4613      	mov	r3, r2
 8002498:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800249a:	f7ff fb01 	bl	8001aa0 <HAL_GetTick>
 800249e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	f040 80d9 	bne.w	8002660 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2319      	movs	r3, #25
 80024b4:	2201      	movs	r2, #1
 80024b6:	496d      	ldr	r1, [pc, #436]	@ (800266c <HAL_I2C_Mem_Write+0x1ec>)
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fccd 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
 80024c6:	e0cc      	b.n	8002662 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_I2C_Mem_Write+0x56>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e0c5      	b.n	8002662 <HAL_I2C_Mem_Write+0x1e2>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d007      	beq.n	80024fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800250a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2221      	movs	r2, #33	@ 0x21
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2240      	movs	r2, #64	@ 0x40
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a3a      	ldr	r2, [r7, #32]
 8002526:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800252c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4a4d      	ldr	r2, [pc, #308]	@ (8002670 <HAL_I2C_Mem_Write+0x1f0>)
 800253c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800253e:	88f8      	ldrh	r0, [r7, #6]
 8002540:	893a      	ldrh	r2, [r7, #8]
 8002542:	8979      	ldrh	r1, [r7, #10]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	4603      	mov	r3, r0
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fb04 	bl	8002b5c <I2C_RequestMemoryWrite>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d052      	beq.n	8002600 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e081      	b.n	8002662 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fd92 	bl	800308c <I2C_WaitOnTXEFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00d      	beq.n	800258a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	2b04      	cmp	r3, #4
 8002574:	d107      	bne.n	8002586 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e06b      	b.n	8002662 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d11b      	bne.n	8002600 <HAL_I2C_Mem_Write+0x180>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d017      	beq.n	8002600 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1aa      	bne.n	800255e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fd85 	bl	800311c <I2C_WaitOnBTFFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00d      	beq.n	8002634 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	2b04      	cmp	r3, #4
 800261e:	d107      	bne.n	8002630 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800262e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e016      	b.n	8002662 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	00100002 	.word	0x00100002
 8002670:	ffff0000 	.word	0xffff0000

08002674 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	@ 0x30
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	817b      	strh	r3, [r7, #10]
 8002686:	460b      	mov	r3, r1
 8002688:	813b      	strh	r3, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002692:	f7ff fa05 	bl	8001aa0 <HAL_GetTick>
 8002696:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	f040 8250 	bne.w	8002b46 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2319      	movs	r3, #25
 80026ac:	2201      	movs	r2, #1
 80026ae:	4982      	ldr	r1, [pc, #520]	@ (80028b8 <HAL_I2C_Mem_Read+0x244>)
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fbd1 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
 80026be:	e243      	b.n	8002b48 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_I2C_Mem_Read+0x5a>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e23c      	b.n	8002b48 <HAL_I2C_Mem_Read+0x4d4>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d007      	beq.n	80026f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002702:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2222      	movs	r2, #34	@ 0x22
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2240      	movs	r2, #64	@ 0x40
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800271e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002724:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a62      	ldr	r2, [pc, #392]	@ (80028bc <HAL_I2C_Mem_Read+0x248>)
 8002734:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002736:	88f8      	ldrh	r0, [r7, #6]
 8002738:	893a      	ldrh	r2, [r7, #8]
 800273a:	8979      	ldrh	r1, [r7, #10]
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	4603      	mov	r3, r0
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fa9e 	bl	8002c88 <I2C_RequestMemoryRead>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e1f8      	b.n	8002b48 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275a:	2b00      	cmp	r3, #0
 800275c:	d113      	bne.n	8002786 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e1cc      	b.n	8002b20 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278a:	2b01      	cmp	r3, #1
 800278c:	d11e      	bne.n	80027cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800279c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800279e:	b672      	cpsid	i
}
 80027a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027c8:	b662      	cpsie	i
}
 80027ca:	e035      	b.n	8002838 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d11e      	bne.n	8002812 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027e4:	b672      	cpsid	i
}
 80027e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800280c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800280e:	b662      	cpsie	i
}
 8002810:	e012      	b.n	8002838 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002820:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002838:	e172      	b.n	8002b20 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283e:	2b03      	cmp	r3, #3
 8002840:	f200 811f 	bhi.w	8002a82 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002848:	2b01      	cmp	r3, #1
 800284a:	d123      	bne.n	8002894 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800284e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fcab 	bl	80031ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e173      	b.n	8002b48 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002892:	e145      	b.n	8002b20 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002898:	2b02      	cmp	r3, #2
 800289a:	d152      	bne.n	8002942 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a2:	2200      	movs	r2, #0
 80028a4:	4906      	ldr	r1, [pc, #24]	@ (80028c0 <HAL_I2C_Mem_Read+0x24c>)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fad6 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e148      	b.n	8002b48 <HAL_I2C_Mem_Read+0x4d4>
 80028b6:	bf00      	nop
 80028b8:	00100002 	.word	0x00100002
 80028bc:	ffff0000 	.word	0xffff0000
 80028c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028c4:	b672      	cpsid	i
}
 80028c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800290a:	b662      	cpsie	i
}
 800290c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002940:	e0ee      	b.n	8002b20 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002948:	2200      	movs	r2, #0
 800294a:	4981      	ldr	r1, [pc, #516]	@ (8002b50 <HAL_I2C_Mem_Read+0x4dc>)
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fa83 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0f5      	b.n	8002b48 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800296a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800296c:	b672      	cpsid	i
}
 800296e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002b54 <HAL_I2C_Mem_Read+0x4e0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	08db      	lsrs	r3, r3, #3
 80029a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002b58 <HAL_I2C_Mem_Read+0x4e4>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0a1a      	lsrs	r2, r3, #8
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00da      	lsls	r2, r3, #3
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	3b01      	subs	r3, #1
 80029c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d118      	bne.n	80029fa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80029ea:	b662      	cpsie	i
}
 80029ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0a6      	b.n	8002b48 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d1d9      	bne.n	80029bc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a4a:	b662      	cpsie	i
}
 8002a4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a80:	e04e      	b.n	8002b20 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fb90 	bl	80031ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e058      	b.n	8002b48 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d124      	bne.n	8002b20 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d107      	bne.n	8002aee <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f47f ae88 	bne.w	800283a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
  }
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3728      	adds	r7, #40	@ 0x28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	00010004 	.word	0x00010004
 8002b54:	2000000c 	.word	0x2000000c
 8002b58:	14f8b589 	.word	0x14f8b589

08002b5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	4608      	mov	r0, r1
 8002b66:	4611      	mov	r1, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	813b      	strh	r3, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f960 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bac:	d103      	bne.n	8002bb6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e05f      	b.n	8002c7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bba:	897b      	ldrh	r3, [r7, #10]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	6a3a      	ldr	r2, [r7, #32]
 8002bce:	492d      	ldr	r1, [pc, #180]	@ (8002c84 <I2C_RequestMemoryWrite+0x128>)
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f9bb 	bl	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e04c      	b.n	8002c7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf8:	6a39      	ldr	r1, [r7, #32]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fa46 	bl	800308c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d107      	bne.n	8002c1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e02b      	b.n	8002c7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c28:	893b      	ldrh	r3, [r7, #8]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	611a      	str	r2, [r3, #16]
 8002c32:	e021      	b.n	8002c78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c34:	893b      	ldrh	r3, [r7, #8]
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c44:	6a39      	ldr	r1, [r7, #32]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fa20 	bl	800308c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d107      	bne.n	8002c6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e005      	b.n	8002c7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c6e:	893b      	ldrh	r3, [r7, #8]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	00010002 	.word	0x00010002

08002c88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	817b      	strh	r3, [r7, #10]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	813b      	strh	r3, [r7, #8]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f8c2 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ce8:	d103      	bne.n	8002cf2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e0aa      	b.n	8002e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	6a3a      	ldr	r2, [r7, #32]
 8002d0a:	4952      	ldr	r1, [pc, #328]	@ (8002e54 <I2C_RequestMemoryRead+0x1cc>)
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f91d 	bl	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e097      	b.n	8002e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d34:	6a39      	ldr	r1, [r7, #32]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f9a8 	bl	800308c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00d      	beq.n	8002d5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d107      	bne.n	8002d5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e076      	b.n	8002e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d64:	893b      	ldrh	r3, [r7, #8]
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	611a      	str	r2, [r3, #16]
 8002d6e:	e021      	b.n	8002db4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d70:	893b      	ldrh	r3, [r7, #8]
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d80:	6a39      	ldr	r1, [r7, #32]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f982 	bl	800308c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00d      	beq.n	8002daa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d107      	bne.n	8002da6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e050      	b.n	8002e4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002daa:	893b      	ldrh	r3, [r7, #8]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db6:	6a39      	ldr	r1, [r7, #32]
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f967 	bl	800308c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00d      	beq.n	8002de0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d107      	bne.n	8002ddc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e035      	b.n	8002e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f82b 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e16:	d103      	bne.n	8002e20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e013      	b.n	8002e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e24:	897b      	ldrh	r3, [r7, #10]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	6a3a      	ldr	r2, [r7, #32]
 8002e38:	4906      	ldr	r1, [pc, #24]	@ (8002e54 <I2C_RequestMemoryRead+0x1cc>)
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f886 	bl	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	00010002 	.word	0x00010002

08002e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e68:	e048      	b.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d044      	beq.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e72:	f7fe fe15 	bl	8001aa0 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d139      	bne.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10d      	bne.n	8002eae <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	e00c      	b.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d116      	bne.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e023      	b.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d10d      	bne.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	e00c      	b.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d093      	beq.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f5a:	e071      	b.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6a:	d123      	bne.n	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	f043 0204 	orr.w	r2, r3, #4
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e067      	b.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d041      	beq.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbc:	f7fe fd70 	bl	8001aa0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d136      	bne.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10c      	bne.n	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	e00b      	b.n	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d016      	beq.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e021      	b.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	0c1b      	lsrs	r3, r3, #16
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d10c      	bne.n	8003064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	43da      	mvns	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4013      	ands	r3, r2
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e00b      	b.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4013      	ands	r3, r2
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	f47f af6d 	bne.w	8002f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003098:	e034      	b.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f8e3 	bl	8003266 <I2C_IsAcknowledgeFailed>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e034      	b.n	8003114 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d028      	beq.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7fe fcf5 	bl	8001aa0 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d11d      	bne.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d2:	2b80      	cmp	r3, #128	@ 0x80
 80030d4:	d016      	beq.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	f043 0220 	orr.w	r2, r3, #32
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e007      	b.n	8003114 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310e:	2b80      	cmp	r3, #128	@ 0x80
 8003110:	d1c3      	bne.n	800309a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003128:	e034      	b.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f89b 	bl	8003266 <I2C_IsAcknowledgeFailed>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e034      	b.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d028      	beq.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7fe fcad 	bl	8001aa0 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11d      	bne.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b04      	cmp	r3, #4
 8003164:	d016      	beq.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e007      	b.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d1c3      	bne.n	800312a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031b8:	e049      	b.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d119      	bne.n	80031fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0210 	mvn.w	r2, #16
 80031d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e030      	b.n	800325e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fc:	f7fe fc50 	bl	8001aa0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	429a      	cmp	r2, r3
 800320a:	d302      	bcc.n	8003212 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11d      	bne.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321c:	2b40      	cmp	r3, #64	@ 0x40
 800321e:	d016      	beq.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e007      	b.n	800325e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003258:	2b40      	cmp	r3, #64	@ 0x40
 800325a:	d1ae      	bne.n	80031ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800327c:	d11b      	bne.n	80032b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003286:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f043 0204 	orr.w	r2, r3, #4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0e8      	b.n	80034a6 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f006 faef 	bl	80098cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2203      	movs	r2, #3
 80032f2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f002 fa14 	bl	800572e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3304      	adds	r3, #4
 800330e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003310:	f002 f9ea 	bl	80056e8 <USB_CoreInit>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0bf      	b.n	80034a6 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f002 fa18 	bl	8005762 <USB_SetCurrentMode>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0b0      	b.n	80034a6 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003344:	2300      	movs	r3, #0
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	e03e      	b.n	80033c8 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800334a:	7bfa      	ldrb	r2, [r7, #15]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	440b      	add	r3, r1
 8003358:	3311      	adds	r3, #17
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800335e:	7bfa      	ldrb	r2, [r7, #15]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	440b      	add	r3, r1
 800336c:	3310      	adds	r3, #16
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003372:	7bfa      	ldrb	r2, [r7, #15]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	3313      	adds	r3, #19
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	440b      	add	r3, r1
 8003394:	3320      	adds	r3, #32
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	3324      	adds	r3, #36	@ 0x24
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	440b      	add	r3, r1
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	3301      	adds	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	791b      	ldrb	r3, [r3, #4]
 80033cc:	7bfa      	ldrb	r2, [r7, #15]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d3bb      	bcc.n	800334a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d2:	2300      	movs	r3, #0
 80033d4:	73fb      	strb	r3, [r7, #15]
 80033d6:	e044      	b.n	8003462 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	440b      	add	r3, r1
 80033e6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	440b      	add	r3, r1
 80033fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	440b      	add	r3, r1
 8003412:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	440b      	add	r3, r1
 8003428:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	440b      	add	r3, r1
 800343e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	440b      	add	r3, r1
 8003454:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	3301      	adds	r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	791b      	ldrb	r3, [r3, #4]
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	429a      	cmp	r2, r3
 800346a:	d3b5      	bcc.n	80033d8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003476:	f002 f980 	bl	800577a <USB_DevInit>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e00c      	b.n	80034a6 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f004 fbff 	bl	8007ca2 <USB_DevDisconnect>

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_PCD_Start+0x16>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e016      	b.n	80034f2 <HAL_PCD_Start+0x44>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f002 f916 	bl	8005702 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80034d6:	2101      	movs	r1, #1
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f006 fc6a 	bl	8009db2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f004 fbd3 	bl	8007c8e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b088      	sub	sp, #32
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f004 fbd5 	bl	8007cb6 <USB_ReadInterrupts>
 800350c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fb1a 	bl	8003b52 <PCD_EP_ISR_Handler>

    return;
 800351e:	e119      	b.n	8003754 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003526:	2b00      	cmp	r3, #0
 8003528:	d013      	beq.n	8003552 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003532:	b29a      	uxth	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353c:	b292      	uxth	r2, r2
 800353e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f006 fa3d 	bl	80099c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003548:	2100      	movs	r1, #0
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f905 	bl	800375a <HAL_PCD_SetAddress>

    return;
 8003550:	e100      	b.n	8003754 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00c      	beq.n	8003576 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003564:	b29a      	uxth	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800356e:	b292      	uxth	r2, r2
 8003570:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003574:	e0ee      	b.n	8003754 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00c      	beq.n	800359a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003588:	b29a      	uxth	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003592:	b292      	uxth	r2, r2
 8003594:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003598:	e0dc      	b.n	8003754 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d027      	beq.n	80035f4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0204 	bic.w	r2, r2, #4
 80035b6:	b292      	uxth	r2, r2
 80035b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0208 	bic.w	r2, r2, #8
 80035ce:	b292      	uxth	r2, r2
 80035d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f006 fa2d 	bl	8009a34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035ec:	b292      	uxth	r2, r2
 80035ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80035f2:	e0af      	b.n	8003754 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8083 	beq.w	8003706 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003600:	2300      	movs	r3, #0
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e010      	b.n	8003628 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	7ffb      	ldrb	r3, [r7, #31]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	441a      	add	r2, r3
 8003612:	7ffb      	ldrb	r3, [r7, #31]
 8003614:	8812      	ldrh	r2, [r2, #0]
 8003616:	b292      	uxth	r2, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	3320      	adds	r3, #32
 800361c:	443b      	add	r3, r7
 800361e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003622:	7ffb      	ldrb	r3, [r7, #31]
 8003624:	3301      	adds	r3, #1
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	7ffb      	ldrb	r3, [r7, #31]
 800362a:	2b07      	cmp	r3, #7
 800362c:	d9eb      	bls.n	8003606 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	b292      	uxth	r2, r2
 8003642:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800364e:	b29a      	uxth	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	b292      	uxth	r2, r2
 800365a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800365e:	bf00      	nop
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003668:	b29b      	uxth	r3, r3
 800366a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f6      	beq.n	8003660 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003684:	b292      	uxth	r2, r2
 8003686:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800368a:	2300      	movs	r3, #0
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e00f      	b.n	80036b0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003690:	7ffb      	ldrb	r3, [r7, #31]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	4611      	mov	r1, r2
 8003698:	7ffa      	ldrb	r2, [r7, #31]
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	440a      	add	r2, r1
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	3320      	adds	r3, #32
 80036a2:	443b      	add	r3, r7
 80036a4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80036a8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80036aa:	7ffb      	ldrb	r3, [r7, #31]
 80036ac:	3301      	adds	r3, #1
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	7ffb      	ldrb	r3, [r7, #31]
 80036b2:	2b07      	cmp	r3, #7
 80036b4:	d9ec      	bls.n	8003690 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0208 	orr.w	r2, r2, #8
 80036c8:	b292      	uxth	r2, r2
 80036ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036e0:	b292      	uxth	r2, r2
 80036e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0204 	orr.w	r2, r2, #4
 80036f8:	b292      	uxth	r2, r2
 80036fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f006 f97e 	bl	8009a00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003704:	e026      	b.n	8003754 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00f      	beq.n	8003730 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003718:	b29a      	uxth	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003722:	b292      	uxth	r2, r2
 8003724:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f006 f93c 	bl	80099a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800372e:	e011      	b.n	8003754 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800374c:	b292      	uxth	r2, r2
 800374e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003752:	bf00      	nop
  }
}
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	460b      	mov	r3, r1
 8003764:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_PCD_SetAddress+0x1a>
 8003770:	2302      	movs	r3, #2
 8003772:	e012      	b.n	800379a <HAL_PCD_SetAddress+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f004 fa6c 	bl	8007c68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	4608      	mov	r0, r1
 80037ac:	4611      	mov	r1, r2
 80037ae:	461a      	mov	r2, r3
 80037b0:	4603      	mov	r3, r0
 80037b2:	70fb      	strb	r3, [r7, #3]
 80037b4:	460b      	mov	r3, r1
 80037b6:	803b      	strh	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	da0e      	bge.n	80037e6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	f003 0207 	and.w	r2, r3, #7
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	3310      	adds	r3, #16
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	4413      	add	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	705a      	strb	r2, [r3, #1]
 80037e4:	e00e      	b.n	8003804 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	f003 0207 	and.w	r2, r3, #7
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	4413      	add	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	b2da      	uxtb	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003810:	883a      	ldrh	r2, [r7, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	78ba      	ldrb	r2, [r7, #2]
 800381a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800381c:	78bb      	ldrb	r3, [r7, #2]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d102      	bne.n	8003828 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_PCD_EP_Open+0x94>
 8003832:	2302      	movs	r3, #2
 8003834:	e00e      	b.n	8003854 <HAL_PCD_EP_Open+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68f9      	ldr	r1, [r7, #12]
 8003844:	4618      	mov	r0, r3
 8003846:	f001 ffb5 	bl	80057b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003852:	7afb      	ldrb	r3, [r7, #11]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386c:	2b00      	cmp	r3, #0
 800386e:	da0e      	bge.n	800388e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 0207 	and.w	r2, r3, #7
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	3310      	adds	r3, #16
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	705a      	strb	r2, [r3, #1]
 800388c:	e00e      	b.n	80038ac <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	f003 0207 	and.w	r2, r3, #7
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_PCD_EP_Close+0x6a>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e00e      	b.n	80038e4 <HAL_PCD_EP_Close+0x88>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68f9      	ldr	r1, [r7, #12]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f002 fb2d 	bl	8005f34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	460b      	mov	r3, r1
 80038fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038fc:	7afb      	ldrb	r3, [r7, #11]
 80038fe:	f003 0207 	and.w	r2, r3, #7
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2200      	movs	r2, #0
 8003924:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800392c:	7afb      	ldrb	r3, [r7, #11]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	b2da      	uxtb	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6979      	ldr	r1, [r7, #20]
 800393e:	4618      	mov	r0, r3
 8003940:	f002 fce4 	bl	800630c <USB_EPStartXfer>

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	f003 0207 	and.w	r2, r3, #7
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	440b      	add	r3, r1
 800396c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003970:	681b      	ldr	r3, [r3, #0]
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	460b      	mov	r3, r1
 800398a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800398c:	7afb      	ldrb	r3, [r7, #11]
 800398e:	f003 0207 	and.w	r2, r3, #7
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	3310      	adds	r3, #16
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2200      	movs	r2, #0
 80039c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2201      	movs	r2, #1
 80039c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039c8:	7afb      	ldrb	r3, [r7, #11]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6979      	ldr	r1, [r7, #20]
 80039da:	4618      	mov	r0, r3
 80039dc:	f002 fc96 	bl	800630c <USB_EPStartXfer>

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	7912      	ldrb	r2, [r2, #4]
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e04c      	b.n	8003aa2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da0e      	bge.n	8003a2e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 0207 	and.w	r2, r3, #7
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	3310      	adds	r3, #16
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	705a      	strb	r2, [r3, #1]
 8003a2c:	e00c      	b.n	8003a48 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4413      	add	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_PCD_EP_SetStall+0x7e>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e01c      	b.n	8003aa2 <HAL_PCD_EP_SetStall+0xb8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 fff9 	bl	8007a6e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f004 f91e 	bl	8007cd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	7912      	ldrb	r2, [r2, #4]
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e040      	b.n	8003b4a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	da0e      	bge.n	8003aee <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	f003 0207 	and.w	r2, r3, #7
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	3310      	adds	r3, #16
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	705a      	strb	r2, [r3, #1]
 8003aec:	e00e      	b.n	8003b0c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	f003 0207 	and.w	r2, r3, #7
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_PCD_EP_ClrStall+0x82>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e00e      	b.n	8003b4a <HAL_PCD_EP_ClrStall+0xa0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68f9      	ldr	r1, [r7, #12]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f003 ffe7 	bl	8007b0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b096      	sub	sp, #88	@ 0x58
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b5a:	e3bb      	b.n	80042d4 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b64:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003b76:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 8175 	bne.w	8003e6a <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d14e      	bne.n	8003c2a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b9c:	81fb      	strh	r3, [r7, #14]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	89fb      	ldrh	r3, [r7, #14]
 8003ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3310      	adds	r3, #16
 8003bb4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	3302      	adds	r3, #2
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	441a      	add	r2, r3
 8003bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bee:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f005 febd 	bl	8009972 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7b5b      	ldrb	r3, [r3, #13]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8368 	beq.w	80042d4 <PCD_EP_ISR_Handler+0x782>
 8003c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f040 8363 	bne.w	80042d4 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	7b5b      	ldrb	r3, [r3, #13]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	735a      	strb	r2, [r3, #13]
 8003c28:	e354      	b.n	80042d4 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c30:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d034      	beq.n	8003cb2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3306      	adds	r3, #6
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c72:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c80:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c84:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f004 f874 	bl	8007d74 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003c98:	4013      	ands	r3, r2
 8003c9a:	823b      	strh	r3, [r7, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	8a3a      	ldrh	r2, [r7, #16]
 8003ca2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ca6:	b292      	uxth	r2, r2
 8003ca8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f005 fe34 	bl	8009918 <HAL_PCD_SetupStageCallback>
 8003cb0:	e310      	b.n	80042d4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cb2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f280 830c 	bge.w	80042d4 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003cc8:	4013      	ands	r3, r2
 8003cca:	83fb      	strh	r3, [r7, #30]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	8bfa      	ldrh	r2, [r7, #30]
 8003cd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cd6:	b292      	uxth	r2, r2
 8003cd8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	3306      	adds	r3, #6
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d04:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d019      	beq.n	8003d42 <PCD_EP_ISR_Handler+0x1f0>
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d015      	beq.n	8003d42 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d1c:	6959      	ldr	r1, [r3, #20]
 8003d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d20:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d24:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f004 f824 	bl	8007d74 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	441a      	add	r2, r3
 8003d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d38:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f005 fdfd 	bl	800993c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003d4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f040 82bd 	bne.w	80042d4 <PCD_EP_ISR_Handler+0x782>
 8003d5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d5e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d66:	f000 82b5 	beq.w	80042d4 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	4413      	add	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	801a      	strh	r2, [r3, #0]
 8003d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003da0:	d91d      	bls.n	8003dde <PCD_EP_ISR_Handler+0x28c>
 8003da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <PCD_EP_ISR_Handler+0x26a>
 8003db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db8:	3b01      	subs	r3, #1
 8003dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	029b      	lsls	r3, r3, #10
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	e026      	b.n	8003e2c <PCD_EP_ISR_Handler+0x2da>
 8003dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <PCD_EP_ISR_Handler+0x2aa>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	e017      	b.n	8003e2c <PCD_EP_ISR_Handler+0x2da>
 8003dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <PCD_EP_ISR_Handler+0x2c4>
 8003e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e12:	3301      	adds	r3, #1
 8003e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	029b      	lsls	r3, r3, #10
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	4313      	orrs	r3, r2
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3c:	827b      	strh	r3, [r7, #18]
 8003e3e:	8a7b      	ldrh	r3, [r7, #18]
 8003e40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003e44:	827b      	strh	r3, [r7, #18]
 8003e46:	8a7b      	ldrh	r3, [r7, #18]
 8003e48:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e4c:	827b      	strh	r3, [r7, #18]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	8a7b      	ldrh	r3, [r7, #18]
 8003e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	8013      	strh	r3, [r2, #0]
 8003e68:	e234      	b.n	80042d4 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e7e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f280 80fc 	bge.w	8004080 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003eb6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003eba:	b292      	uxth	r2, r2
 8003ebc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ebe:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed6:	7b1b      	ldrb	r3, [r3, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d125      	bne.n	8003f28 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	3306      	adds	r3, #6
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f04:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003f08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8092 	beq.w	8004036 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f18:	6959      	ldr	r1, [r3, #20]
 8003f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1c:	88da      	ldrh	r2, [r3, #6]
 8003f1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f22:	f003 ff27 	bl	8007d74 <USB_ReadPMA>
 8003f26:	e086      	b.n	8004036 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2a:	78db      	ldrb	r3, [r3, #3]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d10a      	bne.n	8003f46 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f34:	461a      	mov	r2, r3
 8003f36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f9d9 	bl	80042f0 <HAL_PCD_EP_DB_Receive>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003f44:	e077      	b.n	8004036 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f60:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d024      	beq.n	8003fee <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3302      	adds	r3, #2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fcc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003fd0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d02e      	beq.n	8004036 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fde:	6959      	ldr	r1, [r3, #20]
 8003fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe2:	891a      	ldrh	r2, [r3, #8]
 8003fe4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fe8:	f003 fec4 	bl	8007d74 <USB_ReadPMA>
 8003fec:	e023      	b.n	8004036 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	3306      	adds	r3, #6
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004016:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800401a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004028:	6959      	ldr	r1, [r3, #20]
 800402a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800402c:	895a      	ldrh	r2, [r3, #10]
 800402e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004032:	f003 fe9f 	bl	8007d74 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800403e:	441a      	add	r2, r3
 8004040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004042:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800404c:	441a      	add	r2, r3
 800404e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004050:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <PCD_EP_ISR_Handler+0x514>
 800405a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800405e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	429a      	cmp	r2, r3
 8004064:	d206      	bcs.n	8004074 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	4619      	mov	r1, r3
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f005 fc65 	bl	800993c <HAL_PCD_DataOutStageCallback>
 8004072:	e005      	b.n	8004080 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800407a:	4618      	mov	r0, r3
 800407c:	f002 f946 	bl	800630c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004080:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8123 	beq.w	80042d4 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800408e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	3310      	adds	r3, #16
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80040b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80040d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040da:	b29b      	uxth	r3, r3
 80040dc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80040de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e0:	78db      	ldrb	r3, [r3, #3]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	f040 80a2 	bne.w	800422c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80040e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ea:	2200      	movs	r2, #0
 80040ec:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80040ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f0:	7b1b      	ldrb	r3, [r3, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8093 	beq.w	800421e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d046      	beq.n	8004192 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d126      	bne.n	800415a <PCD_EP_ISR_Handler+0x608>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800411a:	b29b      	uxth	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	4413      	add	r3, r2
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24
 8004124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	011a      	lsls	r2, r3, #4
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	4413      	add	r3, r2
 800412e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004132:	623b      	str	r3, [r7, #32]
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800413e:	b29a      	uxth	r2, r3
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	801a      	strh	r2, [r3, #0]
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800414e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004152:	b29a      	uxth	r2, r3
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	801a      	strh	r2, [r3, #0]
 8004158:	e061      	b.n	800421e <PCD_EP_ISR_Handler+0x6cc>
 800415a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d15d      	bne.n	800421e <PCD_EP_ISR_Handler+0x6cc>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004170:	b29b      	uxth	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004176:	4413      	add	r3, r2
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800417a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	011a      	lsls	r2, r3, #4
 8004180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004182:	4413      	add	r3, r2
 8004184:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418c:	2200      	movs	r2, #0
 800418e:	801a      	strh	r2, [r3, #0]
 8004190:	e045      	b.n	800421e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d126      	bne.n	80041ee <PCD_EP_ISR_Handler+0x69c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b4:	4413      	add	r3, r2
 80041b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	011a      	lsls	r2, r3, #4
 80041be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c0:	4413      	add	r3, r2
 80041c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80041c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d6:	801a      	strh	r2, [r3, #0]
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	e017      	b.n	800421e <PCD_EP_ISR_Handler+0x6cc>
 80041ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d113      	bne.n	800421e <PCD_EP_ISR_Handler+0x6cc>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041fe:	b29b      	uxth	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004204:	4413      	add	r3, r2
 8004206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	011a      	lsls	r2, r3, #4
 800420e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004210:	4413      	add	r3, r2
 8004212:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004216:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421a:	2200      	movs	r2, #0
 800421c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800421e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f005 fba4 	bl	8009972 <HAL_PCD_DataInStageCallback>
 800422a:	e053      	b.n	80042d4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800422c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d146      	bne.n	80042c6 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004240:	b29b      	uxth	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4413      	add	r3, r2
 800424c:	3302      	adds	r3, #2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004260:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800426c:	429a      	cmp	r2, r3
 800426e:	d907      	bls.n	8004280 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004272:	699a      	ldr	r2, [r3, #24]
 8004274:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004278:	1ad2      	subs	r2, r2, r3
 800427a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427c:	619a      	str	r2, [r3, #24]
 800427e:	e002      	b.n	8004286 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004282:	2200      	movs	r2, #0
 8004284:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800428e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	4619      	mov	r1, r3
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f005 fb6c 	bl	8009972 <HAL_PCD_DataInStageCallback>
 800429a:	e01b      	b.n	80042d4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800429c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80042a4:	441a      	add	r2, r3
 80042a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80042aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ac:	69da      	ldr	r2, [r3, #28]
 80042ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80042b2:	441a      	add	r2, r3
 80042b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042be:	4618      	mov	r0, r3
 80042c0:	f002 f824 	bl	800630c <USB_EPStartXfer>
 80042c4:	e006      	b.n	80042d4 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80042c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80042ca:	461a      	mov	r2, r3
 80042cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f91b 	bl	800450a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042dc:	b29b      	uxth	r3, r3
 80042de:	b21b      	sxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f6ff ac3b 	blt.w	8003b5c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3758      	adds	r7, #88	@ 0x58
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	4613      	mov	r3, r2
 80042fc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d07e      	beq.n	8004406 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004310:	b29b      	uxth	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	3302      	adds	r3, #2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004330:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	8b7b      	ldrh	r3, [r7, #26]
 8004338:	429a      	cmp	r2, r3
 800433a:	d306      	bcc.n	800434a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	8b7b      	ldrh	r3, [r7, #26]
 8004342:	1ad2      	subs	r2, r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	619a      	str	r2, [r3, #24]
 8004348:	e002      	b.n	8004350 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2200      	movs	r2, #0
 800434e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d123      	bne.n	80043a0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800436e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004372:	833b      	strh	r3, [r7, #24]
 8004374:	8b3b      	ldrh	r3, [r7, #24]
 8004376:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800437a:	833b      	strh	r3, [r7, #24]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	8b3b      	ldrh	r3, [r7, #24]
 800438c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004394:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800439c:	b29b      	uxth	r3, r3
 800439e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01f      	beq.n	80043ea <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c4:	82fb      	strh	r3, [r7, #22]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	441a      	add	r2, r3
 80043d4:	8afb      	ldrh	r3, [r7, #22]
 80043d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043ea:	8b7b      	ldrh	r3, [r7, #26]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8087 	beq.w	8004500 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6959      	ldr	r1, [r3, #20]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	891a      	ldrh	r2, [r3, #8]
 80043fe:	8b7b      	ldrh	r3, [r7, #26]
 8004400:	f003 fcb8 	bl	8007d74 <USB_ReadPMA>
 8004404:	e07c      	b.n	8004500 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800440e:	b29b      	uxth	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	3306      	adds	r3, #6
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800442e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	699a      	ldr	r2, [r3, #24]
 8004434:	8b7b      	ldrh	r3, [r7, #26]
 8004436:	429a      	cmp	r2, r3
 8004438:	d306      	bcc.n	8004448 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	699a      	ldr	r2, [r3, #24]
 800443e:	8b7b      	ldrh	r3, [r7, #26]
 8004440:	1ad2      	subs	r2, r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	619a      	str	r2, [r3, #24]
 8004446:	e002      	b.n	800444e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2200      	movs	r2, #0
 800444c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d123      	bne.n	800449e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800446c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004470:	83fb      	strh	r3, [r7, #30]
 8004472:	8bfb      	ldrh	r3, [r7, #30]
 8004474:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004478:	83fb      	strh	r3, [r7, #30]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	441a      	add	r2, r3
 8004488:	8bfb      	ldrh	r3, [r7, #30]
 800448a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800448e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800449a:	b29b      	uxth	r3, r3
 800449c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d11f      	bne.n	80044e8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c2:	83bb      	strh	r3, [r7, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	441a      	add	r2, r3
 80044d2:	8bbb      	ldrh	r3, [r7, #28]
 80044d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044e8:	8b7b      	ldrh	r3, [r7, #26]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6959      	ldr	r1, [r3, #20]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	895a      	ldrh	r2, [r3, #10]
 80044fa:	8b7b      	ldrh	r3, [r7, #26]
 80044fc:	f003 fc3a 	bl	8007d74 <USB_ReadPMA>
    }
  }

  return count;
 8004500:	8b7b      	ldrh	r3, [r7, #26]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b0a4      	sub	sp, #144	@ 0x90
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	4613      	mov	r3, r2
 8004516:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 81dd 	beq.w	80048de <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800452c:	b29b      	uxth	r3, r3
 800452e:	461a      	mov	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4413      	add	r3, r2
 8004538:	3302      	adds	r3, #2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800454c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004558:	429a      	cmp	r2, r3
 800455a:	d907      	bls.n	800456c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004564:	1ad2      	subs	r2, r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	619a      	str	r2, [r3, #24]
 800456a:	e002      	b.n	8004572 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2200      	movs	r2, #0
 8004570:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f040 80b9 	bne.w	80046ee <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	785b      	ldrb	r3, [r3, #1]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d126      	bne.n	80045d2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004598:	4413      	add	r3, r2
 800459a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	011a      	lsls	r2, r3, #4
 80045a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a4:	4413      	add	r3, r2
 80045a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	801a      	strh	r2, [r3, #0]
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ce:	801a      	strh	r2, [r3, #0]
 80045d0:	e01a      	b.n	8004608 <HAL_PCD_EP_DB_Transmit+0xfe>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	785b      	ldrb	r3, [r3, #1]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d116      	bne.n	8004608 <HAL_PCD_EP_DB_Transmit+0xfe>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	461a      	mov	r2, r3
 80045ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ee:	4413      	add	r3, r2
 80045f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	011a      	lsls	r2, r3, #4
 80045f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fa:	4413      	add	r3, r2
 80045fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004600:	633b      	str	r3, [r7, #48]	@ 0x30
 8004602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004604:	2200      	movs	r2, #0
 8004606:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	785b      	ldrb	r3, [r3, #1]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d126      	bne.n	8004664 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004624:	b29b      	uxth	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	011a      	lsls	r2, r3, #4
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	4413      	add	r3, r2
 8004638:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004648:	b29a      	uxth	r2, r3
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	801a      	strh	r2, [r3, #0]
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465c:	b29a      	uxth	r2, r3
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	e017      	b.n	8004694 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d113      	bne.n	8004694 <HAL_PCD_EP_DB_Transmit+0x18a>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004674:	b29b      	uxth	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	4413      	add	r3, r2
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	011a      	lsls	r2, r3, #4
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	4413      	add	r3, r2
 8004688:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800468c:	623b      	str	r3, [r7, #32]
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	2200      	movs	r2, #0
 8004692:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	4619      	mov	r1, r3
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f005 f969 	bl	8009972 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 82fc 	beq.w	8004ca4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c6:	82fb      	strh	r3, [r7, #22]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	8afb      	ldrh	r3, [r7, #22]
 80046d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	8013      	strh	r3, [r2, #0]
 80046ec:	e2da      	b.n	8004ca4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d021      	beq.n	800473c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800470e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004712:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800472c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004730:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004738:	b29b      	uxth	r3, r3
 800473a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004742:	2b01      	cmp	r3, #1
 8004744:	f040 82ae 	bne.w	8004ca4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004750:	441a      	add	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800475e:	441a      	add	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	6a1a      	ldr	r2, [r3, #32]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	429a      	cmp	r2, r3
 800476e:	d30b      	bcc.n	8004788 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6a1a      	ldr	r2, [r3, #32]
 800477c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004780:	1ad2      	subs	r2, r2, r3
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	621a      	str	r2, [r3, #32]
 8004786:	e017      	b.n	80047b8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d108      	bne.n	80047a2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004790:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004794:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80047a0:	e00a      	b.n	80047b8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2200      	movs	r2, #0
 80047b6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	785b      	ldrb	r3, [r3, #1]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d165      	bne.n	800488c <HAL_PCD_EP_DB_Transmit+0x382>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d4:	4413      	add	r3, r2
 80047d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	011a      	lsls	r2, r3, #4
 80047de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e0:	4413      	add	r3, r2
 80047e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f6:	801a      	strh	r2, [r3, #0]
 80047f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80047fe:	d91d      	bls.n	800483c <HAL_PCD_EP_DB_Transmit+0x332>
 8004800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004808:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <HAL_PCD_EP_DB_Transmit+0x310>
 8004814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004816:	3b01      	subs	r3, #1
 8004818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800481a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29a      	uxth	r2, r3
 8004820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004822:	b29b      	uxth	r3, r3
 8004824:	029b      	lsls	r3, r3, #10
 8004826:	b29b      	uxth	r3, r3
 8004828:	4313      	orrs	r3, r2
 800482a:	b29b      	uxth	r3, r3
 800482c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004834:	b29a      	uxth	r2, r3
 8004836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	e044      	b.n	80048c6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800483c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <HAL_PCD_EP_DB_Transmit+0x350>
 8004844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004852:	b29a      	uxth	r2, r3
 8004854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004856:	801a      	strh	r2, [r3, #0]
 8004858:	e035      	b.n	80048c6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800485a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_PCD_EP_DB_Transmit+0x36a>
 800486e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004870:	3301      	adds	r3, #1
 8004872:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	b29a      	uxth	r2, r3
 800487a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800487c:	b29b      	uxth	r3, r3
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	b29b      	uxth	r3, r3
 8004882:	4313      	orrs	r3, r2
 8004884:	b29a      	uxth	r2, r3
 8004886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	e01c      	b.n	80048c6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	785b      	ldrb	r3, [r3, #1]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d118      	bne.n	80048c6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	647b      	str	r3, [r7, #68]	@ 0x44
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048a8:	4413      	add	r3, r2
 80048aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	011a      	lsls	r2, r3, #4
 80048b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048b4:	4413      	add	r3, r2
 80048b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80048ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80048bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6959      	ldr	r1, [r3, #20]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	891a      	ldrh	r2, [r3, #8]
 80048d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f003 fa07 	bl	8007cea <USB_WritePMA>
 80048dc:	e1e2      	b.n	8004ca4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	3306      	adds	r3, #6
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004906:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004912:	429a      	cmp	r2, r3
 8004914:	d307      	bcc.n	8004926 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	619a      	str	r2, [r3, #24]
 8004924:	e002      	b.n	800492c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2200      	movs	r2, #0
 800492a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f040 80c0 	bne.w	8004ab6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d126      	bne.n	800498c <HAL_PCD_EP_DB_Transmit+0x482>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004952:	4413      	add	r3, r2
 8004954:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	011a      	lsls	r2, r3, #4
 800495c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800495e:	4413      	add	r3, r2
 8004960:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004964:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004970:	b29a      	uxth	r2, r3
 8004972:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004974:	801a      	strh	r2, [r3, #0]
 8004976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004984:	b29a      	uxth	r2, r3
 8004986:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004988:	801a      	strh	r2, [r3, #0]
 800498a:	e01a      	b.n	80049c2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	785b      	ldrb	r3, [r3, #1]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d116      	bne.n	80049c2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	667b      	str	r3, [r7, #100]	@ 0x64
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049a8:	4413      	add	r3, r2
 80049aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	011a      	lsls	r2, r3, #4
 80049b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049b4:	4413      	add	r3, r2
 80049b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80049ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80049bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049be:	2200      	movs	r2, #0
 80049c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d12b      	bne.n	8004a28 <HAL_PCD_EP_DB_Transmit+0x51e>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049de:	b29b      	uxth	r3, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049e4:	4413      	add	r3, r2
 80049e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	011a      	lsls	r2, r3, #4
 80049ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049f0:	4413      	add	r3, r2
 80049f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80049f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a0c:	801a      	strh	r2, [r3, #0]
 8004a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	e017      	b.n	8004a58 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d113      	bne.n	8004a58 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a3e:	4413      	add	r3, r2
 8004a40:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	011a      	lsls	r2, r3, #4
 8004a48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a50:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a54:	2200      	movs	r2, #0
 8004a56:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f004 ff87 	bl	8009972 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 811a 	bne.w	8004ca4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	441a      	add	r2, r3
 8004a9c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aa8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	8013      	strh	r3, [r2, #0]
 8004ab4:	e0f6      	b.n	8004ca4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d121      	bne.n	8004b04 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ada:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	441a      	add	r2, r3
 8004aec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004af0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004af4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	f040 80ca 	bne.w	8004ca4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	695a      	ldr	r2, [r3, #20]
 8004b14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b18:	441a      	add	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	69da      	ldr	r2, [r3, #28]
 8004b22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b26:	441a      	add	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	6a1a      	ldr	r2, [r3, #32]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d30b      	bcc.n	8004b50 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6a1a      	ldr	r2, [r3, #32]
 8004b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b48:	1ad2      	subs	r2, r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	621a      	str	r2, [r3, #32]
 8004b4e:	e017      	b.n	8004b80 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d108      	bne.n	8004b6a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004b58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004b68:	e00a      	b.n	8004b80 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2200      	movs	r2, #0
 8004b76:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d165      	bne.n	8004c5a <HAL_PCD_EP_DB_Transmit+0x750>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ba2:	4413      	add	r3, r2
 8004ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	011a      	lsls	r2, r3, #4
 8004bac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bae:	4413      	add	r3, r2
 8004bb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bc4:	801a      	strh	r2, [r3, #0]
 8004bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bca:	2b3e      	cmp	r3, #62	@ 0x3e
 8004bcc:	d91d      	bls.n	8004c0a <HAL_PCD_EP_DB_Transmit+0x700>
 8004bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004be2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004be4:	3b01      	subs	r3, #1
 8004be6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004be8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	029b      	lsls	r3, r3, #10
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c06:	801a      	strh	r2, [r3, #0]
 8004c08:	e041      	b.n	8004c8e <HAL_PCD_EP_DB_Transmit+0x784>
 8004c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004c12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c24:	801a      	strh	r2, [r3, #0]
 8004c26:	e032      	b.n	8004c8e <HAL_PCD_EP_DB_Transmit+0x784>
 8004c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_PCD_EP_DB_Transmit+0x738>
 8004c3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c3e:	3301      	adds	r3, #1
 8004c40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	029b      	lsls	r3, r3, #10
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	4313      	orrs	r3, r2
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c56:	801a      	strh	r2, [r3, #0]
 8004c58:	e019      	b.n	8004c8e <HAL_PCD_EP_DB_Transmit+0x784>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	785b      	ldrb	r3, [r3, #1]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d115      	bne.n	8004c8e <HAL_PCD_EP_DB_Transmit+0x784>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c70:	4413      	add	r3, r2
 8004c72:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	011a      	lsls	r2, r3, #4
 8004c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c82:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c8c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6959      	ldr	r1, [r3, #20]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	895a      	ldrh	r2, [r3, #10]
 8004c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f003 f823 	bl	8007cea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cbe:	82bb      	strh	r3, [r7, #20]
 8004cc0:	8abb      	ldrh	r3, [r7, #20]
 8004cc2:	f083 0310 	eor.w	r3, r3, #16
 8004cc6:	82bb      	strh	r3, [r7, #20]
 8004cc8:	8abb      	ldrh	r3, [r7, #20]
 8004cca:	f083 0320 	eor.w	r3, r3, #32
 8004cce:	82bb      	strh	r3, [r7, #20]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	8abb      	ldrh	r3, [r7, #20]
 8004ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3790      	adds	r7, #144	@ 0x90
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b087      	sub	sp, #28
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	607b      	str	r3, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	817b      	strh	r3, [r7, #10]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004d10:	897b      	ldrh	r3, [r7, #10]
 8004d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00b      	beq.n	8004d34 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d1c:	897b      	ldrh	r3, [r7, #10]
 8004d1e:	f003 0207 	and.w	r2, r3, #7
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	3310      	adds	r3, #16
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	e009      	b.n	8004d48 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d34:	897a      	ldrh	r2, [r7, #10]
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d48:	893b      	ldrh	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d107      	bne.n	8004d5e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2200      	movs	r2, #0
 8004d52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	80da      	strh	r2, [r3, #6]
 8004d5c:	e00b      	b.n	8004d76 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2201      	movs	r2, #1
 8004d62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr
	...

08004d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e272      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8087 	beq.w	8004eb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004da4:	4b92      	ldr	r3, [pc, #584]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 030c 	and.w	r3, r3, #12
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d00c      	beq.n	8004dca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004db0:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f003 030c 	and.w	r3, r3, #12
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d112      	bne.n	8004de2 <HAL_RCC_OscConfig+0x5e>
 8004dbc:	4b8c      	ldr	r3, [pc, #560]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc8:	d10b      	bne.n	8004de2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dca:	4b89      	ldr	r3, [pc, #548]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d06c      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x12c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d168      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e24c      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dea:	d106      	bne.n	8004dfa <HAL_RCC_OscConfig+0x76>
 8004dec:	4b80      	ldr	r3, [pc, #512]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a7f      	ldr	r2, [pc, #508]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004df2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	e02e      	b.n	8004e58 <HAL_RCC_OscConfig+0xd4>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10c      	bne.n	8004e1c <HAL_RCC_OscConfig+0x98>
 8004e02:	4b7b      	ldr	r3, [pc, #492]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a7a      	ldr	r2, [pc, #488]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	4b78      	ldr	r3, [pc, #480]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a77      	ldr	r2, [pc, #476]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e01d      	b.n	8004e58 <HAL_RCC_OscConfig+0xd4>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCC_OscConfig+0xbc>
 8004e26:	4b72      	ldr	r3, [pc, #456]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a71      	ldr	r2, [pc, #452]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	4b6f      	ldr	r3, [pc, #444]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a6e      	ldr	r2, [pc, #440]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e00b      	b.n	8004e58 <HAL_RCC_OscConfig+0xd4>
 8004e40:	4b6b      	ldr	r3, [pc, #428]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a6a      	ldr	r2, [pc, #424]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	4b68      	ldr	r3, [pc, #416]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a67      	ldr	r2, [pc, #412]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d013      	beq.n	8004e88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7fc fe1e 	bl	8001aa0 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e68:	f7fc fe1a 	bl	8001aa0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b64      	cmp	r3, #100	@ 0x64
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e200      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0xe4>
 8004e86:	e014      	b.n	8004eb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e88:	f7fc fe0a 	bl	8001aa0 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e90:	f7fc fe06 	bl	8001aa0 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b64      	cmp	r3, #100	@ 0x64
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e1ec      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea2:	4b53      	ldr	r3, [pc, #332]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x10c>
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d063      	beq.n	8004f86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ebe:	4b4c      	ldr	r3, [pc, #304]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00b      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004eca:	4b49      	ldr	r3, [pc, #292]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f003 030c 	and.w	r3, r3, #12
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d11c      	bne.n	8004f10 <HAL_RCC_OscConfig+0x18c>
 8004ed6:	4b46      	ldr	r3, [pc, #280]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d116      	bne.n	8004f10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee2:	4b43      	ldr	r3, [pc, #268]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <HAL_RCC_OscConfig+0x176>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d001      	beq.n	8004efa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e1c0      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efa:	4b3d      	ldr	r3, [pc, #244]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4939      	ldr	r1, [pc, #228]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f0e:	e03a      	b.n	8004f86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d020      	beq.n	8004f5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f18:	4b36      	ldr	r3, [pc, #216]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1e:	f7fc fdbf 	bl	8001aa0 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f26:	f7fc fdbb 	bl	8001aa0 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e1a1      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f38:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f44:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4927      	ldr	r1, [pc, #156]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	600b      	str	r3, [r1, #0]
 8004f58:	e015      	b.n	8004f86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f5a:	4b26      	ldr	r3, [pc, #152]	@ (8004ff4 <HAL_RCC_OscConfig+0x270>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f60:	f7fc fd9e 	bl	8001aa0 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f68:	f7fc fd9a 	bl	8001aa0 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e180      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d03a      	beq.n	8005008 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d019      	beq.n	8004fce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9a:	4b17      	ldr	r3, [pc, #92]	@ (8004ff8 <HAL_RCC_OscConfig+0x274>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa0:	f7fc fd7e 	bl	8001aa0 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa8:	f7fc fd7a 	bl	8001aa0 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e160      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff0 <HAL_RCC_OscConfig+0x26c>)
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	f000 faba 	bl	8005540 <RCC_Delay>
 8004fcc:	e01c      	b.n	8005008 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fce:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff8 <HAL_RCC_OscConfig+0x274>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd4:	f7fc fd64 	bl	8001aa0 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fda:	e00f      	b.n	8004ffc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fdc:	f7fc fd60 	bl	8001aa0 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d908      	bls.n	8004ffc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e146      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	42420000 	.word	0x42420000
 8004ff8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ffc:	4b92      	ldr	r3, [pc, #584]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e9      	bne.n	8004fdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80a6 	beq.w	8005162 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005016:	2300      	movs	r3, #0
 8005018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800501a:	4b8b      	ldr	r3, [pc, #556]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10d      	bne.n	8005042 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005026:	4b88      	ldr	r3, [pc, #544]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	4a87      	ldr	r2, [pc, #540]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 800502c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005030:	61d3      	str	r3, [r2, #28]
 8005032:	4b85      	ldr	r3, [pc, #532]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800503e:	2301      	movs	r3, #1
 8005040:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005042:	4b82      	ldr	r3, [pc, #520]	@ (800524c <HAL_RCC_OscConfig+0x4c8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d118      	bne.n	8005080 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800504e:	4b7f      	ldr	r3, [pc, #508]	@ (800524c <HAL_RCC_OscConfig+0x4c8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a7e      	ldr	r2, [pc, #504]	@ (800524c <HAL_RCC_OscConfig+0x4c8>)
 8005054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800505a:	f7fc fd21 	bl	8001aa0 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005062:	f7fc fd1d 	bl	8001aa0 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b64      	cmp	r3, #100	@ 0x64
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e103      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005074:	4b75      	ldr	r3, [pc, #468]	@ (800524c <HAL_RCC_OscConfig+0x4c8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0f0      	beq.n	8005062 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d106      	bne.n	8005096 <HAL_RCC_OscConfig+0x312>
 8005088:	4b6f      	ldr	r3, [pc, #444]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	4a6e      	ldr	r2, [pc, #440]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	6213      	str	r3, [r2, #32]
 8005094:	e02d      	b.n	80050f2 <HAL_RCC_OscConfig+0x36e>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10c      	bne.n	80050b8 <HAL_RCC_OscConfig+0x334>
 800509e:	4b6a      	ldr	r3, [pc, #424]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	4a69      	ldr	r2, [pc, #420]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	6213      	str	r3, [r2, #32]
 80050aa:	4b67      	ldr	r3, [pc, #412]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	4a66      	ldr	r2, [pc, #408]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80050b0:	f023 0304 	bic.w	r3, r3, #4
 80050b4:	6213      	str	r3, [r2, #32]
 80050b6:	e01c      	b.n	80050f2 <HAL_RCC_OscConfig+0x36e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	2b05      	cmp	r3, #5
 80050be:	d10c      	bne.n	80050da <HAL_RCC_OscConfig+0x356>
 80050c0:	4b61      	ldr	r3, [pc, #388]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	4a60      	ldr	r2, [pc, #384]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80050c6:	f043 0304 	orr.w	r3, r3, #4
 80050ca:	6213      	str	r3, [r2, #32]
 80050cc:	4b5e      	ldr	r3, [pc, #376]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	4a5d      	ldr	r2, [pc, #372]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	6213      	str	r3, [r2, #32]
 80050d8:	e00b      	b.n	80050f2 <HAL_RCC_OscConfig+0x36e>
 80050da:	4b5b      	ldr	r3, [pc, #364]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	4a5a      	ldr	r2, [pc, #360]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	6213      	str	r3, [r2, #32]
 80050e6:	4b58      	ldr	r3, [pc, #352]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	4a57      	ldr	r2, [pc, #348]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	f023 0304 	bic.w	r3, r3, #4
 80050f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d015      	beq.n	8005126 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050fa:	f7fc fcd1 	bl	8001aa0 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005100:	e00a      	b.n	8005118 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005102:	f7fc fccd 	bl	8001aa0 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005110:	4293      	cmp	r3, r2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e0b1      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005118:	4b4b      	ldr	r3, [pc, #300]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0ee      	beq.n	8005102 <HAL_RCC_OscConfig+0x37e>
 8005124:	e014      	b.n	8005150 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005126:	f7fc fcbb 	bl	8001aa0 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800512c:	e00a      	b.n	8005144 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512e:	f7fc fcb7 	bl	8001aa0 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800513c:	4293      	cmp	r3, r2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e09b      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005144:	4b40      	ldr	r3, [pc, #256]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1ee      	bne.n	800512e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d105      	bne.n	8005162 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005156:	4b3c      	ldr	r3, [pc, #240]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	4a3b      	ldr	r2, [pc, #236]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 800515c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005160:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 8087 	beq.w	800527a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800516c:	4b36      	ldr	r3, [pc, #216]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f003 030c 	and.w	r3, r3, #12
 8005174:	2b08      	cmp	r3, #8
 8005176:	d061      	beq.n	800523c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d146      	bne.n	800520e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005180:	4b33      	ldr	r3, [pc, #204]	@ (8005250 <HAL_RCC_OscConfig+0x4cc>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005186:	f7fc fc8b 	bl	8001aa0 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518e:	f7fc fc87 	bl	8001aa0 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e06d      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a0:	4b29      	ldr	r3, [pc, #164]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f0      	bne.n	800518e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051b4:	d108      	bne.n	80051c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051b6:	4b24      	ldr	r3, [pc, #144]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	4921      	ldr	r1, [pc, #132]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a19      	ldr	r1, [r3, #32]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	430b      	orrs	r3, r1
 80051da:	491b      	ldr	r1, [pc, #108]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005250 <HAL_RCC_OscConfig+0x4cc>)
 80051e2:	2201      	movs	r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e6:	f7fc fc5b 	bl	8001aa0 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ee:	f7fc fc57 	bl	8001aa0 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e03d      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005200:	4b11      	ldr	r3, [pc, #68]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f0      	beq.n	80051ee <HAL_RCC_OscConfig+0x46a>
 800520c:	e035      	b.n	800527a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520e:	4b10      	ldr	r3, [pc, #64]	@ (8005250 <HAL_RCC_OscConfig+0x4cc>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7fc fc44 	bl	8001aa0 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800521c:	f7fc fc40 	bl	8001aa0 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e026      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800522e:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <HAL_RCC_OscConfig+0x4c4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x498>
 800523a:	e01e      	b.n	800527a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d107      	bne.n	8005254 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e019      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
 8005248:	40021000 	.word	0x40021000
 800524c:	40007000 	.word	0x40007000
 8005250:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005254:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <HAL_RCC_OscConfig+0x500>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	429a      	cmp	r2, r3
 8005266:	d106      	bne.n	8005276 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d001      	beq.n	800527a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40021000 	.word	0x40021000

08005288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0d0      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800529c:	4b6a      	ldr	r3, [pc, #424]	@ (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d910      	bls.n	80052cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b67      	ldr	r3, [pc, #412]	@ (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f023 0207 	bic.w	r2, r3, #7
 80052b2:	4965      	ldr	r1, [pc, #404]	@ (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b63      	ldr	r3, [pc, #396]	@ (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0b8      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d020      	beq.n	800531a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052e4:	4b59      	ldr	r3, [pc, #356]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a58      	ldr	r2, [pc, #352]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80052ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052fc:	4b53      	ldr	r3, [pc, #332]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	4a52      	ldr	r2, [pc, #328]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005302:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005306:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005308:	4b50      	ldr	r3, [pc, #320]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	494d      	ldr	r1, [pc, #308]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005316:	4313      	orrs	r3, r2
 8005318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d040      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d107      	bne.n	800533e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	4b47      	ldr	r3, [pc, #284]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d115      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e07f      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005346:	4b41      	ldr	r3, [pc, #260]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e073      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005356:	4b3d      	ldr	r3, [pc, #244]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e06b      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005366:	4b39      	ldr	r3, [pc, #228]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f023 0203 	bic.w	r2, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4936      	ldr	r1, [pc, #216]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005374:	4313      	orrs	r3, r2
 8005376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005378:	f7fc fb92 	bl	8001aa0 <HAL_GetTick>
 800537c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	e00a      	b.n	8005396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005380:	f7fc fb8e 	bl	8001aa0 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e053      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005396:	4b2d      	ldr	r3, [pc, #180]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f003 020c 	and.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d1eb      	bne.n	8005380 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053a8:	4b27      	ldr	r3, [pc, #156]	@ (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d210      	bcs.n	80053d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b6:	4b24      	ldr	r3, [pc, #144]	@ (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 0207 	bic.w	r2, r3, #7
 80053be:	4922      	ldr	r1, [pc, #136]	@ (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c6:	4b20      	ldr	r3, [pc, #128]	@ (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e032      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e4:	4b19      	ldr	r3, [pc, #100]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4916      	ldr	r1, [pc, #88]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005402:	4b12      	ldr	r3, [pc, #72]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	490e      	ldr	r1, [pc, #56]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005412:	4313      	orrs	r3, r2
 8005414:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005416:	f000 f821 	bl	800545c <HAL_RCC_GetSysClockFreq>
 800541a:	4602      	mov	r2, r0
 800541c:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	091b      	lsrs	r3, r3, #4
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	490a      	ldr	r1, [pc, #40]	@ (8005450 <HAL_RCC_ClockConfig+0x1c8>)
 8005428:	5ccb      	ldrb	r3, [r1, r3]
 800542a:	fa22 f303 	lsr.w	r3, r2, r3
 800542e:	4a09      	ldr	r2, [pc, #36]	@ (8005454 <HAL_RCC_ClockConfig+0x1cc>)
 8005430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005432:	4b09      	ldr	r3, [pc, #36]	@ (8005458 <HAL_RCC_ClockConfig+0x1d0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7fc faf0 	bl	8001a1c <HAL_InitTick>

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40022000 	.word	0x40022000
 800544c:	40021000 	.word	0x40021000
 8005450:	0800c858 	.word	0x0800c858
 8005454:	2000000c 	.word	0x2000000c
 8005458:	20000010 	.word	0x20000010

0800545c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	2300      	movs	r3, #0
 8005470:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005476:	4b1e      	ldr	r3, [pc, #120]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b04      	cmp	r3, #4
 8005484:	d002      	beq.n	800548c <HAL_RCC_GetSysClockFreq+0x30>
 8005486:	2b08      	cmp	r3, #8
 8005488:	d003      	beq.n	8005492 <HAL_RCC_GetSysClockFreq+0x36>
 800548a:	e027      	b.n	80054dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800548c:	4b19      	ldr	r3, [pc, #100]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800548e:	613b      	str	r3, [r7, #16]
      break;
 8005490:	e027      	b.n	80054e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	0c9b      	lsrs	r3, r3, #18
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	4a17      	ldr	r2, [pc, #92]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800549c:	5cd3      	ldrb	r3, [r2, r3]
 800549e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d010      	beq.n	80054cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054aa:	4b11      	ldr	r3, [pc, #68]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	0c5b      	lsrs	r3, r3, #17
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	4a11      	ldr	r2, [pc, #68]	@ (80054fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80054b6:	5cd3      	ldrb	r3, [r2, r3]
 80054b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a0d      	ldr	r2, [pc, #52]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80054be:	fb03 f202 	mul.w	r2, r3, r2
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e004      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005500 <HAL_RCC_GetSysClockFreq+0xa4>)
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	613b      	str	r3, [r7, #16]
      break;
 80054da:	e002      	b.n	80054e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054dc:	4b05      	ldr	r3, [pc, #20]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80054de:	613b      	str	r3, [r7, #16]
      break;
 80054e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054e2:	693b      	ldr	r3, [r7, #16]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	371c      	adds	r7, #28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40021000 	.word	0x40021000
 80054f4:	007a1200 	.word	0x007a1200
 80054f8:	0800c870 	.word	0x0800c870
 80054fc:	0800c880 	.word	0x0800c880
 8005500:	003d0900 	.word	0x003d0900

08005504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005508:	4b02      	ldr	r3, [pc, #8]	@ (8005514 <HAL_RCC_GetHCLKFreq+0x10>)
 800550a:	681b      	ldr	r3, [r3, #0]
}
 800550c:	4618      	mov	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr
 8005514:	2000000c 	.word	0x2000000c

08005518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800551c:	f7ff fff2 	bl	8005504 <HAL_RCC_GetHCLKFreq>
 8005520:	4602      	mov	r2, r0
 8005522:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	4903      	ldr	r1, [pc, #12]	@ (800553c <HAL_RCC_GetPCLK1Freq+0x24>)
 800552e:	5ccb      	ldrb	r3, [r1, r3]
 8005530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005534:	4618      	mov	r0, r3
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40021000 	.word	0x40021000
 800553c:	0800c868 	.word	0x0800c868

08005540 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005548:	4b0a      	ldr	r3, [pc, #40]	@ (8005574 <RCC_Delay+0x34>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a0a      	ldr	r2, [pc, #40]	@ (8005578 <RCC_Delay+0x38>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	0a5b      	lsrs	r3, r3, #9
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800555c:	bf00      	nop
  }
  while (Delay --);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1e5a      	subs	r2, r3, #1
 8005562:	60fa      	str	r2, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1f9      	bne.n	800555c <RCC_Delay+0x1c>
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr
 8005574:	2000000c 	.word	0x2000000c
 8005578:	10624dd3 	.word	0x10624dd3

0800557c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d07d      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005598:	2300      	movs	r3, #0
 800559a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800559c:	4b4f      	ldr	r3, [pc, #316]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10d      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a8:	4b4c      	ldr	r3, [pc, #304]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	4a4b      	ldr	r2, [pc, #300]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055b2:	61d3      	str	r3, [r2, #28]
 80055b4:	4b49      	ldr	r3, [pc, #292]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c0:	2301      	movs	r3, #1
 80055c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c4:	4b46      	ldr	r3, [pc, #280]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d118      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055d0:	4b43      	ldr	r3, [pc, #268]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a42      	ldr	r2, [pc, #264]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055dc:	f7fc fa60 	bl	8001aa0 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e2:	e008      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e4:	f7fc fa5c 	bl	8001aa0 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b64      	cmp	r3, #100	@ 0x64
 80055f0:	d901      	bls.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e06d      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f6:	4b3a      	ldr	r3, [pc, #232]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005602:	4b36      	ldr	r3, [pc, #216]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800560a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d02e      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	429a      	cmp	r2, r3
 800561e:	d027      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005620:	4b2e      	ldr	r3, [pc, #184]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005628:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800562a:	4b2e      	ldr	r3, [pc, #184]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800562c:	2201      	movs	r2, #1
 800562e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005630:	4b2c      	ldr	r3, [pc, #176]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005636:	4a29      	ldr	r2, [pc, #164]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d014      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005646:	f7fc fa2b 	bl	8001aa0 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564c:	e00a      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564e:	f7fc fa27 	bl	8001aa0 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800565c:	4293      	cmp	r3, r2
 800565e:	d901      	bls.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e036      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005664:	4b1d      	ldr	r3, [pc, #116]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0ee      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005670:	4b1a      	ldr	r3, [pc, #104]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	4917      	ldr	r1, [pc, #92]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567e:	4313      	orrs	r3, r2
 8005680:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005682:	7dfb      	ldrb	r3, [r7, #23]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d105      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005688:	4b14      	ldr	r3, [pc, #80]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	4a13      	ldr	r2, [pc, #76]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005692:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056a0:	4b0e      	ldr	r3, [pc, #56]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	490b      	ldr	r1, [pc, #44]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056be:	4b07      	ldr	r3, [pc, #28]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	4904      	ldr	r1, [pc, #16]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40021000 	.word	0x40021000
 80056e0:	40007000 	.word	0x40007000
 80056e4:	42420440 	.word	0x42420440

080056e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	4638      	mov	r0, r7
 80056f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr

08005702 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005712:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005716:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	b29a      	uxth	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr

0800572e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005736:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800573a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	b29b      	uxth	r3, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	b29b      	uxth	r3, r3
 800574c:	4013      	ands	r3, r2
 800574e:	b29a      	uxth	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr

08005762 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr

0800577a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	4638      	mov	r0, r7
 8005784:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b09d      	sub	sp, #116	@ 0x74
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80057d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057da:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	78db      	ldrb	r3, [r3, #3]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d81f      	bhi.n	8005826 <USB_ActivateEndpoint+0x72>
 80057e6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ec <USB_ActivateEndpoint+0x38>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	080057fd 	.word	0x080057fd
 80057f0:	08005819 	.word	0x08005819
 80057f4:	0800582f 	.word	0x0800582f
 80057f8:	0800580b 	.word	0x0800580b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80057fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005800:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005804:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005808:	e012      	b.n	8005830 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800580a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800580e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005812:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005816:	e00b      	b.n	8005830 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005818:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800581c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005820:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005824:	e004      	b.n	8005830 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800582c:	e000      	b.n	8005830 <USB_ActivateEndpoint+0x7c>
      break;
 800582e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800583e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005842:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800584a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800584e:	b29b      	uxth	r3, r3
 8005850:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005868:	b29b      	uxth	r3, r3
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	7812      	ldrb	r2, [r2, #0]
 800586e:	4313      	orrs	r3, r2
 8005870:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	441a      	add	r2, r3
 800587e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800588a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800588e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005892:	b29b      	uxth	r3, r3
 8005894:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	7b1b      	ldrb	r3, [r3, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f040 8178 	bne.w	8005b90 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8084 	beq.w	80059b2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	4413      	add	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	011a      	lsls	r2, r3, #4
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	88db      	ldrh	r3, [r3, #6]
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	827b      	strh	r3, [r7, #18]
 80058ec:	8a7b      	ldrh	r3, [r7, #18]
 80058ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d01b      	beq.n	800592e <USB_ActivateEndpoint+0x17a>
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590c:	823b      	strh	r3, [r7, #16]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	441a      	add	r2, r3
 8005918:	8a3b      	ldrh	r3, [r7, #16]
 800591a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800591e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005926:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800592a:	b29b      	uxth	r3, r3
 800592c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	78db      	ldrb	r3, [r3, #3]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d020      	beq.n	8005978 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800594c:	81bb      	strh	r3, [r7, #12]
 800594e:	89bb      	ldrh	r3, [r7, #12]
 8005950:	f083 0320 	eor.w	r3, r3, #32
 8005954:	81bb      	strh	r3, [r7, #12]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	441a      	add	r2, r3
 8005960:	89bb      	ldrh	r3, [r7, #12]
 8005962:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005966:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800596a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800596e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005972:	b29b      	uxth	r3, r3
 8005974:	8013      	strh	r3, [r2, #0]
 8005976:	e2d5      	b.n	8005f24 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29b      	uxth	r3, r3
 8005986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800598a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800598e:	81fb      	strh	r3, [r7, #14]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	441a      	add	r2, r3
 800599a:	89fb      	ldrh	r3, [r7, #14]
 800599c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	8013      	strh	r3, [r2, #0]
 80059b0:	e2b8      	b.n	8005f24 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059bc:	b29b      	uxth	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c2:	4413      	add	r3, r2
 80059c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	011a      	lsls	r2, r3, #4
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80059d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	88db      	ldrh	r3, [r3, #6]
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	b29b      	uxth	r3, r3
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f6:	4413      	add	r3, r2
 80059f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	011a      	lsls	r2, r3, #4
 8005a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a02:	4413      	add	r3, r2
 8005a04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a20:	d91d      	bls.n	8005a5e <USB_ActivateEndpoint+0x2aa>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d102      	bne.n	8005a3c <USB_ActivateEndpoint+0x288>
 8005a36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	029b      	lsls	r3, r3, #10
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e026      	b.n	8005aac <USB_ActivateEndpoint+0x2f8>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <USB_ActivateEndpoint+0x2c8>
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	e017      	b.n	8005aac <USB_ActivateEndpoint+0x2f8>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <USB_ActivateEndpoint+0x2e2>
 8005a90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a92:	3301      	adds	r3, #1
 8005a94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	029b      	lsls	r3, r3, #10
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aaa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005aba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01b      	beq.n	8005afc <USB_ActivateEndpoint+0x348>
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ada:	843b      	strh	r3, [r7, #32]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	441a      	add	r2, r3
 8005ae6:	8c3b      	ldrh	r3, [r7, #32]
 8005ae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005af0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d124      	bne.n	8005b4e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1a:	83bb      	strh	r3, [r7, #28]
 8005b1c:	8bbb      	ldrh	r3, [r7, #28]
 8005b1e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b22:	83bb      	strh	r3, [r7, #28]
 8005b24:	8bbb      	ldrh	r3, [r7, #28]
 8005b26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b2a:	83bb      	strh	r3, [r7, #28]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	441a      	add	r2, r3
 8005b36:	8bbb      	ldrh	r3, [r7, #28]
 8005b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	8013      	strh	r3, [r2, #0]
 8005b4c:	e1ea      	b.n	8005f24 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b64:	83fb      	strh	r3, [r7, #30]
 8005b66:	8bfb      	ldrh	r3, [r7, #30]
 8005b68:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b6c:	83fb      	strh	r3, [r7, #30]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	441a      	add	r2, r3
 8005b78:	8bfb      	ldrh	r3, [r7, #30]
 8005b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	8013      	strh	r3, [r2, #0]
 8005b8e:	e1c9      	b.n	8005f24 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	78db      	ldrb	r3, [r3, #3]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d11e      	bne.n	8005bd6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bae:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	8013      	strh	r3, [r2, #0]
 8005bd4:	e01d      	b.n	8005c12 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bec:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	441a      	add	r2, r3
 8005bfa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005bfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c22:	4413      	add	r3, r2
 8005c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	011a      	lsls	r2, r3, #4
 8005c2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	891b      	ldrh	r3, [r3, #8]
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	461a      	mov	r2, r3
 8005c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c56:	4413      	add	r3, r2
 8005c58:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	011a      	lsls	r2, r3, #4
 8005c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005c68:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	895b      	ldrh	r3, [r3, #10]
 8005c6e:	085b      	lsrs	r3, r3, #1
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c78:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	785b      	ldrb	r3, [r3, #1]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f040 8093 	bne.w	8005daa <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005c94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01b      	beq.n	8005cd8 <USB_ActivateEndpoint+0x524>
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	441a      	add	r2, r3
 8005cc2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005cc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005ce6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01b      	beq.n	8005d28 <USB_ActivateEndpoint+0x574>
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d06:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	441a      	add	r2, r3
 8005d12:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d40:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d42:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005d46:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d48:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d4a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d4e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	441a      	add	r2, r3
 8005d5a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d86:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	441a      	add	r2, r3
 8005d92:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	8013      	strh	r3, [r2, #0]
 8005da8:	e0bc      	b.n	8005f24 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005dba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d01d      	beq.n	8005e02 <USB_ActivateEndpoint+0x64e>
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ddc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005dee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005df2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005df6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005e12:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01d      	beq.n	8005e5a <USB_ActivateEndpoint+0x6a6>
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e34:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	441a      	add	r2, r3
 8005e42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	78db      	ldrb	r3, [r3, #3]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d024      	beq.n	8005eac <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e78:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005e7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005e80:	f083 0320 	eor.w	r3, r3, #32
 8005e84:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	441a      	add	r2, r3
 8005e92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005e96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	8013      	strh	r3, [r2, #0]
 8005eaa:	e01d      	b.n	8005ee8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ec2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	441a      	add	r2, r3
 8005ed0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005edc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	441a      	add	r2, r3
 8005f0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005f24:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3774      	adds	r7, #116	@ 0x74
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bc80      	pop	{r7}
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop

08005f34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b08d      	sub	sp, #52	@ 0x34
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	7b1b      	ldrb	r3, [r3, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f040 808e 	bne.w	8006064 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d044      	beq.n	8005fda <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	81bb      	strh	r3, [r7, #12]
 8005f5e:	89bb      	ldrh	r3, [r7, #12]
 8005f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01b      	beq.n	8005fa0 <USB_DeactivateEndpoint+0x6c>
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f7e:	817b      	strh	r3, [r7, #10]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	441a      	add	r2, r3
 8005f8a:	897b      	ldrh	r3, [r7, #10]
 8005f8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fb6:	813b      	strh	r3, [r7, #8]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	893b      	ldrh	r3, [r7, #8]
 8005fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8013      	strh	r3, [r2, #0]
 8005fd8:	e192      	b.n	8006300 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	827b      	strh	r3, [r7, #18]
 8005fe8:	8a7b      	ldrh	r3, [r7, #18]
 8005fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01b      	beq.n	800602a <USB_DeactivateEndpoint+0xf6>
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006008:	823b      	strh	r3, [r7, #16]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	441a      	add	r2, r3
 8006014:	8a3b      	ldrh	r3, [r7, #16]
 8006016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800601a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800601e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006026:	b29b      	uxth	r3, r3
 8006028:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800603c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006040:	81fb      	strh	r3, [r7, #14]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	441a      	add	r2, r3
 800604c:	89fb      	ldrh	r3, [r7, #14]
 800604e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800605a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800605e:	b29b      	uxth	r3, r3
 8006060:	8013      	strh	r3, [r2, #0]
 8006062:	e14d      	b.n	8006300 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	2b00      	cmp	r3, #0
 800606a:	f040 80a5 	bne.w	80061b8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	843b      	strh	r3, [r7, #32]
 800607c:	8c3b      	ldrh	r3, [r7, #32]
 800607e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d01b      	beq.n	80060be <USB_DeactivateEndpoint+0x18a>
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800609c:	83fb      	strh	r3, [r7, #30]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	441a      	add	r2, r3
 80060a8:	8bfb      	ldrh	r3, [r7, #30]
 80060aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	83bb      	strh	r3, [r7, #28]
 80060cc:	8bbb      	ldrh	r3, [r7, #28]
 80060ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d01b      	beq.n	800610e <USB_DeactivateEndpoint+0x1da>
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ec:	837b      	strh	r3, [r7, #26]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	441a      	add	r2, r3
 80060f8:	8b7b      	ldrh	r3, [r7, #26]
 80060fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006106:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800610a:	b29b      	uxth	r3, r3
 800610c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006124:	833b      	strh	r3, [r7, #24]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	441a      	add	r2, r3
 8006130:	8b3b      	ldrh	r3, [r7, #24]
 8006132:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006136:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800613a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800613e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006142:	b29b      	uxth	r3, r3
 8006144:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800615c:	82fb      	strh	r3, [r7, #22]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	441a      	add	r2, r3
 8006168:	8afb      	ldrh	r3, [r7, #22]
 800616a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800616e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800617a:	b29b      	uxth	r3, r3
 800617c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006194:	82bb      	strh	r3, [r7, #20]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	8abb      	ldrh	r3, [r7, #20]
 80061a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	8013      	strh	r3, [r2, #0]
 80061b6:	e0a3      	b.n	8006300 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80061c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80061c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01b      	beq.n	8006208 <USB_DeactivateEndpoint+0x2d4>
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	441a      	add	r2, r3
 80061f2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80061f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006204:	b29b      	uxth	r3, r3
 8006206:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006216:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01b      	beq.n	8006258 <USB_DeactivateEndpoint+0x324>
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006236:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	441a      	add	r2, r3
 8006242:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800624c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006250:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006254:	b29b      	uxth	r3, r3
 8006256:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800626a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800627c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006284:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	441a      	add	r2, r3
 80062b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062de:	847b      	strh	r3, [r7, #34]	@ 0x22
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	441a      	add	r2, r3
 80062ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3734      	adds	r7, #52	@ 0x34
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr

0800630c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b0c2      	sub	sp, #264	@ 0x108
 8006310:	af00      	add	r7, sp, #0
 8006312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006316:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800631a:	6018      	str	r0, [r3, #0]
 800631c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006324:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	2b01      	cmp	r3, #1
 8006334:	f040 86b7 	bne.w	80070a6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	429a      	cmp	r2, r3
 8006352:	d908      	bls.n	8006366 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006364:	e007      	b.n	8006376 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	7b1b      	ldrb	r3, [r3, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d13a      	bne.n	80063fc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6959      	ldr	r1, [r3, #20]
 8006392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	88da      	ldrh	r2, [r3, #6]
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80063ac:	6800      	ldr	r0, [r0, #0]
 80063ae:	f001 fc9c 	bl	8007cea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4413      	add	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]
 80063d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	011a      	lsls	r2, r3, #4
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	4413      	add	r3, r2
 80063e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	801a      	strh	r2, [r3, #0]
 80063f8:	f000 be1f 	b.w	800703a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80063fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	78db      	ldrb	r3, [r3, #3]
 8006408:	2b02      	cmp	r3, #2
 800640a:	f040 8462 	bne.w	8006cd2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800640e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6a1a      	ldr	r2, [r3, #32]
 800641a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	429a      	cmp	r2, r3
 8006428:	f240 83df 	bls.w	8006bea <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800642c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006430:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800644e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006452:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	441a      	add	r2, r3
 8006470:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800647c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006484:	b29b      	uxth	r3, r3
 8006486:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6a1a      	ldr	r2, [r3, #32]
 8006494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006498:	1ad2      	subs	r2, r2, r3
 800649a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80064a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 81c7 	beq.w	800685c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	785b      	ldrb	r3, [r3, #1]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d177      	bne.n	80065da <USB_EPStartXfer+0x2ce>
 80064ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006504:	b29b      	uxth	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650a:	4413      	add	r3, r2
 800650c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800650e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	011a      	lsls	r2, r3, #4
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	4413      	add	r3, r2
 8006520:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006530:	b29a      	uxth	r2, r3
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	801a      	strh	r2, [r3, #0]
 8006536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653a:	2b3e      	cmp	r3, #62	@ 0x3e
 800653c:	d921      	bls.n	8006582 <USB_EPStartXfer+0x276>
 800653e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <USB_EPStartXfer+0x252>
 8006554:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006558:	3b01      	subs	r3, #1
 800655a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29a      	uxth	r2, r3
 8006564:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006568:	b29b      	uxth	r3, r3
 800656a:	029b      	lsls	r3, r3, #10
 800656c:	b29b      	uxth	r3, r3
 800656e:	4313      	orrs	r3, r2
 8006570:	b29b      	uxth	r3, r3
 8006572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657a:	b29a      	uxth	r2, r3
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	e050      	b.n	8006624 <USB_EPStartXfer+0x318>
 8006582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10a      	bne.n	80065a0 <USB_EPStartXfer+0x294>
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006598:	b29a      	uxth	r2, r3
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	801a      	strh	r2, [r3, #0]
 800659e:	e041      	b.n	8006624 <USB_EPStartXfer+0x318>
 80065a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a4:	085b      	lsrs	r3, r3, #1
 80065a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80065aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <USB_EPStartXfer+0x2b4>
 80065b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80065ba:	3301      	adds	r3, #1
 80065bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80065c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	029b      	lsls	r3, r3, #10
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	4313      	orrs	r3, r2
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d6:	801a      	strh	r2, [r3, #0]
 80065d8:	e024      	b.n	8006624 <USB_EPStartXfer+0x318>
 80065da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d11c      	bne.n	8006624 <USB_EPStartXfer+0x318>
 80065ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	4413      	add	r3, r2
 8006600:	633b      	str	r3, [r7, #48]	@ 0x30
 8006602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	011a      	lsls	r2, r3, #4
 8006610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006612:	4413      	add	r3, r2
 8006614:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800661a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661e:	b29a      	uxth	r2, r3
 8006620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006622:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	895b      	ldrh	r3, [r3, #10]
 8006630:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6959      	ldr	r1, [r3, #20]
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006644:	b29b      	uxth	r3, r3
 8006646:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800664a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800664e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006652:	6800      	ldr	r0, [r0, #0]
 8006654:	f001 fb49 	bl	8007cea <USB_WritePMA>
            ep->xfer_buff += len;
 8006658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695a      	ldr	r2, [r3, #20]
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006668:	441a      	add	r2, r3
 800666a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6a1a      	ldr	r2, [r3, #32]
 8006682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	429a      	cmp	r2, r3
 8006690:	d90f      	bls.n	80066b2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6a1a      	ldr	r2, [r3, #32]
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a2:	1ad2      	subs	r2, r2, r3
 80066a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	621a      	str	r2, [r3, #32]
 80066b0:	e00e      	b.n	80066d0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80066b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80066c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2200      	movs	r2, #0
 80066ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	785b      	ldrb	r3, [r3, #1]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d177      	bne.n	80067d0 <USB_EPStartXfer+0x4c4>
 80066e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	4413      	add	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	011a      	lsls	r2, r3, #4
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	4413      	add	r3, r2
 8006716:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	b29b      	uxth	r3, r3
 8006722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006726:	b29a      	uxth	r2, r3
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006730:	2b3e      	cmp	r3, #62	@ 0x3e
 8006732:	d921      	bls.n	8006778 <USB_EPStartXfer+0x46c>
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800673e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <USB_EPStartXfer+0x448>
 800674a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800674e:	3b01      	subs	r3, #1
 8006750:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29a      	uxth	r2, r3
 800675a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800675e:	b29b      	uxth	r3, r3
 8006760:	029b      	lsls	r3, r3, #10
 8006762:	b29b      	uxth	r3, r3
 8006764:	4313      	orrs	r3, r2
 8006766:	b29b      	uxth	r3, r3
 8006768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800676c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006770:	b29a      	uxth	r2, r3
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	e056      	b.n	8006826 <USB_EPStartXfer+0x51a>
 8006778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <USB_EPStartXfer+0x48a>
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	b29b      	uxth	r3, r3
 8006786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800678a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678e:	b29a      	uxth	r2, r3
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	e047      	b.n	8006826 <USB_EPStartXfer+0x51a>
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <USB_EPStartXfer+0x4aa>
 80067ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067b0:	3301      	adds	r3, #1
 80067b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	029b      	lsls	r3, r3, #10
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	4313      	orrs	r3, r2
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	e02a      	b.n	8006826 <USB_EPStartXfer+0x51a>
 80067d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	785b      	ldrb	r3, [r3, #1]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d122      	bne.n	8006826 <USB_EPStartXfer+0x51a>
 80067e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	623b      	str	r3, [r7, #32]
 80067ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	4413      	add	r3, r2
 8006802:	623b      	str	r3, [r7, #32]
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	011a      	lsls	r2, r3, #4
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	4413      	add	r3, r2
 8006816:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006820:	b29a      	uxth	r2, r3
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	891b      	ldrh	r3, [r3, #8]
 8006832:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6959      	ldr	r1, [r3, #20]
 8006842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006846:	b29b      	uxth	r3, r3
 8006848:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800684c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006850:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006854:	6800      	ldr	r0, [r0, #0]
 8006856:	f001 fa48 	bl	8007cea <USB_WritePMA>
 800685a:	e3ee      	b.n	800703a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800685c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d177      	bne.n	800695c <USB_EPStartXfer+0x650>
 800686c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006886:	b29b      	uxth	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800688c:	4413      	add	r3, r2
 800688e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	011a      	lsls	r2, r3, #4
 800689e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80068a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068b6:	801a      	strh	r2, [r3, #0]
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80068be:	d921      	bls.n	8006904 <USB_EPStartXfer+0x5f8>
 80068c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d104      	bne.n	80068e0 <USB_EPStartXfer+0x5d4>
 80068d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068da:	3b01      	subs	r3, #1
 80068dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	029b      	lsls	r3, r3, #10
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	4313      	orrs	r3, r2
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	e056      	b.n	80069b2 <USB_EPStartXfer+0x6a6>
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10a      	bne.n	8006922 <USB_EPStartXfer+0x616>
 800690c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691a:	b29a      	uxth	r2, r3
 800691c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800691e:	801a      	strh	r2, [r3, #0]
 8006920:	e047      	b.n	80069b2 <USB_EPStartXfer+0x6a6>
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006926:	085b      	lsrs	r3, r3, #1
 8006928:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800692c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <USB_EPStartXfer+0x636>
 8006938:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800693c:	3301      	adds	r3, #1
 800693e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	b29a      	uxth	r2, r3
 8006948:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800694c:	b29b      	uxth	r3, r3
 800694e:	029b      	lsls	r3, r3, #10
 8006950:	b29b      	uxth	r3, r3
 8006952:	4313      	orrs	r3, r2
 8006954:	b29a      	uxth	r2, r3
 8006956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006958:	801a      	strh	r2, [r3, #0]
 800695a:	e02a      	b.n	80069b2 <USB_EPStartXfer+0x6a6>
 800695c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d122      	bne.n	80069b2 <USB_EPStartXfer+0x6a6>
 800696c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	653b      	str	r3, [r7, #80]	@ 0x50
 8006978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006986:	b29b      	uxth	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800698c:	4413      	add	r3, r2
 800698e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	011a      	lsls	r2, r3, #4
 800699e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069a0:	4413      	add	r3, r2
 80069a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	891b      	ldrh	r3, [r3, #8]
 80069be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6959      	ldr	r1, [r3, #20]
 80069ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80069d8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80069dc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80069e0:	6800      	ldr	r0, [r0, #0]
 80069e2:	f001 f982 	bl	8007cea <USB_WritePMA>
            ep->xfer_buff += len;
 80069e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695a      	ldr	r2, [r3, #20]
 80069f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f6:	441a      	add	r2, r3
 80069f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6a1a      	ldr	r2, [r3, #32]
 8006a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d90f      	bls.n	8006a40 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a30:	1ad2      	subs	r2, r2, r3
 8006a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	621a      	str	r2, [r3, #32]
 8006a3e:	e00e      	b.n	8006a5e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d177      	bne.n	8006b6a <USB_EPStartXfer+0x85e>
 8006a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9a:	4413      	add	r3, r2
 8006a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	011a      	lsls	r2, r3, #4
 8006aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aae:	4413      	add	r3, r2
 8006ab0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aca:	2b3e      	cmp	r3, #62	@ 0x3e
 8006acc:	d921      	bls.n	8006b12 <USB_EPStartXfer+0x806>
 8006ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <USB_EPStartXfer+0x7e2>
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	029b      	lsls	r3, r3, #10
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	4313      	orrs	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	e050      	b.n	8006bb4 <USB_EPStartXfer+0x8a8>
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <USB_EPStartXfer+0x824>
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b2c:	801a      	strh	r2, [r3, #0]
 8006b2e:	e041      	b.n	8006bb4 <USB_EPStartXfer+0x8a8>
 8006b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b34:	085b      	lsrs	r3, r3, #1
 8006b36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <USB_EPStartXfer+0x844>
 8006b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	029b      	lsls	r3, r3, #10
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	4313      	orrs	r3, r2
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b66:	801a      	strh	r2, [r3, #0]
 8006b68:	e024      	b.n	8006bb4 <USB_EPStartXfer+0x8a8>
 8006b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d11c      	bne.n	8006bb4 <USB_EPStartXfer+0x8a8>
 8006b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b8e:	4413      	add	r3, r2
 8006b90:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	011a      	lsls	r2, r3, #4
 8006ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	895b      	ldrh	r3, [r3, #10]
 8006bc0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6959      	ldr	r1, [r3, #20]
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006bda:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006bde:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006be2:	6800      	ldr	r0, [r0, #0]
 8006be4:	f001 f881 	bl	8007cea <USB_WritePMA>
 8006be8:	e227      	b.n	800703a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c20:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c76:	4413      	add	r3, r2
 8006c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	011a      	lsls	r2, r3, #4
 8006c88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	891b      	ldrh	r3, [r3, #8]
 8006ca8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6959      	ldr	r1, [r3, #20]
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cc2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cc6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cca:	6800      	ldr	r0, [r0, #0]
 8006ccc:	f001 f80d 	bl	8007cea <USB_WritePMA>
 8006cd0:	e1b3      	b.n	800703a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6a1a      	ldr	r2, [r3, #32]
 8006cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce2:	1ad2      	subs	r2, r2, r3
 8006ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 80c6 	beq.w	8006ea4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	785b      	ldrb	r3, [r3, #1]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d177      	bne.n	8006e24 <USB_EPStartXfer+0xb18>
 8006d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d54:	4413      	add	r3, r2
 8006d56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	011a      	lsls	r2, r3, #4
 8006d66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d68:	4413      	add	r3, r2
 8006d6a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d84:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d86:	d921      	bls.n	8006dcc <USB_EPStartXfer+0xac0>
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d104      	bne.n	8006da8 <USB_EPStartXfer+0xa9c>
 8006d9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006da2:	3b01      	subs	r3, #1
 8006da4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006da8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	029b      	lsls	r3, r3, #10
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	4313      	orrs	r3, r2
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	e050      	b.n	8006e6e <USB_EPStartXfer+0xb62>
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10a      	bne.n	8006dea <USB_EPStartXfer+0xade>
 8006dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006de6:	801a      	strh	r2, [r3, #0]
 8006de8:	e041      	b.n	8006e6e <USB_EPStartXfer+0xb62>
 8006dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dee:	085b      	lsrs	r3, r3, #1
 8006df0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d004      	beq.n	8006e0a <USB_EPStartXfer+0xafe>
 8006e00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e04:	3301      	adds	r3, #1
 8006e06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	029b      	lsls	r3, r3, #10
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e20:	801a      	strh	r2, [r3, #0]
 8006e22:	e024      	b.n	8006e6e <USB_EPStartXfer+0xb62>
 8006e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d11c      	bne.n	8006e6e <USB_EPStartXfer+0xb62>
 8006e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	461a      	mov	r2, r3
 8006e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e48:	4413      	add	r3, r2
 8006e4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	011a      	lsls	r2, r3, #4
 8006e5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	895b      	ldrh	r3, [r3, #10]
 8006e7a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6959      	ldr	r1, [r3, #20]
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e94:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e98:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e9c:	6800      	ldr	r0, [r0, #0]
 8006e9e:	f000 ff24 	bl	8007cea <USB_WritePMA>
 8006ea2:	e0ca      	b.n	800703a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	785b      	ldrb	r3, [r3, #1]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d177      	bne.n	8006fa4 <USB_EPStartXfer+0xc98>
 8006eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ed4:	4413      	add	r3, r2
 8006ed6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	011a      	lsls	r2, r3, #4
 8006ee6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ee8:	4413      	add	r3, r2
 8006eea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006eee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006efe:	801a      	strh	r2, [r3, #0]
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f04:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f06:	d921      	bls.n	8006f4c <USB_EPStartXfer+0xc40>
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0c:	095b      	lsrs	r3, r3, #5
 8006f0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f16:	f003 031f 	and.w	r3, r3, #31
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d104      	bne.n	8006f28 <USB_EPStartXfer+0xc1c>
 8006f1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f22:	3b01      	subs	r3, #1
 8006f24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	029b      	lsls	r3, r3, #10
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	e05c      	b.n	8007006 <USB_EPStartXfer+0xcfa>
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <USB_EPStartXfer+0xc5e>
 8006f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	e04d      	b.n	8007006 <USB_EPStartXfer+0xcfa>
 8006f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d004      	beq.n	8006f8a <USB_EPStartXfer+0xc7e>
 8006f80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f84:	3301      	adds	r3, #1
 8006f86:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	029b      	lsls	r3, r3, #10
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fa0:	801a      	strh	r2, [r3, #0]
 8006fa2:	e030      	b.n	8007006 <USB_EPStartXfer+0xcfa>
 8006fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d128      	bne.n	8007006 <USB_EPStartXfer+0xcfa>
 8006fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fd8:	4413      	add	r3, r2
 8006fda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	011a      	lsls	r2, r3, #4
 8006fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ff6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007004:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	891b      	ldrh	r3, [r3, #8]
 8007012:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6959      	ldr	r1, [r3, #20]
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007026:	b29b      	uxth	r3, r3
 8007028:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800702c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007030:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007034:	6800      	ldr	r0, [r0, #0]
 8007036:	f000 fe58 	bl	8007cea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800703a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800705c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007060:	817b      	strh	r3, [r7, #10]
 8007062:	897b      	ldrh	r3, [r7, #10]
 8007064:	f083 0310 	eor.w	r3, r3, #16
 8007068:	817b      	strh	r3, [r7, #10]
 800706a:	897b      	ldrh	r3, [r7, #10]
 800706c:	f083 0320 	eor.w	r3, r3, #32
 8007070:	817b      	strh	r3, [r7, #10]
 8007072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007076:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	441a      	add	r2, r3
 800708c:	897b      	ldrh	r3, [r7, #10]
 800708e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007092:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007096:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800709a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800709e:	b29b      	uxth	r3, r3
 80070a0:	8013      	strh	r3, [r2, #0]
 80070a2:	f000 bcde 	b.w	8007a62 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80070a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	7b1b      	ldrb	r3, [r3, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f040 80bb 	bne.w	800722e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80070b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d917      	bls.n	8007104 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80070e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	699a      	ldr	r2, [r3, #24]
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f4:	1ad2      	subs	r2, r2, r3
 80070f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	619a      	str	r2, [r3, #24]
 8007102:	e00e      	b.n	8007122 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2200      	movs	r2, #0
 8007120:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800713e:	b29b      	uxth	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007146:	4413      	add	r3, r2
 8007148:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800714c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	011a      	lsls	r2, r3, #4
 800715a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800715e:	4413      	add	r3, r2
 8007160:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007164:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007168:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007174:	b29a      	uxth	r2, r3
 8007176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800717a:	801a      	strh	r2, [r3, #0]
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007180:	2b3e      	cmp	r3, #62	@ 0x3e
 8007182:	d924      	bls.n	80071ce <USB_EPStartXfer+0xec2>
 8007184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007188:	095b      	lsrs	r3, r3, #5
 800718a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800718e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2b00      	cmp	r3, #0
 8007198:	d104      	bne.n	80071a4 <USB_EPStartXfer+0xe98>
 800719a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800719e:	3b01      	subs	r3, #1
 80071a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	029b      	lsls	r3, r3, #10
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	4313      	orrs	r3, r2
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	f000 bc10 	b.w	80079ee <USB_EPStartXfer+0x16e2>
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10c      	bne.n	80071f0 <USB_EPStartXfer+0xee4>
 80071d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071ec:	801a      	strh	r2, [r3, #0]
 80071ee:	e3fe      	b.n	80079ee <USB_EPStartXfer+0x16e2>
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f4:	085b      	lsrs	r3, r3, #1
 80071f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d004      	beq.n	8007210 <USB_EPStartXfer+0xf04>
 8007206:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800720a:	3301      	adds	r3, #1
 800720c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b29a      	uxth	r2, r3
 8007218:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800721c:	b29b      	uxth	r3, r3
 800721e:	029b      	lsls	r3, r3, #10
 8007220:	b29b      	uxth	r3, r3
 8007222:	4313      	orrs	r3, r2
 8007224:	b29a      	uxth	r2, r3
 8007226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800722a:	801a      	strh	r2, [r3, #0]
 800722c:	e3df      	b.n	80079ee <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	78db      	ldrb	r3, [r3, #3]
 800723a:	2b02      	cmp	r3, #2
 800723c:	f040 8218 	bne.w	8007670 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f040 809d 	bne.w	800738c <USB_EPStartXfer+0x1080>
 8007252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007256:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007264:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800726e:	b29b      	uxth	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007276:	4413      	add	r3, r2
 8007278:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800727c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	011a      	lsls	r2, r3, #4
 800728a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800728e:	4413      	add	r3, r2
 8007290:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007294:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007298:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ba:	d92b      	bls.n	8007314 <USB_EPStartXfer+0x1008>
 80072bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	095b      	lsrs	r3, r3, #5
 80072ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 031f 	and.w	r3, r3, #31
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d104      	bne.n	80072ec <USB_EPStartXfer+0xfe0>
 80072e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072e6:	3b01      	subs	r3, #1
 80072e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	029b      	lsls	r3, r3, #10
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	4313      	orrs	r3, r2
 8007300:	b29b      	uxth	r3, r3
 8007302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730a:	b29a      	uxth	r2, r3
 800730c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007310:	801a      	strh	r2, [r3, #0]
 8007312:	e070      	b.n	80073f6 <USB_EPStartXfer+0x10ea>
 8007314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10c      	bne.n	800733e <USB_EPStartXfer+0x1032>
 8007324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007334:	b29a      	uxth	r2, r3
 8007336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800733a:	801a      	strh	r2, [r3, #0]
 800733c:	e05b      	b.n	80073f6 <USB_EPStartXfer+0x10ea>
 800733e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <USB_EPStartXfer+0x1062>
 8007364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007368:	3301      	adds	r3, #1
 800736a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800736e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29a      	uxth	r2, r3
 8007376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800737a:	b29b      	uxth	r3, r3
 800737c:	029b      	lsls	r3, r3, #10
 800737e:	b29b      	uxth	r3, r3
 8007380:	4313      	orrs	r3, r2
 8007382:	b29a      	uxth	r2, r3
 8007384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	e034      	b.n	80073f6 <USB_EPStartXfer+0x10ea>
 800738c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	785b      	ldrb	r3, [r3, #1]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d12c      	bne.n	80073f6 <USB_EPStartXfer+0x10ea>
 800739c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	461a      	mov	r2, r3
 80073bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073c0:	4413      	add	r3, r2
 80073c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	011a      	lsls	r2, r3, #4
 80073d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073d8:	4413      	add	r3, r2
 80073da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80073f4:	801a      	strh	r2, [r3, #0]
 80073f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f040 809d 	bne.w	8007550 <USB_EPStartXfer+0x1244>
 8007416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007428:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007432:	b29b      	uxth	r3, r3
 8007434:	461a      	mov	r2, r3
 8007436:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800743a:	4413      	add	r3, r2
 800743c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	011a      	lsls	r2, r3, #4
 800744e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007452:	4413      	add	r3, r2
 8007454:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800745c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007468:	b29a      	uxth	r2, r3
 800746a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800746e:	801a      	strh	r2, [r3, #0]
 8007470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b3e      	cmp	r3, #62	@ 0x3e
 800747e:	d92b      	bls.n	80074d8 <USB_EPStartXfer+0x11cc>
 8007480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	095b      	lsrs	r3, r3, #5
 800748e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f003 031f 	and.w	r3, r3, #31
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d104      	bne.n	80074b0 <USB_EPStartXfer+0x11a4>
 80074a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074aa:	3b01      	subs	r3, #1
 80074ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074bc:	b29b      	uxth	r3, r3
 80074be:	029b      	lsls	r3, r3, #10
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	4313      	orrs	r3, r2
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074d4:	801a      	strh	r2, [r3, #0]
 80074d6:	e069      	b.n	80075ac <USB_EPStartXfer+0x12a0>
 80074d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10c      	bne.n	8007502 <USB_EPStartXfer+0x11f6>
 80074e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074fe:	801a      	strh	r2, [r3, #0]
 8007500:	e054      	b.n	80075ac <USB_EPStartXfer+0x12a0>
 8007502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	085b      	lsrs	r3, r3, #1
 8007510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d004      	beq.n	8007532 <USB_EPStartXfer+0x1226>
 8007528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800752c:	3301      	adds	r3, #1
 800752e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007532:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29a      	uxth	r2, r3
 800753a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800753e:	b29b      	uxth	r3, r3
 8007540:	029b      	lsls	r3, r3, #10
 8007542:	b29b      	uxth	r3, r3
 8007544:	4313      	orrs	r3, r2
 8007546:	b29a      	uxth	r2, r3
 8007548:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800754c:	801a      	strh	r2, [r3, #0]
 800754e:	e02d      	b.n	80075ac <USB_EPStartXfer+0x12a0>
 8007550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	785b      	ldrb	r3, [r3, #1]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d125      	bne.n	80075ac <USB_EPStartXfer+0x12a0>
 8007560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007564:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800756e:	b29b      	uxth	r3, r3
 8007570:	461a      	mov	r2, r3
 8007572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007576:	4413      	add	r3, r2
 8007578:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800757c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	011a      	lsls	r2, r3, #4
 800758a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800758e:	4413      	add	r3, r2
 8007590:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007594:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075aa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80075ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8218 	beq.w	80079ee <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80075be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <USB_EPStartXfer+0x12ea>
 80075ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10d      	bne.n	8007612 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f040 81f5 	bne.w	80079ee <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007604:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	f040 81ee 	bne.w	80079ee <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007638:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800763c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007640:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	441a      	add	r2, r3
 8007656:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800765a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800765e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007666:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800766a:	b29b      	uxth	r3, r3
 800766c:	8013      	strh	r3, [r2, #0]
 800766e:	e1be      	b.n	80079ee <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	78db      	ldrb	r3, [r3, #3]
 800767c:	2b01      	cmp	r3, #1
 800767e:	f040 81b4 	bne.w	80079ea <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699a      	ldr	r2, [r3, #24]
 800768e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	429a      	cmp	r2, r3
 800769c:	d917      	bls.n	80076ce <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800769e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80076ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699a      	ldr	r2, [r3, #24]
 80076ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	619a      	str	r2, [r3, #24]
 80076cc:	e00e      	b.n	80076ec <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80076ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80076de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2200      	movs	r2, #0
 80076ea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80076ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	785b      	ldrb	r3, [r3, #1]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f040 8085 	bne.w	8007808 <USB_EPStartXfer+0x14fc>
 80076fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007702:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800770c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007710:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800771a:	b29b      	uxth	r3, r3
 800771c:	461a      	mov	r2, r3
 800771e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007722:	4413      	add	r3, r2
 8007724:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	011a      	lsls	r2, r3, #4
 8007736:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800773a:	4413      	add	r3, r2
 800773c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007740:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007750:	b29a      	uxth	r2, r3
 8007752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007756:	801a      	strh	r2, [r3, #0]
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775c:	2b3e      	cmp	r3, #62	@ 0x3e
 800775e:	d923      	bls.n	80077a8 <USB_EPStartXfer+0x149c>
 8007760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007764:	095b      	lsrs	r3, r3, #5
 8007766:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800776a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	2b00      	cmp	r3, #0
 8007774:	d104      	bne.n	8007780 <USB_EPStartXfer+0x1474>
 8007776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800777a:	3b01      	subs	r3, #1
 800777c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007780:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29a      	uxth	r2, r3
 8007788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800778c:	b29b      	uxth	r3, r3
 800778e:	029b      	lsls	r3, r3, #10
 8007790:	b29b      	uxth	r3, r3
 8007792:	4313      	orrs	r3, r2
 8007794:	b29b      	uxth	r3, r3
 8007796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800779e:	b29a      	uxth	r2, r3
 80077a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077a4:	801a      	strh	r2, [r3, #0]
 80077a6:	e060      	b.n	800786a <USB_EPStartXfer+0x155e>
 80077a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10c      	bne.n	80077ca <USB_EPStartXfer+0x14be>
 80077b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077c6:	801a      	strh	r2, [r3, #0]
 80077c8:	e04f      	b.n	800786a <USB_EPStartXfer+0x155e>
 80077ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ce:	085b      	lsrs	r3, r3, #1
 80077d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d004      	beq.n	80077ea <USB_EPStartXfer+0x14de>
 80077e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077e4:	3301      	adds	r3, #1
 80077e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	029b      	lsls	r3, r3, #10
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	4313      	orrs	r3, r2
 80077fe:	b29a      	uxth	r2, r3
 8007800:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007804:	801a      	strh	r2, [r3, #0]
 8007806:	e030      	b.n	800786a <USB_EPStartXfer+0x155e>
 8007808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d128      	bne.n	800786a <USB_EPStartXfer+0x155e>
 8007818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007834:	b29b      	uxth	r3, r3
 8007836:	461a      	mov	r2, r3
 8007838:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800783c:	4413      	add	r3, r2
 800783e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	011a      	lsls	r2, r3, #4
 8007850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007854:	4413      	add	r3, r2
 8007856:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800785a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007862:	b29a      	uxth	r2, r3
 8007864:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007868:	801a      	strh	r2, [r3, #0]
 800786a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 8085 	bne.w	8007994 <USB_EPStartXfer+0x1688>
 800788a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078ae:	4413      	add	r3, r2
 80078b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80078b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	011a      	lsls	r2, r3, #4
 80078c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078c6:	4413      	add	r3, r2
 80078c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80078ea:	d923      	bls.n	8007934 <USB_EPStartXfer+0x1628>
 80078ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f0:	095b      	lsrs	r3, r3, #5
 80078f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fa:	f003 031f 	and.w	r3, r3, #31
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d104      	bne.n	800790c <USB_EPStartXfer+0x1600>
 8007902:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007906:	3b01      	subs	r3, #1
 8007908:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800790c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29a      	uxth	r2, r3
 8007914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007918:	b29b      	uxth	r3, r3
 800791a:	029b      	lsls	r3, r3, #10
 800791c:	b29b      	uxth	r3, r3
 800791e:	4313      	orrs	r3, r2
 8007920:	b29b      	uxth	r3, r3
 8007922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792a:	b29a      	uxth	r2, r3
 800792c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007930:	801a      	strh	r2, [r3, #0]
 8007932:	e05c      	b.n	80079ee <USB_EPStartXfer+0x16e2>
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10c      	bne.n	8007956 <USB_EPStartXfer+0x164a>
 800793c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794c:	b29a      	uxth	r2, r3
 800794e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007952:	801a      	strh	r2, [r3, #0]
 8007954:	e04b      	b.n	80079ee <USB_EPStartXfer+0x16e2>
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795a:	085b      	lsrs	r3, r3, #1
 800795c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d004      	beq.n	8007976 <USB_EPStartXfer+0x166a>
 800796c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007970:	3301      	adds	r3, #1
 8007972:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007976:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29a      	uxth	r2, r3
 800797e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007982:	b29b      	uxth	r3, r3
 8007984:	029b      	lsls	r3, r3, #10
 8007986:	b29b      	uxth	r3, r3
 8007988:	4313      	orrs	r3, r2
 800798a:	b29a      	uxth	r2, r3
 800798c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007990:	801a      	strh	r2, [r3, #0]
 8007992:	e02c      	b.n	80079ee <USB_EPStartXfer+0x16e2>
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d124      	bne.n	80079ee <USB_EPStartXfer+0x16e2>
 80079a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079ba:	4413      	add	r3, r2
 80079bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	011a      	lsls	r2, r3, #4
 80079ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079d2:	4413      	add	r3, r2
 80079d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80079e6:	801a      	strh	r2, [r3, #0]
 80079e8:	e001      	b.n	80079ee <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e03a      	b.n	8007a64 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a14:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a1c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a2c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	441a      	add	r2, r3
 8007a4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	785b      	ldrb	r3, [r3, #1]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d020      	beq.n	8007ac2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a96:	81bb      	strh	r3, [r7, #12]
 8007a98:	89bb      	ldrh	r3, [r7, #12]
 8007a9a:	f083 0310 	eor.w	r3, r3, #16
 8007a9e:	81bb      	strh	r3, [r7, #12]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	441a      	add	r2, r3
 8007aaa:	89bb      	ldrh	r3, [r7, #12]
 8007aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	8013      	strh	r3, [r2, #0]
 8007ac0:	e01f      	b.n	8007b02 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ad8:	81fb      	strh	r3, [r7, #14]
 8007ada:	89fb      	ldrh	r3, [r7, #14]
 8007adc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ae0:	81fb      	strh	r3, [r7, #14]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	441a      	add	r2, r3
 8007aec:	89fb      	ldrh	r3, [r7, #14]
 8007aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr

08007b0e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b087      	sub	sp, #28
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	7b1b      	ldrb	r3, [r3, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f040 809d 	bne.w	8007c5c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d04c      	beq.n	8007bc4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	823b      	strh	r3, [r7, #16]
 8007b38:	8a3b      	ldrh	r3, [r7, #16]
 8007b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d01b      	beq.n	8007b7a <USB_EPClearStall+0x6c>
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b58:	81fb      	strh	r3, [r7, #14]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	441a      	add	r2, r3
 8007b64:	89fb      	ldrh	r3, [r7, #14]
 8007b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	78db      	ldrb	r3, [r3, #3]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d06c      	beq.n	8007c5c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b98:	81bb      	strh	r3, [r7, #12]
 8007b9a:	89bb      	ldrh	r3, [r7, #12]
 8007b9c:	f083 0320 	eor.w	r3, r3, #32
 8007ba0:	81bb      	strh	r3, [r7, #12]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	441a      	add	r2, r3
 8007bac:	89bb      	ldrh	r3, [r7, #12]
 8007bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	8013      	strh	r3, [r2, #0]
 8007bc2:	e04b      	b.n	8007c5c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	82fb      	strh	r3, [r7, #22]
 8007bd2:	8afb      	ldrh	r3, [r7, #22]
 8007bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01b      	beq.n	8007c14 <USB_EPClearStall+0x106>
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bf2:	82bb      	strh	r3, [r7, #20]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	441a      	add	r2, r3
 8007bfe:	8abb      	ldrh	r3, [r7, #20]
 8007c00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c2a:	827b      	strh	r3, [r7, #18]
 8007c2c:	8a7b      	ldrh	r3, [r7, #18]
 8007c2e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c32:	827b      	strh	r3, [r7, #18]
 8007c34:	8a7b      	ldrh	r3, [r7, #18]
 8007c36:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c3a:	827b      	strh	r3, [r7, #18]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	441a      	add	r2, r3
 8007c46:	8a7b      	ldrh	r3, [r7, #18]
 8007c48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bc80      	pop	{r7}
 8007c66:	4770      	bx	lr

08007c68 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d103      	bne.n	8007c82 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2280      	movs	r2, #128	@ 0x80
 8007c7e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr

08007c8e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr

08007ca2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr

08007cb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bc80      	pop	{r7}
 8007cd2:	4770      	bx	lr

08007cd4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr

08007cea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b08b      	sub	sp, #44	@ 0x2c
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	80fb      	strh	r3, [r7, #6]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d00:	88bb      	ldrh	r3, [r7, #4]
 8007d02:	3301      	adds	r3, #1
 8007d04:	085b      	lsrs	r3, r3, #1
 8007d06:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	005a      	lsls	r2, r3, #1
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d1c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d22:	e01e      	b.n	8007d62 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	b21a      	sxth	r2, r3
 8007d34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	b21b      	sxth	r3, r3
 8007d3c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	8a7a      	ldrh	r2, [r7, #18]
 8007d42:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	3302      	adds	r3, #2
 8007d48:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	3302      	adds	r3, #2
 8007d4e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	3301      	adds	r3, #1
 8007d54:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1dd      	bne.n	8007d24 <USB_WritePMA+0x3a>
  }
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	372c      	adds	r7, #44	@ 0x2c
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bc80      	pop	{r7}
 8007d72:	4770      	bx	lr

08007d74 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b08b      	sub	sp, #44	@ 0x2c
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4611      	mov	r1, r2
 8007d80:	461a      	mov	r2, r3
 8007d82:	460b      	mov	r3, r1
 8007d84:	80fb      	strh	r3, [r7, #6]
 8007d86:	4613      	mov	r3, r2
 8007d88:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007d8a:	88bb      	ldrh	r3, [r7, #4]
 8007d8c:	085b      	lsrs	r3, r3, #1
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d9a:	88fb      	ldrh	r3, [r7, #6]
 8007d9c:	005a      	lsls	r2, r3, #1
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007da6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dac:	e01b      	b.n	8007de6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	3302      	adds	r3, #2
 8007dba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	0a1b      	lsrs	r3, r3, #8
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	3302      	adds	r3, #2
 8007dde:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de2:	3b01      	subs	r3, #1
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e0      	bne.n	8007dae <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007dec:	88bb      	ldrh	r3, [r7, #4]
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d007      	beq.n	8007e08 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	701a      	strb	r2, [r3, #0]
  }
}
 8007e08:	bf00      	nop
 8007e0a:	372c      	adds	r7, #44	@ 0x2c
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr

08007e12 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	7c1b      	ldrb	r3, [r3, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d115      	bne.n	8007e56 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e2e:	2202      	movs	r2, #2
 8007e30:	2181      	movs	r1, #129	@ 0x81
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 fe81 	bl	8009b3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e42:	2202      	movs	r2, #2
 8007e44:	2101      	movs	r1, #1
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 fe77 	bl	8009b3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007e54:	e012      	b.n	8007e7c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e56:	2340      	movs	r3, #64	@ 0x40
 8007e58:	2202      	movs	r2, #2
 8007e5a:	2181      	movs	r1, #129	@ 0x81
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 fe6c 	bl	8009b3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e68:	2340      	movs	r3, #64	@ 0x40
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 fe63 	bl	8009b3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e7c:	2308      	movs	r3, #8
 8007e7e:	2203      	movs	r2, #3
 8007e80:	2182      	movs	r1, #130	@ 0x82
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 fe59 	bl	8009b3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e8e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007e92:	f001 ff79 	bl	8009d88 <USBD_static_malloc>
 8007e96:	4602      	mov	r2, r0
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	73fb      	strb	r3, [r7, #15]
 8007eac:	e026      	b.n	8007efc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eb4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	7c1b      	ldrb	r3, [r3, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ede:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 ff18 	bl	8009d1a <USBD_LL_PrepareReceive>
 8007eea:	e007      	b.n	8007efc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ef2:	2340      	movs	r3, #64	@ 0x40
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f001 ff0f 	bl	8009d1a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007f16:	2181      	movs	r1, #129	@ 0x81
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fe34 	bl	8009b86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f24:	2101      	movs	r1, #1
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 fe2d 	bl	8009b86 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f34:	2182      	movs	r1, #130	@ 0x82
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 fe25 	bl	8009b86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00e      	beq.n	8007f6a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f001 ff1f 	bl	8009da0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f84:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d039      	beq.n	8008012 <USBD_CDC_Setup+0x9e>
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	d17f      	bne.n	80080a2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	88db      	ldrh	r3, [r3, #6]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d029      	beq.n	8007ffe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b25b      	sxtb	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	da11      	bge.n	8007fd8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007fc0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	88d2      	ldrh	r2, [r2, #6]
 8007fc6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007fc8:	6939      	ldr	r1, [r7, #16]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	88db      	ldrh	r3, [r3, #6]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fa05 	bl	80093e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007fd6:	e06b      	b.n	80080b0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	785a      	ldrb	r2, [r3, #1]
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	88db      	ldrh	r3, [r3, #6]
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007fee:	6939      	ldr	r1, [r7, #16]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	88db      	ldrh	r3, [r3, #6]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 fa20 	bl	800943c <USBD_CtlPrepareRx>
      break;
 8007ffc:	e058      	b.n	80080b0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	7850      	ldrb	r0, [r2, #1]
 800800a:	2200      	movs	r2, #0
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	4798      	blx	r3
      break;
 8008010:	e04e      	b.n	80080b0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	785b      	ldrb	r3, [r3, #1]
 8008016:	2b0b      	cmp	r3, #11
 8008018:	d02e      	beq.n	8008078 <USBD_CDC_Setup+0x104>
 800801a:	2b0b      	cmp	r3, #11
 800801c:	dc38      	bgt.n	8008090 <USBD_CDC_Setup+0x11c>
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <USBD_CDC_Setup+0xb4>
 8008022:	2b0a      	cmp	r3, #10
 8008024:	d014      	beq.n	8008050 <USBD_CDC_Setup+0xdc>
 8008026:	e033      	b.n	8008090 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800802e:	2b03      	cmp	r3, #3
 8008030:	d107      	bne.n	8008042 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008032:	f107 030c 	add.w	r3, r7, #12
 8008036:	2202      	movs	r2, #2
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f001 f9d0 	bl	80093e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008040:	e02e      	b.n	80080a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 f961 	bl	800930c <USBD_CtlError>
            ret = USBD_FAIL;
 800804a:	2302      	movs	r3, #2
 800804c:	75fb      	strb	r3, [r7, #23]
          break;
 800804e:	e027      	b.n	80080a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008056:	2b03      	cmp	r3, #3
 8008058:	d107      	bne.n	800806a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800805a:	f107 030f 	add.w	r3, r7, #15
 800805e:	2201      	movs	r2, #1
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 f9bc 	bl	80093e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008068:	e01a      	b.n	80080a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 f94d 	bl	800930c <USBD_CtlError>
            ret = USBD_FAIL;
 8008072:	2302      	movs	r3, #2
 8008074:	75fb      	strb	r3, [r7, #23]
          break;
 8008076:	e013      	b.n	80080a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800807e:	2b03      	cmp	r3, #3
 8008080:	d00d      	beq.n	800809e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 f941 	bl	800930c <USBD_CtlError>
            ret = USBD_FAIL;
 800808a:	2302      	movs	r3, #2
 800808c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800808e:	e006      	b.n	800809e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 f93a 	bl	800930c <USBD_CtlError>
          ret = USBD_FAIL;
 8008098:	2302      	movs	r3, #2
 800809a:	75fb      	strb	r3, [r7, #23]
          break;
 800809c:	e000      	b.n	80080a0 <USBD_CDC_Setup+0x12c>
          break;
 800809e:	bf00      	nop
      }
      break;
 80080a0:	e006      	b.n	80080b0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 f931 	bl	800930c <USBD_CtlError>
      ret = USBD_FAIL;
 80080aa:	2302      	movs	r3, #2
 80080ac:	75fb      	strb	r3, [r7, #23]
      break;
 80080ae:	bf00      	nop
  }

  return ret;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	460b      	mov	r3, r1
 80080c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080cc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d03a      	beq.n	8008156 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80080e0:	78fa      	ldrb	r2, [r7, #3]
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	331c      	adds	r3, #28
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d029      	beq.n	800814a <USBD_CDC_DataIn+0x90>
 80080f6:	78fa      	ldrb	r2, [r7, #3]
 80080f8:	6879      	ldr	r1, [r7, #4]
 80080fa:	4613      	mov	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	440b      	add	r3, r1
 8008104:	331c      	adds	r3, #28
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	78f9      	ldrb	r1, [r7, #3]
 800810a:	68b8      	ldr	r0, [r7, #8]
 800810c:	460b      	mov	r3, r1
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	440b      	add	r3, r1
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	4403      	add	r3, r0
 8008116:	3320      	adds	r3, #32
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	fbb2 f1f3 	udiv	r1, r2, r3
 800811e:	fb01 f303 	mul.w	r3, r1, r3
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	d110      	bne.n	800814a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	331c      	adds	r3, #28
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800813c:	78f9      	ldrb	r1, [r7, #3]
 800813e:	2300      	movs	r3, #0
 8008140:	2200      	movs	r2, #0
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 fdc6 	bl	8009cd4 <USBD_LL_Transmit>
 8008148:	e003      	b.n	8008152 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	e000      	b.n	8008158 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008156:	2302      	movs	r3, #2
  }
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008172:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 fdf1 	bl	8009d60 <USBD_LL_GetRxDataSize>
 800817e:	4602      	mov	r2, r0
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00d      	beq.n	80081ac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80081a4:	4611      	mov	r1, r2
 80081a6:	4798      	blx	r3

    return USBD_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	e000      	b.n	80081ae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80081ac:	2302      	movs	r3, #2
  }
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d014      	beq.n	80081fa <USBD_CDC_EP0_RxReady+0x44>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80081d6:	2bff      	cmp	r3, #255	@ 0xff
 80081d8:	d00f      	beq.n	80081fa <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80081e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	22ff      	movs	r2, #255	@ 0xff
 80081f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2243      	movs	r2, #67	@ 0x43
 8008210:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008212:	4b03      	ldr	r3, [pc, #12]	@ (8008220 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	200000a0 	.word	0x200000a0

08008224 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2243      	movs	r2, #67	@ 0x43
 8008230:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008232:	4b03      	ldr	r3, [pc, #12]	@ (8008240 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008234:	4618      	mov	r0, r3
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	bc80      	pop	{r7}
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	2000005c 	.word	0x2000005c

08008244 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2243      	movs	r2, #67	@ 0x43
 8008250:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008252:	4b03      	ldr	r3, [pc, #12]	@ (8008260 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	200000e4 	.word	0x200000e4

08008264 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	220a      	movs	r2, #10
 8008270:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008272:	4b03      	ldr	r3, [pc, #12]	@ (8008280 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	bc80      	pop	{r7}
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	20000018 	.word	0x20000018

08008284 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800828e:	2302      	movs	r3, #2
 8008290:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bc80      	pop	{r7}
 80082ae:	4770      	bx	lr

080082b0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4613      	mov	r3, r2
 80082bc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80082ce:	88fa      	ldrh	r2, [r7, #6]
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr

080082e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b085      	sub	sp, #20
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	bc80      	pop	{r7}
 8008306:	4770      	bx	lr

08008308 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008316:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d01c      	beq.n	800835c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008328:	2b00      	cmp	r3, #0
 800832a:	d115      	bne.n	8008358 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2201      	movs	r2, #1
 8008330:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800834a:	b29b      	uxth	r3, r3
 800834c:	2181      	movs	r1, #129	@ 0x81
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 fcc0 	bl	8009cd4 <USBD_LL_Transmit>

      return USBD_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	e002      	b.n	800835e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008358:	2301      	movs	r3, #1
 800835a:	e000      	b.n	800835e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800835c:	2302      	movs	r3, #2
  }
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008374:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800837c:	2b00      	cmp	r3, #0
 800837e:	d017      	beq.n	80083b0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	7c1b      	ldrb	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d109      	bne.n	800839c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800838e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008392:	2101      	movs	r1, #1
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 fcc0 	bl	8009d1a <USBD_LL_PrepareReceive>
 800839a:	e007      	b.n	80083ac <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083a2:	2340      	movs	r3, #64	@ 0x40
 80083a4:	2101      	movs	r1, #1
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fcb7 	bl	8009d1a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	e000      	b.n	80083b2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80083b0:	2302      	movs	r3, #2
  }
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	60f8      	str	r0, [r7, #12]
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	4613      	mov	r3, r2
 80083c6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083ce:	2302      	movs	r3, #2
 80083d0:	e01a      	b.n	8008408 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	79fa      	ldrb	r2, [r7, #7]
 80083fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f001 fb25 	bl	8009a50 <USBD_LL_Init>

  return USBD_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d006      	beq.n	8008432 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
 8008430:	e001      	b.n	8008436 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008432:	2302      	movs	r3, #2
 8008434:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	bc80      	pop	{r7}
 8008440:	4770      	bx	lr

08008442 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 fb5a 	bl	8009b04 <USBD_LL_Start>

  return USBD_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	bc80      	pop	{r7}
 800846c:	4770      	bx	lr

0800846e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	460b      	mov	r3, r1
 8008478:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800847a:	2302      	movs	r3, #2
 800847c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00c      	beq.n	80084a2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	78fa      	ldrb	r2, [r7, #3]
 8008492:	4611      	mov	r1, r2
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	4798      	blx	r3
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	78fa      	ldrb	r2, [r7, #3]
 80084c2:	4611      	mov	r1, r2
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	4798      	blx	r3

  return USBD_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b082      	sub	sp, #8
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 fed8 	bl	800929a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80084f8:	461a      	mov	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008506:	f003 031f 	and.w	r3, r3, #31
 800850a:	2b02      	cmp	r3, #2
 800850c:	d016      	beq.n	800853c <USBD_LL_SetupStage+0x6a>
 800850e:	2b02      	cmp	r3, #2
 8008510:	d81c      	bhi.n	800854c <USBD_LL_SetupStage+0x7a>
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <USBD_LL_SetupStage+0x4a>
 8008516:	2b01      	cmp	r3, #1
 8008518:	d008      	beq.n	800852c <USBD_LL_SetupStage+0x5a>
 800851a:	e017      	b.n	800854c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f9cb 	bl	80088c0 <USBD_StdDevReq>
      break;
 800852a:	e01a      	b.n	8008562 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fa2d 	bl	8008994 <USBD_StdItfReq>
      break;
 800853a:	e012      	b.n	8008562 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fa6d 	bl	8008a24 <USBD_StdEPReq>
      break;
 800854a:	e00a      	b.n	8008562 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008552:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008556:	b2db      	uxtb	r3, r3
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 fb32 	bl	8009bc4 <USBD_LL_StallEP>
      break;
 8008560:	bf00      	nop
  }

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	460b      	mov	r3, r1
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800857a:	7afb      	ldrb	r3, [r7, #11]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d14b      	bne.n	8008618 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008586:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800858e:	2b03      	cmp	r3, #3
 8008590:	d134      	bne.n	80085fc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	429a      	cmp	r2, r3
 800859c:	d919      	bls.n	80085d2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	1ad2      	subs	r2, r2, r3
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	68da      	ldr	r2, [r3, #12]
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d203      	bcs.n	80085c0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80085bc:	b29b      	uxth	r3, r3
 80085be:	e002      	b.n	80085c6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	6879      	ldr	r1, [r7, #4]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 ff54 	bl	8009478 <USBD_CtlContinueRx>
 80085d0:	e038      	b.n	8008644 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d105      	bne.n	80085f4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 ff51 	bl	800949c <USBD_CtlSendStatus>
 80085fa:	e023      	b.n	8008644 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008602:	2b05      	cmp	r3, #5
 8008604:	d11e      	bne.n	8008644 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800860e:	2100      	movs	r1, #0
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f001 fad7 	bl	8009bc4 <USBD_LL_StallEP>
 8008616:	e015      	b.n	8008644 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00d      	beq.n	8008640 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800862a:	2b03      	cmp	r3, #3
 800862c:	d108      	bne.n	8008640 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	7afa      	ldrb	r2, [r7, #11]
 8008638:	4611      	mov	r1, r2
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	4798      	blx	r3
 800863e:	e001      	b.n	8008644 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008640:	2302      	movs	r3, #2
 8008642:	e000      	b.n	8008646 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b086      	sub	sp, #24
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	460b      	mov	r3, r1
 8008658:	607a      	str	r2, [r7, #4]
 800865a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800865c:	7afb      	ldrb	r3, [r7, #11]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d17f      	bne.n	8008762 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3314      	adds	r3, #20
 8008666:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800866e:	2b02      	cmp	r3, #2
 8008670:	d15c      	bne.n	800872c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	429a      	cmp	r2, r3
 800867c:	d915      	bls.n	80086aa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	1ad2      	subs	r2, r2, r3
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	b29b      	uxth	r3, r3
 8008692:	461a      	mov	r2, r3
 8008694:	6879      	ldr	r1, [r7, #4]
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 febe 	bl	8009418 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800869c:	2300      	movs	r3, #0
 800869e:	2200      	movs	r2, #0
 80086a0:	2100      	movs	r1, #0
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f001 fb39 	bl	8009d1a <USBD_LL_PrepareReceive>
 80086a8:	e04e      	b.n	8008748 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	6912      	ldr	r2, [r2, #16]
 80086b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80086b6:	fb01 f202 	mul.w	r2, r1, r2
 80086ba:	1a9b      	subs	r3, r3, r2
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d11c      	bne.n	80086fa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d316      	bcc.n	80086fa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d20f      	bcs.n	80086fa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086da:	2200      	movs	r2, #0
 80086dc:	2100      	movs	r1, #0
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 fe9a 	bl	8009418 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086ec:	2300      	movs	r3, #0
 80086ee:	2200      	movs	r2, #0
 80086f0:	2100      	movs	r1, #0
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f001 fb11 	bl	8009d1a <USBD_LL_PrepareReceive>
 80086f8:	e026      	b.n	8008748 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00a      	beq.n	800871c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800870c:	2b03      	cmp	r3, #3
 800870e:	d105      	bne.n	800871c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800871c:	2180      	movs	r1, #128	@ 0x80
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f001 fa50 	bl	8009bc4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 fecc 	bl	80094c2 <USBD_CtlReceiveStatus>
 800872a:	e00d      	b.n	8008748 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008732:	2b04      	cmp	r3, #4
 8008734:	d004      	beq.n	8008740 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800873c:	2b00      	cmp	r3, #0
 800873e:	d103      	bne.n	8008748 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008740:	2180      	movs	r1, #128	@ 0x80
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f001 fa3e 	bl	8009bc4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800874e:	2b01      	cmp	r3, #1
 8008750:	d11d      	bne.n	800878e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f7ff fe81 	bl	800845a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008760:	e015      	b.n	800878e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00d      	beq.n	800878a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008774:	2b03      	cmp	r3, #3
 8008776:	d108      	bne.n	800878a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	7afa      	ldrb	r2, [r7, #11]
 8008782:	4611      	mov	r1, r2
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	4798      	blx	r3
 8008788:	e001      	b.n	800878e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800878a:	2302      	movs	r3, #2
 800878c:	e000      	b.n	8008790 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087a0:	2340      	movs	r3, #64	@ 0x40
 80087a2:	2200      	movs	r2, #0
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f001 f9c7 	bl	8009b3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2240      	movs	r2, #64	@ 0x40
 80087b8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087bc:	2340      	movs	r3, #64	@ 0x40
 80087be:	2200      	movs	r2, #0
 80087c0:	2180      	movs	r1, #128	@ 0x80
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 f9b9 	bl	8009b3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2240      	movs	r2, #64	@ 0x40
 80087d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d009      	beq.n	8008810 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	6852      	ldr	r2, [r2, #4]
 8008808:	b2d2      	uxtb	r2, r2
 800880a:	4611      	mov	r1, r2
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
  }

  return USBD_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	460b      	mov	r3, r1
 8008824:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	78fa      	ldrb	r2, [r7, #3]
 800882a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr

08008838 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2204      	movs	r2, #4
 8008850:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	bc80      	pop	{r7}
 800885e:	4770      	bx	lr

08008860 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800886e:	2b04      	cmp	r3, #4
 8008870:	d105      	bne.n	800887e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	bc80      	pop	{r7}
 8008888:	4770      	bx	lr

0800888a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008898:	2b03      	cmp	r3, #3
 800889a:	d10b      	bne.n	80088b4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088d6:	2b40      	cmp	r3, #64	@ 0x40
 80088d8:	d005      	beq.n	80088e6 <USBD_StdDevReq+0x26>
 80088da:	2b40      	cmp	r3, #64	@ 0x40
 80088dc:	d84f      	bhi.n	800897e <USBD_StdDevReq+0xbe>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d009      	beq.n	80088f6 <USBD_StdDevReq+0x36>
 80088e2:	2b20      	cmp	r3, #32
 80088e4:	d14b      	bne.n	800897e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	4798      	blx	r3
      break;
 80088f4:	e048      	b.n	8008988 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	785b      	ldrb	r3, [r3, #1]
 80088fa:	2b09      	cmp	r3, #9
 80088fc:	d839      	bhi.n	8008972 <USBD_StdDevReq+0xb2>
 80088fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008904 <USBD_StdDevReq+0x44>)
 8008900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008904:	08008955 	.word	0x08008955
 8008908:	08008969 	.word	0x08008969
 800890c:	08008973 	.word	0x08008973
 8008910:	0800895f 	.word	0x0800895f
 8008914:	08008973 	.word	0x08008973
 8008918:	08008937 	.word	0x08008937
 800891c:	0800892d 	.word	0x0800892d
 8008920:	08008973 	.word	0x08008973
 8008924:	0800894b 	.word	0x0800894b
 8008928:	08008941 	.word	0x08008941
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9dc 	bl	8008cec <USBD_GetDescriptor>
          break;
 8008934:	e022      	b.n	800897c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fb3f 	bl	8008fbc <USBD_SetAddress>
          break;
 800893e:	e01d      	b.n	800897c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fb7e 	bl	8009044 <USBD_SetConfig>
          break;
 8008948:	e018      	b.n	800897c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fc07 	bl	8009160 <USBD_GetConfig>
          break;
 8008952:	e013      	b.n	800897c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fc37 	bl	80091ca <USBD_GetStatus>
          break;
 800895c:	e00e      	b.n	800897c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fc65 	bl	8009230 <USBD_SetFeature>
          break;
 8008966:	e009      	b.n	800897c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fc74 	bl	8009258 <USBD_ClrFeature>
          break;
 8008970:	e004      	b.n	800897c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fcc9 	bl	800930c <USBD_CtlError>
          break;
 800897a:	bf00      	nop
      }
      break;
 800897c:	e004      	b.n	8008988 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fcc3 	bl	800930c <USBD_CtlError>
      break;
 8008986:	bf00      	nop
  }

  return ret;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop

08008994 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089aa:	2b40      	cmp	r3, #64	@ 0x40
 80089ac:	d005      	beq.n	80089ba <USBD_StdItfReq+0x26>
 80089ae:	2b40      	cmp	r3, #64	@ 0x40
 80089b0:	d82e      	bhi.n	8008a10 <USBD_StdItfReq+0x7c>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <USBD_StdItfReq+0x26>
 80089b6:	2b20      	cmp	r3, #32
 80089b8:	d12a      	bne.n	8008a10 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c0:	3b01      	subs	r3, #1
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d81d      	bhi.n	8008a02 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	889b      	ldrh	r3, [r3, #4]
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d813      	bhi.n	80089f8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	4798      	blx	r3
 80089de:	4603      	mov	r3, r0
 80089e0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	88db      	ldrh	r3, [r3, #6]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d110      	bne.n	8008a0c <USBD_StdItfReq+0x78>
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10d      	bne.n	8008a0c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fd53 	bl	800949c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80089f6:	e009      	b.n	8008a0c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fc86 	bl	800930c <USBD_CtlError>
          break;
 8008a00:	e004      	b.n	8008a0c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fc81 	bl	800930c <USBD_CtlError>
          break;
 8008a0a:	e000      	b.n	8008a0e <USBD_StdItfReq+0x7a>
          break;
 8008a0c:	bf00      	nop
      }
      break;
 8008a0e:	e004      	b.n	8008a1a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fc7a 	bl	800930c <USBD_CtlError>
      break;
 8008a18:	bf00      	nop
  }

  return USBD_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	889b      	ldrh	r3, [r3, #4]
 8008a36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a40:	2b40      	cmp	r3, #64	@ 0x40
 8008a42:	d007      	beq.n	8008a54 <USBD_StdEPReq+0x30>
 8008a44:	2b40      	cmp	r3, #64	@ 0x40
 8008a46:	f200 8146 	bhi.w	8008cd6 <USBD_StdEPReq+0x2b2>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00a      	beq.n	8008a64 <USBD_StdEPReq+0x40>
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	f040 8141 	bne.w	8008cd6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	4798      	blx	r3
      break;
 8008a62:	e13d      	b.n	8008ce0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a6c:	2b20      	cmp	r3, #32
 8008a6e:	d10a      	bne.n	8008a86 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	4798      	blx	r3
 8008a7e:	4603      	mov	r3, r0
 8008a80:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	e12d      	b.n	8008ce2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	785b      	ldrb	r3, [r3, #1]
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d007      	beq.n	8008a9e <USBD_StdEPReq+0x7a>
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	f300 811b 	bgt.w	8008cca <USBD_StdEPReq+0x2a6>
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d072      	beq.n	8008b7e <USBD_StdEPReq+0x15a>
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d03a      	beq.n	8008b12 <USBD_StdEPReq+0xee>
 8008a9c:	e115      	b.n	8008cca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d002      	beq.n	8008aae <USBD_StdEPReq+0x8a>
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d015      	beq.n	8008ad8 <USBD_StdEPReq+0xb4>
 8008aac:	e02b      	b.n	8008b06 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008aae:	7bbb      	ldrb	r3, [r7, #14]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00c      	beq.n	8008ace <USBD_StdEPReq+0xaa>
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
 8008ab6:	2b80      	cmp	r3, #128	@ 0x80
 8008ab8:	d009      	beq.n	8008ace <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 f880 	bl	8009bc4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ac4:	2180      	movs	r1, #128	@ 0x80
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 f87c 	bl	8009bc4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008acc:	e020      	b.n	8008b10 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fc1b 	bl	800930c <USBD_CtlError>
              break;
 8008ad6:	e01b      	b.n	8008b10 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	885b      	ldrh	r3, [r3, #2]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10e      	bne.n	8008afe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <USBD_StdEPReq+0xda>
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
 8008ae8:	2b80      	cmp	r3, #128	@ 0x80
 8008aea:	d008      	beq.n	8008afe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	88db      	ldrh	r3, [r3, #6]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d104      	bne.n	8008afe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 f863 	bl	8009bc4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fccc 	bl	800949c <USBD_CtlSendStatus>

              break;
 8008b04:	e004      	b.n	8008b10 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fbff 	bl	800930c <USBD_CtlError>
              break;
 8008b0e:	bf00      	nop
          }
          break;
 8008b10:	e0e0      	b.n	8008cd4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d002      	beq.n	8008b22 <USBD_StdEPReq+0xfe>
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d015      	beq.n	8008b4c <USBD_StdEPReq+0x128>
 8008b20:	e026      	b.n	8008b70 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00c      	beq.n	8008b42 <USBD_StdEPReq+0x11e>
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	2b80      	cmp	r3, #128	@ 0x80
 8008b2c:	d009      	beq.n	8008b42 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 f846 	bl	8009bc4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b38:	2180      	movs	r1, #128	@ 0x80
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 f842 	bl	8009bc4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b40:	e01c      	b.n	8008b7c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fbe1 	bl	800930c <USBD_CtlError>
              break;
 8008b4a:	e017      	b.n	8008b7c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	885b      	ldrh	r3, [r3, #2]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d112      	bne.n	8008b7a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
 8008b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d004      	beq.n	8008b68 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f001 f84d 	bl	8009c02 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fc97 	bl	800949c <USBD_CtlSendStatus>
              }
              break;
 8008b6e:	e004      	b.n	8008b7a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fbca 	bl	800930c <USBD_CtlError>
              break;
 8008b78:	e000      	b.n	8008b7c <USBD_StdEPReq+0x158>
              break;
 8008b7a:	bf00      	nop
          }
          break;
 8008b7c:	e0aa      	b.n	8008cd4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d002      	beq.n	8008b8e <USBD_StdEPReq+0x16a>
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d032      	beq.n	8008bf2 <USBD_StdEPReq+0x1ce>
 8008b8c:	e097      	b.n	8008cbe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b8e:	7bbb      	ldrb	r3, [r7, #14]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d007      	beq.n	8008ba4 <USBD_StdEPReq+0x180>
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	2b80      	cmp	r3, #128	@ 0x80
 8008b98:	d004      	beq.n	8008ba4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fbb5 	bl	800930c <USBD_CtlError>
                break;
 8008ba2:	e091      	b.n	8008cc8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	da0b      	bge.n	8008bc4 <USBD_StdEPReq+0x1a0>
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	3310      	adds	r3, #16
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	e00b      	b.n	8008bdc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	4413      	add	r3, r2
 8008bda:	3304      	adds	r3, #4
 8008bdc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2202      	movs	r2, #2
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fbf8 	bl	80093e0 <USBD_CtlSendData>
              break;
 8008bf0:	e06a      	b.n	8008cc8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008bf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	da11      	bge.n	8008c1e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	f003 020f 	and.w	r2, r3, #15
 8008c00:	6879      	ldr	r1, [r7, #4]
 8008c02:	4613      	mov	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	440b      	add	r3, r1
 8008c0c:	3318      	adds	r3, #24
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d117      	bne.n	8008c44 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fb78 	bl	800930c <USBD_CtlError>
                  break;
 8008c1c:	e054      	b.n	8008cc8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	f003 020f 	and.w	r2, r3, #15
 8008c24:	6879      	ldr	r1, [r7, #4]
 8008c26:	4613      	mov	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	440b      	add	r3, r1
 8008c30:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d104      	bne.n	8008c44 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fb65 	bl	800930c <USBD_CtlError>
                  break;
 8008c42:	e041      	b.n	8008cc8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	da0b      	bge.n	8008c64 <USBD_StdEPReq+0x240>
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	3310      	adds	r3, #16
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	4413      	add	r3, r2
 8008c60:	3304      	adds	r3, #4
 8008c62:	e00b      	b.n	8008c7c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <USBD_StdEPReq+0x266>
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
 8008c86:	2b80      	cmp	r3, #128	@ 0x80
 8008c88:	d103      	bne.n	8008c92 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	e00e      	b.n	8008cb0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 ffd2 	bl	8009c40 <USBD_LL_IsStallEP>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	e002      	b.n	8008cb0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fb92 	bl	80093e0 <USBD_CtlSendData>
              break;
 8008cbc:	e004      	b.n	8008cc8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fb23 	bl	800930c <USBD_CtlError>
              break;
 8008cc6:	bf00      	nop
          }
          break;
 8008cc8:	e004      	b.n	8008cd4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fb1d 	bl	800930c <USBD_CtlError>
          break;
 8008cd2:	bf00      	nop
      }
      break;
 8008cd4:	e004      	b.n	8008ce0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fb17 	bl	800930c <USBD_CtlError>
      break;
 8008cde:	bf00      	nop
  }

  return ret;
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	885b      	ldrh	r3, [r3, #2]
 8008d06:	0a1b      	lsrs	r3, r3, #8
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	2b06      	cmp	r3, #6
 8008d0e:	f200 8128 	bhi.w	8008f62 <USBD_GetDescriptor+0x276>
 8008d12:	a201      	add	r2, pc, #4	@ (adr r2, 8008d18 <USBD_GetDescriptor+0x2c>)
 8008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d18:	08008d35 	.word	0x08008d35
 8008d1c:	08008d4d 	.word	0x08008d4d
 8008d20:	08008d8d 	.word	0x08008d8d
 8008d24:	08008f63 	.word	0x08008f63
 8008d28:	08008f63 	.word	0x08008f63
 8008d2c:	08008f03 	.word	0x08008f03
 8008d30:	08008f2f 	.word	0x08008f2f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	7c12      	ldrb	r2, [r2, #16]
 8008d40:	f107 0108 	add.w	r1, r7, #8
 8008d44:	4610      	mov	r0, r2
 8008d46:	4798      	blx	r3
 8008d48:	60f8      	str	r0, [r7, #12]
      break;
 8008d4a:	e112      	b.n	8008f72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	7c1b      	ldrb	r3, [r3, #16]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10d      	bne.n	8008d70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d5c:	f107 0208 	add.w	r2, r7, #8
 8008d60:	4610      	mov	r0, r2
 8008d62:	4798      	blx	r3
 8008d64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d6e:	e100      	b.n	8008f72 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d78:	f107 0208 	add.w	r2, r7, #8
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	4798      	blx	r3
 8008d80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3301      	adds	r3, #1
 8008d86:	2202      	movs	r2, #2
 8008d88:	701a      	strb	r2, [r3, #0]
      break;
 8008d8a:	e0f2      	b.n	8008f72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	885b      	ldrh	r3, [r3, #2]
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b05      	cmp	r3, #5
 8008d94:	f200 80ac 	bhi.w	8008ef0 <USBD_GetDescriptor+0x204>
 8008d98:	a201      	add	r2, pc, #4	@ (adr r2, 8008da0 <USBD_GetDescriptor+0xb4>)
 8008d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9e:	bf00      	nop
 8008da0:	08008db9 	.word	0x08008db9
 8008da4:	08008ded 	.word	0x08008ded
 8008da8:	08008e21 	.word	0x08008e21
 8008dac:	08008e55 	.word	0x08008e55
 8008db0:	08008e89 	.word	0x08008e89
 8008db4:	08008ebd 	.word	0x08008ebd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00b      	beq.n	8008ddc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	7c12      	ldrb	r2, [r2, #16]
 8008dd0:	f107 0108 	add.w	r1, r7, #8
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dda:	e091      	b.n	8008f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa94 	bl	800930c <USBD_CtlError>
            err++;
 8008de4:	7afb      	ldrb	r3, [r7, #11]
 8008de6:	3301      	adds	r3, #1
 8008de8:	72fb      	strb	r3, [r7, #11]
          break;
 8008dea:	e089      	b.n	8008f00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00b      	beq.n	8008e10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	7c12      	ldrb	r2, [r2, #16]
 8008e04:	f107 0108 	add.w	r1, r7, #8
 8008e08:	4610      	mov	r0, r2
 8008e0a:	4798      	blx	r3
 8008e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e0e:	e077      	b.n	8008f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa7a 	bl	800930c <USBD_CtlError>
            err++;
 8008e18:	7afb      	ldrb	r3, [r7, #11]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e1e:	e06f      	b.n	8008f00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	7c12      	ldrb	r2, [r2, #16]
 8008e38:	f107 0108 	add.w	r1, r7, #8
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	4798      	blx	r3
 8008e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e42:	e05d      	b.n	8008f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa60 	bl	800930c <USBD_CtlError>
            err++;
 8008e4c:	7afb      	ldrb	r3, [r7, #11]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	72fb      	strb	r3, [r7, #11]
          break;
 8008e52:	e055      	b.n	8008f00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00b      	beq.n	8008e78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	7c12      	ldrb	r2, [r2, #16]
 8008e6c:	f107 0108 	add.w	r1, r7, #8
 8008e70:	4610      	mov	r0, r2
 8008e72:	4798      	blx	r3
 8008e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e76:	e043      	b.n	8008f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fa46 	bl	800930c <USBD_CtlError>
            err++;
 8008e80:	7afb      	ldrb	r3, [r7, #11]
 8008e82:	3301      	adds	r3, #1
 8008e84:	72fb      	strb	r3, [r7, #11]
          break;
 8008e86:	e03b      	b.n	8008f00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00b      	beq.n	8008eac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	7c12      	ldrb	r2, [r2, #16]
 8008ea0:	f107 0108 	add.w	r1, r7, #8
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	4798      	blx	r3
 8008ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eaa:	e029      	b.n	8008f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fa2c 	bl	800930c <USBD_CtlError>
            err++;
 8008eb4:	7afb      	ldrb	r3, [r7, #11]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eba:	e021      	b.n	8008f00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00b      	beq.n	8008ee0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	7c12      	ldrb	r2, [r2, #16]
 8008ed4:	f107 0108 	add.w	r1, r7, #8
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4798      	blx	r3
 8008edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ede:	e00f      	b.n	8008f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fa12 	bl	800930c <USBD_CtlError>
            err++;
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	3301      	adds	r3, #1
 8008eec:	72fb      	strb	r3, [r7, #11]
          break;
 8008eee:	e007      	b.n	8008f00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008ef0:	6839      	ldr	r1, [r7, #0]
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fa0a 	bl	800930c <USBD_CtlError>
          err++;
 8008ef8:	7afb      	ldrb	r3, [r7, #11]
 8008efa:	3301      	adds	r3, #1
 8008efc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008efe:	e038      	b.n	8008f72 <USBD_GetDescriptor+0x286>
 8008f00:	e037      	b.n	8008f72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	7c1b      	ldrb	r3, [r3, #16]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d109      	bne.n	8008f1e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f12:	f107 0208 	add.w	r2, r7, #8
 8008f16:	4610      	mov	r0, r2
 8008f18:	4798      	blx	r3
 8008f1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f1c:	e029      	b.n	8008f72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f9f3 	bl	800930c <USBD_CtlError>
        err++;
 8008f26:	7afb      	ldrb	r3, [r7, #11]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8008f2c:	e021      	b.n	8008f72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	7c1b      	ldrb	r3, [r3, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10d      	bne.n	8008f52 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3e:	f107 0208 	add.w	r2, r7, #8
 8008f42:	4610      	mov	r0, r2
 8008f44:	4798      	blx	r3
 8008f46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	2207      	movs	r2, #7
 8008f4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f50:	e00f      	b.n	8008f72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f9d9 	bl	800930c <USBD_CtlError>
        err++;
 8008f5a:	7afb      	ldrb	r3, [r7, #11]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	72fb      	strb	r3, [r7, #11]
      break;
 8008f60:	e007      	b.n	8008f72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f62:	6839      	ldr	r1, [r7, #0]
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f9d1 	bl	800930c <USBD_CtlError>
      err++;
 8008f6a:	7afb      	ldrb	r3, [r7, #11]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	72fb      	strb	r3, [r7, #11]
      break;
 8008f70:	bf00      	nop
  }

  if (err != 0U)
 8008f72:	7afb      	ldrb	r3, [r7, #11]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d11c      	bne.n	8008fb2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008f78:	893b      	ldrh	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d011      	beq.n	8008fa2 <USBD_GetDescriptor+0x2b6>
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	88db      	ldrh	r3, [r3, #6]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00d      	beq.n	8008fa2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	88da      	ldrh	r2, [r3, #6]
 8008f8a:	893b      	ldrh	r3, [r7, #8]
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	bf28      	it	cs
 8008f90:	4613      	movcs	r3, r2
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f96:	893b      	ldrh	r3, [r7, #8]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fa1f 	bl	80093e0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	88db      	ldrh	r3, [r3, #6]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d104      	bne.n	8008fb4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa76 	bl	800949c <USBD_CtlSendStatus>
 8008fb0:	e000      	b.n	8008fb4 <USBD_GetDescriptor+0x2c8>
    return;
 8008fb2:	bf00      	nop
    }
  }
}
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop

08008fbc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	889b      	ldrh	r3, [r3, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d130      	bne.n	8009030 <USBD_SetAddress+0x74>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	88db      	ldrh	r3, [r3, #6]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d12c      	bne.n	8009030 <USBD_SetAddress+0x74>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	885b      	ldrh	r3, [r3, #2]
 8008fda:	2b7f      	cmp	r3, #127	@ 0x7f
 8008fdc:	d828      	bhi.n	8009030 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	885b      	ldrh	r3, [r3, #2]
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fe8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d104      	bne.n	8008ffe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f988 	bl	800930c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ffc:	e01d      	b.n	800903a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	7bfa      	ldrb	r2, [r7, #15]
 8009002:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fe43 	bl	8009c96 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fa43 	bl	800949c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009016:	7bfb      	ldrb	r3, [r7, #15]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d004      	beq.n	8009026 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009024:	e009      	b.n	800903a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902e:	e004      	b.n	800903a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f96a 	bl	800930c <USBD_CtlError>
  }
}
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	885b      	ldrh	r3, [r3, #2]
 8009052:	b2da      	uxtb	r2, r3
 8009054:	4b41      	ldr	r3, [pc, #260]	@ (800915c <USBD_SetConfig+0x118>)
 8009056:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009058:	4b40      	ldr	r3, [pc, #256]	@ (800915c <USBD_SetConfig+0x118>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d904      	bls.n	800906a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f952 	bl	800930c <USBD_CtlError>
 8009068:	e075      	b.n	8009156 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009070:	2b02      	cmp	r3, #2
 8009072:	d002      	beq.n	800907a <USBD_SetConfig+0x36>
 8009074:	2b03      	cmp	r3, #3
 8009076:	d023      	beq.n	80090c0 <USBD_SetConfig+0x7c>
 8009078:	e062      	b.n	8009140 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800907a:	4b38      	ldr	r3, [pc, #224]	@ (800915c <USBD_SetConfig+0x118>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d01a      	beq.n	80090b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009082:	4b36      	ldr	r3, [pc, #216]	@ (800915c <USBD_SetConfig+0x118>)
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2203      	movs	r2, #3
 8009090:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009094:	4b31      	ldr	r3, [pc, #196]	@ (800915c <USBD_SetConfig+0x118>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7ff f9e7 	bl	800846e <USBD_SetClassConfig>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d104      	bne.n	80090b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f92f 	bl	800930c <USBD_CtlError>
            return;
 80090ae:	e052      	b.n	8009156 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f9f3 	bl	800949c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80090b6:	e04e      	b.n	8009156 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f9ef 	bl	800949c <USBD_CtlSendStatus>
        break;
 80090be:	e04a      	b.n	8009156 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80090c0:	4b26      	ldr	r3, [pc, #152]	@ (800915c <USBD_SetConfig+0x118>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d112      	bne.n	80090ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80090d0:	4b22      	ldr	r3, [pc, #136]	@ (800915c <USBD_SetConfig+0x118>)
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	461a      	mov	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80090da:	4b20      	ldr	r3, [pc, #128]	@ (800915c <USBD_SetConfig+0x118>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff f9e3 	bl	80084ac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f9d8 	bl	800949c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80090ec:	e033      	b.n	8009156 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80090ee:	4b1b      	ldr	r3, [pc, #108]	@ (800915c <USBD_SetConfig+0x118>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d01d      	beq.n	8009138 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7ff f9d1 	bl	80084ac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800910a:	4b14      	ldr	r3, [pc, #80]	@ (800915c <USBD_SetConfig+0x118>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009114:	4b11      	ldr	r3, [pc, #68]	@ (800915c <USBD_SetConfig+0x118>)
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff f9a7 	bl	800846e <USBD_SetClassConfig>
 8009120:	4603      	mov	r3, r0
 8009122:	2b02      	cmp	r3, #2
 8009124:	d104      	bne.n	8009130 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f8ef 	bl	800930c <USBD_CtlError>
            return;
 800912e:	e012      	b.n	8009156 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f9b3 	bl	800949c <USBD_CtlSendStatus>
        break;
 8009136:	e00e      	b.n	8009156 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f9af 	bl	800949c <USBD_CtlSendStatus>
        break;
 800913e:	e00a      	b.n	8009156 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f8e2 	bl	800930c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009148:	4b04      	ldr	r3, [pc, #16]	@ (800915c <USBD_SetConfig+0x118>)
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7ff f9ac 	bl	80084ac <USBD_ClrClassConfig>
        break;
 8009154:	bf00      	nop
    }
  }
}
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	200003e4 	.word	0x200003e4

08009160 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	88db      	ldrh	r3, [r3, #6]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d004      	beq.n	800917c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f8c9 	bl	800930c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800917a:	e022      	b.n	80091c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009182:	2b02      	cmp	r3, #2
 8009184:	dc02      	bgt.n	800918c <USBD_GetConfig+0x2c>
 8009186:	2b00      	cmp	r3, #0
 8009188:	dc03      	bgt.n	8009192 <USBD_GetConfig+0x32>
 800918a:	e015      	b.n	80091b8 <USBD_GetConfig+0x58>
 800918c:	2b03      	cmp	r3, #3
 800918e:	d00b      	beq.n	80091a8 <USBD_GetConfig+0x48>
 8009190:	e012      	b.n	80091b8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3308      	adds	r3, #8
 800919c:	2201      	movs	r2, #1
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f91d 	bl	80093e0 <USBD_CtlSendData>
        break;
 80091a6:	e00c      	b.n	80091c2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3304      	adds	r3, #4
 80091ac:	2201      	movs	r2, #1
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f915 	bl	80093e0 <USBD_CtlSendData>
        break;
 80091b6:	e004      	b.n	80091c2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f8a6 	bl	800930c <USBD_CtlError>
        break;
 80091c0:	bf00      	nop
}
 80091c2:	bf00      	nop
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091da:	3b01      	subs	r3, #1
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d81e      	bhi.n	800921e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	88db      	ldrh	r3, [r3, #6]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d004      	beq.n	80091f2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f88e 	bl	800930c <USBD_CtlError>
        break;
 80091f0:	e01a      	b.n	8009228 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d005      	beq.n	800920e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f043 0202 	orr.w	r2, r3, #2
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	330c      	adds	r3, #12
 8009212:	2202      	movs	r2, #2
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f8e2 	bl	80093e0 <USBD_CtlSendData>
      break;
 800921c:	e004      	b.n	8009228 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f873 	bl	800930c <USBD_CtlError>
      break;
 8009226:	bf00      	nop
  }
}
 8009228:	bf00      	nop
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	885b      	ldrh	r3, [r3, #2]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d106      	bne.n	8009250 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f926 	bl	800949c <USBD_CtlSendStatus>
  }
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009268:	3b01      	subs	r3, #1
 800926a:	2b02      	cmp	r3, #2
 800926c:	d80b      	bhi.n	8009286 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	885b      	ldrh	r3, [r3, #2]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d10c      	bne.n	8009290 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f90c 	bl	800949c <USBD_CtlSendStatus>
      }
      break;
 8009284:	e004      	b.n	8009290 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f83f 	bl	800930c <USBD_CtlError>
      break;
 800928e:	e000      	b.n	8009292 <USBD_ClrFeature+0x3a>
      break;
 8009290:	bf00      	nop
  }
}
 8009292:	bf00      	nop
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781a      	ldrb	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	785a      	ldrb	r2, [r3, #1]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	3302      	adds	r3, #2
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	3303      	adds	r3, #3
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	021b      	lsls	r3, r3, #8
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	4413      	add	r3, r2
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	3304      	adds	r3, #4
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	461a      	mov	r2, r3
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	3305      	adds	r3, #5
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	021b      	lsls	r3, r3, #8
 80092de:	b29b      	uxth	r3, r3
 80092e0:	4413      	add	r3, r2
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	3306      	adds	r3, #6
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	3307      	adds	r3, #7
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	4413      	add	r3, r2
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	80da      	strh	r2, [r3, #6]

}
 8009302:	bf00      	nop
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	bc80      	pop	{r7}
 800930a:	4770      	bx	lr

0800930c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009316:	2180      	movs	r1, #128	@ 0x80
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fc53 	bl	8009bc4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800931e:	2100      	movs	r1, #0
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fc4f 	bl	8009bc4 <USBD_LL_StallEP>
}
 8009326:	bf00      	nop
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b086      	sub	sp, #24
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	60b9      	str	r1, [r7, #8]
 8009338:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800933a:	2300      	movs	r3, #0
 800933c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d032      	beq.n	80093aa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 f834 	bl	80093b2 <USBD_GetLen>
 800934a:	4603      	mov	r3, r0
 800934c:	3301      	adds	r3, #1
 800934e:	b29b      	uxth	r3, r3
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	b29a      	uxth	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009358:	7dfb      	ldrb	r3, [r7, #23]
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	75fa      	strb	r2, [r7, #23]
 800935e:	461a      	mov	r2, r3
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	4413      	add	r3, r2
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	7812      	ldrb	r2, [r2, #0]
 8009368:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	75fa      	strb	r2, [r7, #23]
 8009370:	461a      	mov	r2, r3
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	4413      	add	r3, r2
 8009376:	2203      	movs	r2, #3
 8009378:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800937a:	e012      	b.n	80093a2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	60fa      	str	r2, [r7, #12]
 8009382:	7dfa      	ldrb	r2, [r7, #23]
 8009384:	1c51      	adds	r1, r2, #1
 8009386:	75f9      	strb	r1, [r7, #23]
 8009388:	4611      	mov	r1, r2
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	440a      	add	r2, r1
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	75fa      	strb	r2, [r7, #23]
 8009398:	461a      	mov	r2, r3
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	4413      	add	r3, r2
 800939e:	2200      	movs	r2, #0
 80093a0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1e8      	bne.n	800937c <USBD_GetString+0x4e>
    }
  }
}
 80093aa:	bf00      	nop
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80093be:	e005      	b.n	80093cc <USBD_GetLen+0x1a>
  {
    len++;
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	3301      	adds	r3, #1
 80093c4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3301      	adds	r3, #1
 80093ca:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1f5      	bne.n	80093c0 <USBD_GetLen+0xe>
  }

  return len;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	bc80      	pop	{r7}
 80093de:	4770      	bx	lr

080093e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	4613      	mov	r3, r2
 80093ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2202      	movs	r2, #2
 80093f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80093f6:	88fa      	ldrh	r2, [r7, #6]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80093fc:	88fa      	ldrh	r2, [r7, #6]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009402:	88fb      	ldrh	r3, [r7, #6]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	2100      	movs	r1, #0
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 fc63 	bl	8009cd4 <USBD_LL_Transmit>

  return USBD_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	4613      	mov	r3, r2
 8009424:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009426:	88fb      	ldrh	r3, [r7, #6]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	2100      	movs	r1, #0
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 fc51 	bl	8009cd4 <USBD_LL_Transmit>

  return USBD_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	4613      	mov	r3, r2
 8009448:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2203      	movs	r2, #3
 800944e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009452:	88fa      	ldrh	r2, [r7, #6]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800945a:	88fa      	ldrh	r2, [r7, #6]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009462:	88fb      	ldrh	r3, [r7, #6]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	2100      	movs	r1, #0
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 fc56 	bl	8009d1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	4613      	mov	r3, r2
 8009484:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009486:	88fb      	ldrh	r3, [r7, #6]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	2100      	movs	r1, #0
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 fc44 	bl	8009d1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2204      	movs	r2, #4
 80094a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094ac:	2300      	movs	r3, #0
 80094ae:	2200      	movs	r2, #0
 80094b0:	2100      	movs	r1, #0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fc0e 	bl	8009cd4 <USBD_LL_Transmit>

  return USBD_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2205      	movs	r2, #5
 80094ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094d2:	2300      	movs	r3, #0
 80094d4:	2200      	movs	r2, #0
 80094d6:	2100      	movs	r1, #0
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fc1e 	bl	8009d1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80094ec:	2200      	movs	r2, #0
 80094ee:	4912      	ldr	r1, [pc, #72]	@ (8009538 <MX_USB_DEVICE_Init+0x50>)
 80094f0:	4812      	ldr	r0, [pc, #72]	@ (800953c <MX_USB_DEVICE_Init+0x54>)
 80094f2:	f7fe ff62 	bl	80083ba <USBD_Init>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80094fc:	f7f8 f8de 	bl	80016bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009500:	490f      	ldr	r1, [pc, #60]	@ (8009540 <MX_USB_DEVICE_Init+0x58>)
 8009502:	480e      	ldr	r0, [pc, #56]	@ (800953c <MX_USB_DEVICE_Init+0x54>)
 8009504:	f7fe ff84 	bl	8008410 <USBD_RegisterClass>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800950e:	f7f8 f8d5 	bl	80016bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009512:	490c      	ldr	r1, [pc, #48]	@ (8009544 <MX_USB_DEVICE_Init+0x5c>)
 8009514:	4809      	ldr	r0, [pc, #36]	@ (800953c <MX_USB_DEVICE_Init+0x54>)
 8009516:	f7fe feb5 	bl	8008284 <USBD_CDC_RegisterInterface>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009520:	f7f8 f8cc 	bl	80016bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009524:	4805      	ldr	r0, [pc, #20]	@ (800953c <MX_USB_DEVICE_Init+0x54>)
 8009526:	f7fe ff8c 	bl	8008442 <USBD_Start>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009530:	f7f8 f8c4 	bl	80016bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009534:	bf00      	nop
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20000138 	.word	0x20000138
 800953c:	200003e8 	.word	0x200003e8
 8009540:	20000024 	.word	0x20000024
 8009544:	20000128 	.word	0x20000128

08009548 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800954c:	2200      	movs	r2, #0
 800954e:	4905      	ldr	r1, [pc, #20]	@ (8009564 <CDC_Init_FS+0x1c>)
 8009550:	4805      	ldr	r0, [pc, #20]	@ (8009568 <CDC_Init_FS+0x20>)
 8009552:	f7fe fead 	bl	80082b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009556:	4905      	ldr	r1, [pc, #20]	@ (800956c <CDC_Init_FS+0x24>)
 8009558:	4803      	ldr	r0, [pc, #12]	@ (8009568 <CDC_Init_FS+0x20>)
 800955a:	f7fe fec2 	bl	80082e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800955e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009560:	4618      	mov	r0, r3
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20000aac 	.word	0x20000aac
 8009568:	200003e8 	.word	0x200003e8
 800956c:	200006ac 	.word	0x200006ac

08009570 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009574:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009576:	4618      	mov	r0, r3
 8009578:	46bd      	mov	sp, r7
 800957a:	bc80      	pop	{r7}
 800957c:	4770      	bx	lr
	...

08009580 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	4603      	mov	r3, r0
 8009588:	6039      	str	r1, [r7, #0]
 800958a:	71fb      	strb	r3, [r7, #7]
 800958c:	4613      	mov	r3, r2
 800958e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	2b23      	cmp	r3, #35	@ 0x23
 8009594:	d84a      	bhi.n	800962c <CDC_Control_FS+0xac>
 8009596:	a201      	add	r2, pc, #4	@ (adr r2, 800959c <CDC_Control_FS+0x1c>)
 8009598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959c:	0800962d 	.word	0x0800962d
 80095a0:	0800962d 	.word	0x0800962d
 80095a4:	0800962d 	.word	0x0800962d
 80095a8:	0800962d 	.word	0x0800962d
 80095ac:	0800962d 	.word	0x0800962d
 80095b0:	0800962d 	.word	0x0800962d
 80095b4:	0800962d 	.word	0x0800962d
 80095b8:	0800962d 	.word	0x0800962d
 80095bc:	0800962d 	.word	0x0800962d
 80095c0:	0800962d 	.word	0x0800962d
 80095c4:	0800962d 	.word	0x0800962d
 80095c8:	0800962d 	.word	0x0800962d
 80095cc:	0800962d 	.word	0x0800962d
 80095d0:	0800962d 	.word	0x0800962d
 80095d4:	0800962d 	.word	0x0800962d
 80095d8:	0800962d 	.word	0x0800962d
 80095dc:	0800962d 	.word	0x0800962d
 80095e0:	0800962d 	.word	0x0800962d
 80095e4:	0800962d 	.word	0x0800962d
 80095e8:	0800962d 	.word	0x0800962d
 80095ec:	0800962d 	.word	0x0800962d
 80095f0:	0800962d 	.word	0x0800962d
 80095f4:	0800962d 	.word	0x0800962d
 80095f8:	0800962d 	.word	0x0800962d
 80095fc:	0800962d 	.word	0x0800962d
 8009600:	0800962d 	.word	0x0800962d
 8009604:	0800962d 	.word	0x0800962d
 8009608:	0800962d 	.word	0x0800962d
 800960c:	0800962d 	.word	0x0800962d
 8009610:	0800962d 	.word	0x0800962d
 8009614:	0800962d 	.word	0x0800962d
 8009618:	0800962d 	.word	0x0800962d
 800961c:	0800962d 	.word	0x0800962d
 8009620:	0800962d 	.word	0x0800962d
 8009624:	0800962d 	.word	0x0800962d
 8009628:	0800962d 	.word	0x0800962d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800962c:	bf00      	nop
  }

  return (USBD_OK);
 800962e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	bc80      	pop	{r7}
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop

0800963c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009646:	6879      	ldr	r1, [r7, #4]
 8009648:	4805      	ldr	r0, [pc, #20]	@ (8009660 <CDC_Receive_FS+0x24>)
 800964a:	f7fe fe4a 	bl	80082e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800964e:	4804      	ldr	r0, [pc, #16]	@ (8009660 <CDC_Receive_FS+0x24>)
 8009650:	f7fe fe89 	bl	8008366 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009654:	2300      	movs	r3, #0


  period_sec = *Buf;

  /* USER CODE END 6 */
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	200003e8 	.word	0x200003e8

08009664 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009674:	4b0d      	ldr	r3, [pc, #52]	@ (80096ac <CDC_Transmit_FS+0x48>)
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800967a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009686:	2301      	movs	r3, #1
 8009688:	e00b      	b.n	80096a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800968a:	887b      	ldrh	r3, [r7, #2]
 800968c:	461a      	mov	r2, r3
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	4806      	ldr	r0, [pc, #24]	@ (80096ac <CDC_Transmit_FS+0x48>)
 8009692:	f7fe fe0d 	bl	80082b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009696:	4805      	ldr	r0, [pc, #20]	@ (80096ac <CDC_Transmit_FS+0x48>)
 8009698:	f7fe fe36 	bl	8008308 <USBD_CDC_TransmitPacket>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	200003e8 	.word	0x200003e8

080096b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	6039      	str	r1, [r7, #0]
 80096ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	2212      	movs	r2, #18
 80096c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80096c2:	4b03      	ldr	r3, [pc, #12]	@ (80096d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bc80      	pop	{r7}
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	20000154 	.word	0x20000154

080096d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	6039      	str	r1, [r7, #0]
 80096de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2204      	movs	r2, #4
 80096e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80096e6:	4b03      	ldr	r3, [pc, #12]	@ (80096f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bc80      	pop	{r7}
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20000168 	.word	0x20000168

080096f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	6039      	str	r1, [r7, #0]
 8009702:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d105      	bne.n	8009716 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	4907      	ldr	r1, [pc, #28]	@ (800972c <USBD_FS_ProductStrDescriptor+0x34>)
 800970e:	4808      	ldr	r0, [pc, #32]	@ (8009730 <USBD_FS_ProductStrDescriptor+0x38>)
 8009710:	f7ff fe0d 	bl	800932e <USBD_GetString>
 8009714:	e004      	b.n	8009720 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	4904      	ldr	r1, [pc, #16]	@ (800972c <USBD_FS_ProductStrDescriptor+0x34>)
 800971a:	4805      	ldr	r0, [pc, #20]	@ (8009730 <USBD_FS_ProductStrDescriptor+0x38>)
 800971c:	f7ff fe07 	bl	800932e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009720:	4b02      	ldr	r3, [pc, #8]	@ (800972c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	20000eac 	.word	0x20000eac
 8009730:	0800c810 	.word	0x0800c810

08009734 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	6039      	str	r1, [r7, #0]
 800973e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009740:	683a      	ldr	r2, [r7, #0]
 8009742:	4904      	ldr	r1, [pc, #16]	@ (8009754 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009744:	4804      	ldr	r0, [pc, #16]	@ (8009758 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009746:	f7ff fdf2 	bl	800932e <USBD_GetString>
  return USBD_StrDesc;
 800974a:	4b02      	ldr	r3, [pc, #8]	@ (8009754 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	20000eac 	.word	0x20000eac
 8009758:	0800c828 	.word	0x0800c828

0800975c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	6039      	str	r1, [r7, #0]
 8009766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	221a      	movs	r2, #26
 800976c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800976e:	f000 f843 	bl	80097f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009772:	4b02      	ldr	r3, [pc, #8]	@ (800977c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	2000016c 	.word	0x2000016c

08009780 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d105      	bne.n	800979e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	4907      	ldr	r1, [pc, #28]	@ (80097b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009796:	4808      	ldr	r0, [pc, #32]	@ (80097b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009798:	f7ff fdc9 	bl	800932e <USBD_GetString>
 800979c:	e004      	b.n	80097a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	4904      	ldr	r1, [pc, #16]	@ (80097b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097a2:	4805      	ldr	r0, [pc, #20]	@ (80097b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097a4:	f7ff fdc3 	bl	800932e <USBD_GetString>
  }
  return USBD_StrDesc;
 80097a8:	4b02      	ldr	r3, [pc, #8]	@ (80097b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20000eac 	.word	0x20000eac
 80097b8:	0800c83c 	.word	0x0800c83c

080097bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	6039      	str	r1, [r7, #0]
 80097c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097c8:	79fb      	ldrb	r3, [r7, #7]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d105      	bne.n	80097da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	4907      	ldr	r1, [pc, #28]	@ (80097f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097d2:	4808      	ldr	r0, [pc, #32]	@ (80097f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097d4:	f7ff fdab 	bl	800932e <USBD_GetString>
 80097d8:	e004      	b.n	80097e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	4904      	ldr	r1, [pc, #16]	@ (80097f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097de:	4805      	ldr	r0, [pc, #20]	@ (80097f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097e0:	f7ff fda5 	bl	800932e <USBD_GetString>
  }
  return USBD_StrDesc;
 80097e4:	4b02      	ldr	r3, [pc, #8]	@ (80097f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20000eac 	.word	0x20000eac
 80097f4:	0800c848 	.word	0x0800c848

080097f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097fe:	4b0f      	ldr	r3, [pc, #60]	@ (800983c <Get_SerialNum+0x44>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009804:	4b0e      	ldr	r3, [pc, #56]	@ (8009840 <Get_SerialNum+0x48>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800980a:	4b0e      	ldr	r3, [pc, #56]	@ (8009844 <Get_SerialNum+0x4c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4413      	add	r3, r2
 8009816:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d009      	beq.n	8009832 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800981e:	2208      	movs	r2, #8
 8009820:	4909      	ldr	r1, [pc, #36]	@ (8009848 <Get_SerialNum+0x50>)
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f000 f814 	bl	8009850 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009828:	2204      	movs	r2, #4
 800982a:	4908      	ldr	r1, [pc, #32]	@ (800984c <Get_SerialNum+0x54>)
 800982c:	68b8      	ldr	r0, [r7, #8]
 800982e:	f000 f80f 	bl	8009850 <IntToUnicode>
  }
}
 8009832:	bf00      	nop
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	1ffff7e8 	.word	0x1ffff7e8
 8009840:	1ffff7ec 	.word	0x1ffff7ec
 8009844:	1ffff7f0 	.word	0x1ffff7f0
 8009848:	2000016e 	.word	0x2000016e
 800984c:	2000017e 	.word	0x2000017e

08009850 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	4613      	mov	r3, r2
 800985c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800985e:	2300      	movs	r3, #0
 8009860:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009862:	2300      	movs	r3, #0
 8009864:	75fb      	strb	r3, [r7, #23]
 8009866:	e027      	b.n	80098b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	0f1b      	lsrs	r3, r3, #28
 800986c:	2b09      	cmp	r3, #9
 800986e:	d80b      	bhi.n	8009888 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	0f1b      	lsrs	r3, r3, #28
 8009874:	b2da      	uxtb	r2, r3
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	4619      	mov	r1, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	440b      	add	r3, r1
 8009880:	3230      	adds	r2, #48	@ 0x30
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	e00a      	b.n	800989e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	0f1b      	lsrs	r3, r3, #28
 800988c:	b2da      	uxtb	r2, r3
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	4619      	mov	r1, r3
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	440b      	add	r3, r1
 8009898:	3237      	adds	r2, #55	@ 0x37
 800989a:	b2d2      	uxtb	r2, r2
 800989c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	011b      	lsls	r3, r3, #4
 80098a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	005b      	lsls	r3, r3, #1
 80098a8:	3301      	adds	r3, #1
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	4413      	add	r3, r2
 80098ae:	2200      	movs	r2, #0
 80098b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	3301      	adds	r3, #1
 80098b6:	75fb      	strb	r3, [r7, #23]
 80098b8:	7dfa      	ldrb	r2, [r7, #23]
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d3d3      	bcc.n	8009868 <IntToUnicode+0x18>
  }
}
 80098c0:	bf00      	nop
 80098c2:	bf00      	nop
 80098c4:	371c      	adds	r7, #28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bc80      	pop	{r7}
 80098ca:	4770      	bx	lr

080098cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a0d      	ldr	r2, [pc, #52]	@ (8009910 <HAL_PCD_MspInit+0x44>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d113      	bne.n	8009906 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80098de:	4b0d      	ldr	r3, [pc, #52]	@ (8009914 <HAL_PCD_MspInit+0x48>)
 80098e0:	69db      	ldr	r3, [r3, #28]
 80098e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009914 <HAL_PCD_MspInit+0x48>)
 80098e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80098e8:	61d3      	str	r3, [r2, #28]
 80098ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009914 <HAL_PCD_MspInit+0x48>)
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80098f6:	2200      	movs	r2, #0
 80098f8:	2100      	movs	r1, #0
 80098fa:	2014      	movs	r0, #20
 80098fc:	f7f8 f9d5 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009900:	2014      	movs	r0, #20
 8009902:	f7f8 f9ee 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	40005c00 	.word	0x40005c00
 8009914:	40021000 	.word	0x40021000

08009918 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800992c:	4619      	mov	r1, r3
 800992e:	4610      	mov	r0, r2
 8009930:	f7fe fdcf 	bl	80084d2 <USBD_LL_SetupStage>
}
 8009934:	bf00      	nop
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800994e:	78fa      	ldrb	r2, [r7, #3]
 8009950:	6879      	ldr	r1, [r7, #4]
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	440b      	add	r3, r1
 800995c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	78fb      	ldrb	r3, [r7, #3]
 8009964:	4619      	mov	r1, r3
 8009966:	f7fe fe01 	bl	800856c <USBD_LL_DataOutStage>
}
 800996a:	bf00      	nop
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b082      	sub	sp, #8
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	460b      	mov	r3, r1
 800997c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009984:	78fa      	ldrb	r2, [r7, #3]
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	4613      	mov	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	440b      	add	r3, r1
 8009992:	3324      	adds	r3, #36	@ 0x24
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	78fb      	ldrb	r3, [r7, #3]
 8009998:	4619      	mov	r1, r3
 800999a:	f7fe fe58 	bl	800864e <USBD_LL_DataInStage>
}
 800999e:	bf00      	nop
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b082      	sub	sp, #8
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe ff68 	bl	800888a <USBD_LL_SOF>
}
 80099ba:	bf00      	nop
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80099ca:	2301      	movs	r3, #1
 80099cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	799b      	ldrb	r3, [r3, #6]
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d001      	beq.n	80099da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80099d6:	f7f7 fe71 	bl	80016bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099e0:	7bfa      	ldrb	r2, [r7, #15]
 80099e2:	4611      	mov	r1, r2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe ff18 	bl	800881a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe fed1 	bl	8008798 <USBD_LL_Reset>
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe ff12 	bl	8008838 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	7a9b      	ldrb	r3, [r3, #10]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d005      	beq.n	8009a28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a1c:	4b04      	ldr	r3, [pc, #16]	@ (8009a30 <HAL_PCD_SuspendCallback+0x30>)
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	4a03      	ldr	r2, [pc, #12]	@ (8009a30 <HAL_PCD_SuspendCallback+0x30>)
 8009a22:	f043 0306 	orr.w	r3, r3, #6
 8009a26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a28:	bf00      	nop
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	e000ed00 	.word	0xe000ed00

08009a34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe ff0c 	bl	8008860 <USBD_LL_Resume>
}
 8009a48:	bf00      	nop
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009a58:	4a28      	ldr	r2, [pc, #160]	@ (8009afc <USBD_LL_Init+0xac>)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a26      	ldr	r2, [pc, #152]	@ (8009afc <USBD_LL_Init+0xac>)
 8009a64:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009a68:	4b24      	ldr	r3, [pc, #144]	@ (8009afc <USBD_LL_Init+0xac>)
 8009a6a:	4a25      	ldr	r2, [pc, #148]	@ (8009b00 <USBD_LL_Init+0xb0>)
 8009a6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009a6e:	4b23      	ldr	r3, [pc, #140]	@ (8009afc <USBD_LL_Init+0xac>)
 8009a70:	2208      	movs	r2, #8
 8009a72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009a74:	4b21      	ldr	r3, [pc, #132]	@ (8009afc <USBD_LL_Init+0xac>)
 8009a76:	2202      	movs	r2, #2
 8009a78:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009a7a:	4b20      	ldr	r3, [pc, #128]	@ (8009afc <USBD_LL_Init+0xac>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009a80:	4b1e      	ldr	r3, [pc, #120]	@ (8009afc <USBD_LL_Init+0xac>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009a86:	4b1d      	ldr	r3, [pc, #116]	@ (8009afc <USBD_LL_Init+0xac>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009a8c:	481b      	ldr	r0, [pc, #108]	@ (8009afc <USBD_LL_Init+0xac>)
 8009a8e:	f7f9 fc18 	bl	80032c2 <HAL_PCD_Init>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009a98:	f7f7 fe10 	bl	80016bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009aa2:	2318      	movs	r3, #24
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	f7fb f929 	bl	8004cfe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ab2:	2358      	movs	r3, #88	@ 0x58
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	2180      	movs	r1, #128	@ 0x80
 8009ab8:	f7fb f921 	bl	8004cfe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ac2:	23c0      	movs	r3, #192	@ 0xc0
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	2181      	movs	r1, #129	@ 0x81
 8009ac8:	f7fb f919 	bl	8004cfe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ad2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	2101      	movs	r1, #1
 8009ada:	f7fb f910 	bl	8004cfe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ae4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2182      	movs	r1, #130	@ 0x82
 8009aec:	f7fb f907 	bl	8004cfe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	200010ac 	.word	0x200010ac
 8009b00:	40005c00 	.word	0x40005c00

08009b04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7f9 fcc7 	bl	80034ae <HAL_PCD_Start>
 8009b20:	4603      	mov	r3, r0
 8009b22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 f94e 	bl	8009dc8 <USBD_Get_USB_Status>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	4608      	mov	r0, r1
 8009b44:	4611      	mov	r1, r2
 8009b46:	461a      	mov	r2, r3
 8009b48:	4603      	mov	r3, r0
 8009b4a:	70fb      	strb	r3, [r7, #3]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	70bb      	strb	r3, [r7, #2]
 8009b50:	4613      	mov	r3, r2
 8009b52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b62:	78bb      	ldrb	r3, [r7, #2]
 8009b64:	883a      	ldrh	r2, [r7, #0]
 8009b66:	78f9      	ldrb	r1, [r7, #3]
 8009b68:	f7f9 fe1b 	bl	80037a2 <HAL_PCD_EP_Open>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 f928 	bl	8009dc8 <USBD_Get_USB_Status>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	460b      	mov	r3, r1
 8009b90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ba0:	78fa      	ldrb	r2, [r7, #3]
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7f9 fe59 	bl	800385c <HAL_PCD_EP_Close>
 8009baa:	4603      	mov	r3, r0
 8009bac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 f909 	bl	8009dc8 <USBD_Get_USB_Status>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bde:	78fa      	ldrb	r2, [r7, #3]
 8009be0:	4611      	mov	r1, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f9 ff01 	bl	80039ea <HAL_PCD_EP_SetStall>
 8009be8:	4603      	mov	r3, r0
 8009bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 f8ea 	bl	8009dc8 <USBD_Get_USB_Status>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c1c:	78fa      	ldrb	r2, [r7, #3]
 8009c1e:	4611      	mov	r1, r2
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7f9 ff42 	bl	8003aaa <HAL_PCD_EP_ClrStall>
 8009c26:	4603      	mov	r3, r0
 8009c28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 f8cb 	bl	8009dc8 <USBD_Get_USB_Status>
 8009c32:	4603      	mov	r3, r0
 8009c34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	da0b      	bge.n	8009c74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c5c:	78fb      	ldrb	r3, [r7, #3]
 8009c5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c62:	68f9      	ldr	r1, [r7, #12]
 8009c64:	4613      	mov	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	440b      	add	r3, r1
 8009c6e:	3312      	adds	r3, #18
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	e00b      	b.n	8009c8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c7a:	68f9      	ldr	r1, [r7, #12]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	00db      	lsls	r3, r3, #3
 8009c84:	440b      	add	r3, r1
 8009c86:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009c8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bc80      	pop	{r7}
 8009c94:	4770      	bx	lr

08009c96 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cb0:	78fa      	ldrb	r2, [r7, #3]
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7f9 fd50 	bl	800375a <HAL_PCD_SetAddress>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 f881 	bl	8009dc8 <USBD_Get_USB_Status>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	607a      	str	r2, [r7, #4]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	72fb      	strb	r3, [r7, #11]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009cf6:	893b      	ldrh	r3, [r7, #8]
 8009cf8:	7af9      	ldrb	r1, [r7, #11]
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	f7f9 fe3e 	bl	800397c <HAL_PCD_EP_Transmit>
 8009d00:	4603      	mov	r3, r0
 8009d02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 f85e 	bl	8009dc8 <USBD_Get_USB_Status>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d10:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3718      	adds	r7, #24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b086      	sub	sp, #24
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	60f8      	str	r0, [r7, #12]
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	461a      	mov	r2, r3
 8009d26:	460b      	mov	r3, r1
 8009d28:	72fb      	strb	r3, [r7, #11]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d3c:	893b      	ldrh	r3, [r7, #8]
 8009d3e:	7af9      	ldrb	r1, [r7, #11]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	f7f9 fdd3 	bl	80038ec <HAL_PCD_EP_Receive>
 8009d46:	4603      	mov	r3, r0
 8009d48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 f83b 	bl	8009dc8 <USBD_Get_USB_Status>
 8009d52:	4603      	mov	r3, r0
 8009d54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d56:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d72:	78fa      	ldrb	r2, [r7, #3]
 8009d74:	4611      	mov	r1, r2
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7f9 fde9 	bl	800394e <HAL_PCD_EP_GetRxCount>
 8009d7c:	4603      	mov	r3, r0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d90:	4b02      	ldr	r3, [pc, #8]	@ (8009d9c <USBD_static_malloc+0x14>)
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bc80      	pop	{r7}
 8009d9a:	4770      	bx	lr
 8009d9c:	20001384 	.word	0x20001384

08009da0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]

}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bc80      	pop	{r7}
 8009db0:	4770      	bx	lr

08009db2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db2:	b480      	push	{r7}
 8009db4:	b083      	sub	sp, #12
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	460b      	mov	r3, r1
 8009dbc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009dbe:	bf00      	nop
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bc80      	pop	{r7}
 8009dc6:	4770      	bx	lr

08009dc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009dd6:	79fb      	ldrb	r3, [r7, #7]
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d817      	bhi.n	8009e0c <USBD_Get_USB_Status+0x44>
 8009ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8009de4 <USBD_Get_USB_Status+0x1c>)
 8009dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de2:	bf00      	nop
 8009de4:	08009df5 	.word	0x08009df5
 8009de8:	08009dfb 	.word	0x08009dfb
 8009dec:	08009e01 	.word	0x08009e01
 8009df0:	08009e07 	.word	0x08009e07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
    break;
 8009df8:	e00b      	b.n	8009e12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8009dfe:	e008      	b.n	8009e12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e00:	2301      	movs	r3, #1
 8009e02:	73fb      	strb	r3, [r7, #15]
    break;
 8009e04:	e005      	b.n	8009e12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e06:	2302      	movs	r3, #2
 8009e08:	73fb      	strb	r3, [r7, #15]
    break;
 8009e0a:	e002      	b.n	8009e12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e10:	bf00      	nop
  }
  return usb_status;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bc80      	pop	{r7}
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop

08009e20 <__cvt>:
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e26:	461d      	mov	r5, r3
 8009e28:	bfbb      	ittet	lt
 8009e2a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009e2e:	461d      	movlt	r5, r3
 8009e30:	2300      	movge	r3, #0
 8009e32:	232d      	movlt	r3, #45	@ 0x2d
 8009e34:	b088      	sub	sp, #32
 8009e36:	4614      	mov	r4, r2
 8009e38:	bfb8      	it	lt
 8009e3a:	4614      	movlt	r4, r2
 8009e3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009e3e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009e40:	7013      	strb	r3, [r2, #0]
 8009e42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e44:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009e48:	f023 0820 	bic.w	r8, r3, #32
 8009e4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e50:	d005      	beq.n	8009e5e <__cvt+0x3e>
 8009e52:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009e56:	d100      	bne.n	8009e5a <__cvt+0x3a>
 8009e58:	3601      	adds	r6, #1
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	e000      	b.n	8009e60 <__cvt+0x40>
 8009e5e:	2303      	movs	r3, #3
 8009e60:	aa07      	add	r2, sp, #28
 8009e62:	9204      	str	r2, [sp, #16]
 8009e64:	aa06      	add	r2, sp, #24
 8009e66:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009e6a:	e9cd 3600 	strd	r3, r6, [sp]
 8009e6e:	4622      	mov	r2, r4
 8009e70:	462b      	mov	r3, r5
 8009e72:	f000 fe61 	bl	800ab38 <_dtoa_r>
 8009e76:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009e7a:	4607      	mov	r7, r0
 8009e7c:	d119      	bne.n	8009eb2 <__cvt+0x92>
 8009e7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009e80:	07db      	lsls	r3, r3, #31
 8009e82:	d50e      	bpl.n	8009ea2 <__cvt+0x82>
 8009e84:	eb00 0906 	add.w	r9, r0, r6
 8009e88:	2200      	movs	r2, #0
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	4629      	mov	r1, r5
 8009e90:	f7f6 fd8a 	bl	80009a8 <__aeabi_dcmpeq>
 8009e94:	b108      	cbz	r0, 8009e9a <__cvt+0x7a>
 8009e96:	f8cd 901c 	str.w	r9, [sp, #28]
 8009e9a:	2230      	movs	r2, #48	@ 0x30
 8009e9c:	9b07      	ldr	r3, [sp, #28]
 8009e9e:	454b      	cmp	r3, r9
 8009ea0:	d31e      	bcc.n	8009ee0 <__cvt+0xc0>
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	9b07      	ldr	r3, [sp, #28]
 8009ea6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009ea8:	1bdb      	subs	r3, r3, r7
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	b008      	add	sp, #32
 8009eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009eb6:	eb00 0906 	add.w	r9, r0, r6
 8009eba:	d1e5      	bne.n	8009e88 <__cvt+0x68>
 8009ebc:	7803      	ldrb	r3, [r0, #0]
 8009ebe:	2b30      	cmp	r3, #48	@ 0x30
 8009ec0:	d10a      	bne.n	8009ed8 <__cvt+0xb8>
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	f7f6 fd6d 	bl	80009a8 <__aeabi_dcmpeq>
 8009ece:	b918      	cbnz	r0, 8009ed8 <__cvt+0xb8>
 8009ed0:	f1c6 0601 	rsb	r6, r6, #1
 8009ed4:	f8ca 6000 	str.w	r6, [sl]
 8009ed8:	f8da 3000 	ldr.w	r3, [sl]
 8009edc:	4499      	add	r9, r3
 8009ede:	e7d3      	b.n	8009e88 <__cvt+0x68>
 8009ee0:	1c59      	adds	r1, r3, #1
 8009ee2:	9107      	str	r1, [sp, #28]
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	e7d9      	b.n	8009e9c <__cvt+0x7c>

08009ee8 <__exponent>:
 8009ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eea:	2900      	cmp	r1, #0
 8009eec:	bfb6      	itet	lt
 8009eee:	232d      	movlt	r3, #45	@ 0x2d
 8009ef0:	232b      	movge	r3, #43	@ 0x2b
 8009ef2:	4249      	neglt	r1, r1
 8009ef4:	2909      	cmp	r1, #9
 8009ef6:	7002      	strb	r2, [r0, #0]
 8009ef8:	7043      	strb	r3, [r0, #1]
 8009efa:	dd29      	ble.n	8009f50 <__exponent+0x68>
 8009efc:	f10d 0307 	add.w	r3, sp, #7
 8009f00:	461d      	mov	r5, r3
 8009f02:	270a      	movs	r7, #10
 8009f04:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f08:	461a      	mov	r2, r3
 8009f0a:	fb07 1416 	mls	r4, r7, r6, r1
 8009f0e:	3430      	adds	r4, #48	@ 0x30
 8009f10:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f14:	460c      	mov	r4, r1
 8009f16:	2c63      	cmp	r4, #99	@ 0x63
 8009f18:	4631      	mov	r1, r6
 8009f1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f1e:	dcf1      	bgt.n	8009f04 <__exponent+0x1c>
 8009f20:	3130      	adds	r1, #48	@ 0x30
 8009f22:	1e94      	subs	r4, r2, #2
 8009f24:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f28:	4623      	mov	r3, r4
 8009f2a:	1c41      	adds	r1, r0, #1
 8009f2c:	42ab      	cmp	r3, r5
 8009f2e:	d30a      	bcc.n	8009f46 <__exponent+0x5e>
 8009f30:	f10d 0309 	add.w	r3, sp, #9
 8009f34:	1a9b      	subs	r3, r3, r2
 8009f36:	42ac      	cmp	r4, r5
 8009f38:	bf88      	it	hi
 8009f3a:	2300      	movhi	r3, #0
 8009f3c:	3302      	adds	r3, #2
 8009f3e:	4403      	add	r3, r0
 8009f40:	1a18      	subs	r0, r3, r0
 8009f42:	b003      	add	sp, #12
 8009f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f46:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f4a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f4e:	e7ed      	b.n	8009f2c <__exponent+0x44>
 8009f50:	2330      	movs	r3, #48	@ 0x30
 8009f52:	3130      	adds	r1, #48	@ 0x30
 8009f54:	7083      	strb	r3, [r0, #2]
 8009f56:	70c1      	strb	r1, [r0, #3]
 8009f58:	1d03      	adds	r3, r0, #4
 8009f5a:	e7f1      	b.n	8009f40 <__exponent+0x58>

08009f5c <_printf_float>:
 8009f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f60:	b091      	sub	sp, #68	@ 0x44
 8009f62:	460c      	mov	r4, r1
 8009f64:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009f68:	4616      	mov	r6, r2
 8009f6a:	461f      	mov	r7, r3
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	f000 fcd3 	bl	800a918 <_localeconv_r>
 8009f72:	6803      	ldr	r3, [r0, #0]
 8009f74:	4618      	mov	r0, r3
 8009f76:	9308      	str	r3, [sp, #32]
 8009f78:	f7f6 f8ea 	bl	8000150 <strlen>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f80:	f8d8 3000 	ldr.w	r3, [r8]
 8009f84:	9009      	str	r0, [sp, #36]	@ 0x24
 8009f86:	3307      	adds	r3, #7
 8009f88:	f023 0307 	bic.w	r3, r3, #7
 8009f8c:	f103 0208 	add.w	r2, r3, #8
 8009f90:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f94:	f8d4 b000 	ldr.w	fp, [r4]
 8009f98:	f8c8 2000 	str.w	r2, [r8]
 8009f9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fa0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009fa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fa6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009faa:	f04f 32ff 	mov.w	r2, #4294967295
 8009fae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009fb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009fb6:	4b9c      	ldr	r3, [pc, #624]	@ (800a228 <_printf_float+0x2cc>)
 8009fb8:	f7f6 fd28 	bl	8000a0c <__aeabi_dcmpun>
 8009fbc:	bb70      	cbnz	r0, 800a01c <_printf_float+0xc0>
 8009fbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc6:	4b98      	ldr	r3, [pc, #608]	@ (800a228 <_printf_float+0x2cc>)
 8009fc8:	f7f6 fd02 	bl	80009d0 <__aeabi_dcmple>
 8009fcc:	bb30      	cbnz	r0, 800a01c <_printf_float+0xc0>
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	4640      	mov	r0, r8
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	f7f6 fcf1 	bl	80009bc <__aeabi_dcmplt>
 8009fda:	b110      	cbz	r0, 8009fe2 <_printf_float+0x86>
 8009fdc:	232d      	movs	r3, #45	@ 0x2d
 8009fde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fe2:	4a92      	ldr	r2, [pc, #584]	@ (800a22c <_printf_float+0x2d0>)
 8009fe4:	4b92      	ldr	r3, [pc, #584]	@ (800a230 <_printf_float+0x2d4>)
 8009fe6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009fea:	bf94      	ite	ls
 8009fec:	4690      	movls	r8, r2
 8009fee:	4698      	movhi	r8, r3
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	f04f 0900 	mov.w	r9, #0
 8009ff6:	6123      	str	r3, [r4, #16]
 8009ff8:	f02b 0304 	bic.w	r3, fp, #4
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	4633      	mov	r3, r6
 800a000:	4621      	mov	r1, r4
 800a002:	4628      	mov	r0, r5
 800a004:	9700      	str	r7, [sp, #0]
 800a006:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a008:	f000 f9d4 	bl	800a3b4 <_printf_common>
 800a00c:	3001      	adds	r0, #1
 800a00e:	f040 8090 	bne.w	800a132 <_printf_float+0x1d6>
 800a012:	f04f 30ff 	mov.w	r0, #4294967295
 800a016:	b011      	add	sp, #68	@ 0x44
 800a018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01c:	4642      	mov	r2, r8
 800a01e:	464b      	mov	r3, r9
 800a020:	4640      	mov	r0, r8
 800a022:	4649      	mov	r1, r9
 800a024:	f7f6 fcf2 	bl	8000a0c <__aeabi_dcmpun>
 800a028:	b148      	cbz	r0, 800a03e <_printf_float+0xe2>
 800a02a:	464b      	mov	r3, r9
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	bfb8      	it	lt
 800a030:	232d      	movlt	r3, #45	@ 0x2d
 800a032:	4a80      	ldr	r2, [pc, #512]	@ (800a234 <_printf_float+0x2d8>)
 800a034:	bfb8      	it	lt
 800a036:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a03a:	4b7f      	ldr	r3, [pc, #508]	@ (800a238 <_printf_float+0x2dc>)
 800a03c:	e7d3      	b.n	8009fe6 <_printf_float+0x8a>
 800a03e:	6863      	ldr	r3, [r4, #4]
 800a040:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	d13f      	bne.n	800a0c8 <_printf_float+0x16c>
 800a048:	2306      	movs	r3, #6
 800a04a:	6063      	str	r3, [r4, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a052:	6023      	str	r3, [r4, #0]
 800a054:	9206      	str	r2, [sp, #24]
 800a056:	aa0e      	add	r2, sp, #56	@ 0x38
 800a058:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a05c:	aa0d      	add	r2, sp, #52	@ 0x34
 800a05e:	9203      	str	r2, [sp, #12]
 800a060:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a064:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a068:	6863      	ldr	r3, [r4, #4]
 800a06a:	4642      	mov	r2, r8
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	4628      	mov	r0, r5
 800a070:	464b      	mov	r3, r9
 800a072:	910a      	str	r1, [sp, #40]	@ 0x28
 800a074:	f7ff fed4 	bl	8009e20 <__cvt>
 800a078:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a07a:	4680      	mov	r8, r0
 800a07c:	2947      	cmp	r1, #71	@ 0x47
 800a07e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a080:	d128      	bne.n	800a0d4 <_printf_float+0x178>
 800a082:	1cc8      	adds	r0, r1, #3
 800a084:	db02      	blt.n	800a08c <_printf_float+0x130>
 800a086:	6863      	ldr	r3, [r4, #4]
 800a088:	4299      	cmp	r1, r3
 800a08a:	dd40      	ble.n	800a10e <_printf_float+0x1b2>
 800a08c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a090:	fa5f fa8a 	uxtb.w	sl, sl
 800a094:	4652      	mov	r2, sl
 800a096:	3901      	subs	r1, #1
 800a098:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a09c:	910d      	str	r1, [sp, #52]	@ 0x34
 800a09e:	f7ff ff23 	bl	8009ee8 <__exponent>
 800a0a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0a4:	4681      	mov	r9, r0
 800a0a6:	1813      	adds	r3, r2, r0
 800a0a8:	2a01      	cmp	r2, #1
 800a0aa:	6123      	str	r3, [r4, #16]
 800a0ac:	dc02      	bgt.n	800a0b4 <_printf_float+0x158>
 800a0ae:	6822      	ldr	r2, [r4, #0]
 800a0b0:	07d2      	lsls	r2, r2, #31
 800a0b2:	d501      	bpl.n	800a0b8 <_printf_float+0x15c>
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	6123      	str	r3, [r4, #16]
 800a0b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d09e      	beq.n	8009ffe <_printf_float+0xa2>
 800a0c0:	232d      	movs	r3, #45	@ 0x2d
 800a0c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0c6:	e79a      	b.n	8009ffe <_printf_float+0xa2>
 800a0c8:	2947      	cmp	r1, #71	@ 0x47
 800a0ca:	d1bf      	bne.n	800a04c <_printf_float+0xf0>
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1bd      	bne.n	800a04c <_printf_float+0xf0>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e7ba      	b.n	800a04a <_printf_float+0xee>
 800a0d4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a0d8:	d9dc      	bls.n	800a094 <_printf_float+0x138>
 800a0da:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a0de:	d118      	bne.n	800a112 <_printf_float+0x1b6>
 800a0e0:	2900      	cmp	r1, #0
 800a0e2:	6863      	ldr	r3, [r4, #4]
 800a0e4:	dd0b      	ble.n	800a0fe <_printf_float+0x1a2>
 800a0e6:	6121      	str	r1, [r4, #16]
 800a0e8:	b913      	cbnz	r3, 800a0f0 <_printf_float+0x194>
 800a0ea:	6822      	ldr	r2, [r4, #0]
 800a0ec:	07d0      	lsls	r0, r2, #31
 800a0ee:	d502      	bpl.n	800a0f6 <_printf_float+0x19a>
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	440b      	add	r3, r1
 800a0f4:	6123      	str	r3, [r4, #16]
 800a0f6:	f04f 0900 	mov.w	r9, #0
 800a0fa:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a0fc:	e7dc      	b.n	800a0b8 <_printf_float+0x15c>
 800a0fe:	b913      	cbnz	r3, 800a106 <_printf_float+0x1aa>
 800a100:	6822      	ldr	r2, [r4, #0]
 800a102:	07d2      	lsls	r2, r2, #31
 800a104:	d501      	bpl.n	800a10a <_printf_float+0x1ae>
 800a106:	3302      	adds	r3, #2
 800a108:	e7f4      	b.n	800a0f4 <_printf_float+0x198>
 800a10a:	2301      	movs	r3, #1
 800a10c:	e7f2      	b.n	800a0f4 <_printf_float+0x198>
 800a10e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a114:	4299      	cmp	r1, r3
 800a116:	db05      	blt.n	800a124 <_printf_float+0x1c8>
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	6121      	str	r1, [r4, #16]
 800a11c:	07d8      	lsls	r0, r3, #31
 800a11e:	d5ea      	bpl.n	800a0f6 <_printf_float+0x19a>
 800a120:	1c4b      	adds	r3, r1, #1
 800a122:	e7e7      	b.n	800a0f4 <_printf_float+0x198>
 800a124:	2900      	cmp	r1, #0
 800a126:	bfcc      	ite	gt
 800a128:	2201      	movgt	r2, #1
 800a12a:	f1c1 0202 	rsble	r2, r1, #2
 800a12e:	4413      	add	r3, r2
 800a130:	e7e0      	b.n	800a0f4 <_printf_float+0x198>
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	055a      	lsls	r2, r3, #21
 800a136:	d407      	bmi.n	800a148 <_printf_float+0x1ec>
 800a138:	6923      	ldr	r3, [r4, #16]
 800a13a:	4642      	mov	r2, r8
 800a13c:	4631      	mov	r1, r6
 800a13e:	4628      	mov	r0, r5
 800a140:	47b8      	blx	r7
 800a142:	3001      	adds	r0, #1
 800a144:	d12b      	bne.n	800a19e <_printf_float+0x242>
 800a146:	e764      	b.n	800a012 <_printf_float+0xb6>
 800a148:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a14c:	f240 80dc 	bls.w	800a308 <_printf_float+0x3ac>
 800a150:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a154:	2200      	movs	r2, #0
 800a156:	2300      	movs	r3, #0
 800a158:	f7f6 fc26 	bl	80009a8 <__aeabi_dcmpeq>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d033      	beq.n	800a1c8 <_printf_float+0x26c>
 800a160:	2301      	movs	r3, #1
 800a162:	4631      	mov	r1, r6
 800a164:	4628      	mov	r0, r5
 800a166:	4a35      	ldr	r2, [pc, #212]	@ (800a23c <_printf_float+0x2e0>)
 800a168:	47b8      	blx	r7
 800a16a:	3001      	adds	r0, #1
 800a16c:	f43f af51 	beq.w	800a012 <_printf_float+0xb6>
 800a170:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a174:	4543      	cmp	r3, r8
 800a176:	db02      	blt.n	800a17e <_printf_float+0x222>
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	07d8      	lsls	r0, r3, #31
 800a17c:	d50f      	bpl.n	800a19e <_printf_float+0x242>
 800a17e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a182:	4631      	mov	r1, r6
 800a184:	4628      	mov	r0, r5
 800a186:	47b8      	blx	r7
 800a188:	3001      	adds	r0, #1
 800a18a:	f43f af42 	beq.w	800a012 <_printf_float+0xb6>
 800a18e:	f04f 0900 	mov.w	r9, #0
 800a192:	f108 38ff 	add.w	r8, r8, #4294967295
 800a196:	f104 0a1a 	add.w	sl, r4, #26
 800a19a:	45c8      	cmp	r8, r9
 800a19c:	dc09      	bgt.n	800a1b2 <_printf_float+0x256>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	079b      	lsls	r3, r3, #30
 800a1a2:	f100 8102 	bmi.w	800a3aa <_printf_float+0x44e>
 800a1a6:	68e0      	ldr	r0, [r4, #12]
 800a1a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1aa:	4298      	cmp	r0, r3
 800a1ac:	bfb8      	it	lt
 800a1ae:	4618      	movlt	r0, r3
 800a1b0:	e731      	b.n	800a016 <_printf_float+0xba>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	4652      	mov	r2, sl
 800a1b6:	4631      	mov	r1, r6
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	47b8      	blx	r7
 800a1bc:	3001      	adds	r0, #1
 800a1be:	f43f af28 	beq.w	800a012 <_printf_float+0xb6>
 800a1c2:	f109 0901 	add.w	r9, r9, #1
 800a1c6:	e7e8      	b.n	800a19a <_printf_float+0x23e>
 800a1c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	dc38      	bgt.n	800a240 <_printf_float+0x2e4>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	4a19      	ldr	r2, [pc, #100]	@ (800a23c <_printf_float+0x2e0>)
 800a1d6:	47b8      	blx	r7
 800a1d8:	3001      	adds	r0, #1
 800a1da:	f43f af1a 	beq.w	800a012 <_printf_float+0xb6>
 800a1de:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a1e2:	ea59 0303 	orrs.w	r3, r9, r3
 800a1e6:	d102      	bne.n	800a1ee <_printf_float+0x292>
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	07d9      	lsls	r1, r3, #31
 800a1ec:	d5d7      	bpl.n	800a19e <_printf_float+0x242>
 800a1ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a1f2:	4631      	mov	r1, r6
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	47b8      	blx	r7
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	f43f af0a 	beq.w	800a012 <_printf_float+0xb6>
 800a1fe:	f04f 0a00 	mov.w	sl, #0
 800a202:	f104 0b1a 	add.w	fp, r4, #26
 800a206:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a208:	425b      	negs	r3, r3
 800a20a:	4553      	cmp	r3, sl
 800a20c:	dc01      	bgt.n	800a212 <_printf_float+0x2b6>
 800a20e:	464b      	mov	r3, r9
 800a210:	e793      	b.n	800a13a <_printf_float+0x1de>
 800a212:	2301      	movs	r3, #1
 800a214:	465a      	mov	r2, fp
 800a216:	4631      	mov	r1, r6
 800a218:	4628      	mov	r0, r5
 800a21a:	47b8      	blx	r7
 800a21c:	3001      	adds	r0, #1
 800a21e:	f43f aef8 	beq.w	800a012 <_printf_float+0xb6>
 800a222:	f10a 0a01 	add.w	sl, sl, #1
 800a226:	e7ee      	b.n	800a206 <_printf_float+0x2aa>
 800a228:	7fefffff 	.word	0x7fefffff
 800a22c:	0800c882 	.word	0x0800c882
 800a230:	0800c886 	.word	0x0800c886
 800a234:	0800c88a 	.word	0x0800c88a
 800a238:	0800c88e 	.word	0x0800c88e
 800a23c:	0800c892 	.word	0x0800c892
 800a240:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a242:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a246:	4553      	cmp	r3, sl
 800a248:	bfa8      	it	ge
 800a24a:	4653      	movge	r3, sl
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	4699      	mov	r9, r3
 800a250:	dc36      	bgt.n	800a2c0 <_printf_float+0x364>
 800a252:	f04f 0b00 	mov.w	fp, #0
 800a256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a25a:	f104 021a 	add.w	r2, r4, #26
 800a25e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a260:	930a      	str	r3, [sp, #40]	@ 0x28
 800a262:	eba3 0309 	sub.w	r3, r3, r9
 800a266:	455b      	cmp	r3, fp
 800a268:	dc31      	bgt.n	800a2ce <_printf_float+0x372>
 800a26a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a26c:	459a      	cmp	sl, r3
 800a26e:	dc3a      	bgt.n	800a2e6 <_printf_float+0x38a>
 800a270:	6823      	ldr	r3, [r4, #0]
 800a272:	07da      	lsls	r2, r3, #31
 800a274:	d437      	bmi.n	800a2e6 <_printf_float+0x38a>
 800a276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a278:	ebaa 0903 	sub.w	r9, sl, r3
 800a27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a27e:	ebaa 0303 	sub.w	r3, sl, r3
 800a282:	4599      	cmp	r9, r3
 800a284:	bfa8      	it	ge
 800a286:	4699      	movge	r9, r3
 800a288:	f1b9 0f00 	cmp.w	r9, #0
 800a28c:	dc33      	bgt.n	800a2f6 <_printf_float+0x39a>
 800a28e:	f04f 0800 	mov.w	r8, #0
 800a292:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a296:	f104 0b1a 	add.w	fp, r4, #26
 800a29a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a29c:	ebaa 0303 	sub.w	r3, sl, r3
 800a2a0:	eba3 0309 	sub.w	r3, r3, r9
 800a2a4:	4543      	cmp	r3, r8
 800a2a6:	f77f af7a 	ble.w	800a19e <_printf_float+0x242>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	465a      	mov	r2, fp
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	47b8      	blx	r7
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	f43f aeac 	beq.w	800a012 <_printf_float+0xb6>
 800a2ba:	f108 0801 	add.w	r8, r8, #1
 800a2be:	e7ec      	b.n	800a29a <_printf_float+0x33e>
 800a2c0:	4642      	mov	r2, r8
 800a2c2:	4631      	mov	r1, r6
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	47b8      	blx	r7
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	d1c2      	bne.n	800a252 <_printf_float+0x2f6>
 800a2cc:	e6a1      	b.n	800a012 <_printf_float+0xb6>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	920a      	str	r2, [sp, #40]	@ 0x28
 800a2d6:	47b8      	blx	r7
 800a2d8:	3001      	adds	r0, #1
 800a2da:	f43f ae9a 	beq.w	800a012 <_printf_float+0xb6>
 800a2de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2e0:	f10b 0b01 	add.w	fp, fp, #1
 800a2e4:	e7bb      	b.n	800a25e <_printf_float+0x302>
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	47b8      	blx	r7
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	d1c0      	bne.n	800a276 <_printf_float+0x31a>
 800a2f4:	e68d      	b.n	800a012 <_printf_float+0xb6>
 800a2f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2f8:	464b      	mov	r3, r9
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	4442      	add	r2, r8
 800a300:	47b8      	blx	r7
 800a302:	3001      	adds	r0, #1
 800a304:	d1c3      	bne.n	800a28e <_printf_float+0x332>
 800a306:	e684      	b.n	800a012 <_printf_float+0xb6>
 800a308:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a30c:	f1ba 0f01 	cmp.w	sl, #1
 800a310:	dc01      	bgt.n	800a316 <_printf_float+0x3ba>
 800a312:	07db      	lsls	r3, r3, #31
 800a314:	d536      	bpl.n	800a384 <_printf_float+0x428>
 800a316:	2301      	movs	r3, #1
 800a318:	4642      	mov	r2, r8
 800a31a:	4631      	mov	r1, r6
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b8      	blx	r7
 800a320:	3001      	adds	r0, #1
 800a322:	f43f ae76 	beq.w	800a012 <_printf_float+0xb6>
 800a326:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a32a:	4631      	mov	r1, r6
 800a32c:	4628      	mov	r0, r5
 800a32e:	47b8      	blx	r7
 800a330:	3001      	adds	r0, #1
 800a332:	f43f ae6e 	beq.w	800a012 <_printf_float+0xb6>
 800a336:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a33a:	2200      	movs	r2, #0
 800a33c:	2300      	movs	r3, #0
 800a33e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a342:	f7f6 fb31 	bl	80009a8 <__aeabi_dcmpeq>
 800a346:	b9c0      	cbnz	r0, 800a37a <_printf_float+0x41e>
 800a348:	4653      	mov	r3, sl
 800a34a:	f108 0201 	add.w	r2, r8, #1
 800a34e:	4631      	mov	r1, r6
 800a350:	4628      	mov	r0, r5
 800a352:	47b8      	blx	r7
 800a354:	3001      	adds	r0, #1
 800a356:	d10c      	bne.n	800a372 <_printf_float+0x416>
 800a358:	e65b      	b.n	800a012 <_printf_float+0xb6>
 800a35a:	2301      	movs	r3, #1
 800a35c:	465a      	mov	r2, fp
 800a35e:	4631      	mov	r1, r6
 800a360:	4628      	mov	r0, r5
 800a362:	47b8      	blx	r7
 800a364:	3001      	adds	r0, #1
 800a366:	f43f ae54 	beq.w	800a012 <_printf_float+0xb6>
 800a36a:	f108 0801 	add.w	r8, r8, #1
 800a36e:	45d0      	cmp	r8, sl
 800a370:	dbf3      	blt.n	800a35a <_printf_float+0x3fe>
 800a372:	464b      	mov	r3, r9
 800a374:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a378:	e6e0      	b.n	800a13c <_printf_float+0x1e0>
 800a37a:	f04f 0800 	mov.w	r8, #0
 800a37e:	f104 0b1a 	add.w	fp, r4, #26
 800a382:	e7f4      	b.n	800a36e <_printf_float+0x412>
 800a384:	2301      	movs	r3, #1
 800a386:	4642      	mov	r2, r8
 800a388:	e7e1      	b.n	800a34e <_printf_float+0x3f2>
 800a38a:	2301      	movs	r3, #1
 800a38c:	464a      	mov	r2, r9
 800a38e:	4631      	mov	r1, r6
 800a390:	4628      	mov	r0, r5
 800a392:	47b8      	blx	r7
 800a394:	3001      	adds	r0, #1
 800a396:	f43f ae3c 	beq.w	800a012 <_printf_float+0xb6>
 800a39a:	f108 0801 	add.w	r8, r8, #1
 800a39e:	68e3      	ldr	r3, [r4, #12]
 800a3a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a3a2:	1a5b      	subs	r3, r3, r1
 800a3a4:	4543      	cmp	r3, r8
 800a3a6:	dcf0      	bgt.n	800a38a <_printf_float+0x42e>
 800a3a8:	e6fd      	b.n	800a1a6 <_printf_float+0x24a>
 800a3aa:	f04f 0800 	mov.w	r8, #0
 800a3ae:	f104 0919 	add.w	r9, r4, #25
 800a3b2:	e7f4      	b.n	800a39e <_printf_float+0x442>

0800a3b4 <_printf_common>:
 800a3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b8:	4616      	mov	r6, r2
 800a3ba:	4698      	mov	r8, r3
 800a3bc:	688a      	ldr	r2, [r1, #8]
 800a3be:	690b      	ldr	r3, [r1, #16]
 800a3c0:	4607      	mov	r7, r0
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	bfb8      	it	lt
 800a3c6:	4613      	movlt	r3, r2
 800a3c8:	6033      	str	r3, [r6, #0]
 800a3ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3d4:	b10a      	cbz	r2, 800a3da <_printf_common+0x26>
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	6033      	str	r3, [r6, #0]
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	0699      	lsls	r1, r3, #26
 800a3de:	bf42      	ittt	mi
 800a3e0:	6833      	ldrmi	r3, [r6, #0]
 800a3e2:	3302      	addmi	r3, #2
 800a3e4:	6033      	strmi	r3, [r6, #0]
 800a3e6:	6825      	ldr	r5, [r4, #0]
 800a3e8:	f015 0506 	ands.w	r5, r5, #6
 800a3ec:	d106      	bne.n	800a3fc <_printf_common+0x48>
 800a3ee:	f104 0a19 	add.w	sl, r4, #25
 800a3f2:	68e3      	ldr	r3, [r4, #12]
 800a3f4:	6832      	ldr	r2, [r6, #0]
 800a3f6:	1a9b      	subs	r3, r3, r2
 800a3f8:	42ab      	cmp	r3, r5
 800a3fa:	dc2b      	bgt.n	800a454 <_printf_common+0xa0>
 800a3fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a400:	6822      	ldr	r2, [r4, #0]
 800a402:	3b00      	subs	r3, #0
 800a404:	bf18      	it	ne
 800a406:	2301      	movne	r3, #1
 800a408:	0692      	lsls	r2, r2, #26
 800a40a:	d430      	bmi.n	800a46e <_printf_common+0xba>
 800a40c:	4641      	mov	r1, r8
 800a40e:	4638      	mov	r0, r7
 800a410:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a414:	47c8      	blx	r9
 800a416:	3001      	adds	r0, #1
 800a418:	d023      	beq.n	800a462 <_printf_common+0xae>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	6922      	ldr	r2, [r4, #16]
 800a41e:	f003 0306 	and.w	r3, r3, #6
 800a422:	2b04      	cmp	r3, #4
 800a424:	bf14      	ite	ne
 800a426:	2500      	movne	r5, #0
 800a428:	6833      	ldreq	r3, [r6, #0]
 800a42a:	f04f 0600 	mov.w	r6, #0
 800a42e:	bf08      	it	eq
 800a430:	68e5      	ldreq	r5, [r4, #12]
 800a432:	f104 041a 	add.w	r4, r4, #26
 800a436:	bf08      	it	eq
 800a438:	1aed      	subeq	r5, r5, r3
 800a43a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a43e:	bf08      	it	eq
 800a440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a444:	4293      	cmp	r3, r2
 800a446:	bfc4      	itt	gt
 800a448:	1a9b      	subgt	r3, r3, r2
 800a44a:	18ed      	addgt	r5, r5, r3
 800a44c:	42b5      	cmp	r5, r6
 800a44e:	d11a      	bne.n	800a486 <_printf_common+0xd2>
 800a450:	2000      	movs	r0, #0
 800a452:	e008      	b.n	800a466 <_printf_common+0xb2>
 800a454:	2301      	movs	r3, #1
 800a456:	4652      	mov	r2, sl
 800a458:	4641      	mov	r1, r8
 800a45a:	4638      	mov	r0, r7
 800a45c:	47c8      	blx	r9
 800a45e:	3001      	adds	r0, #1
 800a460:	d103      	bne.n	800a46a <_printf_common+0xb6>
 800a462:	f04f 30ff 	mov.w	r0, #4294967295
 800a466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a46a:	3501      	adds	r5, #1
 800a46c:	e7c1      	b.n	800a3f2 <_printf_common+0x3e>
 800a46e:	2030      	movs	r0, #48	@ 0x30
 800a470:	18e1      	adds	r1, r4, r3
 800a472:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a47c:	4422      	add	r2, r4
 800a47e:	3302      	adds	r3, #2
 800a480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a484:	e7c2      	b.n	800a40c <_printf_common+0x58>
 800a486:	2301      	movs	r3, #1
 800a488:	4622      	mov	r2, r4
 800a48a:	4641      	mov	r1, r8
 800a48c:	4638      	mov	r0, r7
 800a48e:	47c8      	blx	r9
 800a490:	3001      	adds	r0, #1
 800a492:	d0e6      	beq.n	800a462 <_printf_common+0xae>
 800a494:	3601      	adds	r6, #1
 800a496:	e7d9      	b.n	800a44c <_printf_common+0x98>

0800a498 <_printf_i>:
 800a498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a49c:	7e0f      	ldrb	r7, [r1, #24]
 800a49e:	4691      	mov	r9, r2
 800a4a0:	2f78      	cmp	r7, #120	@ 0x78
 800a4a2:	4680      	mov	r8, r0
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	469a      	mov	sl, r3
 800a4a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4ae:	d807      	bhi.n	800a4c0 <_printf_i+0x28>
 800a4b0:	2f62      	cmp	r7, #98	@ 0x62
 800a4b2:	d80a      	bhi.n	800a4ca <_printf_i+0x32>
 800a4b4:	2f00      	cmp	r7, #0
 800a4b6:	f000 80d3 	beq.w	800a660 <_printf_i+0x1c8>
 800a4ba:	2f58      	cmp	r7, #88	@ 0x58
 800a4bc:	f000 80ba 	beq.w	800a634 <_printf_i+0x19c>
 800a4c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4c8:	e03a      	b.n	800a540 <_printf_i+0xa8>
 800a4ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4ce:	2b15      	cmp	r3, #21
 800a4d0:	d8f6      	bhi.n	800a4c0 <_printf_i+0x28>
 800a4d2:	a101      	add	r1, pc, #4	@ (adr r1, 800a4d8 <_printf_i+0x40>)
 800a4d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4d8:	0800a531 	.word	0x0800a531
 800a4dc:	0800a545 	.word	0x0800a545
 800a4e0:	0800a4c1 	.word	0x0800a4c1
 800a4e4:	0800a4c1 	.word	0x0800a4c1
 800a4e8:	0800a4c1 	.word	0x0800a4c1
 800a4ec:	0800a4c1 	.word	0x0800a4c1
 800a4f0:	0800a545 	.word	0x0800a545
 800a4f4:	0800a4c1 	.word	0x0800a4c1
 800a4f8:	0800a4c1 	.word	0x0800a4c1
 800a4fc:	0800a4c1 	.word	0x0800a4c1
 800a500:	0800a4c1 	.word	0x0800a4c1
 800a504:	0800a647 	.word	0x0800a647
 800a508:	0800a56f 	.word	0x0800a56f
 800a50c:	0800a601 	.word	0x0800a601
 800a510:	0800a4c1 	.word	0x0800a4c1
 800a514:	0800a4c1 	.word	0x0800a4c1
 800a518:	0800a669 	.word	0x0800a669
 800a51c:	0800a4c1 	.word	0x0800a4c1
 800a520:	0800a56f 	.word	0x0800a56f
 800a524:	0800a4c1 	.word	0x0800a4c1
 800a528:	0800a4c1 	.word	0x0800a4c1
 800a52c:	0800a609 	.word	0x0800a609
 800a530:	6833      	ldr	r3, [r6, #0]
 800a532:	1d1a      	adds	r2, r3, #4
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6032      	str	r2, [r6, #0]
 800a538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a53c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a540:	2301      	movs	r3, #1
 800a542:	e09e      	b.n	800a682 <_printf_i+0x1ea>
 800a544:	6833      	ldr	r3, [r6, #0]
 800a546:	6820      	ldr	r0, [r4, #0]
 800a548:	1d19      	adds	r1, r3, #4
 800a54a:	6031      	str	r1, [r6, #0]
 800a54c:	0606      	lsls	r6, r0, #24
 800a54e:	d501      	bpl.n	800a554 <_printf_i+0xbc>
 800a550:	681d      	ldr	r5, [r3, #0]
 800a552:	e003      	b.n	800a55c <_printf_i+0xc4>
 800a554:	0645      	lsls	r5, r0, #25
 800a556:	d5fb      	bpl.n	800a550 <_printf_i+0xb8>
 800a558:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a55c:	2d00      	cmp	r5, #0
 800a55e:	da03      	bge.n	800a568 <_printf_i+0xd0>
 800a560:	232d      	movs	r3, #45	@ 0x2d
 800a562:	426d      	negs	r5, r5
 800a564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a568:	230a      	movs	r3, #10
 800a56a:	4859      	ldr	r0, [pc, #356]	@ (800a6d0 <_printf_i+0x238>)
 800a56c:	e011      	b.n	800a592 <_printf_i+0xfa>
 800a56e:	6821      	ldr	r1, [r4, #0]
 800a570:	6833      	ldr	r3, [r6, #0]
 800a572:	0608      	lsls	r0, r1, #24
 800a574:	f853 5b04 	ldr.w	r5, [r3], #4
 800a578:	d402      	bmi.n	800a580 <_printf_i+0xe8>
 800a57a:	0649      	lsls	r1, r1, #25
 800a57c:	bf48      	it	mi
 800a57e:	b2ad      	uxthmi	r5, r5
 800a580:	2f6f      	cmp	r7, #111	@ 0x6f
 800a582:	6033      	str	r3, [r6, #0]
 800a584:	bf14      	ite	ne
 800a586:	230a      	movne	r3, #10
 800a588:	2308      	moveq	r3, #8
 800a58a:	4851      	ldr	r0, [pc, #324]	@ (800a6d0 <_printf_i+0x238>)
 800a58c:	2100      	movs	r1, #0
 800a58e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a592:	6866      	ldr	r6, [r4, #4]
 800a594:	2e00      	cmp	r6, #0
 800a596:	bfa8      	it	ge
 800a598:	6821      	ldrge	r1, [r4, #0]
 800a59a:	60a6      	str	r6, [r4, #8]
 800a59c:	bfa4      	itt	ge
 800a59e:	f021 0104 	bicge.w	r1, r1, #4
 800a5a2:	6021      	strge	r1, [r4, #0]
 800a5a4:	b90d      	cbnz	r5, 800a5aa <_printf_i+0x112>
 800a5a6:	2e00      	cmp	r6, #0
 800a5a8:	d04b      	beq.n	800a642 <_printf_i+0x1aa>
 800a5aa:	4616      	mov	r6, r2
 800a5ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5b0:	fb03 5711 	mls	r7, r3, r1, r5
 800a5b4:	5dc7      	ldrb	r7, [r0, r7]
 800a5b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5ba:	462f      	mov	r7, r5
 800a5bc:	42bb      	cmp	r3, r7
 800a5be:	460d      	mov	r5, r1
 800a5c0:	d9f4      	bls.n	800a5ac <_printf_i+0x114>
 800a5c2:	2b08      	cmp	r3, #8
 800a5c4:	d10b      	bne.n	800a5de <_printf_i+0x146>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	07df      	lsls	r7, r3, #31
 800a5ca:	d508      	bpl.n	800a5de <_printf_i+0x146>
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	6861      	ldr	r1, [r4, #4]
 800a5d0:	4299      	cmp	r1, r3
 800a5d2:	bfde      	ittt	le
 800a5d4:	2330      	movle	r3, #48	@ 0x30
 800a5d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5de:	1b92      	subs	r2, r2, r6
 800a5e0:	6122      	str	r2, [r4, #16]
 800a5e2:	464b      	mov	r3, r9
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	4640      	mov	r0, r8
 800a5e8:	f8cd a000 	str.w	sl, [sp]
 800a5ec:	aa03      	add	r2, sp, #12
 800a5ee:	f7ff fee1 	bl	800a3b4 <_printf_common>
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	d14a      	bne.n	800a68c <_printf_i+0x1f4>
 800a5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5fa:	b004      	add	sp, #16
 800a5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a600:	6823      	ldr	r3, [r4, #0]
 800a602:	f043 0320 	orr.w	r3, r3, #32
 800a606:	6023      	str	r3, [r4, #0]
 800a608:	2778      	movs	r7, #120	@ 0x78
 800a60a:	4832      	ldr	r0, [pc, #200]	@ (800a6d4 <_printf_i+0x23c>)
 800a60c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	6831      	ldr	r1, [r6, #0]
 800a614:	061f      	lsls	r7, r3, #24
 800a616:	f851 5b04 	ldr.w	r5, [r1], #4
 800a61a:	d402      	bmi.n	800a622 <_printf_i+0x18a>
 800a61c:	065f      	lsls	r7, r3, #25
 800a61e:	bf48      	it	mi
 800a620:	b2ad      	uxthmi	r5, r5
 800a622:	6031      	str	r1, [r6, #0]
 800a624:	07d9      	lsls	r1, r3, #31
 800a626:	bf44      	itt	mi
 800a628:	f043 0320 	orrmi.w	r3, r3, #32
 800a62c:	6023      	strmi	r3, [r4, #0]
 800a62e:	b11d      	cbz	r5, 800a638 <_printf_i+0x1a0>
 800a630:	2310      	movs	r3, #16
 800a632:	e7ab      	b.n	800a58c <_printf_i+0xf4>
 800a634:	4826      	ldr	r0, [pc, #152]	@ (800a6d0 <_printf_i+0x238>)
 800a636:	e7e9      	b.n	800a60c <_printf_i+0x174>
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	f023 0320 	bic.w	r3, r3, #32
 800a63e:	6023      	str	r3, [r4, #0]
 800a640:	e7f6      	b.n	800a630 <_printf_i+0x198>
 800a642:	4616      	mov	r6, r2
 800a644:	e7bd      	b.n	800a5c2 <_printf_i+0x12a>
 800a646:	6833      	ldr	r3, [r6, #0]
 800a648:	6825      	ldr	r5, [r4, #0]
 800a64a:	1d18      	adds	r0, r3, #4
 800a64c:	6961      	ldr	r1, [r4, #20]
 800a64e:	6030      	str	r0, [r6, #0]
 800a650:	062e      	lsls	r6, r5, #24
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	d501      	bpl.n	800a65a <_printf_i+0x1c2>
 800a656:	6019      	str	r1, [r3, #0]
 800a658:	e002      	b.n	800a660 <_printf_i+0x1c8>
 800a65a:	0668      	lsls	r0, r5, #25
 800a65c:	d5fb      	bpl.n	800a656 <_printf_i+0x1be>
 800a65e:	8019      	strh	r1, [r3, #0]
 800a660:	2300      	movs	r3, #0
 800a662:	4616      	mov	r6, r2
 800a664:	6123      	str	r3, [r4, #16]
 800a666:	e7bc      	b.n	800a5e2 <_printf_i+0x14a>
 800a668:	6833      	ldr	r3, [r6, #0]
 800a66a:	2100      	movs	r1, #0
 800a66c:	1d1a      	adds	r2, r3, #4
 800a66e:	6032      	str	r2, [r6, #0]
 800a670:	681e      	ldr	r6, [r3, #0]
 800a672:	6862      	ldr	r2, [r4, #4]
 800a674:	4630      	mov	r0, r6
 800a676:	f000 f9c6 	bl	800aa06 <memchr>
 800a67a:	b108      	cbz	r0, 800a680 <_printf_i+0x1e8>
 800a67c:	1b80      	subs	r0, r0, r6
 800a67e:	6060      	str	r0, [r4, #4]
 800a680:	6863      	ldr	r3, [r4, #4]
 800a682:	6123      	str	r3, [r4, #16]
 800a684:	2300      	movs	r3, #0
 800a686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a68a:	e7aa      	b.n	800a5e2 <_printf_i+0x14a>
 800a68c:	4632      	mov	r2, r6
 800a68e:	4649      	mov	r1, r9
 800a690:	4640      	mov	r0, r8
 800a692:	6923      	ldr	r3, [r4, #16]
 800a694:	47d0      	blx	sl
 800a696:	3001      	adds	r0, #1
 800a698:	d0ad      	beq.n	800a5f6 <_printf_i+0x15e>
 800a69a:	6823      	ldr	r3, [r4, #0]
 800a69c:	079b      	lsls	r3, r3, #30
 800a69e:	d413      	bmi.n	800a6c8 <_printf_i+0x230>
 800a6a0:	68e0      	ldr	r0, [r4, #12]
 800a6a2:	9b03      	ldr	r3, [sp, #12]
 800a6a4:	4298      	cmp	r0, r3
 800a6a6:	bfb8      	it	lt
 800a6a8:	4618      	movlt	r0, r3
 800a6aa:	e7a6      	b.n	800a5fa <_printf_i+0x162>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	4632      	mov	r2, r6
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	47d0      	blx	sl
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	d09d      	beq.n	800a5f6 <_printf_i+0x15e>
 800a6ba:	3501      	adds	r5, #1
 800a6bc:	68e3      	ldr	r3, [r4, #12]
 800a6be:	9903      	ldr	r1, [sp, #12]
 800a6c0:	1a5b      	subs	r3, r3, r1
 800a6c2:	42ab      	cmp	r3, r5
 800a6c4:	dcf2      	bgt.n	800a6ac <_printf_i+0x214>
 800a6c6:	e7eb      	b.n	800a6a0 <_printf_i+0x208>
 800a6c8:	2500      	movs	r5, #0
 800a6ca:	f104 0619 	add.w	r6, r4, #25
 800a6ce:	e7f5      	b.n	800a6bc <_printf_i+0x224>
 800a6d0:	0800c894 	.word	0x0800c894
 800a6d4:	0800c8a5 	.word	0x0800c8a5

0800a6d8 <std>:
 800a6d8:	2300      	movs	r3, #0
 800a6da:	b510      	push	{r4, lr}
 800a6dc:	4604      	mov	r4, r0
 800a6de:	e9c0 3300 	strd	r3, r3, [r0]
 800a6e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6e6:	6083      	str	r3, [r0, #8]
 800a6e8:	8181      	strh	r1, [r0, #12]
 800a6ea:	6643      	str	r3, [r0, #100]	@ 0x64
 800a6ec:	81c2      	strh	r2, [r0, #14]
 800a6ee:	6183      	str	r3, [r0, #24]
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	2208      	movs	r2, #8
 800a6f4:	305c      	adds	r0, #92	@ 0x5c
 800a6f6:	f000 f906 	bl	800a906 <memset>
 800a6fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a730 <std+0x58>)
 800a6fc:	6224      	str	r4, [r4, #32]
 800a6fe:	6263      	str	r3, [r4, #36]	@ 0x24
 800a700:	4b0c      	ldr	r3, [pc, #48]	@ (800a734 <std+0x5c>)
 800a702:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a704:	4b0c      	ldr	r3, [pc, #48]	@ (800a738 <std+0x60>)
 800a706:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a708:	4b0c      	ldr	r3, [pc, #48]	@ (800a73c <std+0x64>)
 800a70a:	6323      	str	r3, [r4, #48]	@ 0x30
 800a70c:	4b0c      	ldr	r3, [pc, #48]	@ (800a740 <std+0x68>)
 800a70e:	429c      	cmp	r4, r3
 800a710:	d006      	beq.n	800a720 <std+0x48>
 800a712:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a716:	4294      	cmp	r4, r2
 800a718:	d002      	beq.n	800a720 <std+0x48>
 800a71a:	33d0      	adds	r3, #208	@ 0xd0
 800a71c:	429c      	cmp	r4, r3
 800a71e:	d105      	bne.n	800a72c <std+0x54>
 800a720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a728:	f000 b96a 	b.w	800aa00 <__retarget_lock_init_recursive>
 800a72c:	bd10      	pop	{r4, pc}
 800a72e:	bf00      	nop
 800a730:	0800a881 	.word	0x0800a881
 800a734:	0800a8a3 	.word	0x0800a8a3
 800a738:	0800a8db 	.word	0x0800a8db
 800a73c:	0800a8ff 	.word	0x0800a8ff
 800a740:	200015a4 	.word	0x200015a4

0800a744 <stdio_exit_handler>:
 800a744:	4a02      	ldr	r2, [pc, #8]	@ (800a750 <stdio_exit_handler+0xc>)
 800a746:	4903      	ldr	r1, [pc, #12]	@ (800a754 <stdio_exit_handler+0x10>)
 800a748:	4803      	ldr	r0, [pc, #12]	@ (800a758 <stdio_exit_handler+0x14>)
 800a74a:	f000 b869 	b.w	800a820 <_fwalk_sglue>
 800a74e:	bf00      	nop
 800a750:	20000188 	.word	0x20000188
 800a754:	0800c345 	.word	0x0800c345
 800a758:	20000198 	.word	0x20000198

0800a75c <cleanup_stdio>:
 800a75c:	6841      	ldr	r1, [r0, #4]
 800a75e:	4b0c      	ldr	r3, [pc, #48]	@ (800a790 <cleanup_stdio+0x34>)
 800a760:	b510      	push	{r4, lr}
 800a762:	4299      	cmp	r1, r3
 800a764:	4604      	mov	r4, r0
 800a766:	d001      	beq.n	800a76c <cleanup_stdio+0x10>
 800a768:	f001 fdec 	bl	800c344 <_fflush_r>
 800a76c:	68a1      	ldr	r1, [r4, #8]
 800a76e:	4b09      	ldr	r3, [pc, #36]	@ (800a794 <cleanup_stdio+0x38>)
 800a770:	4299      	cmp	r1, r3
 800a772:	d002      	beq.n	800a77a <cleanup_stdio+0x1e>
 800a774:	4620      	mov	r0, r4
 800a776:	f001 fde5 	bl	800c344 <_fflush_r>
 800a77a:	68e1      	ldr	r1, [r4, #12]
 800a77c:	4b06      	ldr	r3, [pc, #24]	@ (800a798 <cleanup_stdio+0x3c>)
 800a77e:	4299      	cmp	r1, r3
 800a780:	d004      	beq.n	800a78c <cleanup_stdio+0x30>
 800a782:	4620      	mov	r0, r4
 800a784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a788:	f001 bddc 	b.w	800c344 <_fflush_r>
 800a78c:	bd10      	pop	{r4, pc}
 800a78e:	bf00      	nop
 800a790:	200015a4 	.word	0x200015a4
 800a794:	2000160c 	.word	0x2000160c
 800a798:	20001674 	.word	0x20001674

0800a79c <global_stdio_init.part.0>:
 800a79c:	b510      	push	{r4, lr}
 800a79e:	4b0b      	ldr	r3, [pc, #44]	@ (800a7cc <global_stdio_init.part.0+0x30>)
 800a7a0:	4c0b      	ldr	r4, [pc, #44]	@ (800a7d0 <global_stdio_init.part.0+0x34>)
 800a7a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a7d4 <global_stdio_init.part.0+0x38>)
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	2104      	movs	r1, #4
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f7ff ff94 	bl	800a6d8 <std>
 800a7b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	2109      	movs	r1, #9
 800a7b8:	f7ff ff8e 	bl	800a6d8 <std>
 800a7bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7c6:	2112      	movs	r1, #18
 800a7c8:	f7ff bf86 	b.w	800a6d8 <std>
 800a7cc:	200016dc 	.word	0x200016dc
 800a7d0:	200015a4 	.word	0x200015a4
 800a7d4:	0800a745 	.word	0x0800a745

0800a7d8 <__sfp_lock_acquire>:
 800a7d8:	4801      	ldr	r0, [pc, #4]	@ (800a7e0 <__sfp_lock_acquire+0x8>)
 800a7da:	f000 b912 	b.w	800aa02 <__retarget_lock_acquire_recursive>
 800a7de:	bf00      	nop
 800a7e0:	200016e5 	.word	0x200016e5

0800a7e4 <__sfp_lock_release>:
 800a7e4:	4801      	ldr	r0, [pc, #4]	@ (800a7ec <__sfp_lock_release+0x8>)
 800a7e6:	f000 b90d 	b.w	800aa04 <__retarget_lock_release_recursive>
 800a7ea:	bf00      	nop
 800a7ec:	200016e5 	.word	0x200016e5

0800a7f0 <__sinit>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	f7ff fff0 	bl	800a7d8 <__sfp_lock_acquire>
 800a7f8:	6a23      	ldr	r3, [r4, #32]
 800a7fa:	b11b      	cbz	r3, 800a804 <__sinit+0x14>
 800a7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a800:	f7ff bff0 	b.w	800a7e4 <__sfp_lock_release>
 800a804:	4b04      	ldr	r3, [pc, #16]	@ (800a818 <__sinit+0x28>)
 800a806:	6223      	str	r3, [r4, #32]
 800a808:	4b04      	ldr	r3, [pc, #16]	@ (800a81c <__sinit+0x2c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1f5      	bne.n	800a7fc <__sinit+0xc>
 800a810:	f7ff ffc4 	bl	800a79c <global_stdio_init.part.0>
 800a814:	e7f2      	b.n	800a7fc <__sinit+0xc>
 800a816:	bf00      	nop
 800a818:	0800a75d 	.word	0x0800a75d
 800a81c:	200016dc 	.word	0x200016dc

0800a820 <_fwalk_sglue>:
 800a820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a824:	4607      	mov	r7, r0
 800a826:	4688      	mov	r8, r1
 800a828:	4614      	mov	r4, r2
 800a82a:	2600      	movs	r6, #0
 800a82c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a830:	f1b9 0901 	subs.w	r9, r9, #1
 800a834:	d505      	bpl.n	800a842 <_fwalk_sglue+0x22>
 800a836:	6824      	ldr	r4, [r4, #0]
 800a838:	2c00      	cmp	r4, #0
 800a83a:	d1f7      	bne.n	800a82c <_fwalk_sglue+0xc>
 800a83c:	4630      	mov	r0, r6
 800a83e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a842:	89ab      	ldrh	r3, [r5, #12]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d907      	bls.n	800a858 <_fwalk_sglue+0x38>
 800a848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a84c:	3301      	adds	r3, #1
 800a84e:	d003      	beq.n	800a858 <_fwalk_sglue+0x38>
 800a850:	4629      	mov	r1, r5
 800a852:	4638      	mov	r0, r7
 800a854:	47c0      	blx	r8
 800a856:	4306      	orrs	r6, r0
 800a858:	3568      	adds	r5, #104	@ 0x68
 800a85a:	e7e9      	b.n	800a830 <_fwalk_sglue+0x10>

0800a85c <iprintf>:
 800a85c:	b40f      	push	{r0, r1, r2, r3}
 800a85e:	b507      	push	{r0, r1, r2, lr}
 800a860:	4906      	ldr	r1, [pc, #24]	@ (800a87c <iprintf+0x20>)
 800a862:	ab04      	add	r3, sp, #16
 800a864:	6808      	ldr	r0, [r1, #0]
 800a866:	f853 2b04 	ldr.w	r2, [r3], #4
 800a86a:	6881      	ldr	r1, [r0, #8]
 800a86c:	9301      	str	r3, [sp, #4]
 800a86e:	f001 fbd1 	bl	800c014 <_vfiprintf_r>
 800a872:	b003      	add	sp, #12
 800a874:	f85d eb04 	ldr.w	lr, [sp], #4
 800a878:	b004      	add	sp, #16
 800a87a:	4770      	bx	lr
 800a87c:	20000194 	.word	0x20000194

0800a880 <__sread>:
 800a880:	b510      	push	{r4, lr}
 800a882:	460c      	mov	r4, r1
 800a884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a888:	f000 f86c 	bl	800a964 <_read_r>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	bfab      	itete	ge
 800a890:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a892:	89a3      	ldrhlt	r3, [r4, #12]
 800a894:	181b      	addge	r3, r3, r0
 800a896:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a89a:	bfac      	ite	ge
 800a89c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a89e:	81a3      	strhlt	r3, [r4, #12]
 800a8a0:	bd10      	pop	{r4, pc}

0800a8a2 <__swrite>:
 800a8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a6:	461f      	mov	r7, r3
 800a8a8:	898b      	ldrh	r3, [r1, #12]
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	05db      	lsls	r3, r3, #23
 800a8ae:	460c      	mov	r4, r1
 800a8b0:	4616      	mov	r6, r2
 800a8b2:	d505      	bpl.n	800a8c0 <__swrite+0x1e>
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8bc:	f000 f840 	bl	800a940 <_lseek_r>
 800a8c0:	89a3      	ldrh	r3, [r4, #12]
 800a8c2:	4632      	mov	r2, r6
 800a8c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8c8:	81a3      	strh	r3, [r4, #12]
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	463b      	mov	r3, r7
 800a8ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d6:	f000 b857 	b.w	800a988 <_write_r>

0800a8da <__sseek>:
 800a8da:	b510      	push	{r4, lr}
 800a8dc:	460c      	mov	r4, r1
 800a8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e2:	f000 f82d 	bl	800a940 <_lseek_r>
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	bf15      	itete	ne
 800a8ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a8ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a8f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a8f6:	81a3      	strheq	r3, [r4, #12]
 800a8f8:	bf18      	it	ne
 800a8fa:	81a3      	strhne	r3, [r4, #12]
 800a8fc:	bd10      	pop	{r4, pc}

0800a8fe <__sclose>:
 800a8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a902:	f000 b80d 	b.w	800a920 <_close_r>

0800a906 <memset>:
 800a906:	4603      	mov	r3, r0
 800a908:	4402      	add	r2, r0
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d100      	bne.n	800a910 <memset+0xa>
 800a90e:	4770      	bx	lr
 800a910:	f803 1b01 	strb.w	r1, [r3], #1
 800a914:	e7f9      	b.n	800a90a <memset+0x4>
	...

0800a918 <_localeconv_r>:
 800a918:	4800      	ldr	r0, [pc, #0]	@ (800a91c <_localeconv_r+0x4>)
 800a91a:	4770      	bx	lr
 800a91c:	200002d4 	.word	0x200002d4

0800a920 <_close_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	2300      	movs	r3, #0
 800a924:	4d05      	ldr	r5, [pc, #20]	@ (800a93c <_close_r+0x1c>)
 800a926:	4604      	mov	r4, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	602b      	str	r3, [r5, #0]
 800a92c:	f7f6 ffcd 	bl	80018ca <_close>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_close_r+0x1a>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	b103      	cbz	r3, 800a93a <_close_r+0x1a>
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	200016e0 	.word	0x200016e0

0800a940 <_lseek_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4604      	mov	r4, r0
 800a944:	4608      	mov	r0, r1
 800a946:	4611      	mov	r1, r2
 800a948:	2200      	movs	r2, #0
 800a94a:	4d05      	ldr	r5, [pc, #20]	@ (800a960 <_lseek_r+0x20>)
 800a94c:	602a      	str	r2, [r5, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	f7f6 ffdf 	bl	8001912 <_lseek>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_lseek_r+0x1e>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_lseek_r+0x1e>
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	200016e0 	.word	0x200016e0

0800a964 <_read_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	4611      	mov	r1, r2
 800a96c:	2200      	movs	r2, #0
 800a96e:	4d05      	ldr	r5, [pc, #20]	@ (800a984 <_read_r+0x20>)
 800a970:	602a      	str	r2, [r5, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	f7f6 ff70 	bl	8001858 <_read>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_read_r+0x1e>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_read_r+0x1e>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	200016e0 	.word	0x200016e0

0800a988 <_write_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4604      	mov	r4, r0
 800a98c:	4608      	mov	r0, r1
 800a98e:	4611      	mov	r1, r2
 800a990:	2200      	movs	r2, #0
 800a992:	4d05      	ldr	r5, [pc, #20]	@ (800a9a8 <_write_r+0x20>)
 800a994:	602a      	str	r2, [r5, #0]
 800a996:	461a      	mov	r2, r3
 800a998:	f7f6 ff7b 	bl	8001892 <_write>
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	d102      	bne.n	800a9a6 <_write_r+0x1e>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	b103      	cbz	r3, 800a9a6 <_write_r+0x1e>
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	200016e0 	.word	0x200016e0

0800a9ac <__errno>:
 800a9ac:	4b01      	ldr	r3, [pc, #4]	@ (800a9b4 <__errno+0x8>)
 800a9ae:	6818      	ldr	r0, [r3, #0]
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	20000194 	.word	0x20000194

0800a9b8 <__libc_init_array>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	2600      	movs	r6, #0
 800a9bc:	4d0c      	ldr	r5, [pc, #48]	@ (800a9f0 <__libc_init_array+0x38>)
 800a9be:	4c0d      	ldr	r4, [pc, #52]	@ (800a9f4 <__libc_init_array+0x3c>)
 800a9c0:	1b64      	subs	r4, r4, r5
 800a9c2:	10a4      	asrs	r4, r4, #2
 800a9c4:	42a6      	cmp	r6, r4
 800a9c6:	d109      	bne.n	800a9dc <__libc_init_array+0x24>
 800a9c8:	f001 ff0c 	bl	800c7e4 <_init>
 800a9cc:	2600      	movs	r6, #0
 800a9ce:	4d0a      	ldr	r5, [pc, #40]	@ (800a9f8 <__libc_init_array+0x40>)
 800a9d0:	4c0a      	ldr	r4, [pc, #40]	@ (800a9fc <__libc_init_array+0x44>)
 800a9d2:	1b64      	subs	r4, r4, r5
 800a9d4:	10a4      	asrs	r4, r4, #2
 800a9d6:	42a6      	cmp	r6, r4
 800a9d8:	d105      	bne.n	800a9e6 <__libc_init_array+0x2e>
 800a9da:	bd70      	pop	{r4, r5, r6, pc}
 800a9dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9e0:	4798      	blx	r3
 800a9e2:	3601      	adds	r6, #1
 800a9e4:	e7ee      	b.n	800a9c4 <__libc_init_array+0xc>
 800a9e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ea:	4798      	blx	r3
 800a9ec:	3601      	adds	r6, #1
 800a9ee:	e7f2      	b.n	800a9d6 <__libc_init_array+0x1e>
 800a9f0:	0800cbf8 	.word	0x0800cbf8
 800a9f4:	0800cbf8 	.word	0x0800cbf8
 800a9f8:	0800cbf8 	.word	0x0800cbf8
 800a9fc:	0800cbfc 	.word	0x0800cbfc

0800aa00 <__retarget_lock_init_recursive>:
 800aa00:	4770      	bx	lr

0800aa02 <__retarget_lock_acquire_recursive>:
 800aa02:	4770      	bx	lr

0800aa04 <__retarget_lock_release_recursive>:
 800aa04:	4770      	bx	lr

0800aa06 <memchr>:
 800aa06:	4603      	mov	r3, r0
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	b2c9      	uxtb	r1, r1
 800aa0c:	4402      	add	r2, r0
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	4618      	mov	r0, r3
 800aa12:	d101      	bne.n	800aa18 <memchr+0x12>
 800aa14:	2000      	movs	r0, #0
 800aa16:	e003      	b.n	800aa20 <memchr+0x1a>
 800aa18:	7804      	ldrb	r4, [r0, #0]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	428c      	cmp	r4, r1
 800aa1e:	d1f6      	bne.n	800aa0e <memchr+0x8>
 800aa20:	bd10      	pop	{r4, pc}

0800aa22 <quorem>:
 800aa22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa26:	6903      	ldr	r3, [r0, #16]
 800aa28:	690c      	ldr	r4, [r1, #16]
 800aa2a:	4607      	mov	r7, r0
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	db7e      	blt.n	800ab2e <quorem+0x10c>
 800aa30:	3c01      	subs	r4, #1
 800aa32:	00a3      	lsls	r3, r4, #2
 800aa34:	f100 0514 	add.w	r5, r0, #20
 800aa38:	f101 0814 	add.w	r8, r1, #20
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa42:	9301      	str	r3, [sp, #4]
 800aa44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa58:	d32e      	bcc.n	800aab8 <quorem+0x96>
 800aa5a:	f04f 0a00 	mov.w	sl, #0
 800aa5e:	46c4      	mov	ip, r8
 800aa60:	46ae      	mov	lr, r5
 800aa62:	46d3      	mov	fp, sl
 800aa64:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa68:	b298      	uxth	r0, r3
 800aa6a:	fb06 a000 	mla	r0, r6, r0, sl
 800aa6e:	0c1b      	lsrs	r3, r3, #16
 800aa70:	0c02      	lsrs	r2, r0, #16
 800aa72:	fb06 2303 	mla	r3, r6, r3, r2
 800aa76:	f8de 2000 	ldr.w	r2, [lr]
 800aa7a:	b280      	uxth	r0, r0
 800aa7c:	b292      	uxth	r2, r2
 800aa7e:	1a12      	subs	r2, r2, r0
 800aa80:	445a      	add	r2, fp
 800aa82:	f8de 0000 	ldr.w	r0, [lr]
 800aa86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa90:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa94:	b292      	uxth	r2, r2
 800aa96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa9a:	45e1      	cmp	r9, ip
 800aa9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aaa0:	f84e 2b04 	str.w	r2, [lr], #4
 800aaa4:	d2de      	bcs.n	800aa64 <quorem+0x42>
 800aaa6:	9b00      	ldr	r3, [sp, #0]
 800aaa8:	58eb      	ldr	r3, [r5, r3]
 800aaaa:	b92b      	cbnz	r3, 800aab8 <quorem+0x96>
 800aaac:	9b01      	ldr	r3, [sp, #4]
 800aaae:	3b04      	subs	r3, #4
 800aab0:	429d      	cmp	r5, r3
 800aab2:	461a      	mov	r2, r3
 800aab4:	d32f      	bcc.n	800ab16 <quorem+0xf4>
 800aab6:	613c      	str	r4, [r7, #16]
 800aab8:	4638      	mov	r0, r7
 800aaba:	f001 f97b 	bl	800bdb4 <__mcmp>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	db25      	blt.n	800ab0e <quorem+0xec>
 800aac2:	4629      	mov	r1, r5
 800aac4:	2000      	movs	r0, #0
 800aac6:	f858 2b04 	ldr.w	r2, [r8], #4
 800aaca:	f8d1 c000 	ldr.w	ip, [r1]
 800aace:	fa1f fe82 	uxth.w	lr, r2
 800aad2:	fa1f f38c 	uxth.w	r3, ip
 800aad6:	eba3 030e 	sub.w	r3, r3, lr
 800aada:	4403      	add	r3, r0
 800aadc:	0c12      	lsrs	r2, r2, #16
 800aade:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aae2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aaec:	45c1      	cmp	r9, r8
 800aaee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aaf2:	f841 3b04 	str.w	r3, [r1], #4
 800aaf6:	d2e6      	bcs.n	800aac6 <quorem+0xa4>
 800aaf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aafc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab00:	b922      	cbnz	r2, 800ab0c <quorem+0xea>
 800ab02:	3b04      	subs	r3, #4
 800ab04:	429d      	cmp	r5, r3
 800ab06:	461a      	mov	r2, r3
 800ab08:	d30b      	bcc.n	800ab22 <quorem+0x100>
 800ab0a:	613c      	str	r4, [r7, #16]
 800ab0c:	3601      	adds	r6, #1
 800ab0e:	4630      	mov	r0, r6
 800ab10:	b003      	add	sp, #12
 800ab12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	3b04      	subs	r3, #4
 800ab1a:	2a00      	cmp	r2, #0
 800ab1c:	d1cb      	bne.n	800aab6 <quorem+0x94>
 800ab1e:	3c01      	subs	r4, #1
 800ab20:	e7c6      	b.n	800aab0 <quorem+0x8e>
 800ab22:	6812      	ldr	r2, [r2, #0]
 800ab24:	3b04      	subs	r3, #4
 800ab26:	2a00      	cmp	r2, #0
 800ab28:	d1ef      	bne.n	800ab0a <quorem+0xe8>
 800ab2a:	3c01      	subs	r4, #1
 800ab2c:	e7ea      	b.n	800ab04 <quorem+0xe2>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	e7ee      	b.n	800ab10 <quorem+0xee>
 800ab32:	0000      	movs	r0, r0
 800ab34:	0000      	movs	r0, r0
	...

0800ab38 <_dtoa_r>:
 800ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	461d      	mov	r5, r3
 800ab40:	69c7      	ldr	r7, [r0, #28]
 800ab42:	b097      	sub	sp, #92	@ 0x5c
 800ab44:	4683      	mov	fp, r0
 800ab46:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ab4a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800ab4c:	b97f      	cbnz	r7, 800ab6e <_dtoa_r+0x36>
 800ab4e:	2010      	movs	r0, #16
 800ab50:	f000 fe02 	bl	800b758 <malloc>
 800ab54:	4602      	mov	r2, r0
 800ab56:	f8cb 001c 	str.w	r0, [fp, #28]
 800ab5a:	b920      	cbnz	r0, 800ab66 <_dtoa_r+0x2e>
 800ab5c:	21ef      	movs	r1, #239	@ 0xef
 800ab5e:	4ba8      	ldr	r3, [pc, #672]	@ (800ae00 <_dtoa_r+0x2c8>)
 800ab60:	48a8      	ldr	r0, [pc, #672]	@ (800ae04 <_dtoa_r+0x2cc>)
 800ab62:	f001 fcc9 	bl	800c4f8 <__assert_func>
 800ab66:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab6a:	6007      	str	r7, [r0, #0]
 800ab6c:	60c7      	str	r7, [r0, #12]
 800ab6e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab72:	6819      	ldr	r1, [r3, #0]
 800ab74:	b159      	cbz	r1, 800ab8e <_dtoa_r+0x56>
 800ab76:	685a      	ldr	r2, [r3, #4]
 800ab78:	2301      	movs	r3, #1
 800ab7a:	4093      	lsls	r3, r2
 800ab7c:	604a      	str	r2, [r1, #4]
 800ab7e:	608b      	str	r3, [r1, #8]
 800ab80:	4658      	mov	r0, fp
 800ab82:	f000 fedf 	bl	800b944 <_Bfree>
 800ab86:	2200      	movs	r2, #0
 800ab88:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab8c:	601a      	str	r2, [r3, #0]
 800ab8e:	1e2b      	subs	r3, r5, #0
 800ab90:	bfaf      	iteee	ge
 800ab92:	2300      	movge	r3, #0
 800ab94:	2201      	movlt	r2, #1
 800ab96:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab9a:	9303      	strlt	r3, [sp, #12]
 800ab9c:	bfa8      	it	ge
 800ab9e:	6033      	strge	r3, [r6, #0]
 800aba0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aba4:	4b98      	ldr	r3, [pc, #608]	@ (800ae08 <_dtoa_r+0x2d0>)
 800aba6:	bfb8      	it	lt
 800aba8:	6032      	strlt	r2, [r6, #0]
 800abaa:	ea33 0308 	bics.w	r3, r3, r8
 800abae:	d112      	bne.n	800abd6 <_dtoa_r+0x9e>
 800abb0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800abb4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800abbc:	4323      	orrs	r3, r4
 800abbe:	f000 8550 	beq.w	800b662 <_dtoa_r+0xb2a>
 800abc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800abc4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800ae0c <_dtoa_r+0x2d4>
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f000 8552 	beq.w	800b672 <_dtoa_r+0xb3a>
 800abce:	f10a 0303 	add.w	r3, sl, #3
 800abd2:	f000 bd4c 	b.w	800b66e <_dtoa_r+0xb36>
 800abd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abda:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800abde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abe2:	2200      	movs	r2, #0
 800abe4:	2300      	movs	r3, #0
 800abe6:	f7f5 fedf 	bl	80009a8 <__aeabi_dcmpeq>
 800abea:	4607      	mov	r7, r0
 800abec:	b158      	cbz	r0, 800ac06 <_dtoa_r+0xce>
 800abee:	2301      	movs	r3, #1
 800abf0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800abf2:	6013      	str	r3, [r2, #0]
 800abf4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800abf6:	b113      	cbz	r3, 800abfe <_dtoa_r+0xc6>
 800abf8:	4b85      	ldr	r3, [pc, #532]	@ (800ae10 <_dtoa_r+0x2d8>)
 800abfa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800abfc:	6013      	str	r3, [r2, #0]
 800abfe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800ae14 <_dtoa_r+0x2dc>
 800ac02:	f000 bd36 	b.w	800b672 <_dtoa_r+0xb3a>
 800ac06:	ab14      	add	r3, sp, #80	@ 0x50
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	ab15      	add	r3, sp, #84	@ 0x54
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	4658      	mov	r0, fp
 800ac10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ac14:	f001 f97e 	bl	800bf14 <__d2b>
 800ac18:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ac1c:	4681      	mov	r9, r0
 800ac1e:	2e00      	cmp	r6, #0
 800ac20:	d077      	beq.n	800ad12 <_dtoa_r+0x1da>
 800ac22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac28:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ac2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac30:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ac34:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ac38:	9712      	str	r7, [sp, #72]	@ 0x48
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	4b76      	ldr	r3, [pc, #472]	@ (800ae18 <_dtoa_r+0x2e0>)
 800ac40:	f7f5 fa92 	bl	8000168 <__aeabi_dsub>
 800ac44:	a368      	add	r3, pc, #416	@ (adr r3, 800ade8 <_dtoa_r+0x2b0>)
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	f7f5 fc45 	bl	80004d8 <__aeabi_dmul>
 800ac4e:	a368      	add	r3, pc, #416	@ (adr r3, 800adf0 <_dtoa_r+0x2b8>)
 800ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac54:	f7f5 fa8a 	bl	800016c <__adddf3>
 800ac58:	4604      	mov	r4, r0
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	460d      	mov	r5, r1
 800ac5e:	f7f5 fbd1 	bl	8000404 <__aeabi_i2d>
 800ac62:	a365      	add	r3, pc, #404	@ (adr r3, 800adf8 <_dtoa_r+0x2c0>)
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	f7f5 fc36 	bl	80004d8 <__aeabi_dmul>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4620      	mov	r0, r4
 800ac72:	4629      	mov	r1, r5
 800ac74:	f7f5 fa7a 	bl	800016c <__adddf3>
 800ac78:	4604      	mov	r4, r0
 800ac7a:	460d      	mov	r5, r1
 800ac7c:	f7f5 fedc 	bl	8000a38 <__aeabi_d2iz>
 800ac80:	2200      	movs	r2, #0
 800ac82:	4607      	mov	r7, r0
 800ac84:	2300      	movs	r3, #0
 800ac86:	4620      	mov	r0, r4
 800ac88:	4629      	mov	r1, r5
 800ac8a:	f7f5 fe97 	bl	80009bc <__aeabi_dcmplt>
 800ac8e:	b140      	cbz	r0, 800aca2 <_dtoa_r+0x16a>
 800ac90:	4638      	mov	r0, r7
 800ac92:	f7f5 fbb7 	bl	8000404 <__aeabi_i2d>
 800ac96:	4622      	mov	r2, r4
 800ac98:	462b      	mov	r3, r5
 800ac9a:	f7f5 fe85 	bl	80009a8 <__aeabi_dcmpeq>
 800ac9e:	b900      	cbnz	r0, 800aca2 <_dtoa_r+0x16a>
 800aca0:	3f01      	subs	r7, #1
 800aca2:	2f16      	cmp	r7, #22
 800aca4:	d853      	bhi.n	800ad4e <_dtoa_r+0x216>
 800aca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acaa:	4b5c      	ldr	r3, [pc, #368]	@ (800ae1c <_dtoa_r+0x2e4>)
 800acac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f7f5 fe82 	bl	80009bc <__aeabi_dcmplt>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d04a      	beq.n	800ad52 <_dtoa_r+0x21a>
 800acbc:	2300      	movs	r3, #0
 800acbe:	3f01      	subs	r7, #1
 800acc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800acc2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800acc4:	1b9b      	subs	r3, r3, r6
 800acc6:	1e5a      	subs	r2, r3, #1
 800acc8:	bf46      	itte	mi
 800acca:	f1c3 0801 	rsbmi	r8, r3, #1
 800acce:	2300      	movmi	r3, #0
 800acd0:	f04f 0800 	movpl.w	r8, #0
 800acd4:	9209      	str	r2, [sp, #36]	@ 0x24
 800acd6:	bf48      	it	mi
 800acd8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800acda:	2f00      	cmp	r7, #0
 800acdc:	db3b      	blt.n	800ad56 <_dtoa_r+0x21e>
 800acde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ace0:	970e      	str	r7, [sp, #56]	@ 0x38
 800ace2:	443b      	add	r3, r7
 800ace4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ace6:	2300      	movs	r3, #0
 800ace8:	930a      	str	r3, [sp, #40]	@ 0x28
 800acea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800acec:	2b09      	cmp	r3, #9
 800acee:	d866      	bhi.n	800adbe <_dtoa_r+0x286>
 800acf0:	2b05      	cmp	r3, #5
 800acf2:	bfc4      	itt	gt
 800acf4:	3b04      	subgt	r3, #4
 800acf6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800acf8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800acfa:	bfc8      	it	gt
 800acfc:	2400      	movgt	r4, #0
 800acfe:	f1a3 0302 	sub.w	r3, r3, #2
 800ad02:	bfd8      	it	le
 800ad04:	2401      	movle	r4, #1
 800ad06:	2b03      	cmp	r3, #3
 800ad08:	d864      	bhi.n	800add4 <_dtoa_r+0x29c>
 800ad0a:	e8df f003 	tbb	[pc, r3]
 800ad0e:	382b      	.short	0x382b
 800ad10:	5636      	.short	0x5636
 800ad12:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ad16:	441e      	add	r6, r3
 800ad18:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ad1c:	2b20      	cmp	r3, #32
 800ad1e:	bfc1      	itttt	gt
 800ad20:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ad24:	fa08 f803 	lslgt.w	r8, r8, r3
 800ad28:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ad2c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ad30:	bfd6      	itet	le
 800ad32:	f1c3 0320 	rsble	r3, r3, #32
 800ad36:	ea48 0003 	orrgt.w	r0, r8, r3
 800ad3a:	fa04 f003 	lslle.w	r0, r4, r3
 800ad3e:	f7f5 fb51 	bl	80003e4 <__aeabi_ui2d>
 800ad42:	2201      	movs	r2, #1
 800ad44:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ad48:	3e01      	subs	r6, #1
 800ad4a:	9212      	str	r2, [sp, #72]	@ 0x48
 800ad4c:	e775      	b.n	800ac3a <_dtoa_r+0x102>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e7b6      	b.n	800acc0 <_dtoa_r+0x188>
 800ad52:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ad54:	e7b5      	b.n	800acc2 <_dtoa_r+0x18a>
 800ad56:	427b      	negs	r3, r7
 800ad58:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	eba8 0807 	sub.w	r8, r8, r7
 800ad60:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad62:	e7c2      	b.n	800acea <_dtoa_r+0x1b2>
 800ad64:	2300      	movs	r3, #0
 800ad66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	dc35      	bgt.n	800adda <_dtoa_r+0x2a2>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	461a      	mov	r2, r3
 800ad72:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ad76:	9221      	str	r2, [sp, #132]	@ 0x84
 800ad78:	e00b      	b.n	800ad92 <_dtoa_r+0x25a>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e7f3      	b.n	800ad66 <_dtoa_r+0x22e>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad84:	18fb      	adds	r3, r7, r3
 800ad86:	9308      	str	r3, [sp, #32]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	9307      	str	r3, [sp, #28]
 800ad8e:	bfb8      	it	lt
 800ad90:	2301      	movlt	r3, #1
 800ad92:	2100      	movs	r1, #0
 800ad94:	2204      	movs	r2, #4
 800ad96:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ad9a:	f102 0514 	add.w	r5, r2, #20
 800ad9e:	429d      	cmp	r5, r3
 800ada0:	d91f      	bls.n	800ade2 <_dtoa_r+0x2aa>
 800ada2:	6041      	str	r1, [r0, #4]
 800ada4:	4658      	mov	r0, fp
 800ada6:	f000 fd8d 	bl	800b8c4 <_Balloc>
 800adaa:	4682      	mov	sl, r0
 800adac:	2800      	cmp	r0, #0
 800adae:	d139      	bne.n	800ae24 <_dtoa_r+0x2ec>
 800adb0:	4602      	mov	r2, r0
 800adb2:	f240 11af 	movw	r1, #431	@ 0x1af
 800adb6:	4b1a      	ldr	r3, [pc, #104]	@ (800ae20 <_dtoa_r+0x2e8>)
 800adb8:	e6d2      	b.n	800ab60 <_dtoa_r+0x28>
 800adba:	2301      	movs	r3, #1
 800adbc:	e7e0      	b.n	800ad80 <_dtoa_r+0x248>
 800adbe:	2401      	movs	r4, #1
 800adc0:	2300      	movs	r3, #0
 800adc2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800adc4:	9320      	str	r3, [sp, #128]	@ 0x80
 800adc6:	f04f 33ff 	mov.w	r3, #4294967295
 800adca:	2200      	movs	r2, #0
 800adcc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800add0:	2312      	movs	r3, #18
 800add2:	e7d0      	b.n	800ad76 <_dtoa_r+0x23e>
 800add4:	2301      	movs	r3, #1
 800add6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800add8:	e7f5      	b.n	800adc6 <_dtoa_r+0x28e>
 800adda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800addc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ade0:	e7d7      	b.n	800ad92 <_dtoa_r+0x25a>
 800ade2:	3101      	adds	r1, #1
 800ade4:	0052      	lsls	r2, r2, #1
 800ade6:	e7d8      	b.n	800ad9a <_dtoa_r+0x262>
 800ade8:	636f4361 	.word	0x636f4361
 800adec:	3fd287a7 	.word	0x3fd287a7
 800adf0:	8b60c8b3 	.word	0x8b60c8b3
 800adf4:	3fc68a28 	.word	0x3fc68a28
 800adf8:	509f79fb 	.word	0x509f79fb
 800adfc:	3fd34413 	.word	0x3fd34413
 800ae00:	0800c8c3 	.word	0x0800c8c3
 800ae04:	0800c8da 	.word	0x0800c8da
 800ae08:	7ff00000 	.word	0x7ff00000
 800ae0c:	0800c8bf 	.word	0x0800c8bf
 800ae10:	0800c893 	.word	0x0800c893
 800ae14:	0800c892 	.word	0x0800c892
 800ae18:	3ff80000 	.word	0x3ff80000
 800ae1c:	0800c9d0 	.word	0x0800c9d0
 800ae20:	0800c932 	.word	0x0800c932
 800ae24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae28:	6018      	str	r0, [r3, #0]
 800ae2a:	9b07      	ldr	r3, [sp, #28]
 800ae2c:	2b0e      	cmp	r3, #14
 800ae2e:	f200 80a4 	bhi.w	800af7a <_dtoa_r+0x442>
 800ae32:	2c00      	cmp	r4, #0
 800ae34:	f000 80a1 	beq.w	800af7a <_dtoa_r+0x442>
 800ae38:	2f00      	cmp	r7, #0
 800ae3a:	dd33      	ble.n	800aea4 <_dtoa_r+0x36c>
 800ae3c:	4b86      	ldr	r3, [pc, #536]	@ (800b058 <_dtoa_r+0x520>)
 800ae3e:	f007 020f 	and.w	r2, r7, #15
 800ae42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae46:	05f8      	lsls	r0, r7, #23
 800ae48:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae4c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ae54:	d516      	bpl.n	800ae84 <_dtoa_r+0x34c>
 800ae56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae5a:	4b80      	ldr	r3, [pc, #512]	@ (800b05c <_dtoa_r+0x524>)
 800ae5c:	2603      	movs	r6, #3
 800ae5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae62:	f7f5 fc63 	bl	800072c <__aeabi_ddiv>
 800ae66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae6a:	f004 040f 	and.w	r4, r4, #15
 800ae6e:	4d7b      	ldr	r5, [pc, #492]	@ (800b05c <_dtoa_r+0x524>)
 800ae70:	b954      	cbnz	r4, 800ae88 <_dtoa_r+0x350>
 800ae72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae7a:	f7f5 fc57 	bl	800072c <__aeabi_ddiv>
 800ae7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae82:	e028      	b.n	800aed6 <_dtoa_r+0x39e>
 800ae84:	2602      	movs	r6, #2
 800ae86:	e7f2      	b.n	800ae6e <_dtoa_r+0x336>
 800ae88:	07e1      	lsls	r1, r4, #31
 800ae8a:	d508      	bpl.n	800ae9e <_dtoa_r+0x366>
 800ae8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae94:	f7f5 fb20 	bl	80004d8 <__aeabi_dmul>
 800ae98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae9c:	3601      	adds	r6, #1
 800ae9e:	1064      	asrs	r4, r4, #1
 800aea0:	3508      	adds	r5, #8
 800aea2:	e7e5      	b.n	800ae70 <_dtoa_r+0x338>
 800aea4:	f000 80d2 	beq.w	800b04c <_dtoa_r+0x514>
 800aea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aeac:	427c      	negs	r4, r7
 800aeae:	4b6a      	ldr	r3, [pc, #424]	@ (800b058 <_dtoa_r+0x520>)
 800aeb0:	f004 020f 	and.w	r2, r4, #15
 800aeb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	f7f5 fb0c 	bl	80004d8 <__aeabi_dmul>
 800aec0:	2602      	movs	r6, #2
 800aec2:	2300      	movs	r3, #0
 800aec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aec8:	4d64      	ldr	r5, [pc, #400]	@ (800b05c <_dtoa_r+0x524>)
 800aeca:	1124      	asrs	r4, r4, #4
 800aecc:	2c00      	cmp	r4, #0
 800aece:	f040 80b2 	bne.w	800b036 <_dtoa_r+0x4fe>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1d3      	bne.n	800ae7e <_dtoa_r+0x346>
 800aed6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aeda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 80b7 	beq.w	800b050 <_dtoa_r+0x518>
 800aee2:	2200      	movs	r2, #0
 800aee4:	4620      	mov	r0, r4
 800aee6:	4629      	mov	r1, r5
 800aee8:	4b5d      	ldr	r3, [pc, #372]	@ (800b060 <_dtoa_r+0x528>)
 800aeea:	f7f5 fd67 	bl	80009bc <__aeabi_dcmplt>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	f000 80ae 	beq.w	800b050 <_dtoa_r+0x518>
 800aef4:	9b07      	ldr	r3, [sp, #28]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f000 80aa 	beq.w	800b050 <_dtoa_r+0x518>
 800aefc:	9b08      	ldr	r3, [sp, #32]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	dd37      	ble.n	800af72 <_dtoa_r+0x43a>
 800af02:	1e7b      	subs	r3, r7, #1
 800af04:	4620      	mov	r0, r4
 800af06:	9304      	str	r3, [sp, #16]
 800af08:	2200      	movs	r2, #0
 800af0a:	4629      	mov	r1, r5
 800af0c:	4b55      	ldr	r3, [pc, #340]	@ (800b064 <_dtoa_r+0x52c>)
 800af0e:	f7f5 fae3 	bl	80004d8 <__aeabi_dmul>
 800af12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af16:	9c08      	ldr	r4, [sp, #32]
 800af18:	3601      	adds	r6, #1
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7f5 fa72 	bl	8000404 <__aeabi_i2d>
 800af20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af24:	f7f5 fad8 	bl	80004d8 <__aeabi_dmul>
 800af28:	2200      	movs	r2, #0
 800af2a:	4b4f      	ldr	r3, [pc, #316]	@ (800b068 <_dtoa_r+0x530>)
 800af2c:	f7f5 f91e 	bl	800016c <__adddf3>
 800af30:	4605      	mov	r5, r0
 800af32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800af36:	2c00      	cmp	r4, #0
 800af38:	f040 809a 	bne.w	800b070 <_dtoa_r+0x538>
 800af3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af40:	2200      	movs	r2, #0
 800af42:	4b4a      	ldr	r3, [pc, #296]	@ (800b06c <_dtoa_r+0x534>)
 800af44:	f7f5 f910 	bl	8000168 <__aeabi_dsub>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af50:	462a      	mov	r2, r5
 800af52:	4633      	mov	r3, r6
 800af54:	f7f5 fd50 	bl	80009f8 <__aeabi_dcmpgt>
 800af58:	2800      	cmp	r0, #0
 800af5a:	f040 828e 	bne.w	800b47a <_dtoa_r+0x942>
 800af5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af62:	462a      	mov	r2, r5
 800af64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af68:	f7f5 fd28 	bl	80009bc <__aeabi_dcmplt>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	f040 8127 	bne.w	800b1c0 <_dtoa_r+0x688>
 800af72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800af76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800af7a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f2c0 8163 	blt.w	800b248 <_dtoa_r+0x710>
 800af82:	2f0e      	cmp	r7, #14
 800af84:	f300 8160 	bgt.w	800b248 <_dtoa_r+0x710>
 800af88:	4b33      	ldr	r3, [pc, #204]	@ (800b058 <_dtoa_r+0x520>)
 800af8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af98:	2b00      	cmp	r3, #0
 800af9a:	da03      	bge.n	800afa4 <_dtoa_r+0x46c>
 800af9c:	9b07      	ldr	r3, [sp, #28]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f340 8100 	ble.w	800b1a4 <_dtoa_r+0x66c>
 800afa4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800afa8:	4656      	mov	r6, sl
 800afaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afae:	4620      	mov	r0, r4
 800afb0:	4629      	mov	r1, r5
 800afb2:	f7f5 fbbb 	bl	800072c <__aeabi_ddiv>
 800afb6:	f7f5 fd3f 	bl	8000a38 <__aeabi_d2iz>
 800afba:	4680      	mov	r8, r0
 800afbc:	f7f5 fa22 	bl	8000404 <__aeabi_i2d>
 800afc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afc4:	f7f5 fa88 	bl	80004d8 <__aeabi_dmul>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	4620      	mov	r0, r4
 800afce:	4629      	mov	r1, r5
 800afd0:	f7f5 f8ca 	bl	8000168 <__aeabi_dsub>
 800afd4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800afd8:	9d07      	ldr	r5, [sp, #28]
 800afda:	f806 4b01 	strb.w	r4, [r6], #1
 800afde:	eba6 040a 	sub.w	r4, r6, sl
 800afe2:	42a5      	cmp	r5, r4
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	f040 8116 	bne.w	800b218 <_dtoa_r+0x6e0>
 800afec:	f7f5 f8be 	bl	800016c <__adddf3>
 800aff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aff4:	4604      	mov	r4, r0
 800aff6:	460d      	mov	r5, r1
 800aff8:	f7f5 fcfe 	bl	80009f8 <__aeabi_dcmpgt>
 800affc:	2800      	cmp	r0, #0
 800affe:	f040 80f8 	bne.w	800b1f2 <_dtoa_r+0x6ba>
 800b002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b006:	4620      	mov	r0, r4
 800b008:	4629      	mov	r1, r5
 800b00a:	f7f5 fccd 	bl	80009a8 <__aeabi_dcmpeq>
 800b00e:	b118      	cbz	r0, 800b018 <_dtoa_r+0x4e0>
 800b010:	f018 0f01 	tst.w	r8, #1
 800b014:	f040 80ed 	bne.w	800b1f2 <_dtoa_r+0x6ba>
 800b018:	4649      	mov	r1, r9
 800b01a:	4658      	mov	r0, fp
 800b01c:	f000 fc92 	bl	800b944 <_Bfree>
 800b020:	2300      	movs	r3, #0
 800b022:	7033      	strb	r3, [r6, #0]
 800b024:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b026:	3701      	adds	r7, #1
 800b028:	601f      	str	r7, [r3, #0]
 800b02a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 8320 	beq.w	800b672 <_dtoa_r+0xb3a>
 800b032:	601e      	str	r6, [r3, #0]
 800b034:	e31d      	b.n	800b672 <_dtoa_r+0xb3a>
 800b036:	07e2      	lsls	r2, r4, #31
 800b038:	d505      	bpl.n	800b046 <_dtoa_r+0x50e>
 800b03a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b03e:	f7f5 fa4b 	bl	80004d8 <__aeabi_dmul>
 800b042:	2301      	movs	r3, #1
 800b044:	3601      	adds	r6, #1
 800b046:	1064      	asrs	r4, r4, #1
 800b048:	3508      	adds	r5, #8
 800b04a:	e73f      	b.n	800aecc <_dtoa_r+0x394>
 800b04c:	2602      	movs	r6, #2
 800b04e:	e742      	b.n	800aed6 <_dtoa_r+0x39e>
 800b050:	9c07      	ldr	r4, [sp, #28]
 800b052:	9704      	str	r7, [sp, #16]
 800b054:	e761      	b.n	800af1a <_dtoa_r+0x3e2>
 800b056:	bf00      	nop
 800b058:	0800c9d0 	.word	0x0800c9d0
 800b05c:	0800c9a8 	.word	0x0800c9a8
 800b060:	3ff00000 	.word	0x3ff00000
 800b064:	40240000 	.word	0x40240000
 800b068:	401c0000 	.word	0x401c0000
 800b06c:	40140000 	.word	0x40140000
 800b070:	4b70      	ldr	r3, [pc, #448]	@ (800b234 <_dtoa_r+0x6fc>)
 800b072:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b074:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b078:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b07c:	4454      	add	r4, sl
 800b07e:	2900      	cmp	r1, #0
 800b080:	d045      	beq.n	800b10e <_dtoa_r+0x5d6>
 800b082:	2000      	movs	r0, #0
 800b084:	496c      	ldr	r1, [pc, #432]	@ (800b238 <_dtoa_r+0x700>)
 800b086:	f7f5 fb51 	bl	800072c <__aeabi_ddiv>
 800b08a:	4633      	mov	r3, r6
 800b08c:	462a      	mov	r2, r5
 800b08e:	f7f5 f86b 	bl	8000168 <__aeabi_dsub>
 800b092:	4656      	mov	r6, sl
 800b094:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b09c:	f7f5 fccc 	bl	8000a38 <__aeabi_d2iz>
 800b0a0:	4605      	mov	r5, r0
 800b0a2:	f7f5 f9af 	bl	8000404 <__aeabi_i2d>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0ae:	f7f5 f85b 	bl	8000168 <__aeabi_dsub>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	3530      	adds	r5, #48	@ 0x30
 800b0b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b0c0:	f806 5b01 	strb.w	r5, [r6], #1
 800b0c4:	f7f5 fc7a 	bl	80009bc <__aeabi_dcmplt>
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d163      	bne.n	800b194 <_dtoa_r+0x65c>
 800b0cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	495a      	ldr	r1, [pc, #360]	@ (800b23c <_dtoa_r+0x704>)
 800b0d4:	f7f5 f848 	bl	8000168 <__aeabi_dsub>
 800b0d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b0dc:	f7f5 fc6e 	bl	80009bc <__aeabi_dcmplt>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	f040 8087 	bne.w	800b1f4 <_dtoa_r+0x6bc>
 800b0e6:	42a6      	cmp	r6, r4
 800b0e8:	f43f af43 	beq.w	800af72 <_dtoa_r+0x43a>
 800b0ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	4b53      	ldr	r3, [pc, #332]	@ (800b240 <_dtoa_r+0x708>)
 800b0f4:	f7f5 f9f0 	bl	80004d8 <__aeabi_dmul>
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b0fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b102:	4b4f      	ldr	r3, [pc, #316]	@ (800b240 <_dtoa_r+0x708>)
 800b104:	f7f5 f9e8 	bl	80004d8 <__aeabi_dmul>
 800b108:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b10c:	e7c4      	b.n	800b098 <_dtoa_r+0x560>
 800b10e:	4631      	mov	r1, r6
 800b110:	4628      	mov	r0, r5
 800b112:	f7f5 f9e1 	bl	80004d8 <__aeabi_dmul>
 800b116:	4656      	mov	r6, sl
 800b118:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b11c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b11e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b122:	f7f5 fc89 	bl	8000a38 <__aeabi_d2iz>
 800b126:	4605      	mov	r5, r0
 800b128:	f7f5 f96c 	bl	8000404 <__aeabi_i2d>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b134:	f7f5 f818 	bl	8000168 <__aeabi_dsub>
 800b138:	4602      	mov	r2, r0
 800b13a:	460b      	mov	r3, r1
 800b13c:	3530      	adds	r5, #48	@ 0x30
 800b13e:	f806 5b01 	strb.w	r5, [r6], #1
 800b142:	42a6      	cmp	r6, r4
 800b144:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b148:	f04f 0200 	mov.w	r2, #0
 800b14c:	d124      	bne.n	800b198 <_dtoa_r+0x660>
 800b14e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b152:	4b39      	ldr	r3, [pc, #228]	@ (800b238 <_dtoa_r+0x700>)
 800b154:	f7f5 f80a 	bl	800016c <__adddf3>
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b160:	f7f5 fc4a 	bl	80009f8 <__aeabi_dcmpgt>
 800b164:	2800      	cmp	r0, #0
 800b166:	d145      	bne.n	800b1f4 <_dtoa_r+0x6bc>
 800b168:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b16c:	2000      	movs	r0, #0
 800b16e:	4932      	ldr	r1, [pc, #200]	@ (800b238 <_dtoa_r+0x700>)
 800b170:	f7f4 fffa 	bl	8000168 <__aeabi_dsub>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b17c:	f7f5 fc1e 	bl	80009bc <__aeabi_dcmplt>
 800b180:	2800      	cmp	r0, #0
 800b182:	f43f aef6 	beq.w	800af72 <_dtoa_r+0x43a>
 800b186:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b188:	1e73      	subs	r3, r6, #1
 800b18a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b18c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b190:	2b30      	cmp	r3, #48	@ 0x30
 800b192:	d0f8      	beq.n	800b186 <_dtoa_r+0x64e>
 800b194:	9f04      	ldr	r7, [sp, #16]
 800b196:	e73f      	b.n	800b018 <_dtoa_r+0x4e0>
 800b198:	4b29      	ldr	r3, [pc, #164]	@ (800b240 <_dtoa_r+0x708>)
 800b19a:	f7f5 f99d 	bl	80004d8 <__aeabi_dmul>
 800b19e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1a2:	e7bc      	b.n	800b11e <_dtoa_r+0x5e6>
 800b1a4:	d10c      	bne.n	800b1c0 <_dtoa_r+0x688>
 800b1a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	4b25      	ldr	r3, [pc, #148]	@ (800b244 <_dtoa_r+0x70c>)
 800b1ae:	f7f5 f993 	bl	80004d8 <__aeabi_dmul>
 800b1b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1b6:	f7f5 fc15 	bl	80009e4 <__aeabi_dcmpge>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	f000 815b 	beq.w	800b476 <_dtoa_r+0x93e>
 800b1c0:	2400      	movs	r4, #0
 800b1c2:	4625      	mov	r5, r4
 800b1c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1c6:	4656      	mov	r6, sl
 800b1c8:	43db      	mvns	r3, r3
 800b1ca:	9304      	str	r3, [sp, #16]
 800b1cc:	2700      	movs	r7, #0
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	4658      	mov	r0, fp
 800b1d2:	f000 fbb7 	bl	800b944 <_Bfree>
 800b1d6:	2d00      	cmp	r5, #0
 800b1d8:	d0dc      	beq.n	800b194 <_dtoa_r+0x65c>
 800b1da:	b12f      	cbz	r7, 800b1e8 <_dtoa_r+0x6b0>
 800b1dc:	42af      	cmp	r7, r5
 800b1de:	d003      	beq.n	800b1e8 <_dtoa_r+0x6b0>
 800b1e0:	4639      	mov	r1, r7
 800b1e2:	4658      	mov	r0, fp
 800b1e4:	f000 fbae 	bl	800b944 <_Bfree>
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	4658      	mov	r0, fp
 800b1ec:	f000 fbaa 	bl	800b944 <_Bfree>
 800b1f0:	e7d0      	b.n	800b194 <_dtoa_r+0x65c>
 800b1f2:	9704      	str	r7, [sp, #16]
 800b1f4:	4633      	mov	r3, r6
 800b1f6:	461e      	mov	r6, r3
 800b1f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1fc:	2a39      	cmp	r2, #57	@ 0x39
 800b1fe:	d107      	bne.n	800b210 <_dtoa_r+0x6d8>
 800b200:	459a      	cmp	sl, r3
 800b202:	d1f8      	bne.n	800b1f6 <_dtoa_r+0x6be>
 800b204:	9a04      	ldr	r2, [sp, #16]
 800b206:	3201      	adds	r2, #1
 800b208:	9204      	str	r2, [sp, #16]
 800b20a:	2230      	movs	r2, #48	@ 0x30
 800b20c:	f88a 2000 	strb.w	r2, [sl]
 800b210:	781a      	ldrb	r2, [r3, #0]
 800b212:	3201      	adds	r2, #1
 800b214:	701a      	strb	r2, [r3, #0]
 800b216:	e7bd      	b.n	800b194 <_dtoa_r+0x65c>
 800b218:	2200      	movs	r2, #0
 800b21a:	4b09      	ldr	r3, [pc, #36]	@ (800b240 <_dtoa_r+0x708>)
 800b21c:	f7f5 f95c 	bl	80004d8 <__aeabi_dmul>
 800b220:	2200      	movs	r2, #0
 800b222:	2300      	movs	r3, #0
 800b224:	4604      	mov	r4, r0
 800b226:	460d      	mov	r5, r1
 800b228:	f7f5 fbbe 	bl	80009a8 <__aeabi_dcmpeq>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	f43f aebc 	beq.w	800afaa <_dtoa_r+0x472>
 800b232:	e6f1      	b.n	800b018 <_dtoa_r+0x4e0>
 800b234:	0800c9d0 	.word	0x0800c9d0
 800b238:	3fe00000 	.word	0x3fe00000
 800b23c:	3ff00000 	.word	0x3ff00000
 800b240:	40240000 	.word	0x40240000
 800b244:	40140000 	.word	0x40140000
 800b248:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b24a:	2a00      	cmp	r2, #0
 800b24c:	f000 80db 	beq.w	800b406 <_dtoa_r+0x8ce>
 800b250:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b252:	2a01      	cmp	r2, #1
 800b254:	f300 80bf 	bgt.w	800b3d6 <_dtoa_r+0x89e>
 800b258:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	f000 80b7 	beq.w	800b3ce <_dtoa_r+0x896>
 800b260:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b264:	4646      	mov	r6, r8
 800b266:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b26a:	2101      	movs	r1, #1
 800b26c:	441a      	add	r2, r3
 800b26e:	4658      	mov	r0, fp
 800b270:	4498      	add	r8, r3
 800b272:	9209      	str	r2, [sp, #36]	@ 0x24
 800b274:	f000 fc1a 	bl	800baac <__i2b>
 800b278:	4605      	mov	r5, r0
 800b27a:	b15e      	cbz	r6, 800b294 <_dtoa_r+0x75c>
 800b27c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b27e:	2b00      	cmp	r3, #0
 800b280:	dd08      	ble.n	800b294 <_dtoa_r+0x75c>
 800b282:	42b3      	cmp	r3, r6
 800b284:	bfa8      	it	ge
 800b286:	4633      	movge	r3, r6
 800b288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b28a:	eba8 0803 	sub.w	r8, r8, r3
 800b28e:	1af6      	subs	r6, r6, r3
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	9309      	str	r3, [sp, #36]	@ 0x24
 800b294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b296:	b1f3      	cbz	r3, 800b2d6 <_dtoa_r+0x79e>
 800b298:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 80b7 	beq.w	800b40e <_dtoa_r+0x8d6>
 800b2a0:	b18c      	cbz	r4, 800b2c6 <_dtoa_r+0x78e>
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	4622      	mov	r2, r4
 800b2a6:	4658      	mov	r0, fp
 800b2a8:	f000 fcbe 	bl	800bc28 <__pow5mult>
 800b2ac:	464a      	mov	r2, r9
 800b2ae:	4601      	mov	r1, r0
 800b2b0:	4605      	mov	r5, r0
 800b2b2:	4658      	mov	r0, fp
 800b2b4:	f000 fc10 	bl	800bad8 <__multiply>
 800b2b8:	4649      	mov	r1, r9
 800b2ba:	9004      	str	r0, [sp, #16]
 800b2bc:	4658      	mov	r0, fp
 800b2be:	f000 fb41 	bl	800b944 <_Bfree>
 800b2c2:	9b04      	ldr	r3, [sp, #16]
 800b2c4:	4699      	mov	r9, r3
 800b2c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2c8:	1b1a      	subs	r2, r3, r4
 800b2ca:	d004      	beq.n	800b2d6 <_dtoa_r+0x79e>
 800b2cc:	4649      	mov	r1, r9
 800b2ce:	4658      	mov	r0, fp
 800b2d0:	f000 fcaa 	bl	800bc28 <__pow5mult>
 800b2d4:	4681      	mov	r9, r0
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	4658      	mov	r0, fp
 800b2da:	f000 fbe7 	bl	800baac <__i2b>
 800b2de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2e0:	4604      	mov	r4, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f000 81c9 	beq.w	800b67a <_dtoa_r+0xb42>
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	4601      	mov	r1, r0
 800b2ec:	4658      	mov	r0, fp
 800b2ee:	f000 fc9b 	bl	800bc28 <__pow5mult>
 800b2f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	f300 808f 	bgt.w	800b41a <_dtoa_r+0x8e2>
 800b2fc:	9b02      	ldr	r3, [sp, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f040 8087 	bne.w	800b412 <_dtoa_r+0x8da>
 800b304:	9b03      	ldr	r3, [sp, #12]
 800b306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f040 8083 	bne.w	800b416 <_dtoa_r+0x8de>
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b316:	0d1b      	lsrs	r3, r3, #20
 800b318:	051b      	lsls	r3, r3, #20
 800b31a:	b12b      	cbz	r3, 800b328 <_dtoa_r+0x7f0>
 800b31c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b31e:	f108 0801 	add.w	r8, r8, #1
 800b322:	3301      	adds	r3, #1
 800b324:	9309      	str	r3, [sp, #36]	@ 0x24
 800b326:	2301      	movs	r3, #1
 800b328:	930a      	str	r3, [sp, #40]	@ 0x28
 800b32a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f000 81aa 	beq.w	800b686 <_dtoa_r+0xb4e>
 800b332:	6923      	ldr	r3, [r4, #16]
 800b334:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b338:	6918      	ldr	r0, [r3, #16]
 800b33a:	f000 fb6b 	bl	800ba14 <__hi0bits>
 800b33e:	f1c0 0020 	rsb	r0, r0, #32
 800b342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b344:	4418      	add	r0, r3
 800b346:	f010 001f 	ands.w	r0, r0, #31
 800b34a:	d071      	beq.n	800b430 <_dtoa_r+0x8f8>
 800b34c:	f1c0 0320 	rsb	r3, r0, #32
 800b350:	2b04      	cmp	r3, #4
 800b352:	dd65      	ble.n	800b420 <_dtoa_r+0x8e8>
 800b354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b356:	f1c0 001c 	rsb	r0, r0, #28
 800b35a:	4403      	add	r3, r0
 800b35c:	4480      	add	r8, r0
 800b35e:	4406      	add	r6, r0
 800b360:	9309      	str	r3, [sp, #36]	@ 0x24
 800b362:	f1b8 0f00 	cmp.w	r8, #0
 800b366:	dd05      	ble.n	800b374 <_dtoa_r+0x83c>
 800b368:	4649      	mov	r1, r9
 800b36a:	4642      	mov	r2, r8
 800b36c:	4658      	mov	r0, fp
 800b36e:	f000 fcb5 	bl	800bcdc <__lshift>
 800b372:	4681      	mov	r9, r0
 800b374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b376:	2b00      	cmp	r3, #0
 800b378:	dd05      	ble.n	800b386 <_dtoa_r+0x84e>
 800b37a:	4621      	mov	r1, r4
 800b37c:	461a      	mov	r2, r3
 800b37e:	4658      	mov	r0, fp
 800b380:	f000 fcac 	bl	800bcdc <__lshift>
 800b384:	4604      	mov	r4, r0
 800b386:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d053      	beq.n	800b434 <_dtoa_r+0x8fc>
 800b38c:	4621      	mov	r1, r4
 800b38e:	4648      	mov	r0, r9
 800b390:	f000 fd10 	bl	800bdb4 <__mcmp>
 800b394:	2800      	cmp	r0, #0
 800b396:	da4d      	bge.n	800b434 <_dtoa_r+0x8fc>
 800b398:	1e7b      	subs	r3, r7, #1
 800b39a:	4649      	mov	r1, r9
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	220a      	movs	r2, #10
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4658      	mov	r0, fp
 800b3a4:	f000 faf0 	bl	800b988 <__multadd>
 800b3a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3aa:	4681      	mov	r9, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f000 816c 	beq.w	800b68a <_dtoa_r+0xb52>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	220a      	movs	r2, #10
 800b3b8:	4658      	mov	r0, fp
 800b3ba:	f000 fae5 	bl	800b988 <__multadd>
 800b3be:	9b08      	ldr	r3, [sp, #32]
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dc61      	bgt.n	800b48a <_dtoa_r+0x952>
 800b3c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	dc3b      	bgt.n	800b444 <_dtoa_r+0x90c>
 800b3cc:	e05d      	b.n	800b48a <_dtoa_r+0x952>
 800b3ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b3d0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b3d4:	e746      	b.n	800b264 <_dtoa_r+0x72c>
 800b3d6:	9b07      	ldr	r3, [sp, #28]
 800b3d8:	1e5c      	subs	r4, r3, #1
 800b3da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3dc:	42a3      	cmp	r3, r4
 800b3de:	bfbf      	itttt	lt
 800b3e0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b3e2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b3e4:	1ae3      	sublt	r3, r4, r3
 800b3e6:	18d2      	addlt	r2, r2, r3
 800b3e8:	bfa8      	it	ge
 800b3ea:	1b1c      	subge	r4, r3, r4
 800b3ec:	9b07      	ldr	r3, [sp, #28]
 800b3ee:	bfbe      	ittt	lt
 800b3f0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b3f2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b3f4:	2400      	movlt	r4, #0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	bfb5      	itete	lt
 800b3fa:	eba8 0603 	sublt.w	r6, r8, r3
 800b3fe:	4646      	movge	r6, r8
 800b400:	2300      	movlt	r3, #0
 800b402:	9b07      	ldrge	r3, [sp, #28]
 800b404:	e730      	b.n	800b268 <_dtoa_r+0x730>
 800b406:	4646      	mov	r6, r8
 800b408:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b40a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b40c:	e735      	b.n	800b27a <_dtoa_r+0x742>
 800b40e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b410:	e75c      	b.n	800b2cc <_dtoa_r+0x794>
 800b412:	2300      	movs	r3, #0
 800b414:	e788      	b.n	800b328 <_dtoa_r+0x7f0>
 800b416:	9b02      	ldr	r3, [sp, #8]
 800b418:	e786      	b.n	800b328 <_dtoa_r+0x7f0>
 800b41a:	2300      	movs	r3, #0
 800b41c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b41e:	e788      	b.n	800b332 <_dtoa_r+0x7fa>
 800b420:	d09f      	beq.n	800b362 <_dtoa_r+0x82a>
 800b422:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b424:	331c      	adds	r3, #28
 800b426:	441a      	add	r2, r3
 800b428:	4498      	add	r8, r3
 800b42a:	441e      	add	r6, r3
 800b42c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b42e:	e798      	b.n	800b362 <_dtoa_r+0x82a>
 800b430:	4603      	mov	r3, r0
 800b432:	e7f6      	b.n	800b422 <_dtoa_r+0x8ea>
 800b434:	9b07      	ldr	r3, [sp, #28]
 800b436:	9704      	str	r7, [sp, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	dc20      	bgt.n	800b47e <_dtoa_r+0x946>
 800b43c:	9308      	str	r3, [sp, #32]
 800b43e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b440:	2b02      	cmp	r3, #2
 800b442:	dd1e      	ble.n	800b482 <_dtoa_r+0x94a>
 800b444:	9b08      	ldr	r3, [sp, #32]
 800b446:	2b00      	cmp	r3, #0
 800b448:	f47f aebc 	bne.w	800b1c4 <_dtoa_r+0x68c>
 800b44c:	4621      	mov	r1, r4
 800b44e:	2205      	movs	r2, #5
 800b450:	4658      	mov	r0, fp
 800b452:	f000 fa99 	bl	800b988 <__multadd>
 800b456:	4601      	mov	r1, r0
 800b458:	4604      	mov	r4, r0
 800b45a:	4648      	mov	r0, r9
 800b45c:	f000 fcaa 	bl	800bdb4 <__mcmp>
 800b460:	2800      	cmp	r0, #0
 800b462:	f77f aeaf 	ble.w	800b1c4 <_dtoa_r+0x68c>
 800b466:	2331      	movs	r3, #49	@ 0x31
 800b468:	4656      	mov	r6, sl
 800b46a:	f806 3b01 	strb.w	r3, [r6], #1
 800b46e:	9b04      	ldr	r3, [sp, #16]
 800b470:	3301      	adds	r3, #1
 800b472:	9304      	str	r3, [sp, #16]
 800b474:	e6aa      	b.n	800b1cc <_dtoa_r+0x694>
 800b476:	9c07      	ldr	r4, [sp, #28]
 800b478:	9704      	str	r7, [sp, #16]
 800b47a:	4625      	mov	r5, r4
 800b47c:	e7f3      	b.n	800b466 <_dtoa_r+0x92e>
 800b47e:	9b07      	ldr	r3, [sp, #28]
 800b480:	9308      	str	r3, [sp, #32]
 800b482:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b484:	2b00      	cmp	r3, #0
 800b486:	f000 8104 	beq.w	800b692 <_dtoa_r+0xb5a>
 800b48a:	2e00      	cmp	r6, #0
 800b48c:	dd05      	ble.n	800b49a <_dtoa_r+0x962>
 800b48e:	4629      	mov	r1, r5
 800b490:	4632      	mov	r2, r6
 800b492:	4658      	mov	r0, fp
 800b494:	f000 fc22 	bl	800bcdc <__lshift>
 800b498:	4605      	mov	r5, r0
 800b49a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d05a      	beq.n	800b556 <_dtoa_r+0xa1e>
 800b4a0:	4658      	mov	r0, fp
 800b4a2:	6869      	ldr	r1, [r5, #4]
 800b4a4:	f000 fa0e 	bl	800b8c4 <_Balloc>
 800b4a8:	4606      	mov	r6, r0
 800b4aa:	b928      	cbnz	r0, 800b4b8 <_dtoa_r+0x980>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b4b2:	4b83      	ldr	r3, [pc, #524]	@ (800b6c0 <_dtoa_r+0xb88>)
 800b4b4:	f7ff bb54 	b.w	800ab60 <_dtoa_r+0x28>
 800b4b8:	692a      	ldr	r2, [r5, #16]
 800b4ba:	f105 010c 	add.w	r1, r5, #12
 800b4be:	3202      	adds	r2, #2
 800b4c0:	0092      	lsls	r2, r2, #2
 800b4c2:	300c      	adds	r0, #12
 800b4c4:	f001 f80a 	bl	800c4dc <memcpy>
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	4631      	mov	r1, r6
 800b4cc:	4658      	mov	r0, fp
 800b4ce:	f000 fc05 	bl	800bcdc <__lshift>
 800b4d2:	462f      	mov	r7, r5
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	f10a 0301 	add.w	r3, sl, #1
 800b4da:	9307      	str	r3, [sp, #28]
 800b4dc:	9b08      	ldr	r3, [sp, #32]
 800b4de:	4453      	add	r3, sl
 800b4e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4e2:	9b02      	ldr	r3, [sp, #8]
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4ea:	9b07      	ldr	r3, [sp, #28]
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	4648      	mov	r0, r9
 800b4f2:	9302      	str	r3, [sp, #8]
 800b4f4:	f7ff fa95 	bl	800aa22 <quorem>
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	9008      	str	r0, [sp, #32]
 800b4fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b500:	4648      	mov	r0, r9
 800b502:	f000 fc57 	bl	800bdb4 <__mcmp>
 800b506:	462a      	mov	r2, r5
 800b508:	9009      	str	r0, [sp, #36]	@ 0x24
 800b50a:	4621      	mov	r1, r4
 800b50c:	4658      	mov	r0, fp
 800b50e:	f000 fc6d 	bl	800bdec <__mdiff>
 800b512:	68c2      	ldr	r2, [r0, #12]
 800b514:	4606      	mov	r6, r0
 800b516:	bb02      	cbnz	r2, 800b55a <_dtoa_r+0xa22>
 800b518:	4601      	mov	r1, r0
 800b51a:	4648      	mov	r0, r9
 800b51c:	f000 fc4a 	bl	800bdb4 <__mcmp>
 800b520:	4602      	mov	r2, r0
 800b522:	4631      	mov	r1, r6
 800b524:	4658      	mov	r0, fp
 800b526:	920c      	str	r2, [sp, #48]	@ 0x30
 800b528:	f000 fa0c 	bl	800b944 <_Bfree>
 800b52c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b52e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b530:	9e07      	ldr	r6, [sp, #28]
 800b532:	ea43 0102 	orr.w	r1, r3, r2
 800b536:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b538:	4319      	orrs	r1, r3
 800b53a:	d110      	bne.n	800b55e <_dtoa_r+0xa26>
 800b53c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b540:	d029      	beq.n	800b596 <_dtoa_r+0xa5e>
 800b542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b544:	2b00      	cmp	r3, #0
 800b546:	dd02      	ble.n	800b54e <_dtoa_r+0xa16>
 800b548:	9b08      	ldr	r3, [sp, #32]
 800b54a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b54e:	9b02      	ldr	r3, [sp, #8]
 800b550:	f883 8000 	strb.w	r8, [r3]
 800b554:	e63b      	b.n	800b1ce <_dtoa_r+0x696>
 800b556:	4628      	mov	r0, r5
 800b558:	e7bb      	b.n	800b4d2 <_dtoa_r+0x99a>
 800b55a:	2201      	movs	r2, #1
 800b55c:	e7e1      	b.n	800b522 <_dtoa_r+0x9ea>
 800b55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b560:	2b00      	cmp	r3, #0
 800b562:	db04      	blt.n	800b56e <_dtoa_r+0xa36>
 800b564:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b566:	430b      	orrs	r3, r1
 800b568:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b56a:	430b      	orrs	r3, r1
 800b56c:	d120      	bne.n	800b5b0 <_dtoa_r+0xa78>
 800b56e:	2a00      	cmp	r2, #0
 800b570:	dded      	ble.n	800b54e <_dtoa_r+0xa16>
 800b572:	4649      	mov	r1, r9
 800b574:	2201      	movs	r2, #1
 800b576:	4658      	mov	r0, fp
 800b578:	f000 fbb0 	bl	800bcdc <__lshift>
 800b57c:	4621      	mov	r1, r4
 800b57e:	4681      	mov	r9, r0
 800b580:	f000 fc18 	bl	800bdb4 <__mcmp>
 800b584:	2800      	cmp	r0, #0
 800b586:	dc03      	bgt.n	800b590 <_dtoa_r+0xa58>
 800b588:	d1e1      	bne.n	800b54e <_dtoa_r+0xa16>
 800b58a:	f018 0f01 	tst.w	r8, #1
 800b58e:	d0de      	beq.n	800b54e <_dtoa_r+0xa16>
 800b590:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b594:	d1d8      	bne.n	800b548 <_dtoa_r+0xa10>
 800b596:	2339      	movs	r3, #57	@ 0x39
 800b598:	9a02      	ldr	r2, [sp, #8]
 800b59a:	7013      	strb	r3, [r2, #0]
 800b59c:	4633      	mov	r3, r6
 800b59e:	461e      	mov	r6, r3
 800b5a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	2a39      	cmp	r2, #57	@ 0x39
 800b5a8:	d052      	beq.n	800b650 <_dtoa_r+0xb18>
 800b5aa:	3201      	adds	r2, #1
 800b5ac:	701a      	strb	r2, [r3, #0]
 800b5ae:	e60e      	b.n	800b1ce <_dtoa_r+0x696>
 800b5b0:	2a00      	cmp	r2, #0
 800b5b2:	dd07      	ble.n	800b5c4 <_dtoa_r+0xa8c>
 800b5b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b5b8:	d0ed      	beq.n	800b596 <_dtoa_r+0xa5e>
 800b5ba:	9a02      	ldr	r2, [sp, #8]
 800b5bc:	f108 0301 	add.w	r3, r8, #1
 800b5c0:	7013      	strb	r3, [r2, #0]
 800b5c2:	e604      	b.n	800b1ce <_dtoa_r+0x696>
 800b5c4:	9b07      	ldr	r3, [sp, #28]
 800b5c6:	9a07      	ldr	r2, [sp, #28]
 800b5c8:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b5cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d028      	beq.n	800b624 <_dtoa_r+0xaec>
 800b5d2:	4649      	mov	r1, r9
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	220a      	movs	r2, #10
 800b5d8:	4658      	mov	r0, fp
 800b5da:	f000 f9d5 	bl	800b988 <__multadd>
 800b5de:	42af      	cmp	r7, r5
 800b5e0:	4681      	mov	r9, r0
 800b5e2:	f04f 0300 	mov.w	r3, #0
 800b5e6:	f04f 020a 	mov.w	r2, #10
 800b5ea:	4639      	mov	r1, r7
 800b5ec:	4658      	mov	r0, fp
 800b5ee:	d107      	bne.n	800b600 <_dtoa_r+0xac8>
 800b5f0:	f000 f9ca 	bl	800b988 <__multadd>
 800b5f4:	4607      	mov	r7, r0
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	9b07      	ldr	r3, [sp, #28]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	9307      	str	r3, [sp, #28]
 800b5fe:	e774      	b.n	800b4ea <_dtoa_r+0x9b2>
 800b600:	f000 f9c2 	bl	800b988 <__multadd>
 800b604:	4629      	mov	r1, r5
 800b606:	4607      	mov	r7, r0
 800b608:	2300      	movs	r3, #0
 800b60a:	220a      	movs	r2, #10
 800b60c:	4658      	mov	r0, fp
 800b60e:	f000 f9bb 	bl	800b988 <__multadd>
 800b612:	4605      	mov	r5, r0
 800b614:	e7f0      	b.n	800b5f8 <_dtoa_r+0xac0>
 800b616:	9b08      	ldr	r3, [sp, #32]
 800b618:	2700      	movs	r7, #0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	bfcc      	ite	gt
 800b61e:	461e      	movgt	r6, r3
 800b620:	2601      	movle	r6, #1
 800b622:	4456      	add	r6, sl
 800b624:	4649      	mov	r1, r9
 800b626:	2201      	movs	r2, #1
 800b628:	4658      	mov	r0, fp
 800b62a:	f000 fb57 	bl	800bcdc <__lshift>
 800b62e:	4621      	mov	r1, r4
 800b630:	4681      	mov	r9, r0
 800b632:	f000 fbbf 	bl	800bdb4 <__mcmp>
 800b636:	2800      	cmp	r0, #0
 800b638:	dcb0      	bgt.n	800b59c <_dtoa_r+0xa64>
 800b63a:	d102      	bne.n	800b642 <_dtoa_r+0xb0a>
 800b63c:	f018 0f01 	tst.w	r8, #1
 800b640:	d1ac      	bne.n	800b59c <_dtoa_r+0xa64>
 800b642:	4633      	mov	r3, r6
 800b644:	461e      	mov	r6, r3
 800b646:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b64a:	2a30      	cmp	r2, #48	@ 0x30
 800b64c:	d0fa      	beq.n	800b644 <_dtoa_r+0xb0c>
 800b64e:	e5be      	b.n	800b1ce <_dtoa_r+0x696>
 800b650:	459a      	cmp	sl, r3
 800b652:	d1a4      	bne.n	800b59e <_dtoa_r+0xa66>
 800b654:	9b04      	ldr	r3, [sp, #16]
 800b656:	3301      	adds	r3, #1
 800b658:	9304      	str	r3, [sp, #16]
 800b65a:	2331      	movs	r3, #49	@ 0x31
 800b65c:	f88a 3000 	strb.w	r3, [sl]
 800b660:	e5b5      	b.n	800b1ce <_dtoa_r+0x696>
 800b662:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b664:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b6c4 <_dtoa_r+0xb8c>
 800b668:	b11b      	cbz	r3, 800b672 <_dtoa_r+0xb3a>
 800b66a:	f10a 0308 	add.w	r3, sl, #8
 800b66e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	4650      	mov	r0, sl
 800b674:	b017      	add	sp, #92	@ 0x5c
 800b676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	f77f ae3d 	ble.w	800b2fc <_dtoa_r+0x7c4>
 800b682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b684:	930a      	str	r3, [sp, #40]	@ 0x28
 800b686:	2001      	movs	r0, #1
 800b688:	e65b      	b.n	800b342 <_dtoa_r+0x80a>
 800b68a:	9b08      	ldr	r3, [sp, #32]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f77f aed6 	ble.w	800b43e <_dtoa_r+0x906>
 800b692:	4656      	mov	r6, sl
 800b694:	4621      	mov	r1, r4
 800b696:	4648      	mov	r0, r9
 800b698:	f7ff f9c3 	bl	800aa22 <quorem>
 800b69c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b6a0:	9b08      	ldr	r3, [sp, #32]
 800b6a2:	f806 8b01 	strb.w	r8, [r6], #1
 800b6a6:	eba6 020a 	sub.w	r2, r6, sl
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	ddb3      	ble.n	800b616 <_dtoa_r+0xade>
 800b6ae:	4649      	mov	r1, r9
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	220a      	movs	r2, #10
 800b6b4:	4658      	mov	r0, fp
 800b6b6:	f000 f967 	bl	800b988 <__multadd>
 800b6ba:	4681      	mov	r9, r0
 800b6bc:	e7ea      	b.n	800b694 <_dtoa_r+0xb5c>
 800b6be:	bf00      	nop
 800b6c0:	0800c932 	.word	0x0800c932
 800b6c4:	0800c8b6 	.word	0x0800c8b6

0800b6c8 <_free_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	2900      	cmp	r1, #0
 800b6ce:	d040      	beq.n	800b752 <_free_r+0x8a>
 800b6d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6d4:	1f0c      	subs	r4, r1, #4
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	bfb8      	it	lt
 800b6da:	18e4      	addlt	r4, r4, r3
 800b6dc:	f000 f8e6 	bl	800b8ac <__malloc_lock>
 800b6e0:	4a1c      	ldr	r2, [pc, #112]	@ (800b754 <_free_r+0x8c>)
 800b6e2:	6813      	ldr	r3, [r2, #0]
 800b6e4:	b933      	cbnz	r3, 800b6f4 <_free_r+0x2c>
 800b6e6:	6063      	str	r3, [r4, #4]
 800b6e8:	6014      	str	r4, [r2, #0]
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6f0:	f000 b8e2 	b.w	800b8b8 <__malloc_unlock>
 800b6f4:	42a3      	cmp	r3, r4
 800b6f6:	d908      	bls.n	800b70a <_free_r+0x42>
 800b6f8:	6820      	ldr	r0, [r4, #0]
 800b6fa:	1821      	adds	r1, r4, r0
 800b6fc:	428b      	cmp	r3, r1
 800b6fe:	bf01      	itttt	eq
 800b700:	6819      	ldreq	r1, [r3, #0]
 800b702:	685b      	ldreq	r3, [r3, #4]
 800b704:	1809      	addeq	r1, r1, r0
 800b706:	6021      	streq	r1, [r4, #0]
 800b708:	e7ed      	b.n	800b6e6 <_free_r+0x1e>
 800b70a:	461a      	mov	r2, r3
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	b10b      	cbz	r3, 800b714 <_free_r+0x4c>
 800b710:	42a3      	cmp	r3, r4
 800b712:	d9fa      	bls.n	800b70a <_free_r+0x42>
 800b714:	6811      	ldr	r1, [r2, #0]
 800b716:	1850      	adds	r0, r2, r1
 800b718:	42a0      	cmp	r0, r4
 800b71a:	d10b      	bne.n	800b734 <_free_r+0x6c>
 800b71c:	6820      	ldr	r0, [r4, #0]
 800b71e:	4401      	add	r1, r0
 800b720:	1850      	adds	r0, r2, r1
 800b722:	4283      	cmp	r3, r0
 800b724:	6011      	str	r1, [r2, #0]
 800b726:	d1e0      	bne.n	800b6ea <_free_r+0x22>
 800b728:	6818      	ldr	r0, [r3, #0]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	4408      	add	r0, r1
 800b72e:	6010      	str	r0, [r2, #0]
 800b730:	6053      	str	r3, [r2, #4]
 800b732:	e7da      	b.n	800b6ea <_free_r+0x22>
 800b734:	d902      	bls.n	800b73c <_free_r+0x74>
 800b736:	230c      	movs	r3, #12
 800b738:	602b      	str	r3, [r5, #0]
 800b73a:	e7d6      	b.n	800b6ea <_free_r+0x22>
 800b73c:	6820      	ldr	r0, [r4, #0]
 800b73e:	1821      	adds	r1, r4, r0
 800b740:	428b      	cmp	r3, r1
 800b742:	bf01      	itttt	eq
 800b744:	6819      	ldreq	r1, [r3, #0]
 800b746:	685b      	ldreq	r3, [r3, #4]
 800b748:	1809      	addeq	r1, r1, r0
 800b74a:	6021      	streq	r1, [r4, #0]
 800b74c:	6063      	str	r3, [r4, #4]
 800b74e:	6054      	str	r4, [r2, #4]
 800b750:	e7cb      	b.n	800b6ea <_free_r+0x22>
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	200016ec 	.word	0x200016ec

0800b758 <malloc>:
 800b758:	4b02      	ldr	r3, [pc, #8]	@ (800b764 <malloc+0xc>)
 800b75a:	4601      	mov	r1, r0
 800b75c:	6818      	ldr	r0, [r3, #0]
 800b75e:	f000 b825 	b.w	800b7ac <_malloc_r>
 800b762:	bf00      	nop
 800b764:	20000194 	.word	0x20000194

0800b768 <sbrk_aligned>:
 800b768:	b570      	push	{r4, r5, r6, lr}
 800b76a:	4e0f      	ldr	r6, [pc, #60]	@ (800b7a8 <sbrk_aligned+0x40>)
 800b76c:	460c      	mov	r4, r1
 800b76e:	6831      	ldr	r1, [r6, #0]
 800b770:	4605      	mov	r5, r0
 800b772:	b911      	cbnz	r1, 800b77a <sbrk_aligned+0x12>
 800b774:	f000 fea2 	bl	800c4bc <_sbrk_r>
 800b778:	6030      	str	r0, [r6, #0]
 800b77a:	4621      	mov	r1, r4
 800b77c:	4628      	mov	r0, r5
 800b77e:	f000 fe9d 	bl	800c4bc <_sbrk_r>
 800b782:	1c43      	adds	r3, r0, #1
 800b784:	d103      	bne.n	800b78e <sbrk_aligned+0x26>
 800b786:	f04f 34ff 	mov.w	r4, #4294967295
 800b78a:	4620      	mov	r0, r4
 800b78c:	bd70      	pop	{r4, r5, r6, pc}
 800b78e:	1cc4      	adds	r4, r0, #3
 800b790:	f024 0403 	bic.w	r4, r4, #3
 800b794:	42a0      	cmp	r0, r4
 800b796:	d0f8      	beq.n	800b78a <sbrk_aligned+0x22>
 800b798:	1a21      	subs	r1, r4, r0
 800b79a:	4628      	mov	r0, r5
 800b79c:	f000 fe8e 	bl	800c4bc <_sbrk_r>
 800b7a0:	3001      	adds	r0, #1
 800b7a2:	d1f2      	bne.n	800b78a <sbrk_aligned+0x22>
 800b7a4:	e7ef      	b.n	800b786 <sbrk_aligned+0x1e>
 800b7a6:	bf00      	nop
 800b7a8:	200016e8 	.word	0x200016e8

0800b7ac <_malloc_r>:
 800b7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b0:	1ccd      	adds	r5, r1, #3
 800b7b2:	f025 0503 	bic.w	r5, r5, #3
 800b7b6:	3508      	adds	r5, #8
 800b7b8:	2d0c      	cmp	r5, #12
 800b7ba:	bf38      	it	cc
 800b7bc:	250c      	movcc	r5, #12
 800b7be:	2d00      	cmp	r5, #0
 800b7c0:	4606      	mov	r6, r0
 800b7c2:	db01      	blt.n	800b7c8 <_malloc_r+0x1c>
 800b7c4:	42a9      	cmp	r1, r5
 800b7c6:	d904      	bls.n	800b7d2 <_malloc_r+0x26>
 800b7c8:	230c      	movs	r3, #12
 800b7ca:	6033      	str	r3, [r6, #0]
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8a8 <_malloc_r+0xfc>
 800b7d6:	f000 f869 	bl	800b8ac <__malloc_lock>
 800b7da:	f8d8 3000 	ldr.w	r3, [r8]
 800b7de:	461c      	mov	r4, r3
 800b7e0:	bb44      	cbnz	r4, 800b834 <_malloc_r+0x88>
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	f7ff ffbf 	bl	800b768 <sbrk_aligned>
 800b7ea:	1c43      	adds	r3, r0, #1
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	d158      	bne.n	800b8a2 <_malloc_r+0xf6>
 800b7f0:	f8d8 4000 	ldr.w	r4, [r8]
 800b7f4:	4627      	mov	r7, r4
 800b7f6:	2f00      	cmp	r7, #0
 800b7f8:	d143      	bne.n	800b882 <_malloc_r+0xd6>
 800b7fa:	2c00      	cmp	r4, #0
 800b7fc:	d04b      	beq.n	800b896 <_malloc_r+0xea>
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	4639      	mov	r1, r7
 800b802:	4630      	mov	r0, r6
 800b804:	eb04 0903 	add.w	r9, r4, r3
 800b808:	f000 fe58 	bl	800c4bc <_sbrk_r>
 800b80c:	4581      	cmp	r9, r0
 800b80e:	d142      	bne.n	800b896 <_malloc_r+0xea>
 800b810:	6821      	ldr	r1, [r4, #0]
 800b812:	4630      	mov	r0, r6
 800b814:	1a6d      	subs	r5, r5, r1
 800b816:	4629      	mov	r1, r5
 800b818:	f7ff ffa6 	bl	800b768 <sbrk_aligned>
 800b81c:	3001      	adds	r0, #1
 800b81e:	d03a      	beq.n	800b896 <_malloc_r+0xea>
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	442b      	add	r3, r5
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	f8d8 3000 	ldr.w	r3, [r8]
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	bb62      	cbnz	r2, 800b888 <_malloc_r+0xdc>
 800b82e:	f8c8 7000 	str.w	r7, [r8]
 800b832:	e00f      	b.n	800b854 <_malloc_r+0xa8>
 800b834:	6822      	ldr	r2, [r4, #0]
 800b836:	1b52      	subs	r2, r2, r5
 800b838:	d420      	bmi.n	800b87c <_malloc_r+0xd0>
 800b83a:	2a0b      	cmp	r2, #11
 800b83c:	d917      	bls.n	800b86e <_malloc_r+0xc2>
 800b83e:	1961      	adds	r1, r4, r5
 800b840:	42a3      	cmp	r3, r4
 800b842:	6025      	str	r5, [r4, #0]
 800b844:	bf18      	it	ne
 800b846:	6059      	strne	r1, [r3, #4]
 800b848:	6863      	ldr	r3, [r4, #4]
 800b84a:	bf08      	it	eq
 800b84c:	f8c8 1000 	streq.w	r1, [r8]
 800b850:	5162      	str	r2, [r4, r5]
 800b852:	604b      	str	r3, [r1, #4]
 800b854:	4630      	mov	r0, r6
 800b856:	f000 f82f 	bl	800b8b8 <__malloc_unlock>
 800b85a:	f104 000b 	add.w	r0, r4, #11
 800b85e:	1d23      	adds	r3, r4, #4
 800b860:	f020 0007 	bic.w	r0, r0, #7
 800b864:	1ac2      	subs	r2, r0, r3
 800b866:	bf1c      	itt	ne
 800b868:	1a1b      	subne	r3, r3, r0
 800b86a:	50a3      	strne	r3, [r4, r2]
 800b86c:	e7af      	b.n	800b7ce <_malloc_r+0x22>
 800b86e:	6862      	ldr	r2, [r4, #4]
 800b870:	42a3      	cmp	r3, r4
 800b872:	bf0c      	ite	eq
 800b874:	f8c8 2000 	streq.w	r2, [r8]
 800b878:	605a      	strne	r2, [r3, #4]
 800b87a:	e7eb      	b.n	800b854 <_malloc_r+0xa8>
 800b87c:	4623      	mov	r3, r4
 800b87e:	6864      	ldr	r4, [r4, #4]
 800b880:	e7ae      	b.n	800b7e0 <_malloc_r+0x34>
 800b882:	463c      	mov	r4, r7
 800b884:	687f      	ldr	r7, [r7, #4]
 800b886:	e7b6      	b.n	800b7f6 <_malloc_r+0x4a>
 800b888:	461a      	mov	r2, r3
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	42a3      	cmp	r3, r4
 800b88e:	d1fb      	bne.n	800b888 <_malloc_r+0xdc>
 800b890:	2300      	movs	r3, #0
 800b892:	6053      	str	r3, [r2, #4]
 800b894:	e7de      	b.n	800b854 <_malloc_r+0xa8>
 800b896:	230c      	movs	r3, #12
 800b898:	4630      	mov	r0, r6
 800b89a:	6033      	str	r3, [r6, #0]
 800b89c:	f000 f80c 	bl	800b8b8 <__malloc_unlock>
 800b8a0:	e794      	b.n	800b7cc <_malloc_r+0x20>
 800b8a2:	6005      	str	r5, [r0, #0]
 800b8a4:	e7d6      	b.n	800b854 <_malloc_r+0xa8>
 800b8a6:	bf00      	nop
 800b8a8:	200016ec 	.word	0x200016ec

0800b8ac <__malloc_lock>:
 800b8ac:	4801      	ldr	r0, [pc, #4]	@ (800b8b4 <__malloc_lock+0x8>)
 800b8ae:	f7ff b8a8 	b.w	800aa02 <__retarget_lock_acquire_recursive>
 800b8b2:	bf00      	nop
 800b8b4:	200016e4 	.word	0x200016e4

0800b8b8 <__malloc_unlock>:
 800b8b8:	4801      	ldr	r0, [pc, #4]	@ (800b8c0 <__malloc_unlock+0x8>)
 800b8ba:	f7ff b8a3 	b.w	800aa04 <__retarget_lock_release_recursive>
 800b8be:	bf00      	nop
 800b8c0:	200016e4 	.word	0x200016e4

0800b8c4 <_Balloc>:
 800b8c4:	b570      	push	{r4, r5, r6, lr}
 800b8c6:	69c6      	ldr	r6, [r0, #28]
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	460d      	mov	r5, r1
 800b8cc:	b976      	cbnz	r6, 800b8ec <_Balloc+0x28>
 800b8ce:	2010      	movs	r0, #16
 800b8d0:	f7ff ff42 	bl	800b758 <malloc>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	61e0      	str	r0, [r4, #28]
 800b8d8:	b920      	cbnz	r0, 800b8e4 <_Balloc+0x20>
 800b8da:	216b      	movs	r1, #107	@ 0x6b
 800b8dc:	4b17      	ldr	r3, [pc, #92]	@ (800b93c <_Balloc+0x78>)
 800b8de:	4818      	ldr	r0, [pc, #96]	@ (800b940 <_Balloc+0x7c>)
 800b8e0:	f000 fe0a 	bl	800c4f8 <__assert_func>
 800b8e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8e8:	6006      	str	r6, [r0, #0]
 800b8ea:	60c6      	str	r6, [r0, #12]
 800b8ec:	69e6      	ldr	r6, [r4, #28]
 800b8ee:	68f3      	ldr	r3, [r6, #12]
 800b8f0:	b183      	cbz	r3, 800b914 <_Balloc+0x50>
 800b8f2:	69e3      	ldr	r3, [r4, #28]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8fa:	b9b8      	cbnz	r0, 800b92c <_Balloc+0x68>
 800b8fc:	2101      	movs	r1, #1
 800b8fe:	fa01 f605 	lsl.w	r6, r1, r5
 800b902:	1d72      	adds	r2, r6, #5
 800b904:	4620      	mov	r0, r4
 800b906:	0092      	lsls	r2, r2, #2
 800b908:	f000 fe14 	bl	800c534 <_calloc_r>
 800b90c:	b160      	cbz	r0, 800b928 <_Balloc+0x64>
 800b90e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b912:	e00e      	b.n	800b932 <_Balloc+0x6e>
 800b914:	2221      	movs	r2, #33	@ 0x21
 800b916:	2104      	movs	r1, #4
 800b918:	4620      	mov	r0, r4
 800b91a:	f000 fe0b 	bl	800c534 <_calloc_r>
 800b91e:	69e3      	ldr	r3, [r4, #28]
 800b920:	60f0      	str	r0, [r6, #12]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1e4      	bne.n	800b8f2 <_Balloc+0x2e>
 800b928:	2000      	movs	r0, #0
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
 800b92c:	6802      	ldr	r2, [r0, #0]
 800b92e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b932:	2300      	movs	r3, #0
 800b934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b938:	e7f7      	b.n	800b92a <_Balloc+0x66>
 800b93a:	bf00      	nop
 800b93c:	0800c8c3 	.word	0x0800c8c3
 800b940:	0800c943 	.word	0x0800c943

0800b944 <_Bfree>:
 800b944:	b570      	push	{r4, r5, r6, lr}
 800b946:	69c6      	ldr	r6, [r0, #28]
 800b948:	4605      	mov	r5, r0
 800b94a:	460c      	mov	r4, r1
 800b94c:	b976      	cbnz	r6, 800b96c <_Bfree+0x28>
 800b94e:	2010      	movs	r0, #16
 800b950:	f7ff ff02 	bl	800b758 <malloc>
 800b954:	4602      	mov	r2, r0
 800b956:	61e8      	str	r0, [r5, #28]
 800b958:	b920      	cbnz	r0, 800b964 <_Bfree+0x20>
 800b95a:	218f      	movs	r1, #143	@ 0x8f
 800b95c:	4b08      	ldr	r3, [pc, #32]	@ (800b980 <_Bfree+0x3c>)
 800b95e:	4809      	ldr	r0, [pc, #36]	@ (800b984 <_Bfree+0x40>)
 800b960:	f000 fdca 	bl	800c4f8 <__assert_func>
 800b964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b968:	6006      	str	r6, [r0, #0]
 800b96a:	60c6      	str	r6, [r0, #12]
 800b96c:	b13c      	cbz	r4, 800b97e <_Bfree+0x3a>
 800b96e:	69eb      	ldr	r3, [r5, #28]
 800b970:	6862      	ldr	r2, [r4, #4]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b978:	6021      	str	r1, [r4, #0]
 800b97a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b97e:	bd70      	pop	{r4, r5, r6, pc}
 800b980:	0800c8c3 	.word	0x0800c8c3
 800b984:	0800c943 	.word	0x0800c943

0800b988 <__multadd>:
 800b988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b98c:	4607      	mov	r7, r0
 800b98e:	460c      	mov	r4, r1
 800b990:	461e      	mov	r6, r3
 800b992:	2000      	movs	r0, #0
 800b994:	690d      	ldr	r5, [r1, #16]
 800b996:	f101 0c14 	add.w	ip, r1, #20
 800b99a:	f8dc 3000 	ldr.w	r3, [ip]
 800b99e:	3001      	adds	r0, #1
 800b9a0:	b299      	uxth	r1, r3
 800b9a2:	fb02 6101 	mla	r1, r2, r1, r6
 800b9a6:	0c1e      	lsrs	r6, r3, #16
 800b9a8:	0c0b      	lsrs	r3, r1, #16
 800b9aa:	fb02 3306 	mla	r3, r2, r6, r3
 800b9ae:	b289      	uxth	r1, r1
 800b9b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9b4:	4285      	cmp	r5, r0
 800b9b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9ba:	f84c 1b04 	str.w	r1, [ip], #4
 800b9be:	dcec      	bgt.n	800b99a <__multadd+0x12>
 800b9c0:	b30e      	cbz	r6, 800ba06 <__multadd+0x7e>
 800b9c2:	68a3      	ldr	r3, [r4, #8]
 800b9c4:	42ab      	cmp	r3, r5
 800b9c6:	dc19      	bgt.n	800b9fc <__multadd+0x74>
 800b9c8:	6861      	ldr	r1, [r4, #4]
 800b9ca:	4638      	mov	r0, r7
 800b9cc:	3101      	adds	r1, #1
 800b9ce:	f7ff ff79 	bl	800b8c4 <_Balloc>
 800b9d2:	4680      	mov	r8, r0
 800b9d4:	b928      	cbnz	r0, 800b9e2 <__multadd+0x5a>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	21ba      	movs	r1, #186	@ 0xba
 800b9da:	4b0c      	ldr	r3, [pc, #48]	@ (800ba0c <__multadd+0x84>)
 800b9dc:	480c      	ldr	r0, [pc, #48]	@ (800ba10 <__multadd+0x88>)
 800b9de:	f000 fd8b 	bl	800c4f8 <__assert_func>
 800b9e2:	6922      	ldr	r2, [r4, #16]
 800b9e4:	f104 010c 	add.w	r1, r4, #12
 800b9e8:	3202      	adds	r2, #2
 800b9ea:	0092      	lsls	r2, r2, #2
 800b9ec:	300c      	adds	r0, #12
 800b9ee:	f000 fd75 	bl	800c4dc <memcpy>
 800b9f2:	4621      	mov	r1, r4
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	f7ff ffa5 	bl	800b944 <_Bfree>
 800b9fa:	4644      	mov	r4, r8
 800b9fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba00:	3501      	adds	r5, #1
 800ba02:	615e      	str	r6, [r3, #20]
 800ba04:	6125      	str	r5, [r4, #16]
 800ba06:	4620      	mov	r0, r4
 800ba08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba0c:	0800c932 	.word	0x0800c932
 800ba10:	0800c943 	.word	0x0800c943

0800ba14 <__hi0bits>:
 800ba14:	4603      	mov	r3, r0
 800ba16:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba1a:	bf3a      	itte	cc
 800ba1c:	0403      	lslcc	r3, r0, #16
 800ba1e:	2010      	movcc	r0, #16
 800ba20:	2000      	movcs	r0, #0
 800ba22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba26:	bf3c      	itt	cc
 800ba28:	021b      	lslcc	r3, r3, #8
 800ba2a:	3008      	addcc	r0, #8
 800ba2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba30:	bf3c      	itt	cc
 800ba32:	011b      	lslcc	r3, r3, #4
 800ba34:	3004      	addcc	r0, #4
 800ba36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba3a:	bf3c      	itt	cc
 800ba3c:	009b      	lslcc	r3, r3, #2
 800ba3e:	3002      	addcc	r0, #2
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	db05      	blt.n	800ba50 <__hi0bits+0x3c>
 800ba44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba48:	f100 0001 	add.w	r0, r0, #1
 800ba4c:	bf08      	it	eq
 800ba4e:	2020      	moveq	r0, #32
 800ba50:	4770      	bx	lr

0800ba52 <__lo0bits>:
 800ba52:	6803      	ldr	r3, [r0, #0]
 800ba54:	4602      	mov	r2, r0
 800ba56:	f013 0007 	ands.w	r0, r3, #7
 800ba5a:	d00b      	beq.n	800ba74 <__lo0bits+0x22>
 800ba5c:	07d9      	lsls	r1, r3, #31
 800ba5e:	d421      	bmi.n	800baa4 <__lo0bits+0x52>
 800ba60:	0798      	lsls	r0, r3, #30
 800ba62:	bf49      	itett	mi
 800ba64:	085b      	lsrmi	r3, r3, #1
 800ba66:	089b      	lsrpl	r3, r3, #2
 800ba68:	2001      	movmi	r0, #1
 800ba6a:	6013      	strmi	r3, [r2, #0]
 800ba6c:	bf5c      	itt	pl
 800ba6e:	2002      	movpl	r0, #2
 800ba70:	6013      	strpl	r3, [r2, #0]
 800ba72:	4770      	bx	lr
 800ba74:	b299      	uxth	r1, r3
 800ba76:	b909      	cbnz	r1, 800ba7c <__lo0bits+0x2a>
 800ba78:	2010      	movs	r0, #16
 800ba7a:	0c1b      	lsrs	r3, r3, #16
 800ba7c:	b2d9      	uxtb	r1, r3
 800ba7e:	b909      	cbnz	r1, 800ba84 <__lo0bits+0x32>
 800ba80:	3008      	adds	r0, #8
 800ba82:	0a1b      	lsrs	r3, r3, #8
 800ba84:	0719      	lsls	r1, r3, #28
 800ba86:	bf04      	itt	eq
 800ba88:	091b      	lsreq	r3, r3, #4
 800ba8a:	3004      	addeq	r0, #4
 800ba8c:	0799      	lsls	r1, r3, #30
 800ba8e:	bf04      	itt	eq
 800ba90:	089b      	lsreq	r3, r3, #2
 800ba92:	3002      	addeq	r0, #2
 800ba94:	07d9      	lsls	r1, r3, #31
 800ba96:	d403      	bmi.n	800baa0 <__lo0bits+0x4e>
 800ba98:	085b      	lsrs	r3, r3, #1
 800ba9a:	f100 0001 	add.w	r0, r0, #1
 800ba9e:	d003      	beq.n	800baa8 <__lo0bits+0x56>
 800baa0:	6013      	str	r3, [r2, #0]
 800baa2:	4770      	bx	lr
 800baa4:	2000      	movs	r0, #0
 800baa6:	4770      	bx	lr
 800baa8:	2020      	movs	r0, #32
 800baaa:	4770      	bx	lr

0800baac <__i2b>:
 800baac:	b510      	push	{r4, lr}
 800baae:	460c      	mov	r4, r1
 800bab0:	2101      	movs	r1, #1
 800bab2:	f7ff ff07 	bl	800b8c4 <_Balloc>
 800bab6:	4602      	mov	r2, r0
 800bab8:	b928      	cbnz	r0, 800bac6 <__i2b+0x1a>
 800baba:	f240 1145 	movw	r1, #325	@ 0x145
 800babe:	4b04      	ldr	r3, [pc, #16]	@ (800bad0 <__i2b+0x24>)
 800bac0:	4804      	ldr	r0, [pc, #16]	@ (800bad4 <__i2b+0x28>)
 800bac2:	f000 fd19 	bl	800c4f8 <__assert_func>
 800bac6:	2301      	movs	r3, #1
 800bac8:	6144      	str	r4, [r0, #20]
 800baca:	6103      	str	r3, [r0, #16]
 800bacc:	bd10      	pop	{r4, pc}
 800bace:	bf00      	nop
 800bad0:	0800c932 	.word	0x0800c932
 800bad4:	0800c943 	.word	0x0800c943

0800bad8 <__multiply>:
 800bad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800badc:	4614      	mov	r4, r2
 800bade:	690a      	ldr	r2, [r1, #16]
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	460f      	mov	r7, r1
 800bae4:	429a      	cmp	r2, r3
 800bae6:	bfa2      	ittt	ge
 800bae8:	4623      	movge	r3, r4
 800baea:	460c      	movge	r4, r1
 800baec:	461f      	movge	r7, r3
 800baee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800baf2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800baf6:	68a3      	ldr	r3, [r4, #8]
 800baf8:	6861      	ldr	r1, [r4, #4]
 800bafa:	eb0a 0609 	add.w	r6, sl, r9
 800bafe:	42b3      	cmp	r3, r6
 800bb00:	b085      	sub	sp, #20
 800bb02:	bfb8      	it	lt
 800bb04:	3101      	addlt	r1, #1
 800bb06:	f7ff fedd 	bl	800b8c4 <_Balloc>
 800bb0a:	b930      	cbnz	r0, 800bb1a <__multiply+0x42>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb12:	4b43      	ldr	r3, [pc, #268]	@ (800bc20 <__multiply+0x148>)
 800bb14:	4843      	ldr	r0, [pc, #268]	@ (800bc24 <__multiply+0x14c>)
 800bb16:	f000 fcef 	bl	800c4f8 <__assert_func>
 800bb1a:	f100 0514 	add.w	r5, r0, #20
 800bb1e:	462b      	mov	r3, r5
 800bb20:	2200      	movs	r2, #0
 800bb22:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb26:	4543      	cmp	r3, r8
 800bb28:	d321      	bcc.n	800bb6e <__multiply+0x96>
 800bb2a:	f107 0114 	add.w	r1, r7, #20
 800bb2e:	f104 0214 	add.w	r2, r4, #20
 800bb32:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bb36:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bb3a:	9302      	str	r3, [sp, #8]
 800bb3c:	1b13      	subs	r3, r2, r4
 800bb3e:	3b15      	subs	r3, #21
 800bb40:	f023 0303 	bic.w	r3, r3, #3
 800bb44:	3304      	adds	r3, #4
 800bb46:	f104 0715 	add.w	r7, r4, #21
 800bb4a:	42ba      	cmp	r2, r7
 800bb4c:	bf38      	it	cc
 800bb4e:	2304      	movcc	r3, #4
 800bb50:	9301      	str	r3, [sp, #4]
 800bb52:	9b02      	ldr	r3, [sp, #8]
 800bb54:	9103      	str	r1, [sp, #12]
 800bb56:	428b      	cmp	r3, r1
 800bb58:	d80c      	bhi.n	800bb74 <__multiply+0x9c>
 800bb5a:	2e00      	cmp	r6, #0
 800bb5c:	dd03      	ble.n	800bb66 <__multiply+0x8e>
 800bb5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d05a      	beq.n	800bc1c <__multiply+0x144>
 800bb66:	6106      	str	r6, [r0, #16]
 800bb68:	b005      	add	sp, #20
 800bb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb6e:	f843 2b04 	str.w	r2, [r3], #4
 800bb72:	e7d8      	b.n	800bb26 <__multiply+0x4e>
 800bb74:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb78:	f1ba 0f00 	cmp.w	sl, #0
 800bb7c:	d023      	beq.n	800bbc6 <__multiply+0xee>
 800bb7e:	46a9      	mov	r9, r5
 800bb80:	f04f 0c00 	mov.w	ip, #0
 800bb84:	f104 0e14 	add.w	lr, r4, #20
 800bb88:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb8c:	f8d9 3000 	ldr.w	r3, [r9]
 800bb90:	fa1f fb87 	uxth.w	fp, r7
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb9a:	4463      	add	r3, ip
 800bb9c:	f8d9 c000 	ldr.w	ip, [r9]
 800bba0:	0c3f      	lsrs	r7, r7, #16
 800bba2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bba6:	fb0a c707 	mla	r7, sl, r7, ip
 800bbaa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bbb4:	4572      	cmp	r2, lr
 800bbb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bbba:	f849 3b04 	str.w	r3, [r9], #4
 800bbbe:	d8e3      	bhi.n	800bb88 <__multiply+0xb0>
 800bbc0:	9b01      	ldr	r3, [sp, #4]
 800bbc2:	f845 c003 	str.w	ip, [r5, r3]
 800bbc6:	9b03      	ldr	r3, [sp, #12]
 800bbc8:	3104      	adds	r1, #4
 800bbca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bbce:	f1b9 0f00 	cmp.w	r9, #0
 800bbd2:	d021      	beq.n	800bc18 <__multiply+0x140>
 800bbd4:	46ae      	mov	lr, r5
 800bbd6:	f04f 0a00 	mov.w	sl, #0
 800bbda:	682b      	ldr	r3, [r5, #0]
 800bbdc:	f104 0c14 	add.w	ip, r4, #20
 800bbe0:	f8bc b000 	ldrh.w	fp, [ip]
 800bbe4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	fb09 770b 	mla	r7, r9, fp, r7
 800bbee:	4457      	add	r7, sl
 800bbf0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bbf4:	f84e 3b04 	str.w	r3, [lr], #4
 800bbf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc00:	f8be 3000 	ldrh.w	r3, [lr]
 800bc04:	4562      	cmp	r2, ip
 800bc06:	fb09 330a 	mla	r3, r9, sl, r3
 800bc0a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bc0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc12:	d8e5      	bhi.n	800bbe0 <__multiply+0x108>
 800bc14:	9f01      	ldr	r7, [sp, #4]
 800bc16:	51eb      	str	r3, [r5, r7]
 800bc18:	3504      	adds	r5, #4
 800bc1a:	e79a      	b.n	800bb52 <__multiply+0x7a>
 800bc1c:	3e01      	subs	r6, #1
 800bc1e:	e79c      	b.n	800bb5a <__multiply+0x82>
 800bc20:	0800c932 	.word	0x0800c932
 800bc24:	0800c943 	.word	0x0800c943

0800bc28 <__pow5mult>:
 800bc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc2c:	4615      	mov	r5, r2
 800bc2e:	f012 0203 	ands.w	r2, r2, #3
 800bc32:	4607      	mov	r7, r0
 800bc34:	460e      	mov	r6, r1
 800bc36:	d007      	beq.n	800bc48 <__pow5mult+0x20>
 800bc38:	4c25      	ldr	r4, [pc, #148]	@ (800bcd0 <__pow5mult+0xa8>)
 800bc3a:	3a01      	subs	r2, #1
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc42:	f7ff fea1 	bl	800b988 <__multadd>
 800bc46:	4606      	mov	r6, r0
 800bc48:	10ad      	asrs	r5, r5, #2
 800bc4a:	d03d      	beq.n	800bcc8 <__pow5mult+0xa0>
 800bc4c:	69fc      	ldr	r4, [r7, #28]
 800bc4e:	b97c      	cbnz	r4, 800bc70 <__pow5mult+0x48>
 800bc50:	2010      	movs	r0, #16
 800bc52:	f7ff fd81 	bl	800b758 <malloc>
 800bc56:	4602      	mov	r2, r0
 800bc58:	61f8      	str	r0, [r7, #28]
 800bc5a:	b928      	cbnz	r0, 800bc68 <__pow5mult+0x40>
 800bc5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc60:	4b1c      	ldr	r3, [pc, #112]	@ (800bcd4 <__pow5mult+0xac>)
 800bc62:	481d      	ldr	r0, [pc, #116]	@ (800bcd8 <__pow5mult+0xb0>)
 800bc64:	f000 fc48 	bl	800c4f8 <__assert_func>
 800bc68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc6c:	6004      	str	r4, [r0, #0]
 800bc6e:	60c4      	str	r4, [r0, #12]
 800bc70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc78:	b94c      	cbnz	r4, 800bc8e <__pow5mult+0x66>
 800bc7a:	f240 2171 	movw	r1, #625	@ 0x271
 800bc7e:	4638      	mov	r0, r7
 800bc80:	f7ff ff14 	bl	800baac <__i2b>
 800bc84:	2300      	movs	r3, #0
 800bc86:	4604      	mov	r4, r0
 800bc88:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc8c:	6003      	str	r3, [r0, #0]
 800bc8e:	f04f 0900 	mov.w	r9, #0
 800bc92:	07eb      	lsls	r3, r5, #31
 800bc94:	d50a      	bpl.n	800bcac <__pow5mult+0x84>
 800bc96:	4631      	mov	r1, r6
 800bc98:	4622      	mov	r2, r4
 800bc9a:	4638      	mov	r0, r7
 800bc9c:	f7ff ff1c 	bl	800bad8 <__multiply>
 800bca0:	4680      	mov	r8, r0
 800bca2:	4631      	mov	r1, r6
 800bca4:	4638      	mov	r0, r7
 800bca6:	f7ff fe4d 	bl	800b944 <_Bfree>
 800bcaa:	4646      	mov	r6, r8
 800bcac:	106d      	asrs	r5, r5, #1
 800bcae:	d00b      	beq.n	800bcc8 <__pow5mult+0xa0>
 800bcb0:	6820      	ldr	r0, [r4, #0]
 800bcb2:	b938      	cbnz	r0, 800bcc4 <__pow5mult+0x9c>
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	4638      	mov	r0, r7
 800bcba:	f7ff ff0d 	bl	800bad8 <__multiply>
 800bcbe:	6020      	str	r0, [r4, #0]
 800bcc0:	f8c0 9000 	str.w	r9, [r0]
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	e7e4      	b.n	800bc92 <__pow5mult+0x6a>
 800bcc8:	4630      	mov	r0, r6
 800bcca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcce:	bf00      	nop
 800bcd0:	0800c99c 	.word	0x0800c99c
 800bcd4:	0800c8c3 	.word	0x0800c8c3
 800bcd8:	0800c943 	.word	0x0800c943

0800bcdc <__lshift>:
 800bcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bce0:	460c      	mov	r4, r1
 800bce2:	4607      	mov	r7, r0
 800bce4:	4691      	mov	r9, r2
 800bce6:	6923      	ldr	r3, [r4, #16]
 800bce8:	6849      	ldr	r1, [r1, #4]
 800bcea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcee:	68a3      	ldr	r3, [r4, #8]
 800bcf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcf4:	f108 0601 	add.w	r6, r8, #1
 800bcf8:	42b3      	cmp	r3, r6
 800bcfa:	db0b      	blt.n	800bd14 <__lshift+0x38>
 800bcfc:	4638      	mov	r0, r7
 800bcfe:	f7ff fde1 	bl	800b8c4 <_Balloc>
 800bd02:	4605      	mov	r5, r0
 800bd04:	b948      	cbnz	r0, 800bd1a <__lshift+0x3e>
 800bd06:	4602      	mov	r2, r0
 800bd08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bd0c:	4b27      	ldr	r3, [pc, #156]	@ (800bdac <__lshift+0xd0>)
 800bd0e:	4828      	ldr	r0, [pc, #160]	@ (800bdb0 <__lshift+0xd4>)
 800bd10:	f000 fbf2 	bl	800c4f8 <__assert_func>
 800bd14:	3101      	adds	r1, #1
 800bd16:	005b      	lsls	r3, r3, #1
 800bd18:	e7ee      	b.n	800bcf8 <__lshift+0x1c>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	f100 0114 	add.w	r1, r0, #20
 800bd20:	f100 0210 	add.w	r2, r0, #16
 800bd24:	4618      	mov	r0, r3
 800bd26:	4553      	cmp	r3, sl
 800bd28:	db33      	blt.n	800bd92 <__lshift+0xb6>
 800bd2a:	6920      	ldr	r0, [r4, #16]
 800bd2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd30:	f104 0314 	add.w	r3, r4, #20
 800bd34:	f019 091f 	ands.w	r9, r9, #31
 800bd38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd40:	d02b      	beq.n	800bd9a <__lshift+0xbe>
 800bd42:	468a      	mov	sl, r1
 800bd44:	2200      	movs	r2, #0
 800bd46:	f1c9 0e20 	rsb	lr, r9, #32
 800bd4a:	6818      	ldr	r0, [r3, #0]
 800bd4c:	fa00 f009 	lsl.w	r0, r0, r9
 800bd50:	4310      	orrs	r0, r2
 800bd52:	f84a 0b04 	str.w	r0, [sl], #4
 800bd56:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd5a:	459c      	cmp	ip, r3
 800bd5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd60:	d8f3      	bhi.n	800bd4a <__lshift+0x6e>
 800bd62:	ebac 0304 	sub.w	r3, ip, r4
 800bd66:	3b15      	subs	r3, #21
 800bd68:	f023 0303 	bic.w	r3, r3, #3
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	f104 0015 	add.w	r0, r4, #21
 800bd72:	4584      	cmp	ip, r0
 800bd74:	bf38      	it	cc
 800bd76:	2304      	movcc	r3, #4
 800bd78:	50ca      	str	r2, [r1, r3]
 800bd7a:	b10a      	cbz	r2, 800bd80 <__lshift+0xa4>
 800bd7c:	f108 0602 	add.w	r6, r8, #2
 800bd80:	3e01      	subs	r6, #1
 800bd82:	4638      	mov	r0, r7
 800bd84:	4621      	mov	r1, r4
 800bd86:	612e      	str	r6, [r5, #16]
 800bd88:	f7ff fddc 	bl	800b944 <_Bfree>
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd92:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd96:	3301      	adds	r3, #1
 800bd98:	e7c5      	b.n	800bd26 <__lshift+0x4a>
 800bd9a:	3904      	subs	r1, #4
 800bd9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda0:	459c      	cmp	ip, r3
 800bda2:	f841 2f04 	str.w	r2, [r1, #4]!
 800bda6:	d8f9      	bhi.n	800bd9c <__lshift+0xc0>
 800bda8:	e7ea      	b.n	800bd80 <__lshift+0xa4>
 800bdaa:	bf00      	nop
 800bdac:	0800c932 	.word	0x0800c932
 800bdb0:	0800c943 	.word	0x0800c943

0800bdb4 <__mcmp>:
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	690a      	ldr	r2, [r1, #16]
 800bdb8:	6900      	ldr	r0, [r0, #16]
 800bdba:	b530      	push	{r4, r5, lr}
 800bdbc:	1a80      	subs	r0, r0, r2
 800bdbe:	d10e      	bne.n	800bdde <__mcmp+0x2a>
 800bdc0:	3314      	adds	r3, #20
 800bdc2:	3114      	adds	r1, #20
 800bdc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bdc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bdcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bdd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bdd4:	4295      	cmp	r5, r2
 800bdd6:	d003      	beq.n	800bde0 <__mcmp+0x2c>
 800bdd8:	d205      	bcs.n	800bde6 <__mcmp+0x32>
 800bdda:	f04f 30ff 	mov.w	r0, #4294967295
 800bdde:	bd30      	pop	{r4, r5, pc}
 800bde0:	42a3      	cmp	r3, r4
 800bde2:	d3f3      	bcc.n	800bdcc <__mcmp+0x18>
 800bde4:	e7fb      	b.n	800bdde <__mcmp+0x2a>
 800bde6:	2001      	movs	r0, #1
 800bde8:	e7f9      	b.n	800bdde <__mcmp+0x2a>
	...

0800bdec <__mdiff>:
 800bdec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf0:	4689      	mov	r9, r1
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	4648      	mov	r0, r9
 800bdf8:	4614      	mov	r4, r2
 800bdfa:	f7ff ffdb 	bl	800bdb4 <__mcmp>
 800bdfe:	1e05      	subs	r5, r0, #0
 800be00:	d112      	bne.n	800be28 <__mdiff+0x3c>
 800be02:	4629      	mov	r1, r5
 800be04:	4630      	mov	r0, r6
 800be06:	f7ff fd5d 	bl	800b8c4 <_Balloc>
 800be0a:	4602      	mov	r2, r0
 800be0c:	b928      	cbnz	r0, 800be1a <__mdiff+0x2e>
 800be0e:	f240 2137 	movw	r1, #567	@ 0x237
 800be12:	4b3e      	ldr	r3, [pc, #248]	@ (800bf0c <__mdiff+0x120>)
 800be14:	483e      	ldr	r0, [pc, #248]	@ (800bf10 <__mdiff+0x124>)
 800be16:	f000 fb6f 	bl	800c4f8 <__assert_func>
 800be1a:	2301      	movs	r3, #1
 800be1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be20:	4610      	mov	r0, r2
 800be22:	b003      	add	sp, #12
 800be24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be28:	bfbc      	itt	lt
 800be2a:	464b      	movlt	r3, r9
 800be2c:	46a1      	movlt	r9, r4
 800be2e:	4630      	mov	r0, r6
 800be30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be34:	bfba      	itte	lt
 800be36:	461c      	movlt	r4, r3
 800be38:	2501      	movlt	r5, #1
 800be3a:	2500      	movge	r5, #0
 800be3c:	f7ff fd42 	bl	800b8c4 <_Balloc>
 800be40:	4602      	mov	r2, r0
 800be42:	b918      	cbnz	r0, 800be4c <__mdiff+0x60>
 800be44:	f240 2145 	movw	r1, #581	@ 0x245
 800be48:	4b30      	ldr	r3, [pc, #192]	@ (800bf0c <__mdiff+0x120>)
 800be4a:	e7e3      	b.n	800be14 <__mdiff+0x28>
 800be4c:	f100 0b14 	add.w	fp, r0, #20
 800be50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be54:	f109 0310 	add.w	r3, r9, #16
 800be58:	60c5      	str	r5, [r0, #12]
 800be5a:	f04f 0c00 	mov.w	ip, #0
 800be5e:	f109 0514 	add.w	r5, r9, #20
 800be62:	46d9      	mov	r9, fp
 800be64:	6926      	ldr	r6, [r4, #16]
 800be66:	f104 0e14 	add.w	lr, r4, #20
 800be6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be6e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	9b01      	ldr	r3, [sp, #4]
 800be76:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be7e:	b281      	uxth	r1, r0
 800be80:	9301      	str	r3, [sp, #4]
 800be82:	fa1f f38a 	uxth.w	r3, sl
 800be86:	1a5b      	subs	r3, r3, r1
 800be88:	0c00      	lsrs	r0, r0, #16
 800be8a:	4463      	add	r3, ip
 800be8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be90:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be94:	b29b      	uxth	r3, r3
 800be96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be9a:	4576      	cmp	r6, lr
 800be9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bea0:	f849 3b04 	str.w	r3, [r9], #4
 800bea4:	d8e6      	bhi.n	800be74 <__mdiff+0x88>
 800bea6:	1b33      	subs	r3, r6, r4
 800bea8:	3b15      	subs	r3, #21
 800beaa:	f023 0303 	bic.w	r3, r3, #3
 800beae:	3415      	adds	r4, #21
 800beb0:	3304      	adds	r3, #4
 800beb2:	42a6      	cmp	r6, r4
 800beb4:	bf38      	it	cc
 800beb6:	2304      	movcc	r3, #4
 800beb8:	441d      	add	r5, r3
 800beba:	445b      	add	r3, fp
 800bebc:	461e      	mov	r6, r3
 800bebe:	462c      	mov	r4, r5
 800bec0:	4544      	cmp	r4, r8
 800bec2:	d30e      	bcc.n	800bee2 <__mdiff+0xf6>
 800bec4:	f108 0103 	add.w	r1, r8, #3
 800bec8:	1b49      	subs	r1, r1, r5
 800beca:	f021 0103 	bic.w	r1, r1, #3
 800bece:	3d03      	subs	r5, #3
 800bed0:	45a8      	cmp	r8, r5
 800bed2:	bf38      	it	cc
 800bed4:	2100      	movcc	r1, #0
 800bed6:	440b      	add	r3, r1
 800bed8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bedc:	b199      	cbz	r1, 800bf06 <__mdiff+0x11a>
 800bede:	6117      	str	r7, [r2, #16]
 800bee0:	e79e      	b.n	800be20 <__mdiff+0x34>
 800bee2:	46e6      	mov	lr, ip
 800bee4:	f854 1b04 	ldr.w	r1, [r4], #4
 800bee8:	fa1f fc81 	uxth.w	ip, r1
 800beec:	44f4      	add	ip, lr
 800beee:	0c08      	lsrs	r0, r1, #16
 800bef0:	4471      	add	r1, lr
 800bef2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bef6:	b289      	uxth	r1, r1
 800bef8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800befc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf00:	f846 1b04 	str.w	r1, [r6], #4
 800bf04:	e7dc      	b.n	800bec0 <__mdiff+0xd4>
 800bf06:	3f01      	subs	r7, #1
 800bf08:	e7e6      	b.n	800bed8 <__mdiff+0xec>
 800bf0a:	bf00      	nop
 800bf0c:	0800c932 	.word	0x0800c932
 800bf10:	0800c943 	.word	0x0800c943

0800bf14 <__d2b>:
 800bf14:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bf18:	2101      	movs	r1, #1
 800bf1a:	4690      	mov	r8, r2
 800bf1c:	4699      	mov	r9, r3
 800bf1e:	9e08      	ldr	r6, [sp, #32]
 800bf20:	f7ff fcd0 	bl	800b8c4 <_Balloc>
 800bf24:	4604      	mov	r4, r0
 800bf26:	b930      	cbnz	r0, 800bf36 <__d2b+0x22>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf2e:	4b23      	ldr	r3, [pc, #140]	@ (800bfbc <__d2b+0xa8>)
 800bf30:	4823      	ldr	r0, [pc, #140]	@ (800bfc0 <__d2b+0xac>)
 800bf32:	f000 fae1 	bl	800c4f8 <__assert_func>
 800bf36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf3e:	b10d      	cbz	r5, 800bf44 <__d2b+0x30>
 800bf40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	f1b8 0300 	subs.w	r3, r8, #0
 800bf4a:	d024      	beq.n	800bf96 <__d2b+0x82>
 800bf4c:	4668      	mov	r0, sp
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	f7ff fd7f 	bl	800ba52 <__lo0bits>
 800bf54:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf58:	b1d8      	cbz	r0, 800bf92 <__d2b+0x7e>
 800bf5a:	f1c0 0320 	rsb	r3, r0, #32
 800bf5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf62:	430b      	orrs	r3, r1
 800bf64:	40c2      	lsrs	r2, r0
 800bf66:	6163      	str	r3, [r4, #20]
 800bf68:	9201      	str	r2, [sp, #4]
 800bf6a:	9b01      	ldr	r3, [sp, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	bf0c      	ite	eq
 800bf70:	2201      	moveq	r2, #1
 800bf72:	2202      	movne	r2, #2
 800bf74:	61a3      	str	r3, [r4, #24]
 800bf76:	6122      	str	r2, [r4, #16]
 800bf78:	b1ad      	cbz	r5, 800bfa6 <__d2b+0x92>
 800bf7a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf7e:	4405      	add	r5, r0
 800bf80:	6035      	str	r5, [r6, #0]
 800bf82:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf88:	6018      	str	r0, [r3, #0]
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	b002      	add	sp, #8
 800bf8e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bf92:	6161      	str	r1, [r4, #20]
 800bf94:	e7e9      	b.n	800bf6a <__d2b+0x56>
 800bf96:	a801      	add	r0, sp, #4
 800bf98:	f7ff fd5b 	bl	800ba52 <__lo0bits>
 800bf9c:	9b01      	ldr	r3, [sp, #4]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	6163      	str	r3, [r4, #20]
 800bfa2:	3020      	adds	r0, #32
 800bfa4:	e7e7      	b.n	800bf76 <__d2b+0x62>
 800bfa6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bfaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfae:	6030      	str	r0, [r6, #0]
 800bfb0:	6918      	ldr	r0, [r3, #16]
 800bfb2:	f7ff fd2f 	bl	800ba14 <__hi0bits>
 800bfb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfba:	e7e4      	b.n	800bf86 <__d2b+0x72>
 800bfbc:	0800c932 	.word	0x0800c932
 800bfc0:	0800c943 	.word	0x0800c943

0800bfc4 <__sfputc_r>:
 800bfc4:	6893      	ldr	r3, [r2, #8]
 800bfc6:	b410      	push	{r4}
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	6093      	str	r3, [r2, #8]
 800bfce:	da07      	bge.n	800bfe0 <__sfputc_r+0x1c>
 800bfd0:	6994      	ldr	r4, [r2, #24]
 800bfd2:	42a3      	cmp	r3, r4
 800bfd4:	db01      	blt.n	800bfda <__sfputc_r+0x16>
 800bfd6:	290a      	cmp	r1, #10
 800bfd8:	d102      	bne.n	800bfe0 <__sfputc_r+0x1c>
 800bfda:	bc10      	pop	{r4}
 800bfdc:	f000 b9da 	b.w	800c394 <__swbuf_r>
 800bfe0:	6813      	ldr	r3, [r2, #0]
 800bfe2:	1c58      	adds	r0, r3, #1
 800bfe4:	6010      	str	r0, [r2, #0]
 800bfe6:	7019      	strb	r1, [r3, #0]
 800bfe8:	4608      	mov	r0, r1
 800bfea:	bc10      	pop	{r4}
 800bfec:	4770      	bx	lr

0800bfee <__sfputs_r>:
 800bfee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff0:	4606      	mov	r6, r0
 800bff2:	460f      	mov	r7, r1
 800bff4:	4614      	mov	r4, r2
 800bff6:	18d5      	adds	r5, r2, r3
 800bff8:	42ac      	cmp	r4, r5
 800bffa:	d101      	bne.n	800c000 <__sfputs_r+0x12>
 800bffc:	2000      	movs	r0, #0
 800bffe:	e007      	b.n	800c010 <__sfputs_r+0x22>
 800c000:	463a      	mov	r2, r7
 800c002:	4630      	mov	r0, r6
 800c004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c008:	f7ff ffdc 	bl	800bfc4 <__sfputc_r>
 800c00c:	1c43      	adds	r3, r0, #1
 800c00e:	d1f3      	bne.n	800bff8 <__sfputs_r+0xa>
 800c010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c014 <_vfiprintf_r>:
 800c014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c018:	460d      	mov	r5, r1
 800c01a:	4614      	mov	r4, r2
 800c01c:	4698      	mov	r8, r3
 800c01e:	4606      	mov	r6, r0
 800c020:	b09d      	sub	sp, #116	@ 0x74
 800c022:	b118      	cbz	r0, 800c02c <_vfiprintf_r+0x18>
 800c024:	6a03      	ldr	r3, [r0, #32]
 800c026:	b90b      	cbnz	r3, 800c02c <_vfiprintf_r+0x18>
 800c028:	f7fe fbe2 	bl	800a7f0 <__sinit>
 800c02c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c02e:	07d9      	lsls	r1, r3, #31
 800c030:	d405      	bmi.n	800c03e <_vfiprintf_r+0x2a>
 800c032:	89ab      	ldrh	r3, [r5, #12]
 800c034:	059a      	lsls	r2, r3, #22
 800c036:	d402      	bmi.n	800c03e <_vfiprintf_r+0x2a>
 800c038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c03a:	f7fe fce2 	bl	800aa02 <__retarget_lock_acquire_recursive>
 800c03e:	89ab      	ldrh	r3, [r5, #12]
 800c040:	071b      	lsls	r3, r3, #28
 800c042:	d501      	bpl.n	800c048 <_vfiprintf_r+0x34>
 800c044:	692b      	ldr	r3, [r5, #16]
 800c046:	b99b      	cbnz	r3, 800c070 <_vfiprintf_r+0x5c>
 800c048:	4629      	mov	r1, r5
 800c04a:	4630      	mov	r0, r6
 800c04c:	f000 f9e0 	bl	800c410 <__swsetup_r>
 800c050:	b170      	cbz	r0, 800c070 <_vfiprintf_r+0x5c>
 800c052:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c054:	07dc      	lsls	r4, r3, #31
 800c056:	d504      	bpl.n	800c062 <_vfiprintf_r+0x4e>
 800c058:	f04f 30ff 	mov.w	r0, #4294967295
 800c05c:	b01d      	add	sp, #116	@ 0x74
 800c05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c062:	89ab      	ldrh	r3, [r5, #12]
 800c064:	0598      	lsls	r0, r3, #22
 800c066:	d4f7      	bmi.n	800c058 <_vfiprintf_r+0x44>
 800c068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c06a:	f7fe fccb 	bl	800aa04 <__retarget_lock_release_recursive>
 800c06e:	e7f3      	b.n	800c058 <_vfiprintf_r+0x44>
 800c070:	2300      	movs	r3, #0
 800c072:	9309      	str	r3, [sp, #36]	@ 0x24
 800c074:	2320      	movs	r3, #32
 800c076:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c07a:	2330      	movs	r3, #48	@ 0x30
 800c07c:	f04f 0901 	mov.w	r9, #1
 800c080:	f8cd 800c 	str.w	r8, [sp, #12]
 800c084:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c230 <_vfiprintf_r+0x21c>
 800c088:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c08c:	4623      	mov	r3, r4
 800c08e:	469a      	mov	sl, r3
 800c090:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c094:	b10a      	cbz	r2, 800c09a <_vfiprintf_r+0x86>
 800c096:	2a25      	cmp	r2, #37	@ 0x25
 800c098:	d1f9      	bne.n	800c08e <_vfiprintf_r+0x7a>
 800c09a:	ebba 0b04 	subs.w	fp, sl, r4
 800c09e:	d00b      	beq.n	800c0b8 <_vfiprintf_r+0xa4>
 800c0a0:	465b      	mov	r3, fp
 800c0a2:	4622      	mov	r2, r4
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f7ff ffa1 	bl	800bfee <__sfputs_r>
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	f000 80a7 	beq.w	800c200 <_vfiprintf_r+0x1ec>
 800c0b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0b4:	445a      	add	r2, fp
 800c0b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 809f 	beq.w	800c200 <_vfiprintf_r+0x1ec>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0cc:	f10a 0a01 	add.w	sl, sl, #1
 800c0d0:	9304      	str	r3, [sp, #16]
 800c0d2:	9307      	str	r3, [sp, #28]
 800c0d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0da:	4654      	mov	r4, sl
 800c0dc:	2205      	movs	r2, #5
 800c0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0e2:	4853      	ldr	r0, [pc, #332]	@ (800c230 <_vfiprintf_r+0x21c>)
 800c0e4:	f7fe fc8f 	bl	800aa06 <memchr>
 800c0e8:	9a04      	ldr	r2, [sp, #16]
 800c0ea:	b9d8      	cbnz	r0, 800c124 <_vfiprintf_r+0x110>
 800c0ec:	06d1      	lsls	r1, r2, #27
 800c0ee:	bf44      	itt	mi
 800c0f0:	2320      	movmi	r3, #32
 800c0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0f6:	0713      	lsls	r3, r2, #28
 800c0f8:	bf44      	itt	mi
 800c0fa:	232b      	movmi	r3, #43	@ 0x2b
 800c0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c100:	f89a 3000 	ldrb.w	r3, [sl]
 800c104:	2b2a      	cmp	r3, #42	@ 0x2a
 800c106:	d015      	beq.n	800c134 <_vfiprintf_r+0x120>
 800c108:	4654      	mov	r4, sl
 800c10a:	2000      	movs	r0, #0
 800c10c:	f04f 0c0a 	mov.w	ip, #10
 800c110:	9a07      	ldr	r2, [sp, #28]
 800c112:	4621      	mov	r1, r4
 800c114:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c118:	3b30      	subs	r3, #48	@ 0x30
 800c11a:	2b09      	cmp	r3, #9
 800c11c:	d94b      	bls.n	800c1b6 <_vfiprintf_r+0x1a2>
 800c11e:	b1b0      	cbz	r0, 800c14e <_vfiprintf_r+0x13a>
 800c120:	9207      	str	r2, [sp, #28]
 800c122:	e014      	b.n	800c14e <_vfiprintf_r+0x13a>
 800c124:	eba0 0308 	sub.w	r3, r0, r8
 800c128:	fa09 f303 	lsl.w	r3, r9, r3
 800c12c:	4313      	orrs	r3, r2
 800c12e:	46a2      	mov	sl, r4
 800c130:	9304      	str	r3, [sp, #16]
 800c132:	e7d2      	b.n	800c0da <_vfiprintf_r+0xc6>
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	1d19      	adds	r1, r3, #4
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	9103      	str	r1, [sp, #12]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	bfbb      	ittet	lt
 800c140:	425b      	neglt	r3, r3
 800c142:	f042 0202 	orrlt.w	r2, r2, #2
 800c146:	9307      	strge	r3, [sp, #28]
 800c148:	9307      	strlt	r3, [sp, #28]
 800c14a:	bfb8      	it	lt
 800c14c:	9204      	strlt	r2, [sp, #16]
 800c14e:	7823      	ldrb	r3, [r4, #0]
 800c150:	2b2e      	cmp	r3, #46	@ 0x2e
 800c152:	d10a      	bne.n	800c16a <_vfiprintf_r+0x156>
 800c154:	7863      	ldrb	r3, [r4, #1]
 800c156:	2b2a      	cmp	r3, #42	@ 0x2a
 800c158:	d132      	bne.n	800c1c0 <_vfiprintf_r+0x1ac>
 800c15a:	9b03      	ldr	r3, [sp, #12]
 800c15c:	3402      	adds	r4, #2
 800c15e:	1d1a      	adds	r2, r3, #4
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	9203      	str	r2, [sp, #12]
 800c164:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c168:	9305      	str	r3, [sp, #20]
 800c16a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c234 <_vfiprintf_r+0x220>
 800c16e:	2203      	movs	r2, #3
 800c170:	4650      	mov	r0, sl
 800c172:	7821      	ldrb	r1, [r4, #0]
 800c174:	f7fe fc47 	bl	800aa06 <memchr>
 800c178:	b138      	cbz	r0, 800c18a <_vfiprintf_r+0x176>
 800c17a:	2240      	movs	r2, #64	@ 0x40
 800c17c:	9b04      	ldr	r3, [sp, #16]
 800c17e:	eba0 000a 	sub.w	r0, r0, sl
 800c182:	4082      	lsls	r2, r0
 800c184:	4313      	orrs	r3, r2
 800c186:	3401      	adds	r4, #1
 800c188:	9304      	str	r3, [sp, #16]
 800c18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c18e:	2206      	movs	r2, #6
 800c190:	4829      	ldr	r0, [pc, #164]	@ (800c238 <_vfiprintf_r+0x224>)
 800c192:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c196:	f7fe fc36 	bl	800aa06 <memchr>
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d03f      	beq.n	800c21e <_vfiprintf_r+0x20a>
 800c19e:	4b27      	ldr	r3, [pc, #156]	@ (800c23c <_vfiprintf_r+0x228>)
 800c1a0:	bb1b      	cbnz	r3, 800c1ea <_vfiprintf_r+0x1d6>
 800c1a2:	9b03      	ldr	r3, [sp, #12]
 800c1a4:	3307      	adds	r3, #7
 800c1a6:	f023 0307 	bic.w	r3, r3, #7
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	9303      	str	r3, [sp, #12]
 800c1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1b0:	443b      	add	r3, r7
 800c1b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1b4:	e76a      	b.n	800c08c <_vfiprintf_r+0x78>
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	2001      	movs	r0, #1
 800c1ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1be:	e7a8      	b.n	800c112 <_vfiprintf_r+0xfe>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f04f 0c0a 	mov.w	ip, #10
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	3401      	adds	r4, #1
 800c1ca:	9305      	str	r3, [sp, #20]
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1d2:	3a30      	subs	r2, #48	@ 0x30
 800c1d4:	2a09      	cmp	r2, #9
 800c1d6:	d903      	bls.n	800c1e0 <_vfiprintf_r+0x1cc>
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d0c6      	beq.n	800c16a <_vfiprintf_r+0x156>
 800c1dc:	9105      	str	r1, [sp, #20]
 800c1de:	e7c4      	b.n	800c16a <_vfiprintf_r+0x156>
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1e8:	e7f0      	b.n	800c1cc <_vfiprintf_r+0x1b8>
 800c1ea:	ab03      	add	r3, sp, #12
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	462a      	mov	r2, r5
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	4b13      	ldr	r3, [pc, #76]	@ (800c240 <_vfiprintf_r+0x22c>)
 800c1f4:	a904      	add	r1, sp, #16
 800c1f6:	f7fd feb1 	bl	8009f5c <_printf_float>
 800c1fa:	4607      	mov	r7, r0
 800c1fc:	1c78      	adds	r0, r7, #1
 800c1fe:	d1d6      	bne.n	800c1ae <_vfiprintf_r+0x19a>
 800c200:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c202:	07d9      	lsls	r1, r3, #31
 800c204:	d405      	bmi.n	800c212 <_vfiprintf_r+0x1fe>
 800c206:	89ab      	ldrh	r3, [r5, #12]
 800c208:	059a      	lsls	r2, r3, #22
 800c20a:	d402      	bmi.n	800c212 <_vfiprintf_r+0x1fe>
 800c20c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c20e:	f7fe fbf9 	bl	800aa04 <__retarget_lock_release_recursive>
 800c212:	89ab      	ldrh	r3, [r5, #12]
 800c214:	065b      	lsls	r3, r3, #25
 800c216:	f53f af1f 	bmi.w	800c058 <_vfiprintf_r+0x44>
 800c21a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c21c:	e71e      	b.n	800c05c <_vfiprintf_r+0x48>
 800c21e:	ab03      	add	r3, sp, #12
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	462a      	mov	r2, r5
 800c224:	4630      	mov	r0, r6
 800c226:	4b06      	ldr	r3, [pc, #24]	@ (800c240 <_vfiprintf_r+0x22c>)
 800c228:	a904      	add	r1, sp, #16
 800c22a:	f7fe f935 	bl	800a498 <_printf_i>
 800c22e:	e7e4      	b.n	800c1fa <_vfiprintf_r+0x1e6>
 800c230:	0800ca98 	.word	0x0800ca98
 800c234:	0800ca9e 	.word	0x0800ca9e
 800c238:	0800caa2 	.word	0x0800caa2
 800c23c:	08009f5d 	.word	0x08009f5d
 800c240:	0800bfef 	.word	0x0800bfef

0800c244 <__sflush_r>:
 800c244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24a:	0716      	lsls	r6, r2, #28
 800c24c:	4605      	mov	r5, r0
 800c24e:	460c      	mov	r4, r1
 800c250:	d454      	bmi.n	800c2fc <__sflush_r+0xb8>
 800c252:	684b      	ldr	r3, [r1, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	dc02      	bgt.n	800c25e <__sflush_r+0x1a>
 800c258:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	dd48      	ble.n	800c2f0 <__sflush_r+0xac>
 800c25e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c260:	2e00      	cmp	r6, #0
 800c262:	d045      	beq.n	800c2f0 <__sflush_r+0xac>
 800c264:	2300      	movs	r3, #0
 800c266:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c26a:	682f      	ldr	r7, [r5, #0]
 800c26c:	6a21      	ldr	r1, [r4, #32]
 800c26e:	602b      	str	r3, [r5, #0]
 800c270:	d030      	beq.n	800c2d4 <__sflush_r+0x90>
 800c272:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c274:	89a3      	ldrh	r3, [r4, #12]
 800c276:	0759      	lsls	r1, r3, #29
 800c278:	d505      	bpl.n	800c286 <__sflush_r+0x42>
 800c27a:	6863      	ldr	r3, [r4, #4]
 800c27c:	1ad2      	subs	r2, r2, r3
 800c27e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c280:	b10b      	cbz	r3, 800c286 <__sflush_r+0x42>
 800c282:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c284:	1ad2      	subs	r2, r2, r3
 800c286:	2300      	movs	r3, #0
 800c288:	4628      	mov	r0, r5
 800c28a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c28c:	6a21      	ldr	r1, [r4, #32]
 800c28e:	47b0      	blx	r6
 800c290:	1c43      	adds	r3, r0, #1
 800c292:	89a3      	ldrh	r3, [r4, #12]
 800c294:	d106      	bne.n	800c2a4 <__sflush_r+0x60>
 800c296:	6829      	ldr	r1, [r5, #0]
 800c298:	291d      	cmp	r1, #29
 800c29a:	d82b      	bhi.n	800c2f4 <__sflush_r+0xb0>
 800c29c:	4a28      	ldr	r2, [pc, #160]	@ (800c340 <__sflush_r+0xfc>)
 800c29e:	410a      	asrs	r2, r1
 800c2a0:	07d6      	lsls	r6, r2, #31
 800c2a2:	d427      	bmi.n	800c2f4 <__sflush_r+0xb0>
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	6062      	str	r2, [r4, #4]
 800c2a8:	6922      	ldr	r2, [r4, #16]
 800c2aa:	04d9      	lsls	r1, r3, #19
 800c2ac:	6022      	str	r2, [r4, #0]
 800c2ae:	d504      	bpl.n	800c2ba <__sflush_r+0x76>
 800c2b0:	1c42      	adds	r2, r0, #1
 800c2b2:	d101      	bne.n	800c2b8 <__sflush_r+0x74>
 800c2b4:	682b      	ldr	r3, [r5, #0]
 800c2b6:	b903      	cbnz	r3, 800c2ba <__sflush_r+0x76>
 800c2b8:	6560      	str	r0, [r4, #84]	@ 0x54
 800c2ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2bc:	602f      	str	r7, [r5, #0]
 800c2be:	b1b9      	cbz	r1, 800c2f0 <__sflush_r+0xac>
 800c2c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2c4:	4299      	cmp	r1, r3
 800c2c6:	d002      	beq.n	800c2ce <__sflush_r+0x8a>
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f7ff f9fd 	bl	800b6c8 <_free_r>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2d2:	e00d      	b.n	800c2f0 <__sflush_r+0xac>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	47b0      	blx	r6
 800c2da:	4602      	mov	r2, r0
 800c2dc:	1c50      	adds	r0, r2, #1
 800c2de:	d1c9      	bne.n	800c274 <__sflush_r+0x30>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d0c6      	beq.n	800c274 <__sflush_r+0x30>
 800c2e6:	2b1d      	cmp	r3, #29
 800c2e8:	d001      	beq.n	800c2ee <__sflush_r+0xaa>
 800c2ea:	2b16      	cmp	r3, #22
 800c2ec:	d11d      	bne.n	800c32a <__sflush_r+0xe6>
 800c2ee:	602f      	str	r7, [r5, #0]
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	e021      	b.n	800c338 <__sflush_r+0xf4>
 800c2f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2f8:	b21b      	sxth	r3, r3
 800c2fa:	e01a      	b.n	800c332 <__sflush_r+0xee>
 800c2fc:	690f      	ldr	r7, [r1, #16]
 800c2fe:	2f00      	cmp	r7, #0
 800c300:	d0f6      	beq.n	800c2f0 <__sflush_r+0xac>
 800c302:	0793      	lsls	r3, r2, #30
 800c304:	bf18      	it	ne
 800c306:	2300      	movne	r3, #0
 800c308:	680e      	ldr	r6, [r1, #0]
 800c30a:	bf08      	it	eq
 800c30c:	694b      	ldreq	r3, [r1, #20]
 800c30e:	1bf6      	subs	r6, r6, r7
 800c310:	600f      	str	r7, [r1, #0]
 800c312:	608b      	str	r3, [r1, #8]
 800c314:	2e00      	cmp	r6, #0
 800c316:	ddeb      	ble.n	800c2f0 <__sflush_r+0xac>
 800c318:	4633      	mov	r3, r6
 800c31a:	463a      	mov	r2, r7
 800c31c:	4628      	mov	r0, r5
 800c31e:	6a21      	ldr	r1, [r4, #32]
 800c320:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c324:	47e0      	blx	ip
 800c326:	2800      	cmp	r0, #0
 800c328:	dc07      	bgt.n	800c33a <__sflush_r+0xf6>
 800c32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c32e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c332:	f04f 30ff 	mov.w	r0, #4294967295
 800c336:	81a3      	strh	r3, [r4, #12]
 800c338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c33a:	4407      	add	r7, r0
 800c33c:	1a36      	subs	r6, r6, r0
 800c33e:	e7e9      	b.n	800c314 <__sflush_r+0xd0>
 800c340:	dfbffffe 	.word	0xdfbffffe

0800c344 <_fflush_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	690b      	ldr	r3, [r1, #16]
 800c348:	4605      	mov	r5, r0
 800c34a:	460c      	mov	r4, r1
 800c34c:	b913      	cbnz	r3, 800c354 <_fflush_r+0x10>
 800c34e:	2500      	movs	r5, #0
 800c350:	4628      	mov	r0, r5
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	b118      	cbz	r0, 800c35e <_fflush_r+0x1a>
 800c356:	6a03      	ldr	r3, [r0, #32]
 800c358:	b90b      	cbnz	r3, 800c35e <_fflush_r+0x1a>
 800c35a:	f7fe fa49 	bl	800a7f0 <__sinit>
 800c35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0f3      	beq.n	800c34e <_fflush_r+0xa>
 800c366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c368:	07d0      	lsls	r0, r2, #31
 800c36a:	d404      	bmi.n	800c376 <_fflush_r+0x32>
 800c36c:	0599      	lsls	r1, r3, #22
 800c36e:	d402      	bmi.n	800c376 <_fflush_r+0x32>
 800c370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c372:	f7fe fb46 	bl	800aa02 <__retarget_lock_acquire_recursive>
 800c376:	4628      	mov	r0, r5
 800c378:	4621      	mov	r1, r4
 800c37a:	f7ff ff63 	bl	800c244 <__sflush_r>
 800c37e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c380:	4605      	mov	r5, r0
 800c382:	07da      	lsls	r2, r3, #31
 800c384:	d4e4      	bmi.n	800c350 <_fflush_r+0xc>
 800c386:	89a3      	ldrh	r3, [r4, #12]
 800c388:	059b      	lsls	r3, r3, #22
 800c38a:	d4e1      	bmi.n	800c350 <_fflush_r+0xc>
 800c38c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c38e:	f7fe fb39 	bl	800aa04 <__retarget_lock_release_recursive>
 800c392:	e7dd      	b.n	800c350 <_fflush_r+0xc>

0800c394 <__swbuf_r>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	460e      	mov	r6, r1
 800c398:	4614      	mov	r4, r2
 800c39a:	4605      	mov	r5, r0
 800c39c:	b118      	cbz	r0, 800c3a6 <__swbuf_r+0x12>
 800c39e:	6a03      	ldr	r3, [r0, #32]
 800c3a0:	b90b      	cbnz	r3, 800c3a6 <__swbuf_r+0x12>
 800c3a2:	f7fe fa25 	bl	800a7f0 <__sinit>
 800c3a6:	69a3      	ldr	r3, [r4, #24]
 800c3a8:	60a3      	str	r3, [r4, #8]
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	071a      	lsls	r2, r3, #28
 800c3ae:	d501      	bpl.n	800c3b4 <__swbuf_r+0x20>
 800c3b0:	6923      	ldr	r3, [r4, #16]
 800c3b2:	b943      	cbnz	r3, 800c3c6 <__swbuf_r+0x32>
 800c3b4:	4621      	mov	r1, r4
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f000 f82a 	bl	800c410 <__swsetup_r>
 800c3bc:	b118      	cbz	r0, 800c3c6 <__swbuf_r+0x32>
 800c3be:	f04f 37ff 	mov.w	r7, #4294967295
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	6922      	ldr	r2, [r4, #16]
 800c3ca:	b2f6      	uxtb	r6, r6
 800c3cc:	1a98      	subs	r0, r3, r2
 800c3ce:	6963      	ldr	r3, [r4, #20]
 800c3d0:	4637      	mov	r7, r6
 800c3d2:	4283      	cmp	r3, r0
 800c3d4:	dc05      	bgt.n	800c3e2 <__swbuf_r+0x4e>
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	4628      	mov	r0, r5
 800c3da:	f7ff ffb3 	bl	800c344 <_fflush_r>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	d1ed      	bne.n	800c3be <__swbuf_r+0x2a>
 800c3e2:	68a3      	ldr	r3, [r4, #8]
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	60a3      	str	r3, [r4, #8]
 800c3e8:	6823      	ldr	r3, [r4, #0]
 800c3ea:	1c5a      	adds	r2, r3, #1
 800c3ec:	6022      	str	r2, [r4, #0]
 800c3ee:	701e      	strb	r6, [r3, #0]
 800c3f0:	6962      	ldr	r2, [r4, #20]
 800c3f2:	1c43      	adds	r3, r0, #1
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d004      	beq.n	800c402 <__swbuf_r+0x6e>
 800c3f8:	89a3      	ldrh	r3, [r4, #12]
 800c3fa:	07db      	lsls	r3, r3, #31
 800c3fc:	d5e1      	bpl.n	800c3c2 <__swbuf_r+0x2e>
 800c3fe:	2e0a      	cmp	r6, #10
 800c400:	d1df      	bne.n	800c3c2 <__swbuf_r+0x2e>
 800c402:	4621      	mov	r1, r4
 800c404:	4628      	mov	r0, r5
 800c406:	f7ff ff9d 	bl	800c344 <_fflush_r>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d0d9      	beq.n	800c3c2 <__swbuf_r+0x2e>
 800c40e:	e7d6      	b.n	800c3be <__swbuf_r+0x2a>

0800c410 <__swsetup_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4b29      	ldr	r3, [pc, #164]	@ (800c4b8 <__swsetup_r+0xa8>)
 800c414:	4605      	mov	r5, r0
 800c416:	6818      	ldr	r0, [r3, #0]
 800c418:	460c      	mov	r4, r1
 800c41a:	b118      	cbz	r0, 800c424 <__swsetup_r+0x14>
 800c41c:	6a03      	ldr	r3, [r0, #32]
 800c41e:	b90b      	cbnz	r3, 800c424 <__swsetup_r+0x14>
 800c420:	f7fe f9e6 	bl	800a7f0 <__sinit>
 800c424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c428:	0719      	lsls	r1, r3, #28
 800c42a:	d422      	bmi.n	800c472 <__swsetup_r+0x62>
 800c42c:	06da      	lsls	r2, r3, #27
 800c42e:	d407      	bmi.n	800c440 <__swsetup_r+0x30>
 800c430:	2209      	movs	r2, #9
 800c432:	602a      	str	r2, [r5, #0]
 800c434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c438:	f04f 30ff 	mov.w	r0, #4294967295
 800c43c:	81a3      	strh	r3, [r4, #12]
 800c43e:	e033      	b.n	800c4a8 <__swsetup_r+0x98>
 800c440:	0758      	lsls	r0, r3, #29
 800c442:	d512      	bpl.n	800c46a <__swsetup_r+0x5a>
 800c444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c446:	b141      	cbz	r1, 800c45a <__swsetup_r+0x4a>
 800c448:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c44c:	4299      	cmp	r1, r3
 800c44e:	d002      	beq.n	800c456 <__swsetup_r+0x46>
 800c450:	4628      	mov	r0, r5
 800c452:	f7ff f939 	bl	800b6c8 <_free_r>
 800c456:	2300      	movs	r3, #0
 800c458:	6363      	str	r3, [r4, #52]	@ 0x34
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c460:	81a3      	strh	r3, [r4, #12]
 800c462:	2300      	movs	r3, #0
 800c464:	6063      	str	r3, [r4, #4]
 800c466:	6923      	ldr	r3, [r4, #16]
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	89a3      	ldrh	r3, [r4, #12]
 800c46c:	f043 0308 	orr.w	r3, r3, #8
 800c470:	81a3      	strh	r3, [r4, #12]
 800c472:	6923      	ldr	r3, [r4, #16]
 800c474:	b94b      	cbnz	r3, 800c48a <__swsetup_r+0x7a>
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c47c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c480:	d003      	beq.n	800c48a <__swsetup_r+0x7a>
 800c482:	4621      	mov	r1, r4
 800c484:	4628      	mov	r0, r5
 800c486:	f000 f8c0 	bl	800c60a <__smakebuf_r>
 800c48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c48e:	f013 0201 	ands.w	r2, r3, #1
 800c492:	d00a      	beq.n	800c4aa <__swsetup_r+0x9a>
 800c494:	2200      	movs	r2, #0
 800c496:	60a2      	str	r2, [r4, #8]
 800c498:	6962      	ldr	r2, [r4, #20]
 800c49a:	4252      	negs	r2, r2
 800c49c:	61a2      	str	r2, [r4, #24]
 800c49e:	6922      	ldr	r2, [r4, #16]
 800c4a0:	b942      	cbnz	r2, 800c4b4 <__swsetup_r+0xa4>
 800c4a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c4a6:	d1c5      	bne.n	800c434 <__swsetup_r+0x24>
 800c4a8:	bd38      	pop	{r3, r4, r5, pc}
 800c4aa:	0799      	lsls	r1, r3, #30
 800c4ac:	bf58      	it	pl
 800c4ae:	6962      	ldrpl	r2, [r4, #20]
 800c4b0:	60a2      	str	r2, [r4, #8]
 800c4b2:	e7f4      	b.n	800c49e <__swsetup_r+0x8e>
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	e7f7      	b.n	800c4a8 <__swsetup_r+0x98>
 800c4b8:	20000194 	.word	0x20000194

0800c4bc <_sbrk_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	2300      	movs	r3, #0
 800c4c0:	4d05      	ldr	r5, [pc, #20]	@ (800c4d8 <_sbrk_r+0x1c>)
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	4608      	mov	r0, r1
 800c4c6:	602b      	str	r3, [r5, #0]
 800c4c8:	f7f5 fa30 	bl	800192c <_sbrk>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_sbrk_r+0x1a>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_sbrk_r+0x1a>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	200016e0 	.word	0x200016e0

0800c4dc <memcpy>:
 800c4dc:	440a      	add	r2, r1
 800c4de:	4291      	cmp	r1, r2
 800c4e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4e4:	d100      	bne.n	800c4e8 <memcpy+0xc>
 800c4e6:	4770      	bx	lr
 800c4e8:	b510      	push	{r4, lr}
 800c4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4ee:	4291      	cmp	r1, r2
 800c4f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4f4:	d1f9      	bne.n	800c4ea <memcpy+0xe>
 800c4f6:	bd10      	pop	{r4, pc}

0800c4f8 <__assert_func>:
 800c4f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4fa:	4614      	mov	r4, r2
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	4b09      	ldr	r3, [pc, #36]	@ (800c524 <__assert_func+0x2c>)
 800c500:	4605      	mov	r5, r0
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68d8      	ldr	r0, [r3, #12]
 800c506:	b954      	cbnz	r4, 800c51e <__assert_func+0x26>
 800c508:	4b07      	ldr	r3, [pc, #28]	@ (800c528 <__assert_func+0x30>)
 800c50a:	461c      	mov	r4, r3
 800c50c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c510:	9100      	str	r1, [sp, #0]
 800c512:	462b      	mov	r3, r5
 800c514:	4905      	ldr	r1, [pc, #20]	@ (800c52c <__assert_func+0x34>)
 800c516:	f000 f841 	bl	800c59c <fiprintf>
 800c51a:	f000 f8d5 	bl	800c6c8 <abort>
 800c51e:	4b04      	ldr	r3, [pc, #16]	@ (800c530 <__assert_func+0x38>)
 800c520:	e7f4      	b.n	800c50c <__assert_func+0x14>
 800c522:	bf00      	nop
 800c524:	20000194 	.word	0x20000194
 800c528:	0800caee 	.word	0x0800caee
 800c52c:	0800cac0 	.word	0x0800cac0
 800c530:	0800cab3 	.word	0x0800cab3

0800c534 <_calloc_r>:
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	fba1 5402 	umull	r5, r4, r1, r2
 800c53a:	b93c      	cbnz	r4, 800c54c <_calloc_r+0x18>
 800c53c:	4629      	mov	r1, r5
 800c53e:	f7ff f935 	bl	800b7ac <_malloc_r>
 800c542:	4606      	mov	r6, r0
 800c544:	b928      	cbnz	r0, 800c552 <_calloc_r+0x1e>
 800c546:	2600      	movs	r6, #0
 800c548:	4630      	mov	r0, r6
 800c54a:	bd70      	pop	{r4, r5, r6, pc}
 800c54c:	220c      	movs	r2, #12
 800c54e:	6002      	str	r2, [r0, #0]
 800c550:	e7f9      	b.n	800c546 <_calloc_r+0x12>
 800c552:	462a      	mov	r2, r5
 800c554:	4621      	mov	r1, r4
 800c556:	f7fe f9d6 	bl	800a906 <memset>
 800c55a:	e7f5      	b.n	800c548 <_calloc_r+0x14>

0800c55c <__ascii_mbtowc>:
 800c55c:	b082      	sub	sp, #8
 800c55e:	b901      	cbnz	r1, 800c562 <__ascii_mbtowc+0x6>
 800c560:	a901      	add	r1, sp, #4
 800c562:	b142      	cbz	r2, 800c576 <__ascii_mbtowc+0x1a>
 800c564:	b14b      	cbz	r3, 800c57a <__ascii_mbtowc+0x1e>
 800c566:	7813      	ldrb	r3, [r2, #0]
 800c568:	600b      	str	r3, [r1, #0]
 800c56a:	7812      	ldrb	r2, [r2, #0]
 800c56c:	1e10      	subs	r0, r2, #0
 800c56e:	bf18      	it	ne
 800c570:	2001      	movne	r0, #1
 800c572:	b002      	add	sp, #8
 800c574:	4770      	bx	lr
 800c576:	4610      	mov	r0, r2
 800c578:	e7fb      	b.n	800c572 <__ascii_mbtowc+0x16>
 800c57a:	f06f 0001 	mvn.w	r0, #1
 800c57e:	e7f8      	b.n	800c572 <__ascii_mbtowc+0x16>

0800c580 <__ascii_wctomb>:
 800c580:	4603      	mov	r3, r0
 800c582:	4608      	mov	r0, r1
 800c584:	b141      	cbz	r1, 800c598 <__ascii_wctomb+0x18>
 800c586:	2aff      	cmp	r2, #255	@ 0xff
 800c588:	d904      	bls.n	800c594 <__ascii_wctomb+0x14>
 800c58a:	228a      	movs	r2, #138	@ 0x8a
 800c58c:	f04f 30ff 	mov.w	r0, #4294967295
 800c590:	601a      	str	r2, [r3, #0]
 800c592:	4770      	bx	lr
 800c594:	2001      	movs	r0, #1
 800c596:	700a      	strb	r2, [r1, #0]
 800c598:	4770      	bx	lr
	...

0800c59c <fiprintf>:
 800c59c:	b40e      	push	{r1, r2, r3}
 800c59e:	b503      	push	{r0, r1, lr}
 800c5a0:	4601      	mov	r1, r0
 800c5a2:	ab03      	add	r3, sp, #12
 800c5a4:	4805      	ldr	r0, [pc, #20]	@ (800c5bc <fiprintf+0x20>)
 800c5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5aa:	6800      	ldr	r0, [r0, #0]
 800c5ac:	9301      	str	r3, [sp, #4]
 800c5ae:	f7ff fd31 	bl	800c014 <_vfiprintf_r>
 800c5b2:	b002      	add	sp, #8
 800c5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5b8:	b003      	add	sp, #12
 800c5ba:	4770      	bx	lr
 800c5bc:	20000194 	.word	0x20000194

0800c5c0 <__swhatbuf_r>:
 800c5c0:	b570      	push	{r4, r5, r6, lr}
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c8:	4615      	mov	r5, r2
 800c5ca:	2900      	cmp	r1, #0
 800c5cc:	461e      	mov	r6, r3
 800c5ce:	b096      	sub	sp, #88	@ 0x58
 800c5d0:	da0c      	bge.n	800c5ec <__swhatbuf_r+0x2c>
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5da:	bf14      	ite	ne
 800c5dc:	2340      	movne	r3, #64	@ 0x40
 800c5de:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	6031      	str	r1, [r6, #0]
 800c5e6:	602b      	str	r3, [r5, #0]
 800c5e8:	b016      	add	sp, #88	@ 0x58
 800c5ea:	bd70      	pop	{r4, r5, r6, pc}
 800c5ec:	466a      	mov	r2, sp
 800c5ee:	f000 f849 	bl	800c684 <_fstat_r>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	dbed      	blt.n	800c5d2 <__swhatbuf_r+0x12>
 800c5f6:	9901      	ldr	r1, [sp, #4]
 800c5f8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c5fc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c600:	4259      	negs	r1, r3
 800c602:	4159      	adcs	r1, r3
 800c604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c608:	e7eb      	b.n	800c5e2 <__swhatbuf_r+0x22>

0800c60a <__smakebuf_r>:
 800c60a:	898b      	ldrh	r3, [r1, #12]
 800c60c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c60e:	079d      	lsls	r5, r3, #30
 800c610:	4606      	mov	r6, r0
 800c612:	460c      	mov	r4, r1
 800c614:	d507      	bpl.n	800c626 <__smakebuf_r+0x1c>
 800c616:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c61a:	6023      	str	r3, [r4, #0]
 800c61c:	6123      	str	r3, [r4, #16]
 800c61e:	2301      	movs	r3, #1
 800c620:	6163      	str	r3, [r4, #20]
 800c622:	b003      	add	sp, #12
 800c624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c626:	466a      	mov	r2, sp
 800c628:	ab01      	add	r3, sp, #4
 800c62a:	f7ff ffc9 	bl	800c5c0 <__swhatbuf_r>
 800c62e:	9f00      	ldr	r7, [sp, #0]
 800c630:	4605      	mov	r5, r0
 800c632:	4639      	mov	r1, r7
 800c634:	4630      	mov	r0, r6
 800c636:	f7ff f8b9 	bl	800b7ac <_malloc_r>
 800c63a:	b948      	cbnz	r0, 800c650 <__smakebuf_r+0x46>
 800c63c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c640:	059a      	lsls	r2, r3, #22
 800c642:	d4ee      	bmi.n	800c622 <__smakebuf_r+0x18>
 800c644:	f023 0303 	bic.w	r3, r3, #3
 800c648:	f043 0302 	orr.w	r3, r3, #2
 800c64c:	81a3      	strh	r3, [r4, #12]
 800c64e:	e7e2      	b.n	800c616 <__smakebuf_r+0xc>
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c65a:	81a3      	strh	r3, [r4, #12]
 800c65c:	9b01      	ldr	r3, [sp, #4]
 800c65e:	6020      	str	r0, [r4, #0]
 800c660:	b15b      	cbz	r3, 800c67a <__smakebuf_r+0x70>
 800c662:	4630      	mov	r0, r6
 800c664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c668:	f000 f81e 	bl	800c6a8 <_isatty_r>
 800c66c:	b128      	cbz	r0, 800c67a <__smakebuf_r+0x70>
 800c66e:	89a3      	ldrh	r3, [r4, #12]
 800c670:	f023 0303 	bic.w	r3, r3, #3
 800c674:	f043 0301 	orr.w	r3, r3, #1
 800c678:	81a3      	strh	r3, [r4, #12]
 800c67a:	89a3      	ldrh	r3, [r4, #12]
 800c67c:	431d      	orrs	r5, r3
 800c67e:	81a5      	strh	r5, [r4, #12]
 800c680:	e7cf      	b.n	800c622 <__smakebuf_r+0x18>
	...

0800c684 <_fstat_r>:
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	2300      	movs	r3, #0
 800c688:	4d06      	ldr	r5, [pc, #24]	@ (800c6a4 <_fstat_r+0x20>)
 800c68a:	4604      	mov	r4, r0
 800c68c:	4608      	mov	r0, r1
 800c68e:	4611      	mov	r1, r2
 800c690:	602b      	str	r3, [r5, #0]
 800c692:	f7f5 f925 	bl	80018e0 <_fstat>
 800c696:	1c43      	adds	r3, r0, #1
 800c698:	d102      	bne.n	800c6a0 <_fstat_r+0x1c>
 800c69a:	682b      	ldr	r3, [r5, #0]
 800c69c:	b103      	cbz	r3, 800c6a0 <_fstat_r+0x1c>
 800c69e:	6023      	str	r3, [r4, #0]
 800c6a0:	bd38      	pop	{r3, r4, r5, pc}
 800c6a2:	bf00      	nop
 800c6a4:	200016e0 	.word	0x200016e0

0800c6a8 <_isatty_r>:
 800c6a8:	b538      	push	{r3, r4, r5, lr}
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	4d05      	ldr	r5, [pc, #20]	@ (800c6c4 <_isatty_r+0x1c>)
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	602b      	str	r3, [r5, #0]
 800c6b4:	f7f5 f923 	bl	80018fe <_isatty>
 800c6b8:	1c43      	adds	r3, r0, #1
 800c6ba:	d102      	bne.n	800c6c2 <_isatty_r+0x1a>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	b103      	cbz	r3, 800c6c2 <_isatty_r+0x1a>
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	200016e0 	.word	0x200016e0

0800c6c8 <abort>:
 800c6c8:	2006      	movs	r0, #6
 800c6ca:	b508      	push	{r3, lr}
 800c6cc:	f000 f82c 	bl	800c728 <raise>
 800c6d0:	2001      	movs	r0, #1
 800c6d2:	f7f5 f8b6 	bl	8001842 <_exit>

0800c6d6 <_raise_r>:
 800c6d6:	291f      	cmp	r1, #31
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	4605      	mov	r5, r0
 800c6dc:	460c      	mov	r4, r1
 800c6de:	d904      	bls.n	800c6ea <_raise_r+0x14>
 800c6e0:	2316      	movs	r3, #22
 800c6e2:	6003      	str	r3, [r0, #0]
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c6ec:	b112      	cbz	r2, 800c6f4 <_raise_r+0x1e>
 800c6ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6f2:	b94b      	cbnz	r3, 800c708 <_raise_r+0x32>
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	f000 f831 	bl	800c75c <_getpid_r>
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	4601      	mov	r1, r0
 800c6fe:	4628      	mov	r0, r5
 800c700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c704:	f000 b818 	b.w	800c738 <_kill_r>
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d00a      	beq.n	800c722 <_raise_r+0x4c>
 800c70c:	1c59      	adds	r1, r3, #1
 800c70e:	d103      	bne.n	800c718 <_raise_r+0x42>
 800c710:	2316      	movs	r3, #22
 800c712:	6003      	str	r3, [r0, #0]
 800c714:	2001      	movs	r0, #1
 800c716:	e7e7      	b.n	800c6e8 <_raise_r+0x12>
 800c718:	2100      	movs	r1, #0
 800c71a:	4620      	mov	r0, r4
 800c71c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c720:	4798      	blx	r3
 800c722:	2000      	movs	r0, #0
 800c724:	e7e0      	b.n	800c6e8 <_raise_r+0x12>
	...

0800c728 <raise>:
 800c728:	4b02      	ldr	r3, [pc, #8]	@ (800c734 <raise+0xc>)
 800c72a:	4601      	mov	r1, r0
 800c72c:	6818      	ldr	r0, [r3, #0]
 800c72e:	f7ff bfd2 	b.w	800c6d6 <_raise_r>
 800c732:	bf00      	nop
 800c734:	20000194 	.word	0x20000194

0800c738 <_kill_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	2300      	movs	r3, #0
 800c73c:	4d06      	ldr	r5, [pc, #24]	@ (800c758 <_kill_r+0x20>)
 800c73e:	4604      	mov	r4, r0
 800c740:	4608      	mov	r0, r1
 800c742:	4611      	mov	r1, r2
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	f7f5 f86c 	bl	8001822 <_kill>
 800c74a:	1c43      	adds	r3, r0, #1
 800c74c:	d102      	bne.n	800c754 <_kill_r+0x1c>
 800c74e:	682b      	ldr	r3, [r5, #0]
 800c750:	b103      	cbz	r3, 800c754 <_kill_r+0x1c>
 800c752:	6023      	str	r3, [r4, #0]
 800c754:	bd38      	pop	{r3, r4, r5, pc}
 800c756:	bf00      	nop
 800c758:	200016e0 	.word	0x200016e0

0800c75c <_getpid_r>:
 800c75c:	f7f5 b85a 	b.w	8001814 <_getpid>

0800c760 <floorf>:
 800c760:	b570      	push	{r4, r5, r6, lr}
 800c762:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800c766:	3d7f      	subs	r5, #127	@ 0x7f
 800c768:	2d16      	cmp	r5, #22
 800c76a:	4601      	mov	r1, r0
 800c76c:	4604      	mov	r4, r0
 800c76e:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800c772:	dc26      	bgt.n	800c7c2 <floorf+0x62>
 800c774:	2d00      	cmp	r5, #0
 800c776:	da0f      	bge.n	800c798 <floorf+0x38>
 800c778:	4917      	ldr	r1, [pc, #92]	@ (800c7d8 <floorf+0x78>)
 800c77a:	f7f4 f98b 	bl	8000a94 <__addsf3>
 800c77e:	2100      	movs	r1, #0
 800c780:	f7f4 fc4c 	bl	800101c <__aeabi_fcmpgt>
 800c784:	b130      	cbz	r0, 800c794 <floorf+0x34>
 800c786:	2c00      	cmp	r4, #0
 800c788:	da23      	bge.n	800c7d2 <floorf+0x72>
 800c78a:	2e00      	cmp	r6, #0
 800c78c:	4c13      	ldr	r4, [pc, #76]	@ (800c7dc <floorf+0x7c>)
 800c78e:	bf08      	it	eq
 800c790:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c794:	4621      	mov	r1, r4
 800c796:	e01a      	b.n	800c7ce <floorf+0x6e>
 800c798:	4e11      	ldr	r6, [pc, #68]	@ (800c7e0 <floorf+0x80>)
 800c79a:	412e      	asrs	r6, r5
 800c79c:	4230      	tst	r0, r6
 800c79e:	d016      	beq.n	800c7ce <floorf+0x6e>
 800c7a0:	490d      	ldr	r1, [pc, #52]	@ (800c7d8 <floorf+0x78>)
 800c7a2:	f7f4 f977 	bl	8000a94 <__addsf3>
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	f7f4 fc38 	bl	800101c <__aeabi_fcmpgt>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d0f1      	beq.n	800c794 <floorf+0x34>
 800c7b0:	2c00      	cmp	r4, #0
 800c7b2:	bfbe      	ittt	lt
 800c7b4:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800c7b8:	412b      	asrlt	r3, r5
 800c7ba:	18e4      	addlt	r4, r4, r3
 800c7bc:	ea24 0406 	bic.w	r4, r4, r6
 800c7c0:	e7e8      	b.n	800c794 <floorf+0x34>
 800c7c2:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800c7c6:	d302      	bcc.n	800c7ce <floorf+0x6e>
 800c7c8:	f7f4 f964 	bl	8000a94 <__addsf3>
 800c7cc:	4601      	mov	r1, r0
 800c7ce:	4608      	mov	r0, r1
 800c7d0:	bd70      	pop	{r4, r5, r6, pc}
 800c7d2:	2400      	movs	r4, #0
 800c7d4:	e7de      	b.n	800c794 <floorf+0x34>
 800c7d6:	bf00      	nop
 800c7d8:	7149f2ca 	.word	0x7149f2ca
 800c7dc:	bf800000 	.word	0xbf800000
 800c7e0:	007fffff 	.word	0x007fffff

0800c7e4 <_init>:
 800c7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e6:	bf00      	nop
 800c7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ea:	bc08      	pop	{r3}
 800c7ec:	469e      	mov	lr, r3
 800c7ee:	4770      	bx	lr

0800c7f0 <_fini>:
 800c7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f2:	bf00      	nop
 800c7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7f6:	bc08      	pop	{r3}
 800c7f8:	469e      	mov	lr, r3
 800c7fa:	4770      	bx	lr
